--Version 1.0.9.5

DECLARE @IsERSViewer BIT = 0		--IF ERS Viewer, value for @IsERSViewer should be 1, else 0

--Enter Operating Hospitals (seperated by commas if more than 1 hospital, e.g: 'Hosp 1,Hosp 2,Hosp 3')
DECLARE @OperatingHospitals VARCHAR(2000) = ''		-- Leave blank for ERS_Viewer as OHs will be copied from UGI OH table

DECLARE @CountryLabel TINYINT = 0	--[0 - Everywhere else including UK] ;			[1 - Scotland  (900 To 999)] ;	[2 - Northern Ireland  (800 To 899, 93 : Derry, 119 : Belfast)] ; 
									--[3 - Republic of Ireland (3000 To 3199)] ;	[4 - Kuwait (1000 To 1999)] ;	[5 - Australia (2000 To 2999)] ;	[6 - Caribbean (3200 To 3299)]
DECLARE @IncludeUGI BIT = 0			--[0 - Exclude UGI] ; [1 - Include UGI]
DECLARE @OverwriteUsers BIT = 1		--[0 - NO] ; [1 - YES]
DECLARE @SiteIdentification TINYINT = 0		--[0 - Letters] ; [1 - Numerics]  -- Identification of sites on the diagram

DECLARE @IncludeAudit BIT = 0		--[0 - NO] ; [1 - YES]
DECLARE @IncludeReports BIT = 0		--[0 - NO] ; [1 - YES]
DECLARE @IncludeScheduling BIT = 0	--[0 - NO] ; [1 - YES]

DECLARE @PhotosURL VARCHAR(500) = ''
DECLARE @PhotosUNC VARCHAR(500) = ''
DECLARE @WorklistMaxDays TINYINT = 2	

--Exclude UGI if one of the main table not found regardless above value (@IncludeUGI)
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND  TABLE_NAME = 'Episode')) SET @IncludeUGI = 0

CREATE TABLE #variables (IsERSViewer BIT, CountryLabel TINYINT, IncludeUGI BIT, OverwriteUsers BIT, SiteIdentification TINYINT, OperatingHospitals VARCHAR(2000), IncludeReports BIT, IncludeScheduling BIT, IncludeAudit BIT, PhotosURL VARCHAR(500), PhotosUNC VARCHAR(500), MaxWorklistDays TINYINT)
INSERT INTO #variables (IsERSViewer, CountryLabel, IncludeUGI, OverwriteUsers, SiteIdentification, OperatingHospitals, IncludeReports, IncludeScheduling, IncludeAudit, PhotosURL, PhotosUNC, MaxWorklistDays) 
	VALUES (@IsERSViewer, @CountryLabel, @IncludeUGI, @OverwriteUsers, @SiteIdentification, @OperatingHospitals, @IncludeReports, @IncludeScheduling, @IncludeAudit, @PhotosURL, @PhotosUNC, @WorklistMaxDays)
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------0001 tmp_Tables_Maintenance.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Patient'))
BEGIN
	IF NOT EXISTS(SELECT * FROM sys.columns WHERE Name = N'Title' AND Object_ID = Object_ID(N'Patient'))
		ALTER TABLE Patient ADD Title NVARCHAR(50) NULL;

	IF NOT EXISTS(SELECT * FROM sys.columns WHERE Name = N'Locked' AND Object_ID = Object_ID(N'Patient'))
		ALTER TABLE Patient ADD Locked TINYINT NULL;

	IF NOT EXISTS(SELECT * FROM sys.columns WHERE Name = N'LockedBy' AND Object_ID = Object_ID(N'Patient'))
		ALTER TABLE Patient ADD LockedBy INTEGER NULL;

	IF NOT EXISTS(SELECT * FROM sys.columns WHERE Name = N'LockedOn' AND Object_ID = Object_ID(N'Patient'))
		ALTER TABLE Patient ADD LockedOn DATETIME NULL;

	IF NOT EXISTS(SELECT * FROM sys.columns WHERE Name = N'NCSS' AND Object_ID = Object_ID(N'Patient'))
		ALTER TABLE Patient ADD NCSS SMALLINT NULL;

	IF NOT EXISTS(SELECT * FROM sys.columns WHERE Name = N'GPId' AND Object_ID = Object_ID(N'Patient'))
		ALTER TABLE Patient ADD GPId INTEGER NULL;

	IF NOT EXISTS(SELECT * FROM sys.columns WHERE Name = N'Patient_Id' AND Object_ID = Object_ID(N'Patient'))
		ALTER TABLE Patient ADD Patient_ID INTEGER NULL;
END

GO


-- =============================================
-- Description:	This will be used to Quickly Check existance of a DB entity, ie; Table, SP, Function, View, Trigger and if found- DROP the Object
-- =============================================
IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'DropIfExist') AND type IN (N'P', N'PC')) 
	DROP PROCEDURE dbo.DropIfExist;
GO
CREATE PROCEDURE dbo.DropIfExist(
	@ObjectName varchar(100), 
	@ObjectTypePrefix varchar(5)	--## Possible value: T= Table (dbo); Ta= Table (ERSAudit); F = Function; S= StoredProc; V = View; TR = Trigger
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @DynamiDropStatement AS NVARCHAR(200);
	
	IF @ObjectTypePrefix='Ta'
		BEGIN
			IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'ERSAudit' AND TABLE_NAME = @ObjectName))
			  SET @DynamiDropStatement = 'DROP TABLE ERSAudit.' + QUOTENAME(@ObjectName);
		  
		END
	ELSE IF @ObjectTypePrefix='T'
		BEGIN
			IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = @ObjectName))
			  SET @DynamiDropStatement = 'DROP TABLE ' + QUOTENAME(@ObjectName);
		  
		END
	ELSE IF @ObjectTypePrefix = 'F'
		BEGIN
			IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(@ObjectName) AND type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))
			  SET @DynamiDropStatement = 'DROP FUNCTION ' + QUOTENAME(@ObjectName);
		END
	ELSE IF @ObjectTypePrefix='S'
		BEGIN
			IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(@ObjectName) AND type IN (N'P', N'PC')) 
				SET @DynamiDropStatement = 'DROP PROCEDURE ' + QUOTENAME(@ObjectName);
		END
	ELSE IF @ObjectTypePrefix='V'
		BEGIN
			IF EXISTS(SELECT 1 FROM sys.views WHERE name=@ObjectName and TYPE='v')
				SET @DynamiDropStatement = 'DROP VIEW ' + QUOTENAME(@ObjectName);
		END
	ELSE IF @ObjectTypePrefix='TR'
		BEGIN
			IF OBJECT_ID (@ObjectName, 'TR') IS NOT NULL
				SET @DynamiDropStatement = 'DROP TRIGGER ' + QUOTENAME(@ObjectName);
		END		


	--## The Dynamic SQL is ready now- Safe to Execute and Drop the Desired Object	
	EXEC(@DynamiDropStatement);

END
GO


-- =============================================
-- Description:	This will be used to Quickly Check existance of a CONSTRAINT and if found- DROP the Object
-- =============================================
EXEC DropIfExist 'DropConstraint', 'S';
GO
CREATE  PROCEDURE dbo.DropConstraint(
	@ParentObjectId NVARCHAR(100), 
	@Constraint VARCHAR(100)	
)
AS
BEGIN
	SET NOCOUNT ON;

	IF EXISTS (SELECT 1 FROM SYS.FOREIGN_KEYS WHERE OBJECT_ID = OBJECT_ID(@Constraint) AND parent_object_id = OBJECT_ID(@ParentObjectId))
		BEGIN
			DECLARE @DynamiDropStatement AS NVARCHAR(200);
			SET @DynamiDropStatement = 'ALTER TABLE ' + (@ParentObjectId) + ' DROP CONSTRAINT ['+ @Constraint + '];'; 
			EXEC(@DynamiDropStatement);
		END
END
GO

-- =============================================
-- Description:	DROP Constraints & Tables
-- =============================================

DECLARE @sql NVARCHAR(MAX) = N'';

--** Drop all constraints in tables prefixed by 'ERS_'
SELECT @sql += N' ALTER TABLE ' + QUOTENAME(OBJECT_SCHEMA_NAME(parent_object_id))
    + '.' + QUOTENAME(OBJECT_NAME(parent_object_id)) + 
    ' DROP CONSTRAINT ' + QUOTENAME(name) + ';'
FROM sys.foreign_keys
WHERE LEFT(object_name(parent_object_id),4) = 'ERS_' 

EXEC sp_executesql @sql;

--** Drop all tables prefixed by 'ERS_' for Schema dbo
 SET @sql = '';

SELECT @sql += N' EXEC dbo.DropIfExist ' + TABLE_NAME + ',' + 
			CASE TABLE_TYPE WHEN 'VIEW' THEN 'V' ELSE 'T' END + '; '
FROM INFORMATION_SCHEMA.TABLES 
WHERE LEFT(TABLE_NAME,4) = 'ERS_' AND TABLE_TYPE IN ('BASE TABLE', 'VIEW')
	AND TABLE_NAME <> (CASE (SELECT OverwriteUsers FROM #variables) WHEN 1 THEN '' ELSE 'ERS_Users' END) --Check if Overwrite ERS_Users table
	AND TABLE_NAME <> 'ERS_StartupSettings' --Keep values in StartupSettings, will get deleted further down
	AND TABLE_SCHEMA = 'dbo'
EXEC sp_executesql @sql;

----------------------------------- 
EXEC DropIfExist 'fnGenderFromCode', 'F';
GO 

CREATE FUNCTION dbo.fnGenderFromCode
(
	@Code char(1)
)
RETURNS varchar(50)
AS
BEGIN
	DECLARE @Gender varchar(50)

	SELECT @Gender = egt.Title
	FROM dbo.ERS_GenderTypes egt 
	WHERE egt.Code=@Code
	
	RETURN @Gender
END	
GO

----------------------------------- 

EXEC DropIfExist 'fnGetSiteName', 'F';
GO 

CREATE FUNCTION [dbo].[fnGetSiteName] 
(
	@SiteId int
)
	RETURNS varchar(4000)
	AS
	BEGIN
	DECLARE @RetVal varchar(max)

	SELECT @RetVal = er.Region 
	FROM dbo.ERS_Sites es
		INNER JOIN dbo.ERS_Regions er 
			ON es.RegionId = er.RegionId
	WHERE es.SiteId = @SiteId

	RETURN @RetVal
END
GO
----------------------------------- 

EXEC DropIfExist 'fnFullAddress', 'F';
GO 

CREATE FUNCTION [dbo].[fnFullAddress] 
(
	@Address1 varchar(500),
	@Address2 varchar(500),
	@Address3 varchar(500),
	@Address4 varchar(500), 
	@Postcode varchar(500)
)
	RETURNS varchar(4000)
	AS
	BEGIN
	DECLARE @RetVal varchar(max)

	SET @RetVal = CASE WHEN ISNULL(@Address1,'') <> '' THEN @Address1 + ', ' ELSE '' END + 
				  CASE WHEN ISNULL(@Address2,'') <> '' THEN @Address2 + ', ' ELSE '' END + 
				  CASE WHEN ISNULL(@Address3,'') <> '' THEN @Address3 + ', ' ELSE '' END + 
				  CASE WHEN ISNULL(@Address4,'') <> '' THEN @Address4 + ', ' ELSE '' END + 
				  CASE WHEN ISNULL(@Postcode,'') <> '' THEN @Postcode + '' ELSE '' END

	IF (SELECT Substring(@RetVal, LEN(@RetVal),1)) = ','
	BEGIN
		SET @RetVal = Substring(@RetVal, 0, LEN(@RetVal))
	END
	RETURN @RetVal
END
GO
----------------------------------- 

EXEC DropIfExist 'fnSplitString', 'F';
GO 

CREATE FUNCTION fnSplitString (@string NVARCHAR(MAX), @delimiter NVARCHAR(5))
RETURNS @RtnValue table (Id INT IDENTITY(1,1), Item NVARCHAR(MAX)) 
AS
BEGIN 
	DECLARE @Cnt INT
	SET @Cnt = 1

	WHILE (CHARINDEX(@delimiter,@string)>0)
	BEGIN
		INSERT INTO @RtnValue(Item)
		SELECT 
			Item = LTRIM(RTRIM(SUBSTRING(@string,1,CHARINDEX(@delimiter,@string)-1)))

		SET @string = SUBSTRING(@string,CHARINDEX(@delimiter,@string)+1,LEN(@string))
		SET @Cnt = @Cnt + 1
	End
	
	INSERT INTO @RtnValue (item)
	SELECT item = LTRIM(RTRIM(@string))

	DELETE @RtnValue WHERE LTRIM(RTRIM(item)) = ''

	RETURN
END

GO

----------------------------------- 
EXEC DropIfExist 'fnFormatCompleteName', 'F';
GO 

CREATE function [dbo].[fnFormatCompleteName](
	@Title nvarchar(50),
	@Initial nvarchar(255),
	@Surname nvarchar(255)
)
returns nvarchar(255)
with schemabinding
as
begin
	declare @Name nvarchar(max)
	set @name = N''

	if Len( RTrim(@Title) ) > 0
	begin
		set @name = @name +  RTrim(@title) + N' '
	end

	if Len( RTrim(@Initial) ) > 0
	begin
		set @name = @name + RTrim(@Initial) + N' '
	end

	if Len( RTrim(@Surname) ) > 0
	begin
		set @name = @name + RTrim(@Surname) 
	end
	return @name

end

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------001 Create Table ERS_ErrorLog.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_ErrorLog](
	[ErrorLogId] [bigint] IDENTITY(1,1) NOT NULL,
	[ErrorReference] [varchar](50),
	[ErrorTimestamp] [datetime] NOT NULL,
	[ErrorNo] [varchar](50),
	[ErrorMessage] [varchar](1000) NOT NULL,
	[ErrorDescription] [varchar](1000),
	[ErrorStackTrace] [nvarchar](max),
	[ErrorInnerException] [nvarchar](max),
	[ErrorData] [nvarchar](max),
	[ProductId] [smallint] NOT NULL,
	[ProductVersion] [nvarchar](50) NOT NULL,
	[UserId] [nvarchar](50) NOT NULL,
	[StationId] [nvarchar](50),
	[ProcedureId] [int],
	--[PatientComboId] [nvarchar](12),
	--[EpisodeNo] [bigint],
	[PatientId] [int], 
	[CaseNoteNo] [nvarchar](50),
	[HospitalId] [int] NOT NULL,
	[OperatingHospitalId] [int] NOT NULL,
	CONSTRAINT [ERS_PK_ErrorLog] PRIMARY KEY CLUSTERED ([ErrorLogId] ASC) ON [PRIMARY]
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------002a Add fields in [Drug list] table-------------------------------------
--------------------------------------------------------------------------------------------------------------------

--Some database does not have the following fields in table [Drug list]
IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Drug list'))
BEGIN
	IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE Name = N'Used in ENTER ante' AND Object_ID = Object_ID(N'Drug list')) 
	BEGIN
		ALTER TABLE [Drug list] ADD [Used in ENTER ante] smallint NULL
	END
	
	IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE Name = N'Used in ENTER retro' AND Object_ID = Object_ID(N'Drug list')) 
	BEGIN
		ALTER TABLE [Drug list] ADD [Used in ENTER retro] smallint NULL
	END
END
--------------------------------------------------------------------------------------------------------------------
-------------------------------------101 Create Table ERS_Lists.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_ListsMain](
	[ListMainId] [int] IDENTITY(1,1) NOT NULL,
	[ListDescription] [varchar] (200) NOT NULL,
	[AllowAddNewItem] [bit] NOT NULL,
	--[HtmlId] [varchar] (200) NULL,
	[OrderByDesc] [bit] NULL,
	[FirstItemText] [varchar] (100) NULL,	
	CONSTRAINT [PK_ListsMain] PRIMARY KEY ([ListMainId]),
	CONSTRAINT [UK_ListsMain] UNIQUE CLUSTERED ([ListDescription]),
) ON [PRIMARY]

GO

INSERT INTO ERS_ListsMain ([ListDescription], [AllowAddNewItem], [OrderByDesc], [FirstItemText]) 
		VALUES ('Abno marking',										1, 0, '')
					,('Agent Upper GI',								1, 0, '')
					,('Bowel_Preparation',							1, 0, '')
					,('Bowel_Preperation_Quality',					1, 0, '')
					,('BronchoStageT',								0, 0, '')
					,('BronchoStageN',								0, 0, '')
					,('BronchoStageM',								0, 0, '')
					,('BronchoStageType',							0, 0, '')
					,('Colon_Extent_Difficulty_Encountered',		1, 0, '')
					,('Colon_Extent_Insertion_Comfirmed_By',		1, 0, '')
					,('Colon_Extent_Insertion_Limited_By',			1, 0, '')
					,('Diagnoses Colon Extent',						0, 0, '')
					,('Diagnoses Colon Grading',					0, 0, '')
					,('Endoscopist1 Role',							0, 0, '')
					,('Endoscopist2 Role',							0, 0, '')
					,(N'ERCP contrast media used',					1, 0, '')
					,(N'ERCP extent of visualisation limited by other',				1, 0, '')
					,(N'ERCP other access point',									1, 0, '')
					,(N'ERCP via major to bile partially successful reason',		1, 0, '')
					,(N'ERCP via major to bile successful using',					1, 0, '')
					,(N'ERCP via major to bile unsuccessful due to',				1, 0, '')
					,(N'ERCP via major to pancreatic partially successful reason',	1, 0, '')
					,(N'ERCP via major to pancreatic successful using',				1, 0, '')
					,(N'ERCP via major to pancreatic unsuccessful due to',			1, 0, '')
					,(N'ERCP via minor partially successful reason',				1, 0, '')
					,(N'ERCP via minor successful using to',		1, 0, '')
					,(N'ERCP via minor unsuccessful due to',		1, 0, '')
					,(N'ERCP Balloon dilator',						1, 0, '')
					,(N'ERCP cyst punct device',					1, 0, '')
					,(N'Follow up disease/proc ERCP',				1, 0, '')
					,(N'Follow up disease Period',					0, 0, '')
					,('Extent of Intubation',						0, 0, '')
					,('Extent of Intubation OGD',					0, 0, '')
					,('Follow up disease/proc Colon',				1, 0, '')
					,('Follow up disease/proc Upper GI',			1, 0, '')
					,('Forcep Serial Numbers',						1, 0, '')
					,('Further ERCP procedure',						1, 0, '')
					,('Further Broncho procedure',					1, 0, '')
					,('Further procedure period',					0, 0, '')
					,('Further procedure',							1, 0, '')
					,('Gastrostomy PEG type',						1, 0, '')
					,('Gastrostomy PEG units',						0, 0, '')
					,('Indications Colon Altered Bowel Habit',		1, 0, '')
					,('Indications Colon Rectal Bleeding',			1, 0, '')
					,('Indications_Potential_Damaging_Drugs',		0, 0, '')
					,('Instrument ColonSig',						0, 0, '')
					,('Instrument ERCP',							0, 0, '')
					,('Instrument Upper GI',						0, 0, '')
					,('Instrument Antegrade',						0, 0, '')
					,('Instrument Retrograde',						0, 0, '')
					,('Instrument Thoracic',						0, 0, '')
					,('AccessMethod Thoracic',						0, 0, '')
					,('List Type',									0, 0, '')
					,('Medication_Duration',						0, 0, '')
					,('Medication_Frequency',						1, 0, '')
					,('Oesophageal dilatation units',				0, 0, '')
					,('Oesophageal dilator',						1, 0, '')
					,('Patient Status',								0, 0, '')
					,('Patient Type',								0, 0, '')
					,('PatientNotCopiedReason',						1, 0, '')
					,('PEG Outcome',								0, 0, '')
					,('Premedication Delivery Method',				1, 0, '')
					,('Premedication Drug Units',					0, 0, '')
					,('Procedure Category',							0, 0, '')
					,('Return or referred to',						1, 0, '')
					,('Broncho Return or referred to',				1, 0, '')
					,('Review period',								0, 0, '')
					,('Review',										1, 0, '')
					,('Review Broncho',								1, 0, '')
					,('Surgery follow up proc Upper GI',			0, 0, '')
					,('Surgical Procedures',						1, 0, '')
					,('Therapeutic EMR Fluid',						1, 0, '')
					,('Therapeutic Stent Insertion Types',			1, 0, '')
					,('Therapeutic Stent Removal Technique',		1, 0, '')
					,('Therapeutic Stomach Stent Insertion Types',	1, 0, '')
					,('Ward',										0, 0, '')
					,('Therapeutic ERCP sphincterotomes',			1, 0, '')
					,('ERCP papillotomy reason',					1, 0, '')
					,('ERCP stone removal method',					1, 0, '')
					,('Diabetes Mellitus',							0, 0, '')
					,('Sigmoidopexy make',							1, 0, '')
					,('Post Operative Complication Severity',		0, 0, '')
					,('Post Operative Complication Resolution',		0, 0, '')
					,('Mayo Score',									0, 0, '')
					,('Simple Endoscopic Score – Crohn''s Disease',	0, 0, '')



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_Lists](
	[ListId] [int] IDENTITY(1,1) NOT NULL,
	[ListDescription] [varchar] (200) NOT NULL,
	[ListItemNo] [int] NOT NULL,
	[ListItemText] [varchar] (200) NOT NULL,	
	[Suppressed] [bit] NOT NULL CONSTRAINT DF_Lists_Suppressed DEFAULT 0,
	[ReadOnly] [bit] NOT NULL CONSTRAINT DF_Lists_ReadOnly Default 0,
	[ListMainId] [int] NOT NULL,
	[WhoUpdatedId]	INT NULL Default 0,
	[WhoCreatedId]	INT NULL Default 0,
	[WhenCreated]	DATETIME NULL Default GetDate(),
	[WhenUpdated]	DATETIME NULL Default GetDate(),
	CONSTRAINT [PK_ERS_Lists] PRIMARY KEY ([ListId]),
	CONSTRAINT [UK_Lists] UNIQUE ([ListDescription], [ListItemNo]),
	CONSTRAINT [UK_Lists2] UNIQUE ([ListDescription], [ListItemText]),
	CONSTRAINT [FK_Lists_ListsMain] FOREIGN KEY ([ListMainId]) REFERENCES ERS_ListsMain ([ListMainId])
) ON [PRIMARY]

GO

--INSERT INTO ERS_Lists ([ListDescription], [ListItemNo], [ListItemText]) VALUES ('Procedure Type', 1, 'Gastroscopy')
--INSERT INTO ERS_Lists ([ListDescription], [ListItemNo], [ListItemText]) VALUES ('Procedure Type', 2, 'ERCP')
--INSERT INTO ERS_Lists ([ListDescription], [ListItemNo], [ListItemText]) VALUES ('Procedure Type', 3, 'Colonoscopy')
--INSERT INTO ERS_Lists ([ListDescription], [ListItemNo], [ListItemText]) VALUES ('Procedure Type', 4, 'Sigmoidscopy')
--INSERT INTO ERS_Lists ([ListDescription], [ListItemNo], [ListItemText]) VALUES ('Procedure Type', 5, 'Proctoscopy')
--INSERT INTO ERS_Lists ([ListDescription], [ListItemNo], [ListItemText]) VALUES ('Procedure Type', 6, 'EUS (OGD)')
--INSERT INTO ERS_Lists ([ListDescription], [ListItemNo], [ListItemText]) VALUES ('Procedure Type', 7, 'EUS (HPB)')

INSERT INTO ERS_Lists ([ListDescription], [ListItemNo], [ListItemText], [Suppressed], [ReadOnly], [ListMainId]) VALUES 
('Abno marking',0,'(none)', 0, 0, 1)
,('Abno marking',1,'tattoo', 0, 0, 1)
,('Abno marking',2,'dye spray', 0, 0, 1)

,('Agent Upper GI',0,'(none)', 0, 0, 2)
,('Agent Upper GI',1,'alcohol', 0, 0, 2)
,('Agent Upper GI',2,'ethanol', 0, 0, 2)
,('Agent Upper GI',3,'ethanolamine', 0, 0, 2)
,('Agent Upper GI',4,'saline', 0, 0, 2)
,('Agent Upper GI',5,'adrenalin 1/10000', 0, 0, 2)

,('Bowel_Preparation',0,'(none selected)', 0, 0, 3)
,('Bowel_Preparation',1,'phosphate enema', 0, 0, 3)
,('Bowel_Preparation',2,'two sachets of Picolax', 0, 0, 3)

,('Bowel_Preperation_Quality',1,'Poor', 0, 0, 4)
,('Bowel_Preperation_Quality',2,'Fair', 0, 0, 4)
,('Bowel_Preperation_Quality',3,'Good', 0, 0, 4)
,('Bowel_Preperation_Quality',4,'Excellent', 0, 0, 4)

,('BronchoStageT',0,'', 0, 0, 5)
,('BronchoStageT',1,'TX', 0, 0, 5)
,('BronchoStageT',2,'Tis', 0, 0, 5)
,('BronchoStageT',4,'T0', 0, 0, 5)
,('BronchoStageT',5,'T1', 0, 0, 5)
,('BronchoStageT',6,'T2', 0, 0, 5)
,('BronchoStageT',7,'T3', 0, 0, 5)
,('BronchoStageT',8,'T4', 0, 0, 5)

,('BronchoStageN',0,'', 0, 0, 6)
,('BronchoStageN',1,'NX', 0, 0, 6)
,('BronchoStageN',2,'N0', 0, 0, 6)
,('BronchoStageN',3,'N1', 0, 0, 6)
,('BronchoStageN',4,'N2', 0, 0, 6)
,('BronchoStageN',5,'N3', 0, 0, 6)

,('BronchoStageM',0,'', 0, 0, 7)
,('BronchoStageM',1,'MX', 0, 0, 7)
,('BronchoStageM',2,'M0', 0, 0, 7)
,('BronchoStageM',3,'M1', 0, 0, 7)

,('BronchoStageType',0,'', 0, 0, 8)
,('BronchoStageType',1,'MX', 0, 0, 8)
,('BronchoStageType',2,'Ia', 0, 0, 8)
,('BronchoStageType',3,'Ib', 0, 0, 8)
,('BronchoStageType',4,'IIa', 0, 0, 8)
,('BronchoStageType',5,'IIb', 0, 0, 8)
,('BronchoStageType',6,'IIIa', 0, 0, 8)
,('BronchoStageType',7,'IIIb', 0, 0, 8)
,('BronchoStageType',8,'IV', 0, 0, 8)

,('Colon_Extent_Difficulty_Encountered',0,'(none)', 0, 0, 9)
,('Colon_Extent_Difficulty_Encountered',1,'Deep seated caecum', 0, 0, 9)
,('Colon_Extent_Difficulty_Encountered',2,'tortuous colon', 0, 0, 9)

,('Colon_Extent_Insertion_Comfirmed_By',0,'(none)', 0, 0, 10)

,('Colon_Extent_Insertion_Limited_By',0,'(none)', 0, 0, 11)
,('Colon_Extent_Insertion_Limited_By',1,'bowel redundancy', 0, 0, 11)
,('Colon_Extent_Insertion_Limited_By',2,'excess blood', 0, 0, 11)
,('Colon_Extent_Insertion_Limited_By',3,'excess looping', 0, 0, 11)
,('Colon_Extent_Insertion_Limited_By',4,'instrument inadequacy', 0, 0, 11)
,('Colon_Extent_Insertion_Limited_By',5,'pathology encountered', 0, 0, 11)
,('Colon_Extent_Insertion_Limited_By',6,'[NED] benign stricture', 0, 1, 11)
,('Colon_Extent_Insertion_Limited_By',7,'[NED] inadequate bowel preparation', 0, 1, 11)
,('Colon_Extent_Insertion_Limited_By',8,'[NED] malignant stricture', 0, 1, 11)
,('Colon_Extent_Insertion_Limited_By',9,'[NED] patient discomfort', 0, 1, 11)
,('Colon_Extent_Insertion_Limited_By',10,'[NED] severe colitis', 0, 1, 11)
,('Colon_Extent_Insertion_Limited_By',11,'[NED] unresolved loop', 0, 1, 11)
,('Colon_Extent_Insertion_Limited_By',12,'[NED] Clinical intention achieved', 0, 1, 11)

,('Diagnoses Colon Extent',0,'(none selected)', 0, 0, 12)
,('Diagnoses Colon Extent',1,'proctal', 0, 0, 12)
,('Diagnoses Colon Extent',2,'recto-sigmoid', 0, 0, 12)
,('Diagnoses Colon Extent',3,'segmental', 0, 0, 12)
,('Diagnoses Colon Extent',4,'colonic', 0, 0, 12)
,('Diagnoses Colon Extent',5,'ileal', 0, 0, 12)
,('Diagnoses Colon Extent',6,'colonic and ileal', 0, 0, 12)

,('Diagnoses Colon Grading',0,'(none selected)', 0, 0, 13)
,('Diagnoses Colon Grading',1,'quiescent', 0, 0, 13)
,('Diagnoses Colon Grading',2,'mildly active', 0, 0, 13)
,('Diagnoses Colon Grading',3,'moderately active', 0, 0, 13)
,('Diagnoses Colon Grading',4,'severe', 0, 0, 13)

,('Endoscopist1 Role',1,'Independent (no trainer)', 0, 0, 14)
,('Endoscopist1 Role',2,'I observed', 0, 0, 14)
,('Endoscopist1 Role',3,'I assisted physically', 0, 0, 14)

,('Endoscopist2 Role',1,'Independent (no trainer)', 0, 0, 15)
,('Endoscopist2 Role',2,'Was observed', 0, 0, 15)
,('Endoscopist2 Role',3,'Was assisted physically', 0, 0, 15)

,('ERCP contrast media used',0,'(none)', 0, 0, 16)
,('ERCP contrast media used',1,'standard', 0, 0, 16)

,('ERCP extent of visualisation limited by other',0,'(none)', 0, 0, 17)

,('ERCP other access point',0,'(none)', 0, 0, 18)

,('ERCP via major to bile partially successful reason',0,'(none)', 0, 0, 19)
,('ERCP via major to bile successful using',0,'(none)', 0, 0, 20)
,('ERCP via major to bile successful using',1,'sphincterotome', 0, 0, 20)
,('ERCP via major to bile unsuccessful due to',0,'(none)', 0, 0, 21)

,('ERCP via major to pancreatic partially successful reason',0,'(none)', 0, 0, 22)
,('ERCP via major to pancreatic successful using',0,'(none)', 0, 0, 23)
,('ERCP via major to pancreatic unsuccessful due to',0,'(none)', 0, 0, 24)

,('ERCP via minor partially successful reason',0,'(none)', 0, 0, 25)
,('ERCP via minor successful using to',0,'(none)', 0, 0, 26)
,('ERCP via minor unsuccessful due to',0,'(none)', 0, 0, 27)

,('ERCP Balloon dilator',0,'(none)', 0, 0, 28)

,('ERCP cyst punct device',0,'(none)', 0, 0, 29)

,('Follow up disease/proc ERCP',0,'(none)', 0, 0, 30)


,('Follow up disease Period',1,'within the last month', 0, 0, 31)
,('Follow up disease Period',2,'one to two months ago', 0, 0, 31)
,('Follow up disease Period',3,'three to four months ago', 0, 0, 31)
,('Follow up disease Period',4,'five to six months ago', 0, 0, 31)
,('Follow up disease Period',5,'seven to twelve months ago', 0, 0, 31)
,('Follow up disease Period',6,'one to three years ago', 0, 0, 31)
,('Follow up disease Period',7,'more than three years ago', 0, 0, 31)
,('Follow up disease Period',8,'unknown', 0, 0, 31)

,('Extent of Intubation',1,'Proximal Jejunum', 0, 0, 32)
,('Extent of Intubation',2,'Distal Jejunum', 0, 0, 32)
,('Extent of Intubation',3,'Proximal Ileum', 0, 0, 32)
,('Extent of Intubation',4,'Jejunum', 0, 0, 32)
,('Extent of Intubation',5,'D4', 0, 0, 32)
,('Extent of Intubation',6,'D3', 0, 0, 32)
,('Extent of Intubation',7,'D2', 0, 0, 32)
,('Extent of Intubation',8,'D1', 0, 0, 32)
,('Extent of Intubation',9,'Stomach', 0, 0, 32)
,('Extent of Intubation',10,'Distal Oesophagus', 0, 0, 32)

,('Extent of Intubation',11,'Proximal Oesophagus', 0, 0, 32)
,('Extent of Intubation OGD',4,'Jejunum', 0, 0, 33)
,('Extent of Intubation OGD',6,'D3', 0, 0, 33)
,('Extent of Intubation OGD',7,'D2', 0, 0, 33)
,('Extent of Intubation OGD',8,'D1', 0, 0, 33)
,('Extent of Intubation OGD',9,'Stomach', 0, 0, 33)
,('Extent of Intubation OGD',10,'Distal Oesophagus', 0, 0, 33)
,('Extent of Intubation OGD',11,'Proximal Oesophagus', 0, 0, 33)

,('Follow up disease/proc Colon',1,'Sigmoid colectomy', 0, 0, 34)
,('Follow up disease/proc Upper GI',1,'gastroscopy', 0, 0, 35)

,('Forcep Serial Numbers',1,'SL001', 0, 0, 36)
,('Forcep Serial Numbers',2,'SL002', 0, 0, 36)
,('Forcep Serial Numbers',3,'SL003', 0, 0, 36)
,('Forcep Serial Numbers',4,'SL004', 0, 0, 36)

,('Further ERCP procedure',1,'RCOP', 0, 0, 37)

,('Further Broncho procedure',1,'bronchoscopy', 0, 0, 38)
,('Further Broncho procedure',2,'EBUS', 0, 0, 38)

,('Further procedure period',1,'day(s)', 0, 0, 39)
,('Further procedure period',2,'week(s)', 0, 0, 39)
,('Further procedure period',3,'month(s)', 0, 0, 39)
,('Further procedure period',4,'year(s)', 0, 0, 39)

,('Further procedure',1,'upper endoscopy', 0, 0, 40)
,('Further procedure',2,'endoscopy / sclerotherapy', 0, 0, 40)
,('Further procedure',3,'endoscopy / banding', 0, 0, 40)
,('Further procedure',4,'endoscopy / dilatation', 0, 0, 40)
,('Further procedure',5,'dilatation', 0, 0, 40)
,('Further procedure',6,'manometry', 0, 0, 40)
,('Further procedure',7,'pH monitoring', 0, 0, 40)
,('Further procedure',8,'colonoscopy', 0, 0, 40)
,('Further procedure',9,'colonoscopy/ polypectomy', 0, 0, 40)
,('Further procedure',10,'sigmoidoscopy', 0, 0, 40)
,('Further procedure',11,'sigmoidoscopy/polypectomy', 0, 0, 40)
,('Further procedure',12,'ERCP', 0, 0, 40)
,('Further procedure',13,'ERCP / stent', 0, 0, 40)
,('Further procedure',14,'liver biopsy', 0, 0, 40)
,('Further procedure',15,'case notes only', 0, 0, 40)

,('Gastrostomy PEG type',0,'(none)', 0, 0, 41)
,('Gastrostomy PEG type',1,'Jejunal tube', 0, 0, 41)
,('Gastrostomy PEG type',2,'Fresenius', 0, 0, 41)
,('Gastrostomy PEG type',3,'Bower', 0, 0, 41)

,('Gastrostomy PEG units',0,'Fr', 0, 0, 42)
,('Gastrostomy PEG units',1,'mm', 0, 0, 42)
,('Gastrostomy PEG units',2,'cm', 0, 0, 42)

,('Indications Colon Altered Bowel Habit',0,'(none selected)', 0, 0, 43)
,('Indications Colon Altered Bowel Habit',1,'acute alternating constipation/diarrhoea', 0, 0, 43)
,('Indications Colon Altered Bowel Habit',2,'acute constipation', 0, 0, 43)
,('Indications Colon Altered Bowel Habit',3,'acute diarrhoea', 0, 0, 43)
,('Indications Colon Altered Bowel Habit',4,'chronic alternating constipation/diarrhoea', 0, 0, 43)
,('Indications Colon Altered Bowel Habit',5,'chronic constipation', 0, 0, 43)
,('Indications Colon Altered Bowel Habit',6,'chronic diarrhoea', 0, 0, 43)
,('Indications Colon Altered Bowel Habit',7,'defaecation disorder', 0, 0, 43)

,('Indications Colon Rectal Bleeding',0,'(none selected)', 0, 0, 44)
,('Indications Colon Rectal Bleeding',1,'Heavy', 0, 0, 44)
,('Indications Colon Rectal Bleeding',2,'Occult', 0, 0, 44)
,('Indications Colon Rectal Bleeding',3,'Overt', 0, 0, 44)
,('Indications Colon Rectal Bleeding',4,'Altered blood [NED]', 0, 1, 44)
,('Indications Colon Rectal Bleeding',5,'Anorectal bleeding [NED]', 0, 1, 44)

,('Indications_Potential_Damaging_Drugs',1,'Anadin', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',2,'Arthrotec', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',3,'Aspirin', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',4,'Aspirin and an unspecified NSAID', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',5,'Diclofenac', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',6,'Diclofenac and Aspirin', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',7,'Ibuprofen', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',8,'Indomethacin', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',9,'Metformin', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',10,'Nabumetone', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',11,'Seroxat', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',12,'Warfarin', 0, 0, 45)
,('Indications_Potential_Damaging_Drugs',13,'Warfarin and aspirin', 0, 0, 45)

,('Instrument ColonSig',1,'GC20 - 2300078', 0, 0, 46)
,('Instrument ColonSig',2,'GC40P - 1000256', 0, 0, 46)

,('Instrument ERCP',1,'ERCP Scope', 0, 0, 47)

,('Instrument Upper GI',1,'XQ230 - 26700012', 0, 0, 48)
,('Instrument Upper GI',2,'GS 220 - 01000245', 0, 0, 48)
,('Instrument Upper GI',3,'GS 221 - 01000246', 0, 0, 48)

,('Instrument Antegrade',1,'0595 EG530NW - 2G366D022', 0, 0, 49)

,('Instrument Retrograde',2,'0595 EG530NW - 2G366D022', 0, 0, 50)

,('Instrument Thoracic',1,'A11293', 0, 0, 51)
,('Instrument Thoracic',2,'A11294', 0, 0, 51)
,('Instrument Thoracic',3,'A11291', 0, 0, 51)
,('Instrument Thoracic',4,'A01188', 0, 0, 51)
,('Instrument Thoracic',5,'B10237', 0, 0, 51)
,('Instrument Thoracic',6,'A11504', 0, 0, 51)
,('Instrument Thoracic',7,'A11446', 0, 0, 51)
,('Instrument Thoracic',8,'A11507', 0, 0, 51)
,('Instrument Thoracic',9,'AO1164', 0, 0, 51)
,('Instrument Thoracic',10,'A11448', 0, 0, 51)
,('Instrument Thoracic',11,'A01164', 0, 0, 51)
,('Instrument Thoracic',12,'A11584', 0, 0, 51)
,('Instrument Thoracic',13,'A11467', 0, 0, 51)

,('AccessMethod Thoracic',1,'left nostril', 0, 0, 52)
,('AccessMethod Thoracic',2,'right nostril', 0, 0, 52)
,('AccessMethod Thoracic',3,'mouth', 0, 0, 52)
,('AccessMethod Thoracic',4,'tracheostomy', 0, 0, 52)
,('AccessMethod Thoracic',5,'endotracheal tube', 0, 0, 52)

,('List Type',1,'Service List', 0, 0, 53)
,('List Type',2,'Adhoc Training List', 0, 0, 53)
,('List Type',3,'Dedicated Training List', 0, 0, 53)

,('Medication_Duration',0,'(unspecified duration)', 0, 0, 54)
,('Medication_Duration',1,'for 1 week', 0, 0, 54)
,('Medication_Duration',2,'for 2 weeks', 0, 0, 54)
,('Medication_Duration',3,'for 3 weeks', 0, 0, 54)
,('Medication_Duration',4,'for 4 weeks', 0, 0, 54)
,('Medication_Duration',5,'for 2 months', 0, 0, 54)
,('Medication_Duration',6,'for 3 months', 0, 0, 54)
,('Medication_Duration',7,'for 6 months', 0, 0, 54)
,('Medication_Duration',8,'for 12 months', 0, 0, 54)
,('Medication_Duration',9,'long term', 0, 0, 54)

,('Medication_Frequency',1,'a.c.', 0, 0, 55)
,('Medication_Frequency',2,'b.d.', 0, 0, 55)
,('Medication_Frequency',3,'o.d.', 0, 0, 55)
,('Medication_Frequency',4,'o.m.', 0, 0, 55)
,('Medication_Frequency',5,'o.n.', 0, 0, 55)
,('Medication_Frequency',6,'p.c.', 0, 0, 55)
,('Medication_Frequency',7,'p.r.n.', 0, 0, 55)
,('Medication_Frequency',8,'q.d.s.', 0, 0, 55)
,('Medication_Frequency',9,'q.q.h.', 0, 0, 55)
,('Medication_Frequency',10,'t.d.s.', 0, 0, 55)
,('Medication_Frequency',0,'(none)', 0, 0, 55)

,('Oesophageal dilatation units',0,'Fr', 0, 0, 56)
,('Oesophageal dilatation units',1,'mm', 0, 0, 56)

,('Oesophageal dilator',0,'(none selected)', 0, 0, 57)
,('Oesophageal dilator',1,'with a balloon dilator', 0, 0, 57)
,('Oesophageal dilator',2,'by bougienage', 0, 0, 57)

,('Patient Status',1,'Inpatient', 0, 0, 58)
,('Patient Status',2,'Outpatient', 0, 0, 58)
,('Patient Status',3,'Day Patient', 0, 0, 58)

,('Patient Type',1,'NHS', 0, 0, 59)
,('Patient Type',2,'Private', 0, 0, 59)

,('PatientNotCopiedReason',0,'(none)', 0, 0, 60)
,('PatientNotCopiedReason',1,'Protocol', 0, 0, 60)
,('PatientNotCopiedReason',2,'Patient declined report', 0, 0, 60)

,('PEG Outcome',0,'(none)', 0, 0, 61)
,('PEG Outcome',1,'bleeding requiring transfusion', 0, 0, 61)
,('PEG Outcome',2,'infection requiring antibiotics', 0, 0, 61)
,('PEG Outcome',3,'peritonitis', 0, 0, 61)

,('Premedication Delivery Method',1,'Intravenous', 0, 0, 62)
,('Premedication Delivery Method',2,'Intramuscular', 0, 0, 62)
,('Premedication Delivery Method',3,'Oral', 0, 0, 62)
,('Premedication Delivery Method',4,'IV', 0, 0, 62)
,('Premedication Delivery Method',5,'Spray', 0, 0, 62)
,('Premedication Delivery Method',6,'sublingual spray', 0, 0, 62)

,('Premedication Drug Units',1,'ug', 0, 0, 63)
,('Premedication Drug Units',2,'ml', 0, 0, 63)
,('Premedication Drug Units',3,'mg', 0, 0, 63)

,('Procedure Category',1,'Routine [NED]', 0, 1, 64)
,('Procedure Category',2,'Urgent [NED]', 0, 1, 64)
,('Procedure Category',3,'Emergency [NED]', 0, 1, 64)
,('Procedure Category',4,'Surveillence [NED]', 0, 1, 64)
,('Procedure Category',5,'Open access', 0, 0, 64)
,('Procedure Category',6,'Elective', 0, 0, 64)
,('Procedure Category',7,'Scheduled', 0, 0, 64)

,('Return or referred to',0,'(Unspecified)', 0, 0, 65)
,('Return or referred to',1,'referring GP', 0, 0, 65)
,('Return or referred to',2,'primary physician', 0, 0, 65)
,('Return or referred to',3,'GI physician', 0, 0, 65)
,('Return or referred to',4,'GI surgeon', 0, 0, 65)

,('Broncho Return or referred to',0,'(Unspecified)', 0, 0, 66)
,('Broncho Return or referred to',1,'referring GP', 0, 0, 66)
,('Broncho Return or referred to',2,'primary physician', 0, 0, 66)
,('Broncho Return or referred to',3,'thoracic physician', 0, 0, 66)
,('Broncho Return or referred to',4,'thoracic surgeon', 0, 0, 66)

,('Review period',1,'day(s)', 0, 0, 67)
,('Review period',2,'week(s)', 0, 0, 67)
,('Review period',3,'month(s)', 0, 0, 67)
,('Review period',4,'year(s)', 0, 0, 67)

,('Review',0,'(none)', 0, 0, 68)
,('Review',1,'GI clinic', 0, 0, 68)
,('Review',2,'Surgical clinic', 0, 0, 68)
,('Review',3,'Medical clinic', 0, 0, 68)
,('Review',4,'Referrers clinic', 0, 0, 68)

,('Review Broncho',0,'(none)', 0, 0, 69)
,('Review Broncho',1,'Chest clinic', 0, 0, 69)

,('Surgery follow up proc Upper GI',1,'gastroscopy', 0, 0, 70)
,('Surgery follow up proc Upper GI',2,'colonoscopy', 0, 0, 70)

,('Surgical Procedures',1,'a fundoplication', 0, 0, 71)
,('Surgical Procedures',2,'a vagotomy and pyloroplasty', 0, 0, 71)
,('Surgical Procedures',3,'a vagotomy and antrectomy', 0, 0, 71)
,('Surgical Procedures',4,'a vagotomy and gastroenterostomy', 0, 0, 71)
,('Surgical Procedures',5,'a gastroenterostomy', 0, 0, 71)
,('Surgical Procedures',6,'a Billroth I gastrectomy', 0, 0, 71)
,('Surgical Procedures',7,'a Billroth II gastrectomy', 0, 0, 71)
,('Surgical Procedures',8,'a total gastrectomy', 0, 0, 71)
,('Surgical Procedures',9,'obesity surgery/banding', 0, 0, 71)
,('Surgical Procedures',10,'obesity surgery/gastroplasty', 0, 0, 71)
,('Surgical Procedures',11,'obesity surgery/gastric bypass', 0, 0, 71)

,('Therapeutic EMR Fluid',0,'(none)', 0, 0, 72)
,('Therapeutic EMR Fluid',1,'EMR fluid', 0, 0, 72)

,('Therapeutic Stent Insertion Types',1,'Celestin', 0, 0, 73)
,('Therapeutic Stent Insertion Types',2,'Nottingham', 0, 0, 73)
,('Therapeutic Stent Insertion Types',3,'Strecker', 0, 0, 73)
,('Therapeutic Stent Insertion Types',4,'Wall stent', 0, 0, 73)
,('Therapeutic Stent Insertion Types',5,'Wilson Cook', 0, 0, 73)

,('Therapeutic Stent Removal Technique',0,'(none)', 0, 0, 74)

,('Therapeutic Stomach Stent Insertion Types',0,'(none)', 0, 0, 75)

,('Ward',1,'B1', 0, 0, 76)
,('Ward',2,'B2', 0, 0, 76)
,('Ward',3,'B3', 0, 0, 76)
,('Ward',4,'B4', 0, 0, 76)
,('Ward',5,'B5', 0, 0, 76)
,('Ward',6,'Z1', 0, 0, 76)
,('Ward',7,'W1', 0, 0, 76)
,('Ward',8,'AB4', 0, 0, 76)
,('Ward',9,'FG1', 0, 0, 76)

,('Therapeutic ERCP sphincterotomes',0,'(none)', 0, 0, 77)
,('Therapeutic ERCP sphincterotomes',1,'Clever Cut', 0, 0, 77)
,('Therapeutic ERCP sphincterotomes',2,'CT 30 sphincterotome', 0, 0, 77)
,('Therapeutic ERCP sphincterotomes',3,'Flocut', 0, 0, 77)
,('Therapeutic ERCP sphincterotomes',4,'PROCUT', 0, 0, 77)
,('Therapeutic ERCP sphincterotomes',5,'Fusion Omni', 0, 0, 77)
,('Therapeutic ERCP sphincterotomes',6,'NeedleCut3', 0, 0, 77)
,('Therapeutic ERCP sphincterotomes',7,'Boston scientific', 0, 0, 77)
,('Therapeutic ERCP sphincterotomes',8,'Needle knife', 0, 0, 77)

,('ERCP papillotomy reason',0,'(none)', 0, 0, 78)

,('ERCP stone removal method',0,'(none)', 0, 0, 79)
,('ERCP stone removal method',1,'wire basket', 0, 0, 79)
,('ERCP stone removal method',2,'lithotriptor', 0, 0, 79)
,('ERCP stone removal method',3,'balloon catheter', 0, 0, 79)
,('ERCP stone removal method',4,'balloon catheter & basket', 0, 0, 79)
,('ERCP stone removal method',5,'lithotriptor and balloon', 0, 0, 79)
,('ERCP stone removal method',6,'sphincterotome', 0, 0, 79)

,('Diabetes Mellitus',1,'Unknown', 0, 0, 80)
,('Diabetes Mellitus',2,'Type I', 0, 0, 80)
,('Diabetes Mellitus',3,'Type II', 0, 0, 80)

,('Sigmoidopexy make',0,'(none)', 0, 0, 81)

,('Post Operative Complication Severity',0,'0. not recorded', 0, 0, 82)
,('Post Operative Complication Severity',1,'1. mild- hospitalisation 1-3 days', 0, 0, 82)
,('Post Operative Complication Severity',2,'2. moderate - hospitalisation 4-10 days', 0, 0, 82)
,('Post Operative Complication Severity',3,'3a. severe - hospitalisation > 10 days', 0, 0, 82)
,('Post Operative Complication Severity',4,'3b. hospitalisation - intensive care', 0, 0, 82)
,('Post Operative Complication Severity',5,'3c. severe - surgery', 0, 0, 82)
,('Post Operative Complication Severity',6,'4. fatal - specify date of death', 0, 0, 82)

,('Post Operative Complication Resolution',1,'conservatively', 0, 0, 83)
,('Post Operative Complication Resolution',2,'by endoscopic therapy', 0, 0, 83)
,('Post Operative Complication Resolution',3,'with surgery', 0, 0, 83)
,('Post Operative Complication Resolution',4,'death', 0, 0, 83)

,('Mayo Score',1,'normal or inactive disease', 0, 0, 84)
,('Mayo Score',2,'mild disease (erythema, decreased vascular patters, mild friability)', 0, 0, 84)
,('Mayo Score',3,'moderate disease (marked erythema, absent vascular pattern, friability, erosions)', 0, 0, 84)
,('Mayo Score',4,'servere disease (spontaneous bleeding, ulceration)', 0, 0, 84)

,('Simple Endoscopic Score – Crohn''s Disease',1,'0 – 2 remission', 0, 0, 85)
,('Simple Endoscopic Score – Crohn''s Disease',2,'3 – 6 mild endoscopic activity', 0, 0, 85)
,('Simple Endoscopic Score – Crohn''s Disease',3,'7 – 15 moderate endoscopic activity', 0, 0, 85)
,('Simple Endoscopic Score – Crohn''s Disease',4,'> 15	severe endoscopic activity', 0, 0, 85)

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------101b Create Table ERS_Diagrams.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_Diagrams](
	[DiagramId] [int],
	[Name] [varchar] (100) NOT NULL,
	[Description] [varchar] (500),
	[Height] [int] NOT NULL,
	[Width] [int] NOT NULL,
	[DefaultImageUrl] [varchar] (1000) NOT NULL,
	[ReportImageUrl] [varchar] (1000) NOT NULL,
	CONSTRAINT [PK_Diagrams] PRIMARY KEY CLUSTERED ([DiagramId])
) ON [PRIMARY]

GO

INSERT [dbo].[ERS_Diagrams] ([DiagramId], [Name], [Description], [Height], [Width], [DefaultImageUrl], [ReportImageUrl]) 
VALUES 
	(1, N'OGD', N'Upper GI Red Fill Gray Border', 500, 500, N'~/Images/stomach5.svg', N'~/Images/Stomach.png')
	, (2, N'ERCP', N'ERCP No Fill Black Border', 500, 500, N'~/Images/ercp-black.svg', N'~/Images/ERCP.png')
	, (3, N'Colon', N'Colon No Fill Black Border', 500, 500, N'~/Images/colon-black.svg', N'~/Images/Colon.png')
	, (4, N'Antegrade', N'Colon No Fill Black Border', 1000, 510, N'~/Images/enteroscopy_ante_red.svg', N'~/Images/enteroscopy_ante.png')
	, (5, N'Retrograde', N'Colon No Fill Black Border', 500, 500, N'~/Images/enteroscopy_retro.svg', N'~/Images/enteroscopy_retro.png')
	, (6, N'Broncho1', N'Broncho Red Fill', 500, 500, N'~/Images/brt-1-a.svg', N'~/Images/brt-1-a.png')
	, (7, N'Broncho2', N'Broncho Red Fill Inverted', 500, 500, N'~/Images/brt-2-a.svg', N'~/Images/brt-2-a.png')

GO

CREATE TABLE [dbo].[ERS_DiagramVariations](
	[DiagramVariationId] [int],
	[DiagramId] [int] NOT NULL,
	[Name] [varchar] (100) NOT NULL,
	[Description] [varchar] (500),
	[ImageUrl] [varchar] (1000) NOT NULL,
	CONSTRAINT [PK_DiagramVariations] PRIMARY KEY CLUSTERED ([DiagramVariationId])
) ON [PRIMARY]

GO

INSERT [dbo].[ERS_DiagramVariations] ([DiagramVariationId], [DiagramId], [Name], [Description], [ImageUrl]) 
VALUES 
	  (1, 1, N'OGD-NoFill', N'Upper GI No Fill Gray Border', N'~/Images/stomach_svg.svg')
	, (2, 1, N'OGD-Red', N'Upper GI Red Fill Gray Border', N'~/Images/stomach5.svg')
	, (3, 2, N'ERCP-NoFill', N'ERCP No Fill Black Border', N'~/Images/ercp-black.svg')
	, (4, 3, N'Colon-NoFill', N'Colon No Fill Black Border', N'~/Images/colon-black.svg')
	, (5, 3, N'Colon-NoFill', N'Colon No Fill Black Border', N'~/Images/colon-black.svg')
	, (6, 3, N'Colon-NoFill', N'Colon No Fill Black Border', N'~/Images/colon-black.svg')
	, (7, 4, N'Broncho-Red', N'Broncho Red Fill', N'~/Images/brt-1-a.svg')
	, (8, 5, N'Broncho-Red2', N'Broncho Red Fill Inverted', N'~/Images/brt-2-a.svg')
GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_Ethnic_Groups.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Ethnic_Groups](
	[EthnicId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](10) NULL,
	[Details] [varchar](50) NULL,
	[HL7Code] [varchar](10) NULL,
	CONSTRAINT [PK_ERS_Ethnic_Groups] PRIMARY KEY CLUSTERED  ([EthnicId])
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [ERS_ETHNIC_GROUPSID] ON [dbo].[ERS_Ethnic_Groups] ([EthnicId]); 
CREATE NONCLUSTERED INDEX [IXERS_ETHNIC_GROUPSCODE] ON [dbo].[ERS_Ethnic_Groups] ([Code]); 


INSERT INTO [ERS_Ethnic_Groups] ([Code], [HL7Code], [Details]) 
VALUES	 ('A','A','British'),						('B','B',	'Irish')
		,('C','C','Any other White background'),	('D','D',	'White and Black Caribbean')
		,('E','E','White and Black African'),		('F','F',	'White and Asian')
		,('G','G','Any other mixed background'),	('H','H',	'Indian')
		,('J','J','Pakistani'),						('K','K',	'Bangladeshi')
		,('L','L','Any other Asian background'),	('M','M',	'Caribbean')
		,('N','N','African'),						('P','P',	'Any other Black background')
		,('R','R','Chinese'),						('S','S',	'Any other ethnic group')
		,('Z','Z','Not stated');

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_GenderTypes.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_GenderTypes](
	[GenderId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](10) NULL,
	[NHSType] [char](1) NULL,
	[Title] [varchar](50) NULL,
	[HL7Code] [varchar](10) NULL,
	CONSTRAINT [PK_ERS_GenderTypes] PRIMARY KEY CLUSTERED  ([GenderId])
) ON [PRIMARY]

GO

INSERT INTO [dbo].[ERS_GenderTypes](Code,HL7Code, NHSType, Title)
VALUES ('U', 0, 0,'Not Known'),	('M', 1, 1,'Male')
		,('F', 2, 2,'Female'),	('N', 9, 9,'Not Specified')

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_GPS.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_GPS](
	[GPId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](10) NULL,
	[Title] [varchar](50) NULL,
	[Initial] [varchar](50) NULL,
	[Name] [varchar](50) NULL,
	[TelNo] [varchar](50) NULL,
	[Mobile] [varchar](50) NULL,
	[Page] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[NationalCode] [varchar](10) NULL,
	[ExternalCode] [varchar](50) NULL,
	[DateFrom] [datetime] NULL,
	[DateTo] [datetime] NULL,
	[Status] [bit] NULL,
	[CompleteName]  AS ([dbo].[fnFormatCompleteName]([Title],[Initial],[Name])),
	[Comment] [nvarchar](50) NULL,
	[Forename] [varchar](50) NULL,
	[DateAdded] [datetime] NULL,
	[Device] [varchar](50) NULL,
	[Local] [bit] NULL,
	CONSTRAINT [PK_ERS_GPS] PRIMARY KEY CLUSTERED  ([GPID])
) ON [PRIMARY]

GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_GPSCODE] ON [dbo].[ERS_GPS] ([Code]); 
CREATE UNIQUE NONCLUSTERED INDEX [IX_GPSID] ON [dbo].[ERS_GPS] ([GPId]); 
CREATE NONCLUSTERED INDEX [IX_GPSNAME] ON [dbo].[ERS_GPS] ([Name]); 
CREATE NONCLUSTERED INDEX [IX_GPSNATIONALCODE] ON [dbo].[ERS_GPS] ([NationalCode]); 

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_Marital_Status.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Marital_Status](
	[MaritalId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](1) NULL,
	[Status] [varchar](100) NULL,
	[SortOrder] [smallint] NULL,
	[HL7Code] [varchar](10) NULL,
	CONSTRAINT [PK_ERS_Marital_Status] PRIMARY KEY CLUSTERED  ([MaritalId])
) ON [PRIMARY]

GO


INSERT INTO [dbo].[ERS_Marital_Status](Code, HL7Code, [Status])
VALUES (  'S','S', 'Single'),							('M','M', 'Married/Civil Partner')
		,('W','W', 'Widowed/Surviving Civil Partner'),	('D','D','Divorced/Person whose Civil Partnership has been dissolved')
		,('N','N', 'Not disclosed'),					('P','P', 'Separated')

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_Practices.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Practices](
	[PracticeID] [int] IDENTITY(1,1) NOT NULL,
	[Code] [nvarchar](6) NULL,
	[NationalCode] [nvarchar](10) NULL,
	[Name] [nvarchar](100) NULL,
	[Address1] [nvarchar](100) NULL,
	[Address2] [nvarchar](100) NULL,
	[Address3] [nvarchar](100) NULL,
	[Address4] [nvarchar](100) NULL,
	[PostCode] [nvarchar](9) NULL,
	[TelNo] [nvarchar](20) NULL,
	[FaxNo] [nvarchar](20) NULL,
	[Email] [nvarchar](40) NULL,
	[DateFrom] [datetime] NULL,
	[DateTo] [datetime] NULL,
	[Status] [bit] NULL,
	[ExternalCode] [nvarchar](10) NULL,
	[Primary] [bit] NULL,
	[Local] [bit] NULL,
	[CCGId] [int] NULL CONSTRAINT [DF_ERS_Practices_CCGId]  DEFAULT ((0)),
	[StartDate] [datetime] NULL,
	CONSTRAINT [PK_ERS_Practices] PRIMARY KEY CLUSTERED  ([PracticeID])
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_PRACTICES_CCG] ON [dbo].[ERS_Practices] ([CCGId]); 
CREATE NONCLUSTERED INDEX [IX_PRACTICES_CODE] ON [dbo].[ERS_Practices] ([Code]); 
CREATE NONCLUSTERED INDEX [IX_PRACTICES_NATIONAL_CODE] ON [dbo].[ERS_Practices] ([NationalCode]); 
CREATE NONCLUSTERED INDEX [IX_PRACTICESID] ON [dbo].[ERS_Practices] ([PracticeID]); 

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_Religions.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Religions](
	[ReligionId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](10) NULL,
	[Details] [varchar](100) NULL,
	[HL7Code] [varchar](10) NULL,
	CONSTRAINT [PK_ERS_Religions] PRIMARY KEY CLUSTERED  ([ReligionId])
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IXERS_RELIGIONSCODE] ON [dbo].[ERS_Religions] ([Code]); 

INSERT INTO [ERS_Religions] ([Code], [Details]) 
VALUES	('XX', 'XX'),('A1', 'Baha~i'),('B1', 'Buddhist')
,('B2', 'Mahayana Buddhist'),			('B3', 'New Kadampa Tradition Buddhist'),	('B4', 'Nichiren Buddhist')
,('B5', 'Pure Land Buddhist'),			('B6', 'Theravada Buddhist'),				('B7', 'Tibetan Buddhist')
,('B8', 'Zen Buddhist'),				('C1', 'Christian'),						('C2', 'Amish')
,('C3', 'Anabaptist'),					('C4', 'Anglican'),							('C5', 'Apostolic Pentecostalist')
,('C6', 'Armenian Catholic'),			('C7', 'Armenian Orthodox'),				('C8', 'Baptist')
,('C9', 'Brethren'),					('C10', 'Bulgarian Orthodox'),				('C11', 'Calvinist')
,('C12', 'Catholic: Not Roman Catholic'),('C13', 'Celtic Christian'),				('C14', 'Celtic Orthodox Christian')
,('C15', 'Chinese Evangelical Christian'),('C16', 'Christadelphian'),				('C17', 'Christian Existentialist')
,('C18', 'Christian Humanist'),			('C19', 'Christian Scientists'),			('C20', 'Christian Spiritualist')
,('C21', 'Church in Wales'),			('C22', 'Church of England'),				('C23', 'Church of God of Prophecy')
,('C24', 'Church of Ireland'),			('C25', 'Church of Scotland'),				('C26', 'Congregationalist')
,('C27', 'Coptic Orthodox'),			('C28', 'Eastern Catholic'),				('C29', 'Eastern Orthodox')
,('C30', 'Elim Pentecostalist'),		('C31', 'Ethiopian Orthodox'),				('C32', 'Evangelical Christian')
,('C33', 'Exclusive Brethren'),			('C34', 'Free Church'),						('C35', 'Free Church of Scotland')
,('C36', 'Free Evangelical Presbyterian'),('C37', 'Free Methodist'),				('C38', 'Free Presbyterian')
,('C39', 'French Protestant'),			('C40', 'Greek Catholic'),					('C41', 'Greek Orthodox')
,('C42', 'Independent Methodist'),		('C43', 'Indian Orthodox'),					('C44', 'Jehovahs Witness')
,('C45', 'Judaic Christian'),			('C46', 'Lutheran'),						('C47', 'Mennonite')
,('C48', 'Messianic Jew'),				('C49', 'Methodist'),						('C50', 'Moravian')
,('C51', 'Mormon'),						('C52', 'Nazarene Church'),					('C53', 'New Testament Pentacostalist')
,('C54', 'Nonconformist'),				('C55', 'Old Catholic'),					('C56', 'Open Brethren')
,('C57', 'Orthodox Christian'),			('C58', 'Pentecostalist'),					('C59', 'Presbyterian')
,('C60', 'Protestant'),					('C61', 'Plymouth Brethren'),				('C62', 'Quaker')
,('C63', 'Rastafari'),					('C64', 'Reformed Christian'),				('C65', 'Reformed Presbyterian')
,('C66', 'Reformed Protestant'),		('C67', 'Roman Catholic'),					('C68', 'Romanian Orthodox')
,('C69', 'Russian Orthodox'),			('C70', 'Salvation Army Member'),			('C71', 'Scottish Episcopalian')
,('C72', 'Serbian Orthodox'),			('C73', 'Seventh Day Adventist'),			('C74', 'Syrian Orthodox')
,('C75', 'Ukrainian Catholic'),			('C76', 'Ukrainian Orthodox'),				('C77', 'Uniate Catholic')
,('C78', 'Unitarian'),					('C79', 'United Reform'),					('C80', 'Zwinglian')
,('D1', 'Hindu'),						('D2', 'Advaitin Hindu'),					('D3', 'Arya Samaj Hindu')
,('D4', 'Shakti Hindu'),				('D5', 'Shiva Hindu'),						('D6', 'Vaishnava Hindu')
,('E1', 'Jain'),						('F1', 'Jewish'),							('F2', 'Ashkenazi Jew')
,('F3', 'Haredi Jew'),					('F4', 'Hasidic Jew'),						('F5', 'Liberal Jew')
,('F6', 'Masorti Jew'),					('F7', 'Orthodox Jew'),						('F8', 'Reform Jew')
,('G1', 'Muslim'),						('G2', 'Ahmadi'),							('G3', 'Druze')
,('G4', 'Ismaili Muslim'),				('G5', 'Shi~ite Muslim'),					('G6', 'Sunni Muslim')
,('H1', 'Pagan'),						('H2', 'Asatruar'),							('H3', 'Celtic Pagan')
,('H4', 'Druid'),						('H5', 'Goddess'),							('H6', 'Heathen')
,('H7', 'Occultist'),					('H8', 'Shaman'),							('H9', 'Wiccan')
,('I1', 'Sikh'),						('J1', 'Zoroastrian'),						('K1', 'Agnostic  *')
,('K2', 'Ancestral Worship'),			('K3', 'Animist'),							('K4', 'Anthroposophist')
,('K5', 'Black Magic'),					('K6', 'Brahma Kumari'),					('K7', 'British Israelite')
,('K8', 'Chondogyo'),					('K9', 'Confucianist'),						('K10', 'Deist')
,('K11', 'Humanist'),					('K12', 'Infinite Way'),					('K13', 'Kabbalist')
,('K14', 'Lightworker'),				('K15', 'New Age Practitioner'),			('K16', 'Native American Religion')
,('K17', 'Pantheist'),					('K18', 'Peyotist'),						('K19', 'Radha Soami')
,('K20', 'Religion (Other Not Listed)  **'),('K21', 'Santeri'),						('K22', 'Satanist')
,('K23', 'Scientologist'),				('K24', 'Secularist'),						('K25', 'Shumei')
,('K26', 'Shinto'),						('K27', 'Spiritualist'),					('K28', 'Swedenborgian')
,('K29', 'Taoist'),						('K30', 'Unitarian-Universalist'),			('K31', 'Universalist')
,('K32', 'Vodun'),						('K33', 'Yoruba'),							('L1', 'Atheist')
,('L2', 'Not Religious'),				('M1', 'Religion not given - PATIENT refused'),('N1', 'Patient Religion Unknown ***');


UPDATE [dbo].[ERS_Religions] SET Details = Replace(Details,'~',Char(39)), HL7Code=Code


--------------------------------------------------------------------------------------------------------------------
-------------------------------------102 Create Table ERS_Patients.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Patients](
	[PatientId] [int] IDENTITY(1,1) NOT NULL,
	[Surname] [varchar](50) NULL,
	[Forename1] [varchar](50) NULL,
	[Forename2] [varchar](50) NULL,
	[Title] [varchar](20) NULL,
	[GenderId] [int] NULL,
	[DateOfBirth] [datetime] NULL,
	[PlaceOfBirth] [varchar](50) NULL,
	[MaritalId] [int] NULL,
	[Address1] [varchar](50) NULL,
	[Address2] [varchar](50) NULL,
	[Address3] [varchar](50) NULL,
	[Address4] [varchar](50) NULL,
	[Postcode] [varchar](50) NULL,
	[Telephone] [varchar](50) NULL,
	[EthnicId] [int] NULL,
	[ReligionId] [int] NULL,
	[RegGpId] [int] NULL,
	[RegGpPracticeId] [int] NULL,
	[HospitalNumber] [varchar](50) NULL,
	[NHSNo] [varchar](50) NULL,
	[NHSVerificationStatus] [varchar](10) NULL CONSTRAINT [DF_ERS_Patients_NHSVerificationStatus]  DEFAULT (('00')),
	[Status] [varchar](50) NULL,
	[Comment] [varchar](255) NULL,
	[Protected] [bit] NULL,
	[IsDeleted] [bit] NULL,
	[Alert] [varchar](255) NULL,
	[AlertStatus] [int] NULL CONSTRAINT [DF_ERS_Patients_AlertStatus]  DEFAULT ((0)),
	[MobileNo] [varchar](30) NULL,
	[Email] [varchar](50) NULL,
	[SmsOptout] [int] NULL,
	[Deceased] [bit] NULL,
	[DateOfDeath] [datetime] NULL,
	[DeceasedNotifiedDate] [datetime] NULL,
	[DeceasedNotifiedBy] [nchar](10) NULL,
	[PlaceOfDeath] [varchar](50) NULL,
	[CreateUpdateMethod] [varchar](50) NULL,
	[DateAdded] [datetime] NULL,
	[DateUpdated] [datetime] NULL,
	[ExternalNo] [varchar](50) NULL,
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [PK_PatientsPatientId] PRIMARY KEY CLUSTERED ([PatientId]),
	CONSTRAINT [FK_ERS_Patients_ERS_Ethnic_Groups] FOREIGN KEY ([EthnicId]) REFERENCES [dbo].[ERS_Ethnic_Groups]([EthnicId]),
	CONSTRAINT [FK_ERS_Patients_ERS_GenderTypes] FOREIGN KEY ([GenderId]) REFERENCES [dbo].[ERS_GenderTypes]([GenderId]),
	CONSTRAINT [FK_ERS_Patients_ERS_GPS] FOREIGN KEY ([RegGpId]) REFERENCES [dbo].[ERS_GPS]([GPId]),
	CONSTRAINT [FK_ERS_Patients_ERS_Marital_Status] FOREIGN KEY ([MaritalId]) REFERENCES [dbo].[ERS_Marital_Status]([MaritalId]),
	CONSTRAINT [FK_ERS_Patients_ERS_Practices] FOREIGN KEY ([RegGpPracticeId]) REFERENCES [dbo].[ERS_Practices]([PracticeID]),
	CONSTRAINT [FK_ERS_Patients_ERS_Religions] FOREIGN KEY ([ReligionId]) REFERENCES [dbo].[ERS_Religions]([ReligionId])
) ON [PRIMARY]

GO
CREATE NONCLUSTERED INDEX [IX_PATIENT_SURNAME] ON [dbo].[ERS_Patients] ([Surname]); 
CREATE NONCLUSTERED INDEX [IX_FORENAME_1] ON [dbo].[ERS_Patients] ([Forename1]); 
CREATE NONCLUSTERED INDEX [IX_FORENAME_2] ON [dbo].[ERS_Patients] ([Forename2]); 
CREATE NONCLUSTERED INDEX [IX_PATIENDOB] ON [dbo].[ERS_Patients] ([DateOfBirth]); 
CREATE NONCLUSTERED INDEX [IX_PATIENT_HospitalNumber] ON [dbo].[ERS_Patients] ([HospitalNumber]); 
CREATE NONCLUSTERED INDEX [IX_PATIENT_NHS_NO] ON [dbo].[ERS_Patients] ([NHSNo]); 
CREATE NONCLUSTERED INDEX [IX_PATIENT_POSTCODE] ON [dbo].[ERS_Patients] ([Postcode]); 
CREATE NONCLUSTERED INDEX [PATIENT_ExternalNo] ON [dbo].[ERS_Patients] ([ExternalNo]); 

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------103 Create Tables Main.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-------------------------------------------
--CREATE TABLES
-------------------------------------------
CREATE TABLE [dbo].[ERS_Procedures](
	[ProcedureId]		[int] IDENTITY(1,1) NOT NULL,
	[ProcedureType]		[int] NOT NULL,
	[CreatedBy]			[int] NULL,
	[CreatedOn]			[datetime] NOT NULL,
	[ModifiedOn]		[datetime] NOT NULL,
	[PatientId]			[int] NOT NULL,
	[PatientType]		[int] NULL,
	[PatientStatus]		[int] NULL,
	[Ward]				[int] NULL,	
	[CategoryListId]	INT null,
	[OnWaitingList]		BIT NULL,
	[OpenAccessProc]	TINYINT NULL,
	[EmergencyProcType] TINYINT NULL,
	[OperatingHospitalID] [smallint] NOT NULL,
	[ReferralHospitalNo] [smallint] NULL,
	[ReferralConsultantNo] [smallint] NULL,
	[GPReferralFlag]	[smallint] NULL,		
	[DiagramNumber]		[int] NOT NULL CONSTRAINT DF_Procedures_DiagramNumber DEFAULT 1,
	[ListType]			[TINYINT] NULL,
	[ListConsultant]	[int] NULL, --MAKE THIS FOREIGN KEY *********
	[ConsultantPresent] [bit] NULL,
	[Endoscopist1]		[int] NULL, --MAKE THIS FOREIGN KEY *********
	[Endo1Role]			[TINYINT] NULL,	
	[Endoscopist2]		[int] NULL, --MAKE THIS FOREIGN KEY *********
	[Endo2Role]			[TINYINT] NULL,
	[Assistant]			[int] NULL, --MAKE THIS FOREIGN KEY *********
	[Nurse1]			[int] NULL, --MAKE THIS FOREIGN KEY *********
	[Nurse2]			[int] NULL, --MAKE THIS FOREIGN KEY *********
	[Nurse3]			[int] NULL, --MAKE THIS FOREIGN KEY *********
	[Instrument1]		[smallint] NULL,
	[Instrument2]		[smallint] NULL,
	[ResectedColonNo]	[smallint] NULL,
	[IncludeProcNotes] [bit] NULL,
	[ProcedureNotes]	[nvarchar] (4000) NULL,
	[Video]				[bit] NULL,
	[VideoNotes]		[nvarchar](255) NULL,
	[GPReportText]		[nvarchar] (4000) NULL,
	[TextEdited]		[bit] NULL,
	[DiagramIncluded]	[bit] NULL,
	[EndoscribeComments] [nvarchar] (4000) NULL,
	[EndoscribePremedication] [nvarchar] (4000) NULL,
	[MucosalJunctionAt] [decimal](6,1) NULL,
	[NewCardia]			[smallint] NULL,
	[AbnoText]			[nvarchar] (4000) NULL,
	[PancreasDivisum]	[smallint] NULL,
	[BiliaryManometry]	[smallint] NULL,
	[PancreaticManometry] [smallint] NULL,
	[FirstERCP]			[bit] NULL,
	[ExportedToEPR]		[nvarchar](50) NULL,
	[ForcepType]		[smallint] NULL,
	[ForcepSerialNo]	[nvarchar](50) NULL,	
	[AccountNo]			[nvarchar](50) NULL,
	[DNA]				[smallint] NULL,
	[DNACombined]		BIT NULL,
	[DNACreatedViaRC]	[bit] NULL,	
	[ExportFileName]	[nvarchar](255) NULL,
	[ExportProducedOn]	[datetime] NULL,
	[ReferralConsultantSpeciality] [smallint] NULL,
	[PatientConsent]	[TINYINT] NULL,
	[SurgicalSafetyCheckListCompleted] [bit] NULL,
	[GPCode]			[nvarchar](50) NULL,
	[GPPracticeCode]	[nvarchar](50) NULL,	
	[NEDEnabled]		[bit] NULL,
	[NEDExported]		[bit] NULL,
	[NEDProcedureId]	[varchar](20) NULL,
	[ScopeGuide]		[bit] NULL,
	[FormerProcedureId]	[int] NULL,
	[ProcedureCompleted] [tinyint] NULL,
	[IsDirty]			[bit] NULL,
	[IsActive]			[bit] NOT NULL CONSTRAINT [DF_ERS_Procedures_IsActive]  DEFAULT ((1)),
	[BreathTestResult]	[tinyint] NULL,
	[ImagePortId]		[int] NULL,
	[Transnasal]		[bit] NULL,
	[ReportUpdated]		[bit] NULL CONSTRAINT [DF_ERS_Procedures_ReportUpdated] DEFAULT (0),
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [PK_Procedures] PRIMARY KEY CLUSTERED ([ProcedureId])
) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX IX_ERS_Procedures   
    ON [dbo].[ERS_Procedures](ProcedureType, CreatedOn, PatientId, OperatingHospitalID, ListConsultant); 

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_Procedure_Updated -------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Procedure_Updated', 'TR';
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER TR_Procedure_Updated
   ON  ERS_Procedures
   AFTER INSERT, UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @ReportUpdated bit, @ProcedureId int, @PatientId int, @ProcedureType tinyint
	SELECT @ReportUpdated = ReportUpdated, @ProcedureId = ProcedureId, 
			@PatientId = PatientId, @ProcedureType = ProcedureType  FROM INSERTED
	IF ISNULL(@ReportUpdated,0) <> 0
	BEGIN
		UPDATE ERS_Procedures SET ReportUpdated = 1 WHERE ProcedureID = @ProcedureID AND ISNULL(ReportUpdated, 0) <> 1
	END

	-- check expected patients for match on patientid, procedure type and date
	IF EXISTS(SELECT 1 FROM dbo.ERS_ExpectedPatients eep 
				WHERE PatientId = @PatientId 
					AND (eep.ProcedureType IS NULL OR eep.ProcedureType = @ProcedureType) 
					AND CONVERT(varchar(10),eep.ExpectedDateTime, 103) = CONVERT(varchar(10),GETDATE(), 103)
					AND ISNULL(eep.STATUS, 0) = 0)
	BEGIN
		UPDATE ERS_ExpectedPatients
		SET [Status] = 1
		WHERE PatientId = @PatientId 
				AND (ProcedureType IS NULL OR ProcedureType = @ProcedureType) 
				AND CONVERT(varchar(10),ExpectedDateTime, 103) = CONVERT(varchar(10),GETDATE(), 103)
	END
END
GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------124 Create Table ERS_OperatingHospitals.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_OperatingHospitals](
	[OperatingHospitalId] [int] IDENTITY(1,1)  NOT NULL,
	[InternalHospitalID] [nvarchar](150) NULL,
	[NHSHospitalID] [nvarchar](150) NULL,
	[HospitalName] [nvarchar] (150) NOT NULL,
	[ContactNumber] [nvarchar] (150) NULL,
	[HDCKey] [varchar] (10) NULL,
	[ReportExportPath] [varchar](500) NULL,
	PRIMARY KEY CLUSTERED ([OperatingHospitalId] ASC)
) ON [PRIMARY]

GO

IF RTRIM(LTRIM((SELECT OperatingHospitals FROM #variables))) <> ''
BEGIN
	INSERT INTO ERS_OperatingHospitals (HospitalName)
	SELECT [item] FROM dbo.fnSplitString((SELECT OperatingHospitals FROM #variables),',') 
END
ELSE IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND  TABLE_NAME = 'Operating Hospital'))
BEGIN
	INSERT INTO ERS_OperatingHospitals (HospitalName)
	SELECT [name] FROM [Operating Hospital] 
END

--INSERT INTO ERS_OperatingHospitals (OperatingHospitalId, HospitalName, ContactNumber) VALUES ('1', 'Glenfield General Hospital', '0208 123 456')
--INSERT INTO ERS_OperatingHospitals (OperatingHospitalId, HospitalName, ContactNumber) VALUES ('2', 'St Georges Hospital', '0208 789 456')

--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_UserOperatingHospitals](
	[UniqueId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[OperatingHospitalId] [int] NOT NULL,
 CONSTRAINT [ERS_ERS_UserOperatingHospitals] PRIMARY KEY CLUSTERED 
(
	[UniqueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

INSERT INTO ERS_UserOperatingHospitals
SELECT UserId, OperatingHospitalId FROM ERS_Users, ERS_OperatingHospitals
--------------------------------------------------------------------------------------------------------------------


-------------------------------------101a Create Table ERS_ProcedureType.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_ProcedureTypes](
	[TypeId]			[int]		IDENTITY(1,1) NOT NULL,
	[ProcedureTypeId] [int] NOT NULL,
	[ProcedureType] [varchar] (200) NOT NULL,
	[ProductTypeId] [int] NOT NULL,
	[Suppressed] [bit] NOT NULL CONSTRAINT DF_ProcedureTypes_Suppressed DEFAULT 0,
	[ReportHeader] [varchar](500) NULL,
	[NedExportRequired]	[bit] not null CONSTRAINT DF_ProcedureTypes_NedExportRequired DEFAULT 0,
	[SchedulerProc] [bit] NOT NULL CONSTRAINT DF_ProcedureTypes_SchedulerProc DEFAULT 0,
	[SchedulerProcName] [varchar] (50) NULL,
	[SchedulerDiagnostic] [bit] NOT NULL CONSTRAINT DF_ERS_ProcedureTypes_SchedulerDiagnostic DEFAULT 0,
	[SchedulerTherapeutic] [bit] NOT NULL CONSTRAINT DF_ERS_ProcedureTypes_SchedulerTherapeutic DEFAULT 0,
	[IsGI] [bit] NULL,
	[OperatingHospitalId] INT NULL CONSTRAINT DF_ERS_ProcedureTypes_OperatingHospitalId DEFAULT 1,
	[HDCKey] [varchar] (10) NULL,
	[HL7Code] [varchar] (50) NULL,
	CONSTRAINT [UQ_ProcedureTypes] UNIQUE ([OperatingHospitalId], [ProcedureTypeId]),
	CONSTRAINT [PK_ProcedureTypesId] PRIMARY KEY CLUSTERED ([TypeId] ASC),
	--CONSTRAINT [FK_ProcedureTypes_OperatingHospitalId] FOREIGN KEY (OperatingHospitalID) REFERENCES dbo.ERS_OperatingHospitals (OperatingHospitalId)
) ON [PRIMARY]

GO

--CREATE NONCLUSTERED INDEX [IX_ERS_ProceduresTypes_ProcedureTypeId] ON [dbo].[ERS_ProcedureTypes] ([ProcedureTypeId]);

INSERT [dbo].[ERS_ProcedureTypes] 
([ProcedureTypeId], [ProcedureType], [ProductTypeId], [Suppressed], 
[ReportHeader], [NedExportRequired], [SchedulerProc], [SchedulerProcName],[SchedulerDiagnostic],[SchedulerTherapeutic],[HL7Code]) 
VALUES 
	  (1, N'Gastroscopy', 1, 0, N'GASTROSCOPY REPORT', 1, 1, 'OGD', 1, 1,'OGD')
	, (2, N'ERCP', 1, 0, N'ERCP REPORT', 1, 1, 'ERCP', 0, 1, 'ERCP')
	, (3, N'Colonoscopy', 1, 0, N'COLONOSCOPY REPORT', 1, 1, 'COL', 1, 1,'COL')
	, (4, N'Sigmoidscopy', 1, 0, N'SIGMOIDOSCOPY REPORT', 0, 1, 'SIG', 1, 1,'SIG')
	, (5, N'Proctoscopy', 1, 0, N'PROCTOSCOPY REPORT', 0, 1, 'PROCT', 1, 1,'PROCT')
	, (6, N'EUS (OGD)', 1, 0, N'ENDOSCOPIC ULTRASOUND(UGI) REPORT', 0, 1, 'EUS', 1, 1,'EUS')
	, (7, N'EUS (HPB)', 1, 0, N'ENDOSCOPIC ULTRASOUND(HPB) REPORT', 0, 1, 'EUS HPB', 1, 1,'EUS HPB')
	, (8, N'Ent - Antegrade', 1, 0, N'ENTEROSCOPY (ANTEGRADE) REPORT', 0, 1, 'ENT ante',0,0,'ENT ante')
	, (9, N'Ent - Retrograde', 1, 0, N'ENTEROSCOPY (RETROGRADE) REPORT', 0, 1, 'ENT retro',0,0,'ENT retro')
	, (10, N'Bronchoscopy', 2, 0, N'BRONCHOSCOPY REPORT', 0, 0, NULL,0,0,'BRONC')
	, (11, N'EBUS', 2, 0, NULL, 0, 0, NULL,0,0,'EBUS')
	, (12, N'Thoracoscopy', 2, 0, NULL, 0, 0, NULL,0,0,'THORAC')
	, (13, N'Flexi', 3, 0, NULL, 1, 0, NULL,0,0,'FLEXI')
	, (14, N'Rigid', 3, 0, N'SIGMOIDOSCOPY REPORT', 0, 0, NULL,0,0,'SIG')
	, (15, N'PEG', 0, 0, NULL, 0, 1, 'PEG',0,0,'PEG')
	, (16, N'BOWEL screening', 0, 0, NULL, 0, 1, 'BOWEL screening',0,0,'')
	, (17, N'BOWEL scope', 0, 0, NULL, 0, 1, 'BOWEL scope',0,0,'')

GO

CREATE TABLE [dbo].[ERS_ProceduresReporting](
	[ProcedureId]		INT			 NOT NULL,
	[PP_PatAddress]		NVARCHAR(255) NULL,
	[PP_RefHosp]		NVARCHAR(255) NULL,
	[PP_CNN]			NVARCHAR(50) NULL,
	[PP_RepDateAndTime] NVARCHAR(50) NULL,
	[PP_RepType]		NVARCHAR(255) NULL,
	[PP_GP]				NVARCHAR(255) NULL,
	[PP_PatStatus]		NVARCHAR(255) NULL,
	[PP_Ward]			NVARCHAR(255) NULL,
	[PP_RefCons]		NVARCHAR(255) NULL,
	[PP_Endos]			NVARCHAR(255) NULL,
	[PP_Instrument]		NVARCHAR(255) NULL,
	[PP_Premed]			NVARCHAR(2000) NULL,
	[PP_Indic]			NVARCHAR(4000) NULL,
	[PP_MainReportBody] NVARCHAR(MAX) NULL,
	[PP_Diagnoses]		NVARCHAR(MAX) NULL,
	[PP_Therapies]		NVARCHAR(MAX) NULL,
	[PP_SpecimenTaken]	NVARCHAR(MAX) NULL,
	[PP_Rx]				NVARCHAR(2000) NULL,
	[PP_Followup]		NVARCHAR(2000) NULL,
	[PP_Coding]			NVARCHAR(2000) NULL,
	[PP_AdviceAndComments] NVARCHAR(MAX) NULL,
	[PP_EndoComments]	NVARCHAR(MAX) NULL,
	[PP_InstForCareHeading] NVARCHAR(255) NULL,
	[PP_InstForCare]	NVARCHAR(1000) NULL,
	[PP_InstForCareWithLinks] NVARCHAR(MAX) NULL,
	[TPP_MainReportBody] NVARCHAR(MAX) NULL,
	[TPP_Therapies]		NVARCHAR(MAX) NULL,
	[TPP_SpecimenTaken] NVARCHAR(MAX) NULL,
	[PP_Endo1]			NVARCHAR(200) NULL,
	[PP_CCRefCons]		NVARCHAR(200) NULL,
	[PP_CCOther]		NVARCHAR(200) NULL,
	[PP_CCPatient]		NVARCHAR(200) NULL,
	[PP_RepHead]		NVARCHAR(80) NULL,
	[PP_RepSubHead]		NVARCHAR(80) NULL,
	[PP_OpHosp]			NVARCHAR(150) NULL,
	[PP_Room_ID]		NVARCHAR(50) NULL,
	[PP_Priority]		NVARCHAR(50) NULL,
	[PP_DNA]			NVARCHAR(100) NULL,
	[PP_NPSAalert]		NVARCHAR(1000) NULL,
	[PP_BBPS]			NVARCHAR(255) NULL,
	[PP_Site_Legend]	NVARCHAR(MAX) NULL,
	[PP_AdviceAndComments_Initial] NVARCHAR(MAX) NULL,
	[PP_Followup_Initial] NVARCHAR(MAX) NULL,
	[PP_Bowel_Prep]		NVARCHAR(2000) NULL,
	[PP_GPName]			NVARCHAR(255) NULL,
	[PP_GPAddress]		NVARCHAR(4000) NULL,
	[PP_ResectedColon]	NVARCHAR(100) NULL,
	[PP_Pathology]		NVARCHAR(MAX) NULL,
	[Summary]			NVARCHAR(MAX) NULL,
	[SummaryWithLinks]	NVARCHAR(MAX) NULL
 CONSTRAINT [PK_Procedures_Reporting] PRIMARY KEY 
([ProcedureId] ASC) ON [PRIMARY]
) 

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_ProceduresReporting_Updated -------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ProceduresReporting_Updated', 'TR';
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER TR_ProceduresReporting_Updated
   ON  ERS_ProceduresReporting
   AFTER INSERT, UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @ProcedureId int
	SELECT @ProcedureId = ProcedureId FROM INSERTED
	
	UPDATE ERS_Procedures SET ReportUpdated = 1 WHERE ProcedureID = @ProcedureID AND ISNULL(ReportUpdated, 0) <> 1

END
GO


CREATE TABLE [dbo].[ERS_Sites](
	[SiteId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureId] [int],
	[SiteNo] [int] NOT NULL,
	[AreaNo] [int] NOT NULL, 
	[RegionId] [int] NOT NULL,
	[XCoordinate] [int] NOT NULL,
	[YCoordinate] [int] NOT NULL,
	[AntPos] [tinyint],
	[PositionSpecified] [bit],
	[DiagramHeight] [int] NOT NULL,
	[DiagramWidth] [int] NOT NULL,
	[SiteSummary] [varchar] (max),
	[SiteSummarySpecimens] [varchar] (max),
	[SiteSummaryTherapeutics] [varchar] (max),
	[SiteSummaryWithLinks] [varchar] (max),
	[SiteSummarySpecimensWithLinks] [varchar] (max),
	[SiteSummaryTherapeuticsWithLinks] [varchar] (max),
	[AdditionalNotes] [varchar] (max),
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [PK_Sites] PRIMARY KEY CLUSTERED ([SiteId]) ,
	CONSTRAINT [FK_Sites_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_RecordCount](
	[RecordCountId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureId] [int] NOT NULL,
	[SiteId] [int] NULL,
	[Identifier] [varchar] (500) NOT NULL,
	[RecordCount] [int] NOT NULL,
	CONSTRAINT [PK_RecordCount] PRIMARY KEY CLUSTERED ([RecordCountId]) ,
	CONSTRAINT [FK_RecordCount_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId]),
	CONSTRAINT [FK_RecordCount_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_Photos](
	[PhotoId] [int] IDENTITY(1,1) NOT NULL,
	[PhotoName] [varchar](500) NOT NULL,
	[PhotoBlob] [varbinary](max) NULL,
	[ProcedureId] [int] NOT NULL,
	[SiteId] [int] NULL,
	[IncludeInReport] [bit] NULL,
	[DateTimeStamp] [datetime] NULL,
	CONSTRAINT [PK_ERS_Photos] PRIMARY KEY CLUSTERED ([PhotoId]),
	CONSTRAINT [FK_Photos_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId]),
	CONSTRAINT [FK_Photos_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId])
) ON [PRIMARY]
GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_ProcedurePhotos_Updated -------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ProcedurePhotos_Updated', 'TR';
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER TR_ProcedurePhotos_Updated
   ON  ERS_ProceduresReporting
   AFTER INSERT, UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @ProcedureId int
	SELECT @ProcedureId = ProcedureId FROM INSERTED
	
	UPDATE ERS_Procedures SET ReportUpdated = 1 WHERE ProcedureID = @ProcedureID AND ISNULL(ReportUpdated, 0) <> 1

END
GO


CREATE TABLE [dbo].[ERS_Cache](
	[CacheId] [int] IDENTITY(1,1) NOT NULL,
	[PhotoBlob] [varbinary](max) NOT NULL,
	--[ProcedureId] [int] NOT NULL,
	--[HostAddress] [varchar](20) NOT NULL,
	[HostName] [varchar](100) NOT NULL,
	[HostFullName] [varchar](200) NULL,
	[CapturedOn] [datetime] NOT NULL CONSTRAINT DF_Cache_CapturedOn DEFAULT GETDATE(),
	[Used] [bit] NOT NULL CONSTRAINT DF_Cache_Used DEFAULT 0,
	CONSTRAINT [PK_ERS_Cache] PRIMARY KEY CLUSTERED ([CacheId]),
	--CONSTRAINT [FK_Cache_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId]),
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_PCLog](
	[PCLog_ID] [int] IDENTITY(1,1) NOT NULL,
	[ClientPCName] [varchar](200) NOT NULL,
    [UserName] [varchar](100) NOT NULL,
    [LockedPatientID] [int] NULL,
    [LockedOn] [datetime] NULL,
	[OperatingHospitalID] [int] NOT NULL,
	[LogOutBy] [varchar](150) NULL,
	[LoggedOutOn] [datetime] NULL,
	[DateCreated] [datetime] NULL CONSTRAINT DF_ERS_PCLog_DateCreated DEFAULT (getdate()),
 CONSTRAINT [PK_ERS_PCLog] PRIMARY KEY CLUSTERED ([PCLog_ID] ASC)
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_ResectedColon](
	[ResectedColonID] [int] NOT NULL,
	[ResectedColonText] [varchar](50) NULL,
	[Description] [varchar](50) NULL,
	CONSTRAINT [PK_ResectedColonID] PRIMARY KEY CLUSTERED ([ResectedColonID])
) ON [PRIMARY]
GO

INSERT INTO [dbo].[ERS_ResectedColon] ([ResectedColonID], [ResectedColonText], [Description])
VALUES 
	 (0, NULL, N'no resection (intact colon)')
	, (1, N'Abdomino-perineal resection', N'Abdomino-perineal resection')
	, (2, N'Low anterior resection', N'Low anterior resection')
	, (3, N'Sigmoid colectomy', N'Sigmoid colectomy')
	, (4, N'High anterior', N'High anterior')
	, (5, N'Transverse colectomy', N'Transverse colectomy')
	, (6, N'Right hemicolectomy', N'Right hemicolectomy')
	, (7, N'Extended right hemicolectomy', N'Extended right hemicolectomy')
	, (8, N'Subtotal colectomy with ileorectal anastomosis', N'Subtotal colectomy with ileorectal anastomosis')
	, (9, N'Total colectomy plus ileal pouch', N'Total colectomy plus ileal pouch')
	, (10, N'Pan procto colectomy', N'Pan procto colectomy')
	, (11, N'Left Hemicolectomy', N'Left Hemicolectomy')
	, (12, N'Hartman''s procedure', N'Hartman''s procedure')
	, (13, N'Subtotal colectomy,  ileostomy and rectal stump', N'Subtotal colectomy,  ileostomy and rectal stump')
	, (14, N'Ileocaecectomy', N'Ileocaecectomy');

GO


CREATE TABLE [dbo].[ERS_ResectedColonRegions](
	[ResectedColonRegionId] [int] NOT NULL identity(1,1),
	[ResectedColonID] [int] NOT NULL,
	[RegionId] [int] NOT NULL,
	CONSTRAINT [PK_ERS_ResectedColonRegions] PRIMARY KEY CLUSTERED ([ResectedColonRegionId])
) ON [PRIMARY]
GO

INSERT INTO [ERS_ResectedColonRegions]([ResectedColonID], [RegionId])
VALUES (1, 3016)
	, (1, 3017)
	, (1, 3018)
	, (1, 3019)
	, (1, 3020)
	, (1, 3021)

	, (2, 3012)
	, (2, 3013)
	, (2, 3014)
	, (2, 3015)
	, (2, 3016)
	, (2, 3017)
	, (2, 3018)
	, (2, 3019)
	, (2, 3020)

	, (3, 3016)
	, (3, 3017)
	, (3, 3018)
	, (3, 3019)

	, (4, 3011)
	, (4, 3012)
	, (4, 3013)
	, (4, 3014)
	, (4, 3015)
	, (4, 3016)
	, (4, 3017)
	, (4, 3018)
	, (4, 3019)

	, (5, 3008)
	, (5, 3009)
	, (5, 3010)
	, (5, 3011)
	, (5, 3012)

	, (6, 3002)
	, (6, 3003)
	, (6, 3004)
	, (6, 3005)
	, (6, 3006)
	, (6, 3007)
	, (6, 3008)

	, (7, 3002)
	, (7, 3003)
	, (7, 3004)
	, (7, 3005)
	, (7, 3006)
	, (7, 3007)
	, (7, 3008)
	, (7, 3009)
	, (7, 3010)
	, (7, 3011)
	, (7, 3012)

	, (8, 3002)
	, (8, 3003)
	, (8, 3004)
	, (8, 3005)
	, (8, 3006)
	, (8, 3007)
	, (8, 3008)
	, (8, 3009)
	, (8, 3010)
	, (8, 3011)
	, (8, 3012)
	, (8, 3013)
	, (8, 3014)
	, (8, 3015)
	, (8, 3016)
	, (8, 3017)
	, (8, 3018)
	, (8, 3019)

	, (9, 3002)
	, (9, 3003)
	, (9, 3004)
	, (9, 3005)
	, (9, 3006)
	, (9, 3007)
	, (9, 3008)
	, (9, 3009)
	, (9, 3010)
	, (9, 3011)
	, (9, 3012)
	, (9, 3013)
	, (9, 3014)
	, (9, 3015)
	, (9, 3016)
	, (9, 3017)
	, (9, 3018)
	, (9, 3019)
	, (9, 3020)

	, (10, 3002)
	, (10, 3003)
	, (10, 3004)
	, (10, 3005)
	, (10, 3006)
	, (10, 3007)
	, (10, 3008)
	, (10, 3009)
	, (10, 3010)
	, (10, 3011)
	, (10, 3012)
	, (10, 3013)
	, (10, 3014)
	, (10, 3015)
	, (10, 3016)
	, (10, 3017)
	, (10, 3018)
	, (10, 3019)
	, (10, 3020)
	, (10, 3021)

	, (11, 3012)
	, (11, 3013)
	, (11, 3014)
	, (11, 3015)
	, (11, 3016)
	, (11, 3017)

	, (12, 3014)
	, (12, 3015)
	, (12, 3016)
	, (12, 3017)

	, (13, 3002)
	, (13, 3003)
	, (13, 3004)
	, (13, 3005)
	, (13, 3006)
	, (13, 3007)
	, (13, 3008)
	, (13, 3009)
	, (13, 3010)
	, (13, 3011)
	, (13, 3012)
	, (13, 3013)
	, (13, 3014)
	, (13, 3015)
	, (13, 3016)
	, (13, 3017)
	, (13, 3018)
	, (13, 3019)

	, (14, 3001)
	, (14, 3004)
GO


CREATE TABLE [dbo].[ERS_XMLMap](
	[FieldName] [varchar](50) NOT NULL,
	[NodeName] [varchar](50) NULL,
	[Group] [varchar](10) NULL,
	[Active] [smallint] NULL,
	[OrderID] [int] NULL,
 CONSTRAINT [PK_ERS_XMLMap] PRIMARY KEY CLUSTERED ([FieldName] ASC)
) ON [PRIMARY]

INSERT INTO [dbo].[ERS_XMLMap] ([FieldName], [NodeName], [Group], [Active], [OrderID])
VALUES 
	(N'Endoscribe comments', N'Comments', N'LS', -1, 9)
	, (N'PP_AdviceAndComments', N'Advice/comments', N'LS', -1, 7)
	, (N'PP_AdviceAndComments_Initial', N'Advice/comments initial', N'LS', -1, NULL)
	, (N'PP_BBPS', N'BBPS', N'LS', -1, NULL)
	, (N'PP_CCOther', N'CCOther', N'RD', -1, NULL)
	, (N'PP_CCPatient', N'CCPatient', N'RD', -1, NULL)
	, (N'PP_CCRefCons', N'CCRefCons', N'RD', -1, NULL)
	, (N'PP_Diagnoses', N'Diagnoses', N'LS', -1, 4)
	, (N'PP_DNA', N'DNA', N'LS', -1, NULL)
	, (N'PP_Endo1', N'Endo1', N'RD', -1, NULL)
	, (N'PP_Endos', N'Consultant/Endoscopist', N'RS', -1, NULL)
	, (N'PP_Followup', N'Follow up', N'LS', -1, 8)
	, (N'PP_Followup_Initial', N'Follow up initial', N'LS', -1, NULL)
	, (N'PP_Indic', N'Indications', N'LS', -1, 0)
	, (N'PP_InstForCare', N'InstForCare', N'LS', -1, 10)
	, (N'PP_InstForCareHeading', N'InstForCareHeading', N'LS', -1, 11)
	, (N'PP_Instrument', N'Instrument', N'RS', -1, NULL)
	, (N'PP_Coding', N'Coding', N'LS', -1, 1)
	, (N'PP_MainReportBody', N'Report', N'LS', -1, 2)
	, (N'PP_NPSAalert', N'NPSA Alert', N'RS', -1, NULL)
	, (N'PP_PatStatus', N'PatientStatus', N'GPD', -1, NULL)
	, (N'PP_Premed', N'Premedication', N'RS', -1, NULL)
	, (N'PP_Priority', N'Priority', N'GPD', -1, NULL)
	, (N'PP_RefCons', N'RefCons', N'GPD', -1, NULL)
	, (N'PP_RefHosp', N'RefHosp', N'GPD', -1, NULL)
	, (N'PP_RepDateAndTime', N'Report date and time', N'TEST', -1, NULL)
	, (N'PP_RepType', N'RptName', N'RD', -1, NULL)
	, (N'PP_ResectedColon', N'Resected colon', N'RS', -1, NULL)
	, (N'PP_Rx', N'Medication', N'LS', -1, 6)
	, (N'PP_Site_Legend', N'Site legend', N'RS', -1, NULL)
	, (N'PP_SpecimenTaken', N'Specimens taken', N'RS', -1, 4)
	, (N'PP_Therapies', N'Therapeutic procedures', N'LS', -1, 5)
	, (N'PP_Ward', N'Ward', N'GPD', -1, NULL)
	, (N'PP2_CompiledOn', N'CompiledOn', N'RD', -1, NULL)
	, (N'PP2_MainReportBody', N'Report Body', N'TEST', -1, NULL)
	, (N'PP2_Pathology', N'Pathology', N'LS', -1, NULL)
	, (N'PP2_PathologyAdenoma', N'PathologyAdenoma', N'LS', -1, NULL)
	, (N'PP2_PathologyDate', N'PathologyDate', N'LS', -1, NULL)
	, (N'PP2_SiteData', N'Site data', N'LS', -1, 3)
	, (N'Procedure date', N'ProcedureDate', N'RD', -1, NULL)
	, (N'Report style', N'RptStyle', N'RD', -1, NULL)
	, (N'Time of procedure', N'ProcedureTime', N'RD', -1, NULL)

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------103a Create CRM Tables-------------------------------------
--------------------------------------------------------------------------------------------------------------------

--CREATE TABLE [dbo].[ERS_CRM_Customers](
--	[CustomerID] [int] IDENTITY(1,1) NOT NULL,
--	[HospitalID] [int] NULL,
--	[CustomerName] [varchar](50) NULL,
--	[LoginUserID] [nvarchar](100) NOT NULL,
--	[Password] [nvarchar](50) NOT NULL,
--	[LastLoggedIn] [datetime] NULL,
--	[Gastroscopy] [bit] NULL,
--	[Cystoscopy] [bit] NULL,
--	[Bronchoscopy] [bit] NULL,
--	[ImGrabEnabled] [bit] NULL,
--	[MaintenanceDue] [date] NULL,
--	[RecordCreated] [datetime] NOT NULL,
--	[LastUpdated] [datetime] NOT NULL,
-- CONSTRAINT [PK_CRM_Customers] PRIMARY KEY CLUSTERED ([CustomerID] ASC)
--) ON [PRIMARY]


--GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------103b Create Table ERS_StartupSettings-------------------------------------
--------------------------------------------------------------------------------------------------------------------
DECLARE @SearchCriteria int = 2,				@SearchCriteriaOption int = 1,	@SearchCriteriaOptionPatientCount int = 0,	@SearchCriteriaOptionDate datetime = NULL,	@SearchCriteriaOptionMonths int = 0,	
		@ExcludeDeadOption bit = 0,				@ExcludeUGI bit = 0,			@AllProcedures bit = 1,						@Gastroscopy bit = 0,						@ERCP bit = 0,    
		@Colonoscopy bit = 0,					@Proctoscopy bit = 0,			@OutstandingCLO bit = 0,					@OrderListOptions int = 1

IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'ERS_StartupSettings'))
BEGIN
    SELECT TOP(1) @SearchCriteria= [SearchCriteria],			@SearchCriteriaOption = [SearchCriteriaOption],		@SearchCriteriaOptionPatientCount =[SearchCriteriaOptionPatientCount]
				,@SearchCriteriaOptionDate =[SearchCriteriaOptionDate],											@SearchCriteriaOptionMonths =[SearchCriteriaOptionMonths]
				,@ExcludeDeadOption = [ExcludeDeadOption],	@ExcludeUGI = [ExcludeUGI],							@AllProcedures = [AllProcedures]
				,@Gastroscopy =[Gastroscopy],				@ERCP =[ERCP],										@Colonoscopy =[Colonoscopy]
				,@Proctoscopy = [Proctoscopy],				@OutstandingCLO =[OutstandingCLO],					@OrderListOptions =[OrderListOptions]
	FROM [ERS_StartupSettings]


END

EXEC dbo.DropIfExist 'ERS_StartupSettings', 'T';

CREATE TABLE [dbo].[ERS_StartupSettings](
       [ID] [int] IDENTITY(1,1) NOT NULL,
       [SearchCriteria] [int] NULL,
       [SearchCriteriaOption] [int] NULL,
       [SearchCriteriaOptionPatientCount] [int] NULL,
       [SearchCriteriaOptionDate] [datetime] NULL,
       [SearchCriteriaOptionMonths] [int] NULL,
       [ExcludeDeadOption] [bit] NULL CONSTRAINT [DF_ERS_StartupSettings_ExcludeDeadOption] DEFAULT 0,
       [ExcludeUGI] [bit] NULL CONSTRAINT [DF_ERS_StartupSettings_ExcludeUGI] DEFAULT 0,
       [AllProcedures] [bit] NULL,
       [Gastroscopy] [bit] NULL,
       [ERCP] [bit] NULL,
       [Colonoscopy] [bit] NULL,
       [Proctoscopy] [bit] NULL,
       [OutstandingCLO] [bit] NULL,
       [OrderListOptions] [int] NULL,
	   [ShowWorklistOnStartup] [bit] NOT NULL CONSTRAINT [DF_ERS_StartupSettings_ShowWorklist] DEFAULT 0,
	   [HideStartupCharts] [bit] NOT NULL CONSTRAINT [DF_ERS_StartupSettings_HideStartupCharts] DEFAULT 0,
	   [UserId] [int] NULL,
	   [OperatingHospitalId] [int],
	   [WhoUpdatedId][int]		NULL Default 0,
	   [WhoCreatedId][int]		NULL Default 0,
	   [WhenCreated] [DATETIME]	NULL Default GetDate(),
	   [WhenUpdated] [DATETIME]	NULL Default GetDate(),
	CONSTRAINT [PK_ERS_StartupSettings] PRIMARY KEY CLUSTERED ([ID])
) ON [PRIMARY]



INSERT [dbo].[ERS_StartupSettings] ([SearchCriteria], [SearchCriteriaOption], [SearchCriteriaOptionPatientCount], [SearchCriteriaOptionDate], [SearchCriteriaOptionMonths], 
									[ExcludeDeadOption], [ExcludeUGI], [AllProcedures], [Gastroscopy], [ERCP], [Colonoscopy], [Proctoscopy], [OutstandingCLO], [OrderListOptions], [OperatingHospitalId]) 
SELECT	@SearchCriteria,				@SearchCriteriaOption,	@SearchCriteriaOptionPatientCount,	@SearchCriteriaOptionDate,	@SearchCriteriaOptionMonths,	
		@ExcludeDeadOption,				@ExcludeUGI,			@AllProcedures,						@Gastroscopy,				@ERCP,    
		@Colonoscopy,					@Proctoscopy,			@OutstandingCLO,					@OrderListOptions,			eoh.OperatingHospitalId 
FROM dbo.ERS_OperatingHospitals eoh

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------104 Create Table RegionPaths.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Regions](
	[RegionId] [int] NOT NULL,
	[ProcedureType] [int] NOT NULL,
	[DiagramId] [int] NOT NULL,
	[Region] [varchar] (500),
	[Path] [varchar](max) NOT NULL,
	[is3D] [bit] NOT NULL,
	[Order] [int] NOT NULL,
	[Direction] [varchar] (2) NOT NULL
	CONSTRAINT [UQ_Regions] UNIQUE (RegionId),
	CONSTRAINT [PK_Regions] PRIMARY KEY CLUSTERED ([RegionId]),

)

CREATE INDEX IQ_Regions ON ERS_Regions (ProcedureType, [Order])

GO

--************************* Gastroscopy *************************

INSERT INTO [dbo].[ERS_Regions] ([RegionId], [ProcedureType], [DiagramId], [Region], [Path], [is3D], [Order], [Direction])
VALUES 
	  (1001, 1, 1, N'Right Upper Oesophagus', N'M 192, 3,  208, 3,  208, 80,  192, 80 z', 0, 1, N'YA')
	, (1002, 1, 1, N'Upper Oesophagus', N'M 208, 3,  232, 3,  232, 80,  208, 80 z', 0, 1, N'YA')
	, (1003, 1, 1, N'Left Upper Oesophagus', N'M 232, 3,  248, 3,  248, 80,  232, 80 z', 0, 1, N'YA')
	, (1004, 1, 1, N'Right Middle Oesophagus', N'M 192, 80,  208, 80,  208, 160,  192, 160 z', 0, 2, N'YA')
	, (1005, 1, 1, N'Middle Oesophagus', N'M 208, 80,  232, 80,  232, 160,  208, 160 z', 0, 2, N'YA')
	, (1006, 1, 1, N'Left Middle Oesophagus', N'M 232, 80,  248, 80,  248, 160,  232, 160 z', 0, 2, N'YA')
	, (1007, 1, 1, N'Right Lower Oesophagus', N'M 192, 160,  208, 160,  208, 221,  216, 240,  200, 244,  192, 223 z', 0, 3, N'YA')
	, (1008, 1, 1, N'Lower Oesophagus', N'M 208, 160,  232, 160,  232, 221,  239, 233,  216, 240,  208, 221 z', 0, 3, N'YA')
	, (1009, 1, 1, N'Left Lower Oesophagus', N'M 232, 160,  248, 160,  248, 218,  253, 229,  239, 233,  232, 221 z', 0, 3, N'YA')
	, (1010, 1, 1, N'Cardia', N'M 200, 244,  253, 229,  261, 238,  279, 245,  238, 284,  213, 266 z', 0, 4, N'YA')
	, (1011, 1, 1, N'Fundus', N'M 268, 255,  279, 245,  297, 239,  320, 226,  368, 217,  412, 229,  439, 252,  460, 285 z', 0, 5, N'YA')
	, (1012, 1, 1, N'Lesser Curve Upper Body', N'M 238, 284,  248, 274,  255, 292,  262, 322,  250, 320 z', 0, 6, N'YA')
	, (1013, 1, 1, N'Upper Body', N'M 248, 274,  268, 255,  439, 282,  447, 303,  449, 332,  442, 355,  262, 322,  255, 292 z', 0, 6, N'YA')
	, (1014, 1, 1, N'Greater Curve Upper Body', N'M 439, 282,  460, 285,  464, 305,  464, 330,  459, 358,  442, 355,  449, 332,  447, 303 z', 0, 6, N'YA')
	, (1015, 1, 1, N'Lesser Curve Middle Body', N'M 250, 320,  262, 322,  263, 336,  261, 356,  249, 348 z', 0, 7, N'YA')
	, (1016, 1, 1, N'Middle Body', N'M 262, 322,  442, 355,  419, 398,  399, 418,  380, 437,  261, 356,  263, 336 z', 0, 7, N'YA')
	, (1017, 1, 1, N'Greater Curve Middle Body', N'M 442, 355,  459, 358,  433, 404,  414, 427,  392, 445,  380, 437,  419, 398 z', 0, 7, N'YA')
	, (1018, 1, 1, N'Angulus', N'M 249, 348,  261, 356,  254, 375,  241, 383,  238, 367,  245, 365 z', 0, 8, N'XD')
	, (1019, 1, 1, N'Lower Body', N'M 261, 356,  380, 437,  352, 452,  321, 463,  288, 468,  255, 468,  241, 383,  254, 375 z', 0, 8, N'XD')
	, (1020, 1, 1, N'Greater Curve Lower Body', N'M 380, 437,  392, 445,  363, 464,  332, 478,  289, 486,  258, 486,  255, 468,  288, 468,  321, 463,  352, 452 z', 0, 8, N'XD')
	, (1021, 1, 1, N'Lesser Curve Antrum', N'M 238, 367,  241, 383,  196, 386,  168, 383,  171, 370,  199, 374 z', 0, 9, N'XD')
	, (1022, 1, 1, N'Antrum', N'M 241, 383,  255, 468,  195, 452,  157, 423,  168, 383,  196, 386 z', 0, 9, N'XD')
	, (1023, 1, 1, N'Greater Curve Antrum', N'M 255, 468,  258, 486,  218, 478,  193, 471,  152, 440,  157, 423,  195, 452,  255, 468 z', 0, 9, N'XD')
	, (1024, 1, 1, N'Lesser Curve Prepyloric Region', N'M 171, 370,  168, 383,  139, 381,  143, 368 z', 0, 10, N'XD')
	, (1025, 1, 1, N'Prepyloric Region', N'M 168, 383,  157, 423,  130, 411,  139, 381 z', 0, 10, N'XD')
	, (1026, 1, 1, N'Greater Curve Prepyloric Region', N'M 157, 423,  152, 440,  126, 425,  130, 411 z', 0, 10, N'XD')
	, (1027, 1, 1, N'Superior Pylorus', N'M 143, 368,  139, 381,  120, 373,  126, 360 z', 0, 11, N'XD')
	, (1028, 1, 1, N'Pylorus', N'M 139, 381,  130, 411,  111, 394,  120, 373 z', 0, 11, N'XD')
	, (1029, 1, 1, N'Inferior Pylorus', N'M 130, 411,  126, 425,  105, 406,  111, 394 z', 0, 11, N'XD')
	, (1030, 1, 1, N'Superior Bulb', N'M 126, 360,  120, 373,  99, 363,  80, 362,  75, 349,  103, 349 z', 0, 12, N'XD')
	, (1031, 1, 1, N'Bulb', N'M 120, 373,  111, 394,  91, 393,  80, 362,  99, 363 z', 1, 12, N'XD')
	, (1032, 1, 1, N'Inferior Bulb', N'M 111, 394,  105, 406,  95, 404,  91, 393 z', 0, 12, N'XD')
	, (1033, 1, 1, N'Lateral Wall First Part', N'M 75, 349,  80, 362,  56, 377,  46, 406,  34, 400,  45, 369 z', 0, 13, N'YA')
	, (1034, 1, 1, N'First Part', N'M 80, 362,  91, 393,  82, 404,  78, 422,  46, 406,  56, 377 z', 1, 13, N'YA')
	, (1035, 1, 1, N'Medial First Part', N'M 91, 393,  95, 405,  90, 414,  92, 429,  78, 422,  82, 404 z', 0, 13, N'YA')
	, (1036, 1, 1, N'Lateral Wall Second Part', N'M 34, 400,  46, 406,  47, 431,  56, 457,  43, 457,  36, 432 z', 0, 14, N'YA')
	, (1037, 1, 1, N'Second Part', N'M 46, 406,  78, 422,  90, 457,  56, 457,  47, 431 z', 1, 14, N'YA')
	, (1038, 1, 1, N'Medial Second Part', N'M 78, 422,  92, 429,  104, 457,  90, 457 z', 0, 14, N'YA')
	, (1039, 1, 1, N'Third Part', N'M 43, 457,  104, 457,  141, 497,  68, 497 z', 0, 15, N'YA')
	--************************* ERCP *************************
	, (2001, 2, 2, N'Bifurcation', N'M 233, 205,  234, 184,  231, 177,  246, 169,  250, 176,  256, 172,  260, 189,  253, 206 z', 0, 0, N'')
	, (2002, 2, 2, N'Left Hepatic Ducts', N'M 256, 172,  276, 161,  297, 155,  312, 138,  345, 122,  350, 116,  357, 130,  350, 136,  326, 146,  311, 156,  304, 167,  260, 189 z', 0, 0, N'')
	, (2003, 2, 2, N'Right Hepatic Ducts', N'M 231, 177,  212, 156,  182, 140,  156, 133,  158, 116,  194, 126,  228, 145,  246, 169 z', 0, 0, N'')
	, (2004, 2, 2, N'Left intra-hepatic ducts', N'M 350, 116,  356, 111,  371, 77,  376, 96,  372, 108,  400, 107,  381, 120,  357, 130 z', 0, 0, N'')
	, (2005, 2, 2, N'Right intra-hepatic ducts', N'M 156, 133,  140, 134,  112, 147,  84, 177,  80, 172,  96, 145,  116, 129,  137, 118,  131, 107,  125, 88,  129, 88,  145, 108,  158, 116 z', 0, 0, N'')
	, (2006, 2, 2, N'Common Hepatic Duct', N'M 233, 205,  253, 206,  240, 264,  227, 252 z', 0, 0, N'')
	, (2007, 2, 2, N'Right Hepatic Lobe', N'M 282, 47,  270, 97,  267, 123,  269, 163,  275, 218,  189, 235,  75, 250,  47, 262,  16, 296,  6, 249,  2, 183,  6, 139,  19, 94,  41, 47,  71, 18,  117, 1,  195, 8,  274, 31 z', 0, 0, N'')
	, (2008, 2, 2, N'Left Hepatic Lobe', N'M 282, 47,  270, 97,  267, 123,  269, 163,  275, 218,  303, 215,  347, 203,  399, 181,  437, 153,  468, 122,  487, 95,  499, 66,  481, 43,  307, 33 z', 0, 0, N'')
	, (2009, 2, 2, N'Cystic Duct', N'M 227, 252,  222, 273,  209, 262,  211, 244 z', 0, 0, N'')
	, (2010, 2, 2, N'Gall Bladder', N'M 209, 262,  203, 268,  196, 286,  175, 305,  152, 334,  131, 348,  110, 350,  92, 332,  90, 313,  98, 293,  127, 264,  164, 248,  194, 241,  211, 244 z', 0, 0, N'')
	, (2011, 2, 2, N'Common Bile Duct', N'M 227, 252,  240, 264,  233, 300,  216, 334,  203, 356,  165, 400,  158, 396,  196, 347,  216, 307,  221, 277 z', 0, 0, N'')
	, (2012, 2, 2, N'Main Pancreatic Duct', N'M 165, 400,  184, 395,  204, 395,  208, 390,  208, 376,  216, 366,  228, 364,  257, 367,  286, 361,  308, 351,  328, 348,  351, 350,  379, 354,  402, 352,  403, 356,  381, 365,  373, 366,  363, 365,  348, 363,  333, 362,  296, 371,  275, 378,  261, 380,  240, 380,  221, 379,  220, 391,  218, 399,  208, 409,  188, 406,  176, 407,  159, 418,  159, 415 z', 0, 0, N'')
	, (2013, 2, 2, N'Accessory Pancreatic Duct', N'M 162, 369,  167, 357,  186, 353,  205, 356,  216, 366,  208, 376,  201, 368,  196, 365,  183, 363,  170, 365 z', 0, 0, N'')
	, (2014, 2, 2, N'Tail', N'M 380, 327,  415, 327,  431, 329,  444, 336,  447, 351,  434, 368,  408, 382,  384, 388,  380, 388 z', 0, 0, N'')
	, (2015, 2, 2, N'Body', N'M 380, 388,  343, 392,  322, 398,  300, 406,  286, 410,  266, 415,  254, 415,  240, 339,  271, 330,  294, 323,  325, 320,  380, 327 z', 0, 0, N'')
	, (2016, 2, 2, N'Neck', N'M 240, 339,  254, 415,  215, 337 z', 1, 0, N'')
	, (2017, 2, 2, N'Head', N'M 254, 415,  217, 399,  208, 409,  188, 406,  176, 407,  159, 418,  159, 415,  165, 400,  158, 396,  161, 381,  162, 369,  168, 356,  177, 343,  198, 339,  215, 337 z', 0, 0, N'')
	, (2018, 2, 2, N'Uncinate Process', N'M 254, 415,  217, 399,  208, 409,  188, 406,  176, 407,  159, 418,  159, 415,  165, 435,  171, 445,  184, 454,  195, 457,  210, 458,  227, 453,  243, 443,  251, 429 z', 0, 0, N'')
	, (2019, 2, 2, N'Major Papilla', N'M 158, 396,  157, 386,  154, 387,  145, 404,  144, 415,  150, 421,  159, 418,  159, 415,  165, 400 z', 0, 0, N'')
	, (2020, 2, 2, N'Minor Papilla', N'M 144, 365,  156, 361,  156, 372,  145, 374 z', 0, 0, N'')
	, (2021, 2, 2, N'Lateral Wall First Part', N'M 110, 356,  124, 352,  110, 382,  113, 401,  100, 404,  100, 382 z', 0, 0, N'')
	, (2022, 2, 2, N'Medial Wall First Part', N'M 161, 340,  183, 333,  182, 336,  167, 357,  162, 369,  160, 377,  157, 386,  154, 387,  142, 395,  145, 374,  144, 365 z', 0, 0, N'')
	, (2023, 2, 2, N'First Part', N'M  161, 340,  144, 365,  145, 374,  142, 395,  113, 401,  110, 382,  124, 352 z', 1, 0, N'')
	, (2024, 2, 2, N'Lateral Wall Second Part', N'M 100, 404,  113, 401,  113, 426,  122, 447,  109, 451,  102, 431 z', 0, 0, N'')
	, (2025, 2, 2, N'Medial Wall Second Part', N'M 142, 395,  140, 416,  151, 438,  165, 435,  159, 418,  150, 421,  144, 415,  145, 404,  150, 394,  157, 386 z', 0, 0, N'')
	, (2026, 2, 2, N'Second Part', N'M 142, 395,  140, 416,  151, 438,  122, 447,  113, 426,  113, 401 z', 1, 0, N'')
	, (2027, 2, 2, N'Lateral Wall Third Part', N'M 109, 451,  122, 447,  132, 467,  149, 486,  138, 496,  120, 471 z', 0, 0, N'')
	, (2028, 2, 2, N'Medial Wall Third Part', N'M 151, 438,  165, 435,  171, 445,  184, 458,  172, 467,  159, 453 z', 0, 0, N'')
	, (2029, 2, 2, N'Third Part', N'M 122, 447,  151, 438,  159, 453,  172, 467,  149, 486,  132, 467 z', 1, 0, N'')
--************************* Colonoscopy *************************
	, (3001, 3, 3, N'Terminal Ileum', N'M 250, 185,  304, 245,  289, 287,  271, 281,  255, 294,  239, 305,  216, 302,  174, 261,  155, 224,  167, 218,  180, 218,  187, 195,  216, 181 z', 0, 1, N'XD')
	, (3002, 3, 3, N'Appendiceal Orifice', N'M 138, 297,  138, 280,  166, 280,  154, 297 z', 0, 2, N'YD')
	, (3003, 3, 3, N'Ileocecal Valve', N'M 137, 242,  158, 240,  158, 261,  137, 261 z', 0, 2, N'YD')
	, (3004, 3, 3, N'Caecum', N'M 174, 261,  167, 277,  186, 292,  179, 301,  154, 300,  140, 310,  102, 314,  75, 297,  65, 276,  155, 224 z', 0, 2, N'YD')
	, (3005, 3, 3, N'Proximal Ascending', N'M 155, 224,  65, 276,  56, 208,  145, 190,  144, 210 z', 0, 2, N'YD')
	, (3006, 3, 3, N'Mid Ascending', N'M 136, 149,  145, 190,  56, 208,  48, 162 z', 0, 2, N'YD')
	, (3007, 3, 3, N'Distal Ascending', N'M 130, 110,  129, 128,  136, 149,  48, 162,  42, 108 z', 0, 2, N'YD')
	, (3008, 3, 3, N'Hepatic Flexure', N'M 42, 108,  130, 110,  130, 20,  97, 20,  43, 61 z', 0, 2, N'YD')
	, (3009, 3, 3, N'Proximal Transverse', N'M 130, 20,  210, 38,  210, 120,  130, 110 z', 0, 3, N'XA')
	, (3010, 3, 3, N'Mid Transverse', N'M 210, 38,  286, 37,  298, 109,  210, 120 z', 0, 3, N'XA')
	, (3011, 3, 3, N'Distal Transverse', N'M 286, 37,  372, 16,  384, 92,  298, 109 z', 0, 3, N'XA')
	, (3012, 3, 3, N'Splenic Flexure', N'M 372, 16,  401, 0,  421, 0,  470, 16,  468, 92,  384, 92 z', 0, 4, N'YA')
	, (3013, 3, 3, N'Proximal Descending', N'M 384, 92,  468, 92,  462, 177,  374, 178 z', 0, 4, N'YA')
	, (3014, 3, 3, N'Mid Descending', N'M 462, 177,  374, 178,  365, 249,  455, 234 z', 0, 4, N'YA')
	, (3015, 3, 3, N'Distal Descending', N'M 448, 325,  354, 325,  365, 249,  455, 234 z', 0, 4, N'YA')
	, (3016, 3, 3, N'Proximal Sigmoid', N'M 354, 325,  448, 325,  436, 346,  435, 356,  424, 378,  414, 387,  405, 410,  388, 421,  332, 351 z', 0, 4, N'YA')
	, (3017, 3, 3, N'Proximal Sigmoid', N'M 382, 425,  368, 433,  365, 435,  339, 434,  310, 446,  283, 448,  283, 349,  325, 359,  332, 351,  388, 421 z', 0, 5, N'XD')
	, (3018, 3, 3, N'Distal Sigmoid', N'M 283, 348,  283, 448,  258, 439,  240, 442,  156, 365,  185, 340,  210, 338,  230, 342,  246, 355 z', 0, 5, N'XD')
	, (3019, 3, 3, N'Rectosigmoid Junction', N'M 150, 386,  156, 365,  240, 442,  225, 453 z', 0, 5, N'XD')
	, (3020, 3, 3, N'Rectum', N'M 150, 386,  225, 453,  217, 468,  177, 468,  146, 428 z', 0, 6, N'YA')
	, (3021, 3, 3, N'Anal Margin', N'M 177, 468,  217, 468,  215, 494,  187, 494,  177, 468 z', 0, 6, N'YA')
--************************* Sigmoidoscopy *************************
	, (4001, 4, 3, N'Terminal Ileum', N'M 250, 185,  304, 245,  289, 287,  271, 281,  255, 294,  239, 305,  216, 302,  174, 261,  155, 224,  167, 218,  180, 218,  187, 195,  216, 181 z', 0, 1, N'XD')
	, (4002, 4, 3, N'Caecum', N'M 174, 261,  167, 277,  186, 292,  179, 301,  154, 300,  140, 310,  102, 314,  75, 297,  65, 276,  155, 224 z', 0, 2, N'YD')
	, (4003, 4, 3, N'Appendiceal Orifice', N'M 138, 297,  138, 280,  166, 280,  154, 297 z', 0, 2, N'YD')
	, (4004, 4, 3, N'Ileocecal Valve', N'M 137, 242,  158, 240,  158, 261,  137, 261 z', 0, 2, N'YD')
	, (4005, 4, 3, N'Proximal Ascending', N'M 155, 224,  65, 276,  56, 208,  145, 190,  144, 210 z', 0, 2, N'YD')
	, (4006, 4, 3, N'Mid Ascending', N'M 136, 149,  145, 190,  56, 208,  48, 162 z', 0, 2, N'YD')
	, (4007, 4, 3, N'Distal Ascending', N'M 130, 110,  129, 128,  136, 149,  48, 162,  42, 108 z', 0, 2, N'YD')
	, (4008, 4, 3, N'Hepatic Flexure', N'M 42, 108,  130, 110,  130, 20,  97, 20,  43, 61 z', 0, 2, N'YD')
	, (4009, 4, 3, N'Proximal Transverse', N'M 130, 20,  210, 38,  210, 120,  130, 110 z', 0, 3, N'XA')
	, (4010, 4, 3, N'Mid Transverse', N'M 210, 38,  286, 37,  298, 109,  210, 120 z', 0, 3, N'XA')
	, (4011, 4, 3, N'Distal Transverse', N'M 286, 37,  372, 16,  384, 92,  298, 109 z', 0, 3, N'XA')
	, (4012, 4, 3, N'Splenic Flexure', N'M 372, 16,  401, 0,  421, 0,  470, 16,  468, 92,  384, 92 z', 0, 4, N'YA')
	, (4013, 4, 3, N'Proximal Descending', N'M 384, 92,  468, 92,  462, 177,  374, 178 z', 0, 4, N'YA')
	, (4014, 4, 3, N'Mid Descending', N'M 462, 177,  374, 178,  365, 249,  455, 234 z', 0, 4, N'YA')
	, (4015, 4, 3, N'Distal Descending', N'M 448, 325,  354, 325,  365, 249,  455, 234 z', 0, 4, N'YA')
	, (4016, 4, 3, N'Proximal Sigmoid', N'M 354, 325,  448, 325,  436, 346,  435, 356,  424, 378,  414, 387,  405, 410,  388, 421,  332, 351 z', 0, 4, N'YA')
	, (4017, 4, 3, N'Proximal Sigmoid', N'M 382, 425,  368, 433,  365, 435,  339, 434,  310, 446,  283, 448,  283, 349,  325, 359,  332, 351,  388, 421 z', 0, 5, N'XD')
	, (4018, 4, 3, N'Distal Sigmoid', N'M 283, 348,  283, 448,  258, 439,  240, 442,  156, 365,  185, 340,  210, 338,  230, 342,  246, 355 z', 0, 5, N'XD')
	, (4019, 4, 3, N'Rectosigmoid Junction', N'M 150, 386,  156, 365,  240, 442,  225, 453 z', 0, 5, N'XD')
	, (4020, 4, 3, N'Rectum', N'M 150, 386,  225, 453,  217, 468,  177, 468,  146, 428 z', 0, 6, N'YA')
	, (4021, 4, 3, N'Anal Margin', N'M 177, 468,  217, 468,  215, 494,  187, 494,  177, 468 z', 0, 6, N'YA')
--************************* Proctoscopy *************************
	, (5001, 5, 3, N'Terminal Ileum', N'M 250, 185,  304, 245,  289, 287,  271, 281,  255, 294,  239, 305,  216, 302,  174, 261,  155, 224,  167, 218,  180, 218,  187, 195,  216, 181 z', 0, 1, N'XD')
	, (5002, 5, 3, N'Caecum', N'M 174, 261,  167, 277,  186, 292,  179, 301,  154, 300,  140, 310,  102, 314,  75, 297,  65, 276,  155, 224 z', 0, 2, N'YD')
	, (5003, 5, 3, N'Appendiceal Orifice', N'M 138, 297,  138, 280,  166, 280,  154, 297 z', 0, 2, N'YD')
	, (5004, 5, 3, N'Ileocecal Valve', N'M 137, 242,  158, 240,  158, 261,  137, 261 z', 0, 2, N'YD')
	, (5005, 5, 3, N'Proximal Ascending', N'M 155, 224,  65, 276,  56, 208,  145, 190,  144, 210 z', 0, 2, N'YD')
	, (5006, 5, 3, N'Mid Ascending', N'M 136, 149,  145, 190,  56, 208,  48, 162 z', 0, 2, N'YD')
	, (5007, 5, 3, N'Distal Ascending', N'M 130, 110,  129, 128,  136, 149,  48, 162,  42, 108 z', 0, 2, N'YD')
	, (5008, 5, 3, N'Hepatic Flexure', N'M 42, 108,  130, 110,  130, 20,  97, 20,  43, 61 z', 0, 2, N'YD')
	, (5009, 5, 3, N'Proximal Transverse', N'M 130, 20,  210, 38,  210, 120,  130, 110 z', 0, 3, N'XA')
	, (5010, 5, 3, N'Mid Transverse', N'M 210, 38,  286, 37,  298, 109,  210, 120 z', 0, 3, N'XA')
	, (5011, 5, 3, N'Distal Transverse', N'M 286, 37,  372, 16,  384, 92,  298, 109 z', 0, 3, N'XA')
	, (5012, 5, 3, N'Splenic Flexure', N'M 372, 16,  401, 0,  421, 0,  470, 16,  468, 92,  384, 92 z', 0, 4, N'YA')
	, (5013, 5, 3, N'Proximal Descending', N'M 384, 92,  468, 92,  462, 177,  374, 178 z', 0, 4, N'YA')
	, (5014, 5, 3, N'Mid Descending', N'M 462, 177,  374, 178,  365, 249,  455, 234 z', 0, 4, N'YA')
	, (5015, 5, 3, N'Distal Descending', N'M 448, 325,  354, 325,  365, 249,  455, 234 z', 0, 4, N'YA')
	, (5016, 5, 3, N'Proximal Sigmoid', N'M 354, 325,  448, 325,  436, 346,  435, 356,  424, 378,  414, 387,  405, 410,  388, 421,  332, 351 z', 0, 4, N'YA')
	, (5017, 5, 3, N'Proximal Sigmoid', N'M 382, 425,  368, 433,  365, 435,  339, 434,  310, 446,  283, 448,  283, 349,  325, 359,  332, 351,  388, 421 z', 0, 5, N'XD')
	, (5018, 5, 3, N'Distal Sigmoid', N'M 283, 348,  283, 448,  258, 439,  240, 442,  156, 365,  185, 340,  210, 338,  230, 342,  246, 355 z', 0, 5, N'XD')
	, (5019, 5, 3, N'Rectosigmoid Junction', N'M 150, 386,  156, 365,  240, 442,  225, 453 z', 0, 5, N'XD')
	, (5020, 5, 3, N'Rectum', N'M 150, 386,  225, 453,  217, 468,  177, 468,  146, 428 z', 0, 6, N'YA')
	, (5021, 5, 3, N'Anal Margin', N'M 177, 468,  217, 468,  215, 494,  187, 494,  177, 468 z', 0, 6, N'YA')
--************************* EUS (OGD) *************************
	, (6001, 6, 1, N'Right Upper Oesophagus', N'M 192, 3,  208, 3,  208, 80,  192, 80 z', 0, 1, N'YA')
	, (6002, 6, 1, N'Upper Oesophagus', N'M 208, 3,  232, 3,  232, 80,  208, 80 z', 0, 1, N'YA')
	, (6003, 6, 1, N'Left Upper Oesophagus', N'M 232, 3,  248, 3,  248, 80,  232, 80 z', 0, 1, N'YA')
	, (6004, 6, 1, N'Right Middle Oesophagus', N'M 192, 80,  208, 80,  208, 160,  192, 160 z', 0, 2, N'YA')
	, (6005, 6, 1, N'Middle Oesophagus', N'M 208, 80,  232, 80,  232, 160,  208, 160 z', 0, 2, N'YA')
	, (6006, 6, 1, N'Left Middle Oesophagus', N'M 232, 80,  248, 80,  248, 160,  232, 160 z', 0, 2, N'YA')
	, (6007, 6, 1, N'Right Lower Oesophagus', N'M 192, 160,  208, 160,  208, 221,  216, 240,  200, 244,  192, 223 z', 0, 3, N'YA')
	, (6008, 6, 1, N'Lower Oesophagus', N'M 208, 160,  232, 160,  232, 221,  239, 233,  216, 240,  208, 221 z', 0, 3, N'YA')
	, (6009, 6, 1, N'Left Lower Oesophagus', N'M 232, 160,  248, 160,  248, 218,  253, 229,  239, 233,  232, 221 z', 0, 3, N'YA')
	, (6010, 6, 1, N'Cardia', N'M 200, 244,  253, 229,  261, 238,  279, 245,  238, 284,  213, 266 z', 0, 4, N'YA')
	, (6011, 6, 1, N'Fundus', N'M 268, 255,  279, 245,  297, 239,  320, 226,  368, 217,  412, 229,  439, 252,  460, 285 z', 0, 5, N'YA')
	, (6012, 6, 1, N'Lesser Curve Upper Body', N'M 238, 284,  248, 274,  255, 292,  262, 322,  250, 320 z', 0, 6, N'YA')
	, (6013, 6, 1, N'Upper Body', N'M 248, 274,  268, 255,  439, 282,  447, 303,  449, 332,  442, 355,  262, 322,  255, 292 z', 0, 6, N'YA')
	, (6014, 6, 1, N'Greater Curve Upper Body', N'M 439, 282,  460, 285,  464, 305,  464, 330,  459, 358,  442, 355,  449, 332,  447, 303 z', 0, 6, N'YA')
	, (6015, 6, 1, N'Lesser Curve Middle Body', N'M 250, 320,  262, 322,  263, 336,  261, 356,  249, 348 z', 0, 7, N'YA')
	, (6016, 6, 1, N'Middle Body', N'M 262, 322,  442, 355,  419, 398,  399, 418,  380, 437,  261, 356,  263, 336 z', 0, 7, N'YA')
	, (6017, 6, 1, N'Greater Curve Middle Body', N'M 442, 355,  459, 358,  433, 404,  414, 427,  392, 445,  380, 437,  419, 398 z', 0, 7, N'YA')
	, (6018, 6, 1, N'Angulus', N'M 249, 348,  261, 356,  254, 375,  241, 383,  238, 367,  245, 365 z', 0, 8, N'XD')
	, (6019, 6, 1, N'Lower Body', N'M 261, 356,  380, 437,  352, 452,  321, 463,  288, 468,  255, 468,  241, 383,  254, 375 z', 0, 8, N'XD')
	, (6020, 6, 1, N'Greater Curve Lower Body', N'M 380, 437,  392, 445,  363, 464,  332, 478,  289, 486,  258, 486,  255, 468,  288, 468,  321, 463,  352, 452 z', 0, 8, N'XD')
	, (6021, 6, 1, N'Lesser Curve Antrum', N'M 238, 367,  241, 383,  196, 386,  168, 383,  171, 370,  199, 374 z', 0, 9, N'XD')
	, (6022, 6, 1, N'Antrum', N'M 241, 383,  255, 468,  195, 452,  157, 423,  168, 383,  196, 386 z', 0, 9, N'XD')
	, (6023, 6, 1, N'Greater Curve Antrum', N'M 255, 468,  258, 486,  218, 478,  193, 471,  152, 440,  157, 423,  195, 452,  255, 468 z', 0, 9, N'XD')
	, (6024, 6, 1, N'Lesser Curve Prepyloric Region', N'M 171, 370,  168, 383,  139, 381,  143, 368 z', 0, 10, N'XD')
	, (6025, 6, 1, N'Prepyloric Region', N'M 168, 383,  157, 423,  130, 411,  139, 381 z', 0, 10, N'XD')
	, (6026, 6, 1, N'Greater Curve Prepyloric Region', N'M 157, 423,  152, 440,  126, 425,  130, 411 z', 0, 10, N'XD')
	, (6027, 6, 1, N'Superior Pylorus', N'M 143, 368,  139, 381,  120, 373,  126, 360 z', 0, 11, N'XD')
	, (6028, 6, 1, N'Pylorus', N'M 139, 381,  130, 411,  111, 394,  120, 373 z', 0, 11, N'XD')
	, (6029, 6, 1, N'Inferior Pylorus', N'M 130, 411,  126, 425,  105, 406,  111, 394 z', 0, 11, N'XD')
	, (6030, 6, 1, N'Superior Bulb', N'M 126, 360,  120, 373,  99, 363,  80, 362,  75, 349,  103, 349 z', 0, 12, N'XD')
	, (6031, 6, 1, N'Bulb', N'M 120, 373,  111, 394,  91, 393,  80, 362,  99, 363 z', 1, 12, N'XD')
	, (6032, 6, 1, N'Inferior Bulb', N'M 111, 394,  105, 406,  95, 404,  91, 393 z', 0, 12, N'XD')
	, (6033, 6, 1, N'Lateral Wall First Part', N'M 75, 349,  80, 362,  56, 377,  46, 406,  34, 400,  45, 369 z', 0, 13, N'YA')
	, (6034, 6, 1, N'First Part', N'M 80, 362,  91, 393,  82, 404,  78, 422,  46, 406,  56, 377 z', 1, 13, N'YA')
	, (6035, 6, 1, N'Medial First Part', N'M 91, 393,  95, 405,  90, 414,  92, 429,  78, 422,  82, 404 z', 0, 13, N'YA')
	, (6036, 6, 1, N'Lateral Wall Second Part', N'M 34, 400,  46, 406,  47, 431,  56, 457,  43, 457,  36, 432 z', 0, 14, N'YA')
	, (6037, 6, 1, N'Second Part', N'M 46, 406,  78, 422,  90, 457,  56, 457,  47, 431 z', 1, 14, N'YA')
	, (6038, 6, 1, N'Medial Second Part', N'M 78, 422,  92, 429,  104, 457,  90, 457 z', 0, 14, N'YA')
	, (6039, 6, 1, N'Third Part', N'M 43, 457,  104, 457,  141, 497,  68, 497 z', 0, 15, N'YA')
	, (6040, 6, 1, N'Mediastinal', N'M 0,0, 500,0, 500,500, 0,500, 0,0 z', 0, 16, N'YA')
	--************************* EUS (HPB) *************************
	, (7001, 7, 2, N'Bifurcation', N'M 233, 205,  234, 184,  231, 177,  246, 169,  250, 176,  256, 172,  260, 189,  253, 206 z', 0, 0, N'')
	, (7002, 7, 2, N'Left Hepatic Ducts', N'M 256, 172,  276, 161,  297, 155,  312, 138,  345, 122,  350, 116,  357, 130,  350, 136,  326, 146,  311, 156,  304, 167,  260, 189 z', 0, 0, N'')
	, (7003, 7, 2, N'Right Hepatic Ducts', N'M 231, 177,  212, 156,  182, 140,  156, 133,  158, 116,  194, 126,  228, 145,  246, 169 z', 0, 0, N'')
	, (7004, 7, 2, N'Left intra-hepatic ducts', N'M 350, 116,  356, 111,  371, 77,  376, 96,  372, 108,  400, 107,  381, 120,  357, 130 z', 0, 0, N'')
	, (7005, 7, 2, N'Right intra-hepatic ducts', N'M 156, 133,  140, 134,  112, 147,  84, 177,  80, 172,  96, 145,  116, 129,  137, 118,  131, 107,  125, 88,  129, 88,  145, 108,  158, 116 z', 0, 0, N'')
	, (7006, 7, 2, N'Common Hepatic Duct', N'M 233, 205,  253, 206,  240, 264,  227, 252 z', 0, 0, N'')
	, (7007, 7, 2, N'Right Hepatic Lobe', N'M 282, 47,  270, 97,  267, 123,  269, 163,  275, 218,  189, 235,  75, 250,  47, 262,  16, 296,  6, 249,  2, 183,  6, 139,  19, 94,  41, 47,  71, 18,  117, 1,  195, 8,  274, 31 z', 0, 0, N'')
	, (7008, 7, 2, N'Left Hepatic Lobe', N'M 282, 47,  270, 97,  267, 123,  269, 163,  275, 218,  303, 215,  347, 203,  399, 181,  437, 153,  468, 122,  487, 95,  499, 66,  481, 43,  307, 33 z', 0, 0, N'')
	, (7009, 7, 2, N'Cystic Duct', N'M 227, 252,  222, 273,  209, 262,  211, 244 z', 0, 0, N'')
	, (7010, 7, 2, N'Gall Bladder', N'M 209, 262,  203, 268,  196, 286,  175, 305,  152, 334,  131, 348,  110, 350,  92, 332,  90, 313,  98, 293,  127, 264,  164, 248,  194, 241,  211, 244 z', 0, 0, N'')
	, (7011, 7, 2, N'Common Bile Duct', N'M 227, 252,  240, 264,  233, 300,  216, 334,  203, 356,  165, 400,  158, 396,  196, 347,  216, 307,  221, 277 z', 0, 0, N'')
	, (7012, 7, 2, N'Main Pancreatic Duct', N'M 165, 400,  184, 395,  204, 395,  208, 390,  208, 376,  216, 366,  228, 364,  257, 367,  286, 361,  308, 351,  328, 348,  351, 350,  379, 354,  402, 352,  403, 356,  381, 365,  373, 366,  363, 365,  348, 363,  333, 362,  296, 371,  275, 378,  261, 380,  240, 380,  221, 379,  220, 391,  218, 399,  208, 409,  188, 406,  176, 407,  159, 418,  159, 415 z', 0, 0, N'')
	, (7013, 7, 2, N'Accessory Pancreatic Duct', N'M 162, 369,  167, 357,  186, 353,  205, 356,  216, 366,  208, 376,  201, 368,  196, 365,  183, 363,  170, 365 z', 0, 0, N'')
	, (7014, 7, 2, N'Tail', N'M 380, 327,  415, 327,  431, 329,  444, 336,  447, 351,  434, 368,  408, 382,  384, 388,  380, 388 z', 0, 0, N'')
	, (7015, 7, 2, N'Body', N'M 380, 388,  343, 392,  322, 398,  300, 406,  286, 410,  266, 415,  254, 415,  240, 339,  271, 330,  294, 323,  325, 320,  380, 327 z', 0, 0, N'')
	, (7016, 7, 2, N'Neck', N'M 240, 339,  254, 415,  215, 337 z', 1, 0, N'')
	, (7017, 7, 2, N'Head', N'M 254, 415,  217, 399,  208, 409,  188, 406,  176, 407,  159, 418,  159, 415,  165, 400,  158, 396,  161, 381,  162, 369,  168, 356,  177, 343,  198, 339,  215, 337 z', 0, 0, N'')
	, (7018, 7, 2, N'Uncinate Process', N'M 254, 415,  217, 399,  208, 409,  188, 406,  176, 407,  159, 418,  159, 415,  165, 435,  171, 445,  184, 454,  195, 457,  210, 458,  227, 453,  243, 443,  251, 429 z', 0, 0, N'')
	, (7019, 7, 2, N'Major Papilla', N'M 158, 396,  157, 386,  154, 387,  145, 404,  144, 415,  150, 421,  159, 418,  159, 415,  165, 400 z', 0, 0, N'')
	, (7020, 7, 2, N'Minor Papilla', N'M 144, 365,  156, 361,  156, 372,  145, 374 z', 0, 0, N'')
	, (7021, 7, 2, N'Lateral Wall First Part', N'M 110, 356,  124, 352,  110, 382,  113, 401,  100, 404,  100, 382 z', 0, 0, N'')
	, (7022, 7, 2, N'Medial Wall First Part', N'M 161, 340,  183, 333,  182, 336,  167, 357,  162, 369,  160, 377,  157, 386,  154, 387,  142, 395,  145, 374,  144, 365 z', 0, 0, N'')
	, (7023, 7, 2, N'First Part', N'M  161, 340,  144, 365,  145, 374,  142, 395,  113, 401,  110, 382,  124, 352 z', 1, 0, N'')
	, (7024, 7, 2, N'Lateral Wall Second Part', N'M 100, 404,  113, 401,  113, 426,  122, 447,  109, 451,  102, 431 z', 0, 0, N'')
	, (7025, 7, 2, N'Medial Wall Second Part', N'M 142, 395,  140, 416,  151, 438,  165, 435,  159, 418,  150, 421,  144, 415,  145, 404,  150, 394,  157, 386 z', 0, 0, N'')
	, (7026, 7, 2, N'Second Part', N'M 142, 395,  140, 416,  151, 438,  122, 447,  113, 426,  113, 401 z', 1, 0, N'')
	, (7027, 7, 2, N'Lateral Wall Third Part', N'M 109, 451,  122, 447,  132, 467,  149, 486,  138, 496,  120, 471 z', 0, 0, N'')
	, (7028, 7, 2, N'Medial Wall Third Part', N'M 151, 438,  165, 435,  171, 445,  184, 458,  172, 467,  159, 453 z', 0, 0, N'')
	, (7029, 7, 2, N'Third Part', N'M 122, 447,  151, 438,  159, 453,  172, 467,  149, 486,  132, 467 z', 1, 0, N'')
	, (7030, 7, 2, N'Site', N'M 0,0, 500,0, 500,500, 0,500, 0,0 z', 0, 0, N'')
	--************************* Enteroscopy - Antegrade ********************
	, (8001, 8, 4, N'Right Upper Oesophagus', N'M 192, 3.66,  208, 3.66,  208, 97.60,  192, 97.60 z', 0, 1, N'YA')
	, (8002, 8, 4, N'Upper Oesophagus', N'M 208, 3.66, 232, 3.66, 232, 97.60, 208, 97.60 z', 0, 1, N'YA')
	, (8003, 8, 4, N'Left Upper Oesophagus', N'M 232, 3.66, 248, 3.66, 248, 97.60, 232, 97.60 z', 0, 1, N'YA')
	, (8004, 8, 4, N'Right Middle Oesophagus', N'M 192, 97.60, 208, 97.60, 208, 195.20, 192, 195.20 z', 0, 2, N'YA')
	, (8005, 8, 4, N'Middle Oesophagus', N'M 208, 97.60, 232, 97.60, 232, 195.20, 208, 195.20 z', 0, 2, N'YA')
	, (8006, 8, 4, N'Left Middle Oesophagus', N'M 232, 97.60, 248, 97.60, 248, 195.20, 232, 195.20 z', 0, 2, N'YA')
	, (8007, 8, 4, N'Right Lower Oesophagus', N'M 192, 195.20, 208, 195.20, 208, 269.62, 216, 292.80, 200, 297.68, 192, 272.06 z', 0, 3, N'YA')
	, (8008, 8, 4, N'Lower Oesophagus', N'M 208, 195.20, 232, 195.20, 232, 269.62, 239, 284.26, 216, 292.80, 208, 269.62 z', 0, 3, N'YA')
	, (8009, 8, 4, N'Left Lower Oesophagus', N'M 232, 195.20, 248, 195.20, 248, 265.96, 253, 279.38, 239, 284.26, 232, 269.62 z', 0, 3, N'YA')
	, (8010, 8, 4, N'Cardia', N'M 200, 297.68, 253, 279.38, 261, 290.36, 279, 298.90, 238, 346.48, 213, 324.52 z', 0, 4, N'YA')
	, (8011, 8, 4, N'Fundus', N'M 268, 311.10, 279, 298.90, 297, 291.58, 320, 275.72, 368, 264.74, 412, 279.38, 439, 307.44, 460, 347.70 z', 0, 5, N'YA')
	, (8012, 8, 4, N'Lesser Curve Upper Body', N'M 238, 346.48, 248, 334.28, 255, 356.24, 262, 392.84, 250, 390.40 z', 0, 6, N'YA')
	, (8013, 8, 4, N'Upper Body', N'M 248, 334.28, 268, 311.10, 439, 344.04, 447, 369.66, 449, 405.04, 442, 433.10, 262, 392.84, 255, 356.24 z', 0, 6, N'YA')
	, (8014, 8, 4, N'Greater Curve Upper Body', N'M 439, 344.04, 460, 347.70, 464, 372.10, 464, 402.60, 459, 436.76, 442, 433.10, 449, 405.04, 447, 369.66 z', 0, 6, N'YA')
	, (8015, 8, 4, N'Lesser Curve Middle Body', N'M 250, 390.40, 262, 392.84, 263, 409.92, 261, 434.32, 249, 424.56 z', 0, 7, N'YA')
	, (8016, 8, 4, N'Middle Body', N'M 262, 392.84, 442, 433.10, 419, 485.56, 399, 509.96, 380, 533.14, 261, 434.32, 263, 409.92 z', 0, 7, N'YA')
	, (8017, 8, 4, N'Greater Curve Middle Body', N'M 442, 433.10, 459, 436.76, 433, 492.88, 414, 520.94, 392, 542.90, 380, 533.14, 419, 485.56 z', 0, 7, N'YA')
	, (8018, 8, 4, N'Angulus', N'M 249, 424.56, 261, 434.32, 254, 457.50, 241, 467.26, 238, 447.74, 245, 445.30 z', 0, 8, N'XD')
	, (8019, 8, 4, N'Lower Body', N'M 261, 434.32, 380, 533.14, 352, 551.44, 321, 564.86, 288, 570.96, 255, 570.96, 241, 467.26, 254, 457.50 z', 0, 8, N'XD')
	, (8020, 8, 4, N'Greater Curve Lower Body', N'M 380, 533.14, 392, 542.90, 363, 566.08, 332, 583.16, 289, 592.92, 258, 592.92, 255, 570.96, 288, 570.96, 321, 564.86, 352, 551.44 z', 0, 8, N'XD')
	, (8021, 8, 4, N'Lesser Curve Antrum', N'M 238, 447.74, 241, 467.26, 196, 470.92, 168, 467.26, 171, 451.40, 199, 456.28 z', 0, 9, N'XD')
	, (8022, 8, 4, N'Antrum', N'M 241, 467.26, 255, 570.96, 195, 551.44, 157, 516.06, 168, 467.26, 196, 470.92 z', 0, 9, N'XD')
	, (8023, 8, 4, N'Greater Curve Antrum', N'M 255, 570.96, 258, 592.92, 218, 583.16, 193, 574.62, 152, 536.80, 157, 516.06, 195, 551.44, 255, 570.96 z', 0, 9, N'XD')
	, (8024, 8, 4, N'Lesser Curve Prepyloric Region', N'M 171, 451.40, 168, 467.26, 139, 464.82, 143, 448.96 z', 0, 10, N'XD')
	, (8025, 8, 4, N'Prepyloric Region', N'M 168, 467.26, 157, 516.06, 130, 501.42, 139, 464.82 z', 0, 10, N'XD')
	, (8026, 8, 4, N'Greater Curve Prepyloric Region', N'M 157, 516.06, 152, 536.80, 126, 518.50, 130, 501.42 z', 0, 10, N'XD')
	, (8027, 8, 4, N'Superior Pylorus', N'M 143, 448.96, 139, 464.82, 120, 455.06, 126, 439.20 z', 0, 11, N'XD')
	, (8028, 8, 4, N'Pylorus', N'M 139, 464.82, 130, 501.42, 111, 480.68, 120, 455.06 z', 0, 11, N'XD')
	, (8029, 8, 4, N'Inferior Pylorus', N'M 130, 501.42, 126, 518.50, 105, 495.32, 111, 480.68 z', 0, 11, N'XD')
	, (8030, 8, 4, N'Superior Bulb', N'M 126, 439.20, 120, 455.06, 99, 442.86, 80, 441.64, 75, 425.78, 103, 425.78 z', 0, 12, N'XD')
	, (8031, 8, 4, N'Bulb', N'M 120, 455.06, 111, 480.68, 91, 479.46, 80, 441.64, 99, 442.86 z', 1, 12, N'XD')
	, (8032, 8, 4, N'Inferior Bulb', N'M 111, 480.68, 105, 495.32, 95, 492.88, 91, 479.46 z', 0, 12, N'XD')
	, (8033, 8, 4, N'Lateral Wall First Part', N'M 75, 425.78, 80, 441.64, 56, 459.94, 46, 495.32, 34, 488, 45, 450.18 z', 0, 13, N'YA')
	, (8034, 8, 4, N'First Part', N'M 80, 441.64, 91, 479.46, 82, 492.88, 78, 514.84, 46, 495.32, 56, 459.94 z', 1, 13, N'YA')
	, (8035, 8, 4, N'Medial First Part', N'M 91, 479.46, 95, 494.10, 90, 505.08, 98, 523.38, 78, 514.84, 82, 492.88 z', 0, 13, N'YA')
	, (8036, 8, 4, N'Lateral Wall Second Part', N'M 34, 488, 46, 495.32, 47, 525.82, 56, 557.54, 33, 557.54, 26, 527.04 z', 0, 14, N'YA')
	, (8037, 8, 4, N'Second Part', N'M 46, 495.32, 78, 514.84, 90, 557.54, 56, 557.54, 47, 525.82 z', 1, 14, N'YA')
	, (8038, 8, 4, N'Medial Second Part', N'M 78, 514.84, 98, 523.38, 108, 557.54, 90, 557.54 z', 0, 14, N'YA')
	, (8039, 8, 4, N'Third Part', N'M 33, 557.54,  108, 557.54,  111, 570,  138, 592,  149, 606,  66, 616,  63, 603,  38, 570,  33, 560 z', 0, 15, N'YA')
	, (8040, 8, 4, N'Fourth Part', N'M 66, 616,  149, 606,  163, 627,  172, 649,  119, 689,  95, 665,  66, 618 z', 0, 16, N'YA')
	, (8041, 8, 4, N'Jejunum', N'M 119, 689,  172, 649,  203, 650,  230, 628,  266, 622,  293, 604,  330, 600,  360, 605,  388, 614,  405, 631,  408, 652,  426, 679,  428, 712,  427, 745,  418, 771,  393, 789,  366, 805,  342, 807,  318, 800,  288, 806,  257, 800,  226, 807,  191, 800,  183, 815,  189, 823,  213, 829,  242, 822,  266, 825,  318, 812,  340, 820,  365, 824,  384, 837,  405, 849,  419, 867,  432, 889,  432, 909,  357, 905,  325, 887,  301, 888,  270, 894,  247, 893,  206, 899,  181, 894,  169, 888,  150, 884,  117, 856,  108, 823,  117, 797,  124, 758,  138, 742,  168, 733,  205, 732,  221, 735,  253, 728,  272, 735,  297, 734,  314, 740,  347, 738,  356, 720,  352, 686,  333, 672,  300, 674,  261, 700,  213, 714,  166, 710,  120, 692 z', 0, 17, N'YA')
	, (8042, 8, 4, N'Ileum', N'M 357, 905,  432, 909,  414, 941,  397, 966,  376, 976,  358, 976,  341, 987,  312, 990,  298, 988,  270, 991,  246, 987,  209, 985,  182, 979,  158, 969,  120, 959,  91, 930,  74, 917,  59, 896,  54, 881,  36, 855,  30, 825,  34, 792,  38, 780,  41, 747,  52, 729,  61, 700,  76, 687,  97, 693,  114, 705,  122, 724,  121, 741,  109, 753,  111, 769,  106, 789,  100, 803,  104, 817,  108, 844,  110, 855,  128, 868,  151, 894,  174, 901,  196, 912,  228, 918,  248, 917,  270, 919,  293, 916,  317, 919,  334, 912,  348, 915,  359, 906 z', 0, 18, N'YA')
	--************************* Enteroscopy - Retrograde ********************
	, (9001, 9, 5, N'Small intestine', N'M 127, 102,  148, 109,  167, 111,  185, 109,  201, 116,  217, 115,  242, 109,  256, 112,  273, 112,  290, 106,  299, 101,  313, 104,  332, 103,  340, 100,  352, 92,  373, 92,  389, 90,  388, 105,  388, 121,  392, 134,  385, 146,  380, 157,  381, 171,  383, 182,  376, 194,  374, 208,  376, 224,  379, 235,  370, 248,  367, 263,  370, 280,  372, 293,  363, 303,  359, 317,  358, 328,  341, 345,  328, 346,  309, 344,  282, 338,  248, 323,  216, 308,  189, 290,  164, 274,  165, 259,  157, 241,  151, 225,  141, 216,  141, 196,  134, 182,  127, 174,  129, 153,  124, 134,  125, 116,  126, 102 z', 0, 1, N'YA')
--************************* Bronchoscopy *************************
	, (10001, 10, 6, N'Upper third of trachea', N'M 241, 41,  332, 40,  329, 47,  321, 56,  319, 67,  315, 75,  315, 125,  260, 125,  259, 77,  253, 67,  241, 48,  238, 43 z', 0, 0, N'')
	, (10002, 10, 6, N'Middle third of trachea', N'M 260, 126,  315, 126,  316, 186,  260, 187,  259, 128 z', 0, 0, N'')
	, (10003, 10, 6, N'Bottom third of trachea', N'M 259, 187,  316, 186,  315, 245,  320, 254,  254, 255,  259, 241,  258, 188 z', 0, 0, N'')
	, (10004, 10, 6, N'Carina', N'M 321, 253,  290, 281,  281, 281,  253, 255,  319, 255 z', 0, 0, N'')
	, (10005, 10, 6, N'Right main bronchus', N'M 253, 255,  280, 281,  260, 303,  236, 275,  252, 257 z', 0, 0, N'')
	, (10006, 10, 6, N'Intermediate bronchus', N'M 235, 275,  258, 302,  247, 313,  235, 330,  209, 367,  185, 352,  214, 309,  234, 275 z', 0, 0, N'')
	, (10007, 10, 6, N'Right upper lobe bronchus', N'M 234, 277,  214, 269,  190, 274,  204, 277,  203, 293,  216, 305,  234, 276 z', 0, 0, N'')
	, (10008, 10, 6, N'Apical segment right upper lobe', N'M 213, 266,  212, 255,  224, 232,  213, 228,  210, 232,  196, 229,  195, 242,  186, 243,  175, 244,  174, 250,  178, 255,  184, 260,  189, 273,  215, 268 z', 0, 0, N'')
	, (10009, 10, 6, N'Posterior segment right upper lobe', N'M 181, 259,  190, 275,  205, 278,  201, 287,  155, 289,  147, 293,  136, 295,  135, 287,  139, 282,  137, 273,  146, 270,  163, 275,  161, 266,  166, 260,  176, 264,  177, 258 z', 0, 0, N'')
	, (10010, 10, 6, N'Anterior segment right upper lobe', N'M 178, 288,  203, 288,  203, 293,  188, 304,  187, 321,  164, 320,  163, 314,  154, 319,  146, 314,  139, 306,  145, 300,  158, 296,  175, 289 z', 0, 0, N'')
	, (10011, 10, 6, N'Right middle lobe bronchus', N'M 184, 352,  210, 367,  190, 373,  183, 353 z', 0, 0, N'')
	, (10012, 10, 6, N'Lateral segment right middle lobe', N'M 183, 353,  188, 370,  171, 369,  158, 381,  148, 374,  151, 368,  144, 362,  152, 354,  179, 352 z', 0, 0, N'')
	, (10013, 10, 6, N'Medial segment right middle lobe', N'M 211, 368,  211, 375,  216, 387,  218, 393,  210, 398,  199, 385,  188, 392,  179, 384,  189, 373,  208, 369 z', 0, 0, N'')
	, (10014, 10, 6, N'Right lower lobe bronchus', N'M 175, 369,  164, 388,  166, 423,  184, 426,  193, 391,  186, 391,  179, 384,  190, 373,  176, 370 z', 0, 0, N'')
	, (10015, 10, 6, N'Anterior basal segment right lower lobe', N'M 163, 391,  121, 401,  121, 409,  133, 410,  127, 419,  135, 424,  140, 422,  154, 425,  157, 411,  163, 407,  164, 391 z', 0, 0, N'')
	, (10016, 10, 6, N'Medial basal segment right lower lobe', N'M 190, 407,  198, 418,  207, 416,  207, 405,  197, 394,  192, 395,  190, 407 z', 0, 0, N'')
	, (10017, 10, 6, N'Lateral basal segment right lower lobe', N'M 163, 415,  131, 439,  135, 447,  166, 423,  163, 417 z', 0, 0, N'')
	, (10018, 10, 6, N'Posterior basal segment right lower lobe', N'M 185, 425,  190, 462,  179, 464,  172, 452,  166, 465,  154, 461,  160, 428,  166, 423,  183, 425 z', 0, 0, N'')
	, (10019, 10, 6, N'Left main bronchus', N'M 321, 253,  290, 281,  306, 294,  313, 303,  333, 322,  342, 323,  355, 337,  401, 341,  395, 307,  375, 296,  334, 261,  323, 253 z', 0, 0, N'')
	, (10020, 10, 6, N'Left upper lobe bronchus', N'M 396, 307,  413, 303,  417, 292,  441, 302,  432, 333,  416, 332,  401, 339,  395, 307 z', 0, 0, N'')
	, (10021, 10, 6, N'Apical segment left upper lobe', N'M 417, 290,  415, 273,  400, 255,  388, 251,  391, 240,  388, 229,  402, 227,  406, 237,  412, 232,  419, 237,  417, 246,  430, 244,  431, 251,  428, 260,  436, 257,  443, 265,  433, 274,  439, 301,  416, 291 z', 0, 0, N'')
	, (10022, 10, 6, N'Posterior segment left upper lobe', N'M 435, 277,  447, 260,  446, 247,  457, 248,  472, 240,  475, 245,  463, 263,  477, 259,  477, 271,  456, 278,  438, 293,  435, 279 z', 0, 0, N'')
	, (10023, 10, 6, N'Anterior segment left upper lobe', N'M 448, 284,  468, 284,  471, 292,  466, 299,  444, 301,  440, 291,  447, 285 z', 0, 0, N'')
	, (10024, 10, 6, N'Lingula bronchus', N'M 439, 310,  463, 327,  459, 338,  444, 342,  434, 332,  438, 310 z', 0, 0, N'')
	, (10025, 10, 6, N'Superior segment of lingula', N'M 465, 327,  494, 329,  497, 340,  475, 340,  492, 357,  482, 364,  457, 340,  465, 326 z', 0, 0, N'')
	, (10026, 10, 6, N'Inferior segment of lingula', N'M 444, 342,  445, 354,  437, 373,  446, 376,  455, 362,  461, 372,  470, 370,  461, 347,  456, 340,  444, 342 z', 0, 0, N'')
	, (10027, 10, 6, N'Left lower lobe bronchus', N'M 355, 337,  401, 341,  408, 368,  417, 387,  421, 395,  389, 404,  384, 386,  373, 364,  359, 347,  356, 339 z', 0, 0, N'')
	, (10028, 10, 6, N'Anterior medial basal segment left lower lobe', N'M 406, 399,  420, 395,  433, 403,  457, 405,  462, 415,  437, 413,  467, 437,  458, 443,  445, 439,  444, 444,  431, 440,  417, 414,  406, 400 z', 0, 0, N'')
	, (10029, 10, 6, N'Posterior basal segment left lower lobe', N'M 389, 405,  392, 415,  392, 426,  394, 434,  390, 448,  370, 452,  367, 468,  388, 464,  378, 490,  387, 494,  391, 491,  405, 490,  401, 480,  404, 470,  419, 497,  437, 488,  426, 475,  421, 465,  430, 465,  428, 456,  417, 447,  416, 415,  405, 400,  389, 405 z', 0, 0, N'')
	, (10030, 10, 6, N'Lateral basal segment left lower lobe', N'M 418, 430,  435, 447,  449, 455,  467, 458,  465, 467,  455, 468,  469, 477,  460, 484,  433, 461,  418, 443,  418, 431 z', 0, 0, N'')
	, (10031, 10, 6, N'Posterior basal segment left lower lobe', N'M 439, 417,  467, 418,  468, 429,  448, 427,  440, 417 z', 0, 0, N'')
	, (10032, 10, 6, N'Superior segment right lower lobe', N'M 203, 343,  210, 348,  205, 356,  198, 354,  198, 346 z', 0, 0, N'')
	, (10033, 10, 6, N'Superior segment right lower lobe', N'M 247, 372,  258, 364,  277, 365,  290, 384,  296, 396,  304, 389,  312, 382,  303, 375,  289, 357,  295, 351,  308, 350,  318, 360,  323, 351,  326, 340,  289, 342,  281, 331,  270, 333,  274, 349,  260, 349,  248, 345,  241, 355,  248, 358,  242, 362,  247, 373 z', 0, 0, N'')
	, (10034, 10, 6, N'Superior segment left lower lobe', N'M 390, 354,  395, 354,  398, 360,  389, 368,  385, 361,  388, 354 z', 0, 0, N'')
	, (10035, 10, 6, N'Superior segment left lower lobe', N'M 328, 370,  328, 407,  322, 422,  316, 432,  303, 449,  313, 449,  320, 447,  328, 457,  335, 451,  332, 442,  339, 428,  363, 436,  369, 426,  350, 417,  376, 412,  384, 405,  385, 398,  377, 399,  381, 394,  373, 388,  357, 399,  345, 400,  347, 386,  349, 377,  343, 371,  340, 374,  328, 370 z', 0, 0, N'')
	, (10036, 10, 6, N'Trachea', N'M 93, 99,  103, 91,  114, 84,  135, 85,  142, 92,  148, 98,  155, 98,  146, 110,  140, 120,  135, 130,  130, 141,  126, 149,  118, 149,  113, 138,  93, 100 z', 0, 0, N'')
	, (10037, 10, 6, N'Epiglottis', N'M 23, 139,  26, 147,  34, 147,  45, 148,  51, 156,  57, 166,  66, 179,  73, 190,  84, 196,  100, 199,  119, 199,  137, 199,  155, 199,  169, 191,  178, 181,  186, 167,  194, 155,  202, 147,  208, 139,  191, 139,  179, 145,  170, 153,  156, 162,  137, 168,  120, 169,  103, 166,  86, 159,  72, 149,  59, 140,  44, 140,  24, 139 z', 0, 0, N'')
	, (10038, 10, 6, N'Right aryepiglottic fold', N'M 24, 138,  36, 133,  44, 125,  56, 111,  62, 110,  64, 117,  62, 128,  63, 143,  52, 139,  36, 138,  24, 139 z', 0, 0, N'')
	, (10039, 10, 6, N'Left aryepiglottic fold', N'M 196, 111,  207, 128,  215, 132,  209, 139,  199, 139,  192, 139,  192, 125,  184, 116,  196, 111 z', 0, 0, N'')
	, (10040, 10, 6, N'Median glossoepiglottic fold', N'M 116, 199,  127, 199,  130, 221,  120, 222,  111, 221,  116, 200 z', 0, 0, N'')
	, (10041, 10, 6, N'Right corniculate cartilage', N'M 57, 108,  58, 99,  63, 90,  70, 83,  79, 82,  87, 84,  92, 90,  92, 97,  85, 106,  70, 113,  65, 115,  64, 111,  57, 109 z', 0, 0, N'')
	, (10042, 10, 6, N'Left corniculate cartilage', N'M 169, 82,  179, 88,  186, 96,  191, 104,  195, 110,  183, 115,  159, 99,  153, 90,  155, 82,  169, 82 z', 0, 0, N'')
	, (10043, 10, 6, N'Right vestibular fold', N'M 86, 106,  113, 155,  112, 157,  102, 160,  94, 161,  83, 156,  72, 148,  63, 142,  61, 128,  63, 116,  75, 111,  86, 105 z', 0, 0, N'')
	, (10044, 10, 6, N'Left vestibular fold', N'M 167, 105,  132, 157,  143, 160,  151, 163,  164, 157,  174, 148,  186, 141,  191, 138,  191, 125,  187, 119,  167, 105 z', 0, 0, N'')
	, (10045, 10, 6, N'Right piriform fossa', N'M 45, 123,  45, 105,  41, 89,  31, 74,  22, 87,  14, 100,  8, 115,  7, 140,  20, 140,  34, 134,  45, 123 z', 0, 0, N'')
	, (10046, 10, 6, N'Left piriform fossa', N'M 200, 114,  202, 99,  206, 85,  212, 73,  221, 83,  230, 96,  235, 111,  237, 129,  225, 135,  215, 134,  206, 126,  200, 115 z', 0, 0, N'')
	, (10047, 10, 6, N'Right vocal cord', N'M 85, 106,  114, 156,  119, 151,  107, 128,  93, 100,  86, 106 z', 0, 0, N'')
	, (10048, 10, 6, N'Left vocal cord', N'M 166, 106,  132, 156,  127, 150,  136, 130,  145, 113,  156, 98,  166, 105 z', 0, 0, N'')
	, (10049, 10, 6, N'Left cuneiform cartilage', N'M 135, 82,  142, 75,  151, 73,  161, 77,  169, 82,  161, 81,  154, 81,  152, 87,  156, 97,  149, 95,  136, 84 z', 0, 0, N'')
	, (10050, 10, 6, N'Right cuneiform cartilage', N'M 80, 80,  91, 75,  102, 72,  109, 72,  114, 76,  111, 85,  94, 97,  92, 91,  89, 85,  81, 81 z', 0, 0, N'')
	, (10051, 10, 6, N'Vallecula', N'M 11, 151,  21, 151,  32, 147,  43, 148,  49, 154,  56, 163,  64, 179,  71, 189,  82, 196,  97, 199,  115, 200,  111, 221,  96, 218,  78, 215,  66, 210,  52, 203,  37, 192,  23, 177,  14, 164,  11, 152 z', 0, 0, N'')
	, (10052, 10, 6, N'Vallecula', N'M 128, 199,  153, 200,  170, 190,  180, 178,  188, 166,  196, 152,  203, 148,  213, 151,  224, 153,  234, 154,  228, 167,  221, 178,  211, 189,  197, 200,  181, 209,  163, 216,  146, 220,  131, 221,  128, 199 z', 0, 0, N'')
--************************* Bronchoscopy Diagram 2 ********************
	, (10101, 10, 7, N'Upper third of trachea', N'M 241, 41,  332, 40,  329, 47,  321, 56,  319, 67,  315, 75,  315, 125,  260, 125,  259, 77,  253, 67,  241, 48,  238, 43 z', 0, 0, N'')
	, (10102, 10, 7, N'Middle third of trachea', N'M 260, 126,  315, 126,  316, 186,  260, 187,  259, 128 z', 0, 0, N'')
	, (10103, 10, 7, N'Bottom third of trachea', N'M 259, 187,  316, 186,  315, 245,  320, 254,  254, 255,  259, 241,  258, 188 z', 0, 0, N'')
	, (10104, 10, 7, N'Carina', N'M 321, 253,  290, 281,  281, 281,  253, 255,  319, 255 z', 0, 0, N'')
	, (10105, 10, 7, N'Right main bronchus', N'M 253, 255,  280, 281,  260, 303,  236, 275,  252, 257 z', 0, 0, N'')
	, (10106, 10, 7, N'Intermediate bronchus', N'M 235, 275,  258, 302,  247, 313,  235, 330,  209, 367,  185, 352,  214, 309,  234, 275 z', 0, 0, N'')
	, (10107, 10, 7, N'Right upper lobe bronchus', N'M 234, 277,  214, 269,  190, 274,  204, 277,  203, 293,  216, 305,  234, 276 z', 0, 0, N'')
	, (10108, 10, 7, N'Apical segment right upper lobe', N'M 213, 266,  212, 255,  224, 232,  213, 228,  210, 232,  196, 229,  195, 242,  186, 243,  175, 244,  174, 250,  178, 255,  184, 260,  189, 273,  215, 268 z', 0, 0, N'')
	, (10109, 10, 7, N'Posterior segment right upper lobe', N'M 181, 259,  190, 275,  205, 278,  201, 287,  155, 289,  147, 293,  136, 295,  135, 287,  139, 282,  137, 273,  146, 270,  163, 275,  161, 266,  166, 260,  176, 264,  177, 258 z', 0, 0, N'')
	, (10110, 10, 7, N'Anterior segment right upper lobe', N'M 178, 288,  203, 288,  203, 293,  188, 304,  187, 321,  164, 320,  163, 314,  154, 319,  146, 314,  139, 306,  145, 300,  158, 296,  175, 289 z', 0, 0, N'')
	, (10111, 10, 7, N'Right middle lobe bronchus', N'M 184, 352,  210, 367,  190, 373,  183, 353 z', 0, 0, N'')
	, (10112, 10, 7, N'Lateral segment right middle lobe', N'M 183, 353,  188, 370,  171, 369,  158, 381,  148, 374,  151, 368,  144, 362,  152, 354,  179, 352 z', 0, 0, N'')
	, (10113, 10, 7, N'Medial segment right middle lobe', N'M 211, 368,  211, 375,  216, 387,  218, 393,  210, 398,  199, 385,  188, 392,  179, 384,  189, 373,  208, 369 z', 0, 0, N'')
	, (10114, 10, 7, N'Right lower lobe bronchus', N'M 175, 369,  164, 388,  166, 423,  184, 426,  193, 391,  186, 391,  179, 384,  190, 373,  176, 370 z', 0, 0, N'')
	, (10115, 10, 7, N'Anterior basal segment right lower lobe', N'M 163, 391,  121, 401,  121, 409,  133, 410,  127, 419,  135, 424,  140, 422,  154, 425,  157, 411,  163, 407,  164, 391 z', 0, 0, N'')
	, (10116, 10, 7, N'Medial basal segment right lower lobe', N'M 190, 407,  198, 418,  207, 416,  207, 405,  197, 394,  192, 395,  190, 407 z', 0, 0, N'')
	, (10117, 10, 7, N'Lateral basal segment right lower lobe', N'M 163, 415,  131, 439,  135, 447,  166, 423,  163, 417 z', 0, 0, N'')
	, (10118, 10, 7, N'Posterior basal segment right lower lobe', N'M 185, 425,  190, 462,  179, 464,  172, 452,  166, 465,  154, 461,  160, 428,  166, 423,  183, 425 z', 0, 0, N'')
	, (10119, 10, 7, N'Left main bronchus', N'M 321, 253,  290, 281,  306, 294,  313, 303,  333, 322,  342, 323,  355, 337,  401, 341,  395, 307,  375, 296,  334, 261,  323, 253 z', 0, 0, N'')
	, (10120, 10, 7, N'Left upper lobe bronchus', N'M 396, 307,  413, 303,  417, 292,  441, 302,  432, 333,  416, 332,  401, 339,  395, 307 z', 0, 0, N'')
	, (10121, 10, 7, N'Apical segment left upper lobe', N'M 417, 290,  415, 273,  400, 255,  388, 251,  391, 240,  388, 229,  402, 227,  406, 237,  412, 232,  419, 237,  417, 246,  430, 244,  431, 251,  428, 260,  436, 257,  443, 265,  433, 274,  439, 301,  416, 291 z', 0, 0, N'')
	, (10122, 10, 7, N'Posterior segment left upper lobe', N'M 435, 277,  447, 260,  446, 247,  457, 248,  472, 240,  475, 245,  463, 263,  477, 259,  477, 271,  456, 278,  438, 293,  435, 279 z', 0, 0, N'')
	, (10123, 10, 7, N'Anterior segment left upper lobe', N'M 448, 284,  468, 284,  471, 292,  466, 299,  444, 301,  440, 291,  447, 285 z', 0, 0, N'')
	, (10124, 10, 7, N'Lingula bronchus', N'M 439, 310,  463, 327,  459, 338,  444, 342,  434, 332,  438, 310 z', 0, 0, N'')
	, (10125, 10, 7, N'Superior segment of lingula', N'M 465, 327,  494, 329,  497, 340,  475, 340,  492, 357,  482, 364,  457, 340,  465, 326 z', 0, 0, N'')
	, (10126, 10, 7, N'Inferior segment of lingula', N'M 444, 342,  445, 354,  437, 373,  446, 376,  455, 362,  461, 372,  470, 370,  461, 347,  456, 340,  444, 342 z', 0, 0, N'')
	, (10127, 10, 7, N'Left lower lobe bronchus', N'M 355, 337,  401, 341,  408, 368,  417, 387,  421, 395,  389, 404,  384, 386,  373, 364,  359, 347,  356, 339 z', 0, 0, N'')
	, (10128, 10, 7, N'Anterior medial basal segment left lower lobe', N'M 406, 399,  420, 395,  433, 403,  457, 405,  462, 415,  437, 413,  467, 437,  458, 443,  445, 439,  444, 444,  431, 440,  417, 414,  406, 400 z', 0, 0, N'')
	, (10129, 10, 7, N'Posterior basal segment left lower lobe', N'M 389, 405,  392, 415,  392, 426,  394, 434,  390, 448,  370, 452,  367, 468,  388, 464,  378, 490,  387, 494,  391, 491,  405, 490,  401, 480,  404, 470,  419, 497,  437, 488,  426, 475,  421, 465,  430, 465,  428, 456,  417, 447,  416, 415,  405, 400,  389, 405 z', 0, 0, N'')
	, (10130, 10, 7, N'Lateral basal segment left lower lobe', N'M 418, 430,  435, 447,  449, 455,  467, 458,  465, 467,  455, 468,  469, 477,  460, 484,  433, 461,  418, 443,  418, 431 z', 0, 0, N'')
	, (10131, 10, 7, N'Posterior basal segment left lower lobe', N'M 439, 417,  467, 418,  468, 429,  448, 427,  440, 417 z', 0, 0, N'')
	, (10132, 10, 7, N'Superior segment right lower lobe', N'M 203, 343,  210, 348,  205, 356,  198, 354,  198, 346 z', 0, 0, N'')
	, (10133, 10, 7, N'Superior segment right lower lobe', N'M 247, 372,  258, 364,  277, 365,  290, 384,  296, 396,  304, 389,  312, 382,  303, 375,  289, 357,  295, 351,  308, 350,  318, 360,  323, 351,  326, 340,  289, 342,  281, 331,  270, 333,  274, 349,  260, 349,  248, 345,  241, 355,  248, 358,  242, 362,  247, 373 z', 0, 0, N'')
	, (10134, 10, 7, N'Superior segment left lower lobe', N'M 390, 354,  395, 354,  398, 360,  389, 368,  385, 361,  388, 354 z', 0, 0, N'')
	, (10135, 10, 7, N'Superior segment left lower lobe', N'M 328, 370,  328, 407,  322, 422,  316, 432,  303, 449,  313, 449,  320, 447,  328, 457,  335, 451,  332, 442,  339, 428,  363, 436,  369, 426,  350, 417,  376, 412,  384, 405,  385, 398,  377, 399,  381, 394,  373, 388,  357, 399,  345, 400,  347, 386,  349, 377,  343, 371,  340, 374,  328, 370 z', 0, 0, N'')
	, (10136, 10, 7, N'Trachea', N'M 90, 160,  100, 148,  105, 138,  110, 127,  116, 117,  121, 111,  127, 113,  132, 120,  137, 132,  144, 144,  154, 160,  152, 164,  140, 171,  133, 176,  111, 177,  105, 169,  91, 161 z', 0, 0, N'')
	, (10137, 10, 7, N'Epiglottis', N'M 214, 122,  213, 114,  200, 112,  193, 102,  183, 87,  178, 78,  173, 70,  161, 63,  143, 60,  121, 60,  101, 61,  81, 66,  70, 75,  61, 88,  53, 102,  47, 112,  36, 121,  54, 123,  71, 111,  88, 100,  106, 93,  124, 92,  145, 95,  162, 103,  175, 113,  187, 120,  214, 123 z', 0, 0, N'')
	, (10138, 10, 7, N'Right aryepiglottic fold', N'M 182, 120,  184, 135,  183, 141,  182, 146,  184, 152,  190, 151,  196, 142,  202, 135,  211, 127,  220, 123,  203, 123,  193, 121,  183, 119 z', 0, 0, N'')
	, (10139, 10, 7, N'Left aryepiglottic fold', N'M 52, 123,  36, 121,  32, 127,  40, 135,  50, 149,  59, 143,  54, 135,  52, 124 z', 0, 0, N'')
	, (10140, 10, 7, N'Median glossoepiglottic fold', N'M 111, 40,  115, 60,  127, 59,  130, 39,  112, 39 z', 0, 0, N'')
	, (10141, 10, 7, N'Right corniculate cartilage', N'M 182, 146,  168, 152,  158, 159,  152, 165,  153, 170,  158, 176,  168, 177,  176, 175,  185, 168,  188, 160,  189, 151,  183, 152,  182, 145 z', 0, 0, N'')
	, (10142, 10, 7, N'Left corniculate cartilage', N'M 59, 143,  69, 150,  79, 156,  88, 162,  93, 171,  92, 178,  84, 179,  76, 177,  65, 172,  59, 163,  50, 149,  59, 143 z', 0, 0, N'')
	, (10143, 10, 7, N'Right vestibular fold', N'M 132, 103,  140, 101,  150, 98,  161, 103,  172, 111,  182, 118,  184, 132,  184, 144,  172, 149,  162, 155,  148, 132,  133, 104 z', 0, 0, N'')
	, (10144, 10, 7, N'Left vestibular fold', N'M 115, 103,  104, 102,  94, 98,  81, 104,  72, 111,  63, 118,  54, 122,  53, 132,  57, 140,  67, 148,  78, 155,  89, 139,  115, 103 z', 0, 0, N'')
	, (10145, 10, 7, N'Right piriform fossa', N'M 237, 120,  224, 121,  210, 126,  202, 136,  207, 155,  220, 179,  230, 165,  237, 146,  238, 129,  237, 119 z', 0, 0, N'')
	, (10146, 10, 7, N'Left piriform fossa', N'M 8, 131,  18, 125,  28, 125,  39, 133,  47, 144,  40, 164,  27, 182,  17, 168,  12, 155,  8, 141,  9, 132 z', 0, 0, N'')
	, (10147, 10, 7, N'Right vocal cord', N'M 154, 161,  161, 155,  150, 136,  140, 119,  131, 103,  126, 109,  132, 121,  137, 132,  144, 143,  154, 162 z', 0, 0, N'')
	, (10148, 10, 7, N'Left vocal cord', N'M 119, 112,  113, 122,  109, 130,  104, 140,  98, 150,  89, 162,  78, 156,  90, 140,  98, 126,  113, 103,  120, 112 z', 0, 0, N'')
	, (10149, 10, 7, N'Left cuneiform cartilage', N'M 89, 162,  103, 168,  108, 174,  109, 181,  102, 187,  90, 186,  75, 177,  89, 179,  94, 174,  88, 163 z', 0, 0, N'')
	, (10150, 10, 7, N'Right cuneiform cartilage', N'M 151, 165,  140, 171,  131, 178,  130, 183,  136, 188,  149, 187,  157, 184,  167, 179,  157, 176,  152, 165 z', 0, 0, N'')
	, (10151, 10, 7, N'Vallecula', N'M 12, 107,  29, 108,  43, 114,  50, 107,  60, 89,  70, 75,  87, 63,  115, 61,  111, 39,  89, 43,  70, 49,  53, 57,  36, 69,  24, 83,  17, 95,  11, 108 z', 0, 0, N'')
	, (10152, 10, 7, N'Vallecula', N'M 131, 39,  126, 60,  143, 61,  159, 63,  172, 70,  180, 82,  190, 99,  202, 113,  211, 114,  222, 111,  234, 111,  229, 94,  218, 79,  198, 61,  176, 49,  150, 41,  131, 40 z', 0, 0, N'')
--************************* EBUS *************************
	, (11001, 11, 6, N'Upper third of trachea', N'M 241, 41,  332, 40,  329, 47,  321, 56,  319, 67,  315, 75,  315, 125,  260, 125,  259, 77,  253, 67,  241, 48,  238, 43 z', 0, 0, N'')
	, (11002, 11, 6, N'Middle third of trachea', N'M 260, 126,  315, 126,  316, 186,  260, 187,  259, 128 z', 0, 0, N'')
	, (11003, 11, 6, N'Bottom third of trachea', N'M 259, 187,  316, 186,  315, 245,  320, 254,  254, 255,  259, 241,  258, 188 z', 0, 0, N'')
	, (11004, 11, 6, N'Carina', N'M 321, 253,  290, 281,  281, 281,  253, 255,  319, 255 z', 0, 0, N'')
	, (11005, 11, 6, N'Right main bronchus', N'M 253, 255,  280, 281,  260, 303,  236, 275,  252, 257 z', 0, 0, N'')
	, (11006, 11, 6, N'Intermediate bronchus', N'M 235, 275,  258, 302,  247, 313,  235, 330,  209, 367,  185, 352,  214, 309,  234, 275 z', 0, 0, N'')
	, (11007, 11, 6, N'Right upper lobe bronchus', N'M 234, 277,  214, 269,  190, 274,  204, 277,  203, 293,  216, 305,  234, 276 z', 0, 0, N'')
	, (11008, 11, 6, N'Apical segment right upper lobe', N'M 213, 266,  212, 255,  224, 232,  213, 228,  210, 232,  196, 229,  195, 242,  186, 243,  175, 244,  174, 250,  178, 255,  184, 260,  189, 273,  215, 268 z', 0, 0, N'')
	, (11009, 11, 6, N'Posterior segment right upper lobe', N'M 181, 259,  190, 275,  205, 278,  201, 287,  155, 289,  147, 293,  136, 295,  135, 287,  139, 282,  137, 273,  146, 270,  163, 275,  161, 266,  166, 260,  176, 264,  177, 258 z', 0, 0, N'')
	, (11010, 11, 6, N'Anterior segment right upper lobe', N'M 178, 288,  203, 288,  203, 293,  188, 304,  187, 321,  164, 320,  163, 314,  154, 319,  146, 314,  139, 306,  145, 300,  158, 296,  175, 289 z', 0, 0, N'')
	, (11011, 11, 6, N'Right middle lobe bronchus', N'M 184, 352,  210, 367,  190, 373,  183, 353 z', 0, 0, N'')
	, (11012, 11, 6, N'Lateral segment right middle lobe', N'M 183, 353,  188, 370,  171, 369,  158, 381,  148, 374,  151, 368,  144, 362,  152, 354,  179, 352 z', 0, 0, N'')
	, (11013, 11, 6, N'Medial segment right middle lobe', N'M 211, 368,  211, 375,  216, 387,  218, 393,  210, 398,  199, 385,  188, 392,  179, 384,  189, 373,  208, 369 z', 0, 0, N'')
	, (11014, 11, 6, N'Right lower lobe bronchus', N'M 175, 369,  164, 388,  166, 423,  184, 426,  193, 391,  186, 391,  179, 384,  190, 373,  176, 370 z', 0, 0, N'')
	, (11015, 11, 6, N'Anterior basal segment right lower lobe', N'M 163, 391,  121, 401,  121, 409,  133, 410,  127, 419,  135, 424,  140, 422,  154, 425,  157, 411,  163, 407,  164, 391 z', 0, 0, N'')
	, (11016, 11, 6, N'Medial basal segment right lower lobe', N'M 190, 407,  198, 418,  207, 416,  207, 405,  197, 394,  192, 395,  190, 407 z', 0, 0, N'')
	, (11017, 11, 6, N'Lateral basal segment right lower lobe', N'M 163, 415,  131, 439,  135, 447,  166, 423,  163, 417 z', 0, 0, N'')
	, (11018, 11, 6, N'Posterior basal segment right lower lobe', N'M 185, 425,  190, 462,  179, 464,  172, 452,  166, 465,  154, 461,  160, 428,  166, 423,  183, 425 z', 0, 0, N'')
	, (11019, 11, 6, N'Left main bronchus', N'M 321, 253,  290, 281,  306, 294,  313, 303,  333, 322,  342, 323,  355, 337,  401, 341,  395, 307,  375, 296,  334, 261,  323, 253 z', 0, 0, N'')
	, (11020, 11, 6, N'Left upper lobe bronchus', N'M 396, 307,  413, 303,  417, 292,  441, 302,  432, 333,  416, 332,  401, 339,  395, 307 z', 0, 0, N'')
	, (11021, 11, 6, N'Apical segment left upper lobe', N'M 417, 290,  415, 273,  400, 255,  388, 251,  391, 240,  388, 229,  402, 227,  406, 237,  412, 232,  419, 237,  417, 246,  430, 244,  431, 251,  428, 260,  436, 257,  443, 265,  433, 274,  439, 301,  416, 291 z', 0, 0, N'')
	, (11022, 11, 6, N'Posterior segment left upper lobe', N'M 435, 277,  447, 260,  446, 247,  457, 248,  472, 240,  475, 245,  463, 263,  477, 259,  477, 271,  456, 278,  438, 293,  435, 279 z', 0, 0, N'')
	, (11023, 11, 6, N'Anterior segment left upper lobe', N'M 448, 284,  468, 284,  471, 292,  466, 299,  444, 301,  440, 291,  447, 285 z', 0, 0, N'')
	, (11024, 11, 6, N'Lingula bronchus', N'M 439, 310,  463, 327,  459, 338,  444, 342,  434, 332,  438, 310 z', 0, 0, N'')
	, (11025, 11, 6, N'Superior segment of lingula', N'M 465, 327,  494, 329,  497, 340,  475, 340,  492, 357,  482, 364,  457, 340,  465, 326 z', 0, 0, N'')
	, (11026, 11, 6, N'Inferior segment of lingula', N'M 444, 342,  445, 354,  437, 373,  446, 376,  455, 362,  461, 372,  470, 370,  461, 347,  456, 340,  444, 342 z', 0, 0, N'')
	, (11027, 11, 6, N'Left lower lobe bronchus', N'M 355, 337,  401, 341,  408, 368,  417, 387,  421, 395,  389, 404,  384, 386,  373, 364,  359, 347,  356, 339 z', 0, 0, N'')
	, (11028, 11, 6, N'Anterior medial basal segment left lower lobe', N'M 406, 399,  420, 395,  433, 403,  457, 405,  462, 415,  437, 413,  467, 437,  458, 443,  445, 439,  444, 444,  431, 440,  417, 414,  406, 400 z', 0, 0, N'')
	, (11029, 11, 6, N'Posterior basal segment left lower lobe', N'M 389, 405,  392, 415,  392, 426,  394, 434,  390, 448,  370, 452,  367, 468,  388, 464,  378, 490,  387, 494,  391, 491,  405, 490,  401, 480,  404, 470,  419, 497,  437, 488,  426, 475,  421, 465,  430, 465,  428, 456,  417, 447,  416, 415,  405, 400,  389, 405 z', 0, 0, N'')
	, (11030, 11, 6, N'Lateral basal segment left lower lobe', N'M 418, 430,  435, 447,  449, 455,  467, 458,  465, 467,  455, 468,  469, 477,  460, 484,  433, 461,  418, 443,  418, 431 z', 0, 0, N'')
	, (11031, 11, 6, N'Posterior basal segment left lower lobe', N'M 439, 417,  467, 418,  468, 429,  448, 427,  440, 417 z', 0, 0, N'')
	, (11032, 11, 6, N'Superior segment right lower lobe', N'M 203, 343,  210, 348,  205, 356,  198, 354,  198, 346 z', 0, 0, N'')
	, (11033, 11, 6, N'Superior segment right lower lobe', N'M 247, 372,  258, 364,  277, 365,  290, 384,  296, 396,  304, 389,  312, 382,  303, 375,  289, 357,  295, 351,  308, 350,  318, 360,  323, 351,  326, 340,  289, 342,  281, 331,  270, 333,  274, 349,  260, 349,  248, 345,  241, 355,  248, 358,  242, 362,  247, 373 z', 0, 0, N'')
	, (11034, 11, 6, N'Superior segment left lower lobe', N'M 390, 354,  395, 354,  398, 360,  389, 368,  385, 361,  388, 354 z', 0, 0, N'')
	, (11035, 11, 6, N'Superior segment left lower lobe', N'M 328, 370,  328, 407,  322, 422,  316, 432,  303, 449,  313, 449,  320, 447,  328, 457,  335, 451,  332, 442,  339, 428,  363, 436,  369, 426,  350, 417,  376, 412,  384, 405,  385, 398,  377, 399,  381, 394,  373, 388,  357, 399,  345, 400,  347, 386,  349, 377,  343, 371,  340, 374,  328, 370 z', 0, 0, N'')
	, (11036, 11, 6, N'Trachea', N'M 93, 99,  103, 91,  114, 84,  135, 85,  142, 92,  148, 98,  155, 98,  146, 110,  140, 120,  135, 130,  130, 141,  126, 149,  118, 149,  113, 138,  93, 100 z', 0, 0, N'')
	, (11037, 11, 6, N'Epiglottis', N'M 23, 139,  26, 147,  34, 147,  45, 148,  51, 156,  57, 166,  66, 179,  73, 190,  84, 196,  100, 199,  119, 199,  137, 199,  155, 199,  169, 191,  178, 181,  186, 167,  194, 155,  202, 147,  208, 139,  191, 139,  179, 145,  170, 153,  156, 162,  137, 168,  120, 169,  103, 166,  86, 159,  72, 149,  59, 140,  44, 140,  24, 139 z', 0, 0, N'')
	, (11038, 11, 6, N'Right aryepiglottic fold', N'M 24, 138,  36, 133,  44, 125,  56, 111,  62, 110,  64, 117,  62, 128,  63, 143,  52, 139,  36, 138,  24, 139 z', 0, 0, N'')
	, (11039, 11, 6, N'Left aryepiglottic fold', N'M 196, 111,  207, 128,  215, 132,  209, 139,  199, 139,  192, 139,  192, 125,  184, 116,  196, 111 z', 0, 0, N'')
	, (11040, 11, 6, N'Median glossoepiglottic fold', N'M 116, 199,  127, 199,  130, 221,  120, 222,  111, 221,  116, 200 z', 0, 0, N'')
	, (11041, 11, 6, N'Right corniculate cartilage', N'M 57, 108,  58, 99,  63, 90,  70, 83,  79, 82,  87, 84,  92, 90,  92, 97,  85, 106,  70, 113,  65, 115,  64, 111,  57, 109 z', 0, 0, N'')
	, (11042, 11, 6, N'Left corniculate cartilage', N'M 169, 82,  179, 88,  186, 96,  191, 104,  195, 110,  183, 115,  159, 99,  153, 90,  155, 82,  169, 82 z', 0, 0, N'')
	, (11043, 11, 6, N'Right vestibular fold', N'M 86, 106,  113, 155,  112, 157,  102, 160,  94, 161,  83, 156,  72, 148,  63, 142,  61, 128,  63, 116,  75, 111,  86, 105 z', 0, 0, N'')
	, (11044, 11, 6, N'Left vestibular fold', N'M 167, 105,  132, 157,  143, 160,  151, 163,  164, 157,  174, 148,  186, 141,  191, 138,  191, 125,  187, 119,  167, 105 z', 0, 0, N'')
	, (11045, 11, 6, N'Right piriform fossa', N'M 45, 123,  45, 105,  41, 89,  31, 74,  22, 87,  14, 100,  8, 115,  7, 140,  20, 140,  34, 134,  45, 123 z', 0, 0, N'')
	, (11046, 11, 6, N'Left piriform fossa', N'M 200, 114,  202, 99,  206, 85,  212, 73,  221, 83,  230, 96,  235, 111,  237, 129,  225, 135,  215, 134,  206, 126,  200, 115 z', 0, 0, N'')
	, (11047, 11, 6, N'Right vocal cord', N'M 85, 106,  114, 156,  119, 151,  107, 128,  93, 100,  86, 106 z', 0, 0, N'')
	, (11048, 11, 6, N'Left vocal cord', N'M 166, 106,  132, 156,  127, 150,  136, 130,  145, 113,  156, 98,  166, 105 z', 0, 0, N'')
	, (11049, 11, 6, N'Left cuneiform cartilage', N'M 135, 82,  142, 75,  151, 73,  161, 77,  169, 82,  161, 81,  154, 81,  152, 87,  156, 97,  149, 95,  136, 84 z', 0, 0, N'')
	, (11050, 11, 6, N'Right cuneiform cartilage', N'M 80, 80,  91, 75,  102, 72,  109, 72,  114, 76,  111, 85,  94, 97,  92, 91,  89, 85,  81, 81 z', 0, 0, N'')
	, (11051, 11, 6, N'Vallecula', N'M 11, 151,  21, 151,  32, 147,  43, 148,  49, 154,  56, 163,  64, 179,  71, 189,  82, 196,  97, 199,  115, 200,  111, 221,  96, 218,  78, 215,  66, 210,  52, 203,  37, 192,  23, 177,  14, 164,  11, 152 z', 0, 0, N'')
	, (11052, 11, 6, N'Vallecula', N'M 128, 199,  153, 200,  170, 190,  180, 178,  188, 166,  196, 152,  203, 148,  213, 151,  224, 153,  234, 154,  228, 167,  221, 178,  211, 189,  197, 200,  181, 209,  163, 216,  146, 220,  131, 221,  128, 199 z', 0, 0, N'')
--************************* EBUS Diagram 2 ********************
	, (11101, 11, 7, N'Upper third of trachea', N'M 241, 41,  332, 40,  329, 47,  321, 56,  319, 67,  315, 75,  315, 125,  260, 125,  259, 77,  253, 67,  241, 48,  238, 43 z', 0, 0, N'')
	, (11102, 11, 7, N'Middle third of trachea', N'M 260, 126,  315, 126,  316, 186,  260, 187,  259, 128 z', 0, 0, N'')
	, (11103, 11, 7, N'Bottom third of trachea', N'M 259, 187,  316, 186,  315, 245,  320, 254,  254, 255,  259, 241,  258, 188 z', 0, 0, N'')
	, (11104, 11, 7, N'Carina', N'M 321, 253,  290, 281,  281, 281,  253, 255,  319, 255 z', 0, 0, N'')
	, (11105, 11, 7, N'Right main bronchus', N'M 253, 255,  280, 281,  260, 303,  236, 275,  252, 257 z', 0, 0, N'')
	, (11106, 11, 7, N'Intermediate bronchus', N'M 235, 275,  258, 302,  247, 313,  235, 330,  209, 367,  185, 352,  214, 309,  234, 275 z', 0, 0, N'')
	, (11107, 11, 7, N'Right upper lobe bronchus', N'M 234, 277,  214, 269,  190, 274,  204, 277,  203, 293,  216, 305,  234, 276 z', 0, 0, N'')
	, (11108, 11, 7, N'Apical segment right upper lobe', N'M 213, 266,  212, 255,  224, 232,  213, 228,  210, 232,  196, 229,  195, 242,  186, 243,  175, 244,  174, 250,  178, 255,  184, 260,  189, 273,  215, 268 z', 0, 0, N'')
	, (11109, 11, 7, N'Posterior segment right upper lobe', N'M 181, 259,  190, 275,  205, 278,  201, 287,  155, 289,  147, 293,  136, 295,  135, 287,  139, 282,  137, 273,  146, 270,  163, 275,  161, 266,  166, 260,  176, 264,  177, 258 z', 0, 0, N'')
	, (11110, 11, 7, N'Anterior segment right upper lobe', N'M 178, 288,  203, 288,  203, 293,  188, 304,  187, 321,  164, 320,  163, 314,  154, 319,  146, 314,  139, 306,  145, 300,  158, 296,  175, 289 z', 0, 0, N'')
	, (11111, 11, 7, N'Right middle lobe bronchus', N'M 184, 352,  210, 367,  190, 373,  183, 353 z', 0, 0, N'')
	, (11112, 11, 7, N'Lateral segment right middle lobe', N'M 183, 353,  188, 370,  171, 369,  158, 381,  148, 374,  151, 368,  144, 362,  152, 354,  179, 352 z', 0, 0, N'')
	, (11113, 11, 7, N'Medial segment right middle lobe', N'M 211, 368,  211, 375,  216, 387,  218, 393,  210, 398,  199, 385,  188, 392,  179, 384,  189, 373,  208, 369 z', 0, 0, N'')
	, (11114, 11, 7, N'Right lower lobe bronchus', N'M 175, 369,  164, 388,  166, 423,  184, 426,  193, 391,  186, 391,  179, 384,  190, 373,  176, 370 z', 0, 0, N'')
	, (11115, 11, 7, N'Anterior basal segment right lower lobe', N'M 163, 391,  121, 401,  121, 409,  133, 410,  127, 419,  135, 424,  140, 422,  154, 425,  157, 411,  163, 407,  164, 391 z', 0, 0, N'')
	, (11116, 11, 7, N'Medial basal segment right lower lobe', N'M 190, 407,  198, 418,  207, 416,  207, 405,  197, 394,  192, 395,  190, 407 z', 0, 0, N'')
	, (11117, 11, 7, N'Lateral basal segment right lower lobe', N'M 163, 415,  131, 439,  135, 447,  166, 423,  163, 417 z', 0, 0, N'')
	, (11118, 11, 7, N'Posterior basal segment right lower lobe', N'M 185, 425,  190, 462,  179, 464,  172, 452,  166, 465,  154, 461,  160, 428,  166, 423,  183, 425 z', 0, 0, N'')
	, (11119, 11, 7, N'Left main bronchus', N'M 321, 253,  290, 281,  306, 294,  313, 303,  333, 322,  342, 323,  355, 337,  401, 341,  395, 307,  375, 296,  334, 261,  323, 253 z', 0, 0, N'')
	, (11120, 11, 7, N'Left upper lobe bronchus', N'M 396, 307,  413, 303,  417, 292,  441, 302,  432, 333,  416, 332,  401, 339,  395, 307 z', 0, 0, N'')
	, (11121, 11, 7, N'Apical segment left upper lobe', N'M 417, 290,  415, 273,  400, 255,  388, 251,  391, 240,  388, 229,  402, 227,  406, 237,  412, 232,  419, 237,  417, 246,  430, 244,  431, 251,  428, 260,  436, 257,  443, 265,  433, 274,  439, 301,  416, 291 z', 0, 0, N'')
	, (11122, 11, 7, N'Posterior segment left upper lobe', N'M 435, 277,  447, 260,  446, 247,  457, 248,  472, 240,  475, 245,  463, 263,  477, 259,  477, 271,  456, 278,  438, 293,  435, 279 z', 0, 0, N'')
	, (11123, 11, 7, N'Anterior segment left upper lobe', N'M 448, 284,  468, 284,  471, 292,  466, 299,  444, 301,  440, 291,  447, 285 z', 0, 0, N'')
	, (11124, 11, 7, N'Lingula bronchus', N'M 439, 310,  463, 327,  459, 338,  444, 342,  434, 332,  438, 310 z', 0, 0, N'')
	, (11125, 11, 7, N'Superior segment of lingula', N'M 465, 327,  494, 329,  497, 340,  475, 340,  492, 357,  482, 364,  457, 340,  465, 326 z', 0, 0, N'')
	, (11126, 11, 7, N'Inferior segment of lingula', N'M 444, 342,  445, 354,  437, 373,  446, 376,  455, 362,  461, 372,  470, 370,  461, 347,  456, 340,  444, 342 z', 0, 0, N'')
	, (11127, 11, 7, N'Left lower lobe bronchus', N'M 355, 337,  401, 341,  408, 368,  417, 387,  421, 395,  389, 404,  384, 386,  373, 364,  359, 347,  356, 339 z', 0, 0, N'')
	, (11128, 11, 7, N'Anterior medial basal segment left lower lobe', N'M 406, 399,  420, 395,  433, 403,  457, 405,  462, 415,  437, 413,  467, 437,  458, 443,  445, 439,  444, 444,  431, 440,  417, 414,  406, 400 z', 0, 0, N'')
	, (11129, 11, 7, N'Posterior basal segment left lower lobe', N'M 389, 405,  392, 415,  392, 426,  394, 434,  390, 448,  370, 452,  367, 468,  388, 464,  378, 490,  387, 494,  391, 491,  405, 490,  401, 480,  404, 470,  419, 497,  437, 488,  426, 475,  421, 465,  430, 465,  428, 456,  417, 447,  416, 415,  405, 400,  389, 405 z', 0, 0, N'')
	, (11130, 11, 7, N'Lateral basal segment left lower lobe', N'M 418, 430,  435, 447,  449, 455,  467, 458,  465, 467,  455, 468,  469, 477,  460, 484,  433, 461,  418, 443,  418, 431 z', 0, 0, N'')
	, (11131, 11, 7, N'Posterior basal segment left lower lobe', N'M 439, 417,  467, 418,  468, 429,  448, 427,  440, 417 z', 0, 0, N'')
	, (11132, 11, 7, N'Superior segment right lower lobe', N'M 203, 343,  210, 348,  205, 356,  198, 354,  198, 346 z', 0, 0, N'')
	, (11133, 11, 7, N'Superior segment right lower lobe', N'M 247, 372,  258, 364,  277, 365,  290, 384,  296, 396,  304, 389,  312, 382,  303, 375,  289, 357,  295, 351,  308, 350,  318, 360,  323, 351,  326, 340,  289, 342,  281, 331,  270, 333,  274, 349,  260, 349,  248, 345,  241, 355,  248, 358,  242, 362,  247, 373 z', 0, 0, N'')
	, (11134, 11, 7, N'Superior segment left lower lobe', N'M 390, 354,  395, 354,  398, 360,  389, 368,  385, 361,  388, 354 z', 0, 0, N'')
	, (11135, 11, 7, N'Superior segment left lower lobe', N'M 328, 370,  328, 407,  322, 422,  316, 432,  303, 449,  313, 449,  320, 447,  328, 457,  335, 451,  332, 442,  339, 428,  363, 436,  369, 426,  350, 417,  376, 412,  384, 405,  385, 398,  377, 399,  381, 394,  373, 388,  357, 399,  345, 400,  347, 386,  349, 377,  343, 371,  340, 374,  328, 370 z', 0, 0, N'')
	, (11136, 11, 7, N'Trachea', N'M 90, 160,  100, 148,  105, 138,  110, 127,  116, 117,  121, 111,  127, 113,  132, 120,  137, 132,  144, 144,  154, 160,  152, 164,  140, 171,  133, 176,  111, 177,  105, 169,  91, 161 z', 0, 0, N'')
	, (11137, 11, 7, N'Epiglottis', N'M 214, 122,  213, 114,  200, 112,  193, 102,  183, 87,  178, 78,  173, 70,  161, 63,  143, 60,  121, 60,  101, 61,  81, 66,  70, 75,  61, 88,  53, 102,  47, 112,  36, 121,  54, 123,  71, 111,  88, 100,  106, 93,  124, 92,  145, 95,  162, 103,  175, 113,  187, 120,  214, 123 z', 0, 0, N'')
	, (11138, 11, 7, N'Right aryepiglottic fold', N'M 182, 120,  184, 135,  183, 141,  182, 146,  184, 152,  190, 151,  196, 142,  202, 135,  211, 127,  220, 123,  203, 123,  193, 121,  183, 119 z', 0, 0, N'')
	, (11139, 11, 7, N'Left aryepiglottic fold', N'M 52, 123,  36, 121,  32, 127,  40, 135,  50, 149,  59, 143,  54, 135,  52, 124 z', 0, 0, N'')
	, (11140, 11, 7, N'Median glossoepiglottic fold', N'M 111, 40,  115, 60,  127, 59,  130, 39,  112, 39 z', 0, 0, N'')
	, (11141, 11, 7, N'Right corniculate cartilage', N'M 182, 146,  168, 152,  158, 159,  152, 165,  153, 170,  158, 176,  168, 177,  176, 175,  185, 168,  188, 160,  189, 151,  183, 152,  182, 145 z', 0, 0, N'')
	, (11142, 11, 7, N'Left corniculate cartilage', N'M 59, 143,  69, 150,  79, 156,  88, 162,  93, 171,  92, 178,  84, 179,  76, 177,  65, 172,  59, 163,  50, 149,  59, 143 z', 0, 0, N'')
	, (11143, 11, 7, N'Right vestibular fold', N'M 132, 103,  140, 101,  150, 98,  161, 103,  172, 111,  182, 118,  184, 132,  184, 144,  172, 149,  162, 155,  148, 132,  133, 104 z', 0, 0, N'')
	, (11144, 11, 7, N'Left vestibular fold', N'M 115, 103,  104, 102,  94, 98,  81, 104,  72, 111,  63, 118,  54, 122,  53, 132,  57, 140,  67, 148,  78, 155,  89, 139,  115, 103 z', 0, 0, N'')
	, (11145, 11, 7, N'Right piriform fossa', N'M 237, 120,  224, 121,  210, 126,  202, 136,  207, 155,  220, 179,  230, 165,  237, 146,  238, 129,  237, 119 z', 0, 0, N'')
	, (11146, 11, 7, N'Left piriform fossa', N'M 8, 131,  18, 125,  28, 125,  39, 133,  47, 144,  40, 164,  27, 182,  17, 168,  12, 155,  8, 141,  9, 132 z', 0, 0, N'')
	, (11147, 11, 7, N'Right vocal cord', N'M 154, 161,  161, 155,  150, 136,  140, 119,  131, 103,  126, 109,  132, 121,  137, 132,  144, 143,  154, 162 z', 0, 0, N'')
	, (11148, 11, 7, N'Left vocal cord', N'M 119, 112,  113, 122,  109, 130,  104, 140,  98, 150,  89, 162,  78, 156,  90, 140,  98, 126,  113, 103,  120, 112 z', 0, 0, N'')
	, (11149, 11, 7, N'Left cuneiform cartilage', N'M 89, 162,  103, 168,  108, 174,  109, 181,  102, 187,  90, 186,  75, 177,  89, 179,  94, 174,  88, 163 z', 0, 0, N'')
	, (11150, 11, 7, N'Right cuneiform cartilage', N'M 151, 165,  140, 171,  131, 178,  130, 183,  136, 188,  149, 187,  157, 184,  167, 179,  157, 176,  152, 165 z', 0, 0, N'')
	, (11151, 11, 7, N'Vallecula', N'M 12, 107,  29, 108,  43, 114,  50, 107,  60, 89,  70, 75,  87, 63,  115, 61,  111, 39,  89, 43,  70, 49,  53, 57,  36, 69,  24, 83,  17, 95,  11, 108 z', 0, 0, N'')
	, (11152, 11, 7, N'Vallecula', N'M 131, 39,  126, 60,  143, 61,  159, 63,  172, 70,  180, 82,  190, 99,  202, 113,  211, 114,  222, 111,  234, 111,  229, 94,  218, 79,  198, 61,  176, 49,  150, 41,  131, 40 z', 0, 0, N'');

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------104a Create Table EBUS Lymph Nodes.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_EBUSLymphNodes](
	[EBUSLymphNodeId] [int] NOT NULL,
	[Name] [varchar] (500),
	[XCoordinate] [int] NOT NULL,
	[YCoordinate] [int] NOT NULL,
	CONSTRAINT [UQ_EBUSLymphNodes] UNIQUE (EBUSLymphNodeId),
	CONSTRAINT [PK_EBUSLymphNodes] PRIMARY KEY CLUSTERED ([EBUSLymphNodeId]),
)

GO
INSERT INTO ERS_EBUSLymphNodes (EBUSLymphNodeId, Name, XCoordinate, YCoordinate) VALUES 
 (1, 'Lymph node station 1', 285, 126)
, (2, 'Lymph node station 2R', 262, 155)
, (3, 'Lymph node station 2L', 312, 155)
, (4, 'Lymph node station 4R', 262, 216)
, (5, 'Lymph node station 4L', 312, 216)
, (6, 'Lymph node station 10R', 250, 255)
, (7, 'Lymph node station 10L', 319, 255)
, (8, 'Lymph node station 7', 285, 278)
, (9, 'Lymph node station 11R', 202, 292)
, (10, 'Lymph node station 11L', 400, 336)

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------105 Create Tables abnormalities-regions matrices.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_AbnormalitiesMatrixUpperGI](
	[AbnormalitiesMatrixUpperGIId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureType] [int] NOT NULL,
	[Region] [varchar] (500) NOT NULL,
	[Gastritis] [bit] NOT NULL,
	[Gastric Ulcer] [bit] NOT NULL,
	[Lumen] [bit] NOT NULL,
	[Malignancy] [bit] NOT NULL,
	[Post Surgery] [bit] NOT NULL,
	[Deformity] [bit] NOT NULL,
	[Polyps] [bit] NOT NULL,
	[Varices] [bit] NOT NULL,
	[Hiatus Hernia] [bit] NOT NULL,
	[Achalasia] [bit] NOT NULL,
	[Oesophagitis] [bit] NOT NULL,
	[Barretts] [bit] NOT NULL,
	[Miscellaneous] [bit] NOT NULL,
	[Diverticulum/Other] [bit] NOT NULL,
	[Tumour] [bit] NOT NULL,
	[Duodenitis] [bit] NOT NULL,
	[Pyloric Ulcer] [bit] NOT NULL,
	[Duodenal Ulcer] [bit] NOT NULL,
	[Scarring/Stenosis] [bit] NOT NULL,
	[Vascular Lesions] [bit] NOT NULL,
	[Atrophic Duodenum] [bit] NOT NULL,
	[Mediastinal] [bit] NOT NULL,
	[Area] [varchar] (50) NOT NULL
	CONSTRAINT [PK_AbnormalitiesMatrixUpperGI] PRIMARY KEY CLUSTERED ([AbnormalitiesMatrixUpperGIId]),
	CONSTRAINT [UK_AbnormalitiesMatrixUpperGI] UNIQUE ([ProcedureType],[Region])
) ON [PRIMARY]
GO


INSERT INTO [ERS_AbnormalitiesMatrixUpperGI] 
VALUES 
	--OGD
	  (1, 'Right Upper Oesophagus',			0,0,0,0,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Upper Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Left Upper Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Right Middle Oesophagus',		0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Middle Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Left Middle Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Right Lower Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Lower Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Left Lower Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (1, 'Cardia',							1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Fundus',							1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Lesser Curve Upper Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Upper Body',						1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Greater Curve Upper Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Lesser Curve Middle Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Middle Body',					1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Greater Curve Middle Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Angulus',						1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Lower Body',						1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Greater Curve Lower Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Lesser Curve Antrum',			1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Antrum',							1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Greater Curve Antrum',			1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Lesser Curve Prepyloric Region',	1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Prepyloric Region',				1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Greater Curve Prepyloric Region',	1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (1, 'Superior Pylorus',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0, 'Duodenum')
	, (1, 'Pylorus',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0, 'Duodenum')
	, (1, 'Inferior Pylorus',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0, 'Duodenum')
	, (1, 'Superior Bulb',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'Bulb',							0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'Inferior Bulb',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'Lateral Wall First Part',		0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'First Part',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'Medial First Part',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'Lateral Wall Second Part',		0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'Second Part',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'Medial Second Part',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (1, 'Third Part',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	--EUS(OGD)
	, (6, 'Right Upper Oesophagus',			0,0,0,0,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Upper Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Left Upper Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Right Middle Oesophagus',		0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Middle Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Left Middle Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Right Lower Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Lower Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Left Lower Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0, 'Oesophagus')
	, (6, 'Cardia',							1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Fundus',							1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Lesser Curve Upper Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Upper Body',						1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Greater Curve Upper Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Lesser Curve Middle Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Middle Body',					1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Greater Curve Middle Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Angulus',						1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Lower Body',						1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Greater Curve Lower Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Lesser Curve Antrum',			1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Antrum',							1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Greater Curve Antrum',			1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Lesser Curve Prepyloric Region',	1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Prepyloric Region',				1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Greater Curve Prepyloric Region',	1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0, 'Stomach')
	, (6, 'Superior Pylorus',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0, 'Duodenum')
	, (6, 'Pylorus',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0, 'Duodenum')
	, (6, 'Inferior Pylorus',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0, 'Duodenum')
	, (6, 'Superior Bulb',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Bulb',							0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Inferior Bulb',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Lateral Wall First Part',		0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'First Part',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Medial First Part',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Lateral Wall Second Part',		0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Second Part',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Medial Second Part',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Third Part',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0, 'Duodenum')
	, (6, 'Mediastinal',					0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, '')
GO


CREATE TABLE [dbo].[ERS_AbnormalitiesMatrixERCP](
	[AbnormalitiesMatrixERCPId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureType] [int] NOT NULL,
	[Region] [varchar] (500) NOT NULL,
	[Gall Bladder] [bit] NOT NULL, 
	[Duct] [bit] NOT NULL, 
	[Parenchyma] [bit] NOT NULL, 
	[Appearance] [bit] NOT NULL, 
	[Diverticulum] [bit] NOT NULL, 
	[Tumour] [bit] NOT NULL, 
	[Diverticulum/Other] [bit] NOT NULL, 
	[TumourCommon] [bit] NOT NULL,
	[Duodenitis] [bit] NOT NULL,
	[Duodenal Ulcer] [bit] NOT NULL,
	[Scarring/Stenosis] [bit] NOT NULL,
	[Vascular Lesions] [bit] NOT NULL,
	[Atrophic Duodenum] [bit] NOT NULL,
	[Site] [bit] NOT NULL,
	[Area] [varchar] (50) NOT NULL
	CONSTRAINT [PK_AbnormalitiesMatrixERCP] PRIMARY KEY CLUSTERED ([AbnormalitiesMatrixERCPId]),
	CONSTRAINT [UK_AbnormalitiesMatrixERCP] UNIQUE ([ProcedureType],[Region])
) ON [PRIMARY]
GO


INSERT INTO [ERS_AbnormalitiesMatrixERCP] VALUES 
--ERCP
(2, 'Right Hepatic Lobe',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Left Hepatic Lobe',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Common Hepatic Duct',			0,1,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Bifurcation',					0,1,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Left Hepatic Ducts',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Right Hepatic Ducts',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Left intra-hepatic Ducts',	0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Right intra-hepatic Ducts',	0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Cystic Duct',					0,1,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Gall Bladder',				1,0,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Tail',						0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (2, 'Body',						0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (2, 'Neck',						0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (2, 'Head',						0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (2, 'Uncinate Process',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (2, 'Accessory Pancreatic Duct',	0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (2, 'Common Bile Duct',			0,1,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (2, 'Major Papilla',				0,0,0,1,1,1,0,0,0,0,0,0,0,0, 'Papillae')
, (2, 'Main Pancreatic Duct',		0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (2, 'Lateral Wall First Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (2, 'Medial Wall First Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (2, 'First Part',					0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (2, 'Lateral Wall Second Part',	0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (2, 'Medial Wall Second Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (2, 'Second Part',					0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (2, 'Lateral Wall Third Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (2, 'Medial Wall Third Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (2, 'Third Part',					0,0,0,0,0,0,1,1,1,1,1,1,0,0, 'Duodenum')
, (2, 'Minor Papilla',				0,0,0,1,1,1,0,0,0,0,0,0,0,0, 'Papillae')
--EUS (HPB)
, (7, 'Right Hepatic Lobe',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Left Hepatic Lobe',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Common Hepatic Duct',			0,1,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Bifurcation',					0,1,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Left Hepatic Ducts',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Right Hepatic Ducts',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Left intra-hepatic Ducts',	0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Right intra-hepatic Ducts',	0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Cystic Duct',					0,1,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Gall Bladder',				1,0,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Tail',						0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (7, 'Body',						0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (7, 'Neck',						0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (7, 'Head',						0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (7, 'Uncinate Process',			0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (7, 'Accessory Pancreatic Duct',	0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (7, 'Common Bile Duct',			0,1,0,0,0,0,0,0,0,0,0,0,0,0, 'Biliary')
, (7, 'Major Papilla',				0,0,0,1,1,1,0,0,0,0,0,0,0,0, 'Papillae')
, (7, 'Main Pancreatic Duct',		0,1,1,0,0,0,0,0,0,0,0,0,0,0, 'Pancreas')
, (7, 'Lateral Wall First Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (7, 'Medial Wall First Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (7, 'First Part',					0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (7, 'Lateral Wall Second Part',	0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (7, 'Medial Wall Second Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (7, 'Second Part',					0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (7, 'Lateral Wall Third Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (7, 'Medial Wall Third Part',		0,0,0,0,0,0,1,1,1,1,1,1,1,0, 'Duodenum')
, (7, 'Third Part',					0,0,0,0,0,0,1,1,1,1,1,1,0,0, 'Duodenum')
, (7, 'Minor Papilla',				0,0,0,1,1,1,0,0,0,0,0,0,0,0, 'Papillae')
, (7, 'Site',						0,0,0,0,0,0,0,0,0,0,0,0,0,1, '')
GO

CREATE TABLE [dbo].[ERS_AbnormalitiesMatrixColon](
	[AbnormalitiesMatrixColonId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureType] [int] NOT NULL,
	[Region] [varchar] (500) NOT NULL,
	[Calibre] [bit] NOT NULL,
	[Mucosa] [bit] NOT NULL, 
	[Diverticulum] [bit] NOT NULL, 
	[Lesions] [bit] NOT NULL, 
	[Vascularity] [bit] NOT NULL, 
	[Haemorrhage] [bit] NOT NULL, 
	[Miscellaneous] [bit] NOT NULL,
	[Perianal Lesions] [bit] NOT NULL
	CONSTRAINT [PK_AbnormalitiesMatrixColon] PRIMARY KEY CLUSTERED ([AbnormalitiesMatrixColonId]),
	CONSTRAINT [UK_AbnormalitiesMatrixColon] UNIQUE ([ProcedureType],[Region])
) ON [PRIMARY]
GO


INSERT INTO [ERS_AbnormalitiesMatrixColon] 
VALUES 
	  (3, 'Caecum',					1,1,1,1,1,1,1,0)
	, (3, 'Ileocecal Valve',		1,1,1,1,1,1,1,0)
	, (3, 'Appendiceal Orifice',	1,1,1,1,1,1,1,0)
	, (3, 'Proximal Ascending',		1,1,1,1,1,1,1,0)
	, (3, 'Mid Ascending',			1,1,1,1,1,1,1,0)
	, (3, 'Mid Descending',			1,1,1,1,1,1,1,0)
	, (3, 'Distal Ascending',		1,1,1,1,1,1,1,0)
	, (3, 'Hepatic Flexure',		1,1,1,1,1,1,1,0)
	, (3, 'Proximal Transverse',	1,1,1,1,1,1,1,0)
	, (3, 'Mid Transverse',			1,1,1,1,1,1,1,0)
	, (3, 'Distal Transverse',		1,1,1,1,1,1,1,0)
	, (3, 'Splenic Flexure',		1,1,1,1,1,1,1,0)
	, (3, 'Proximal Descending',	1,1,1,1,1,1,1,0)
	, (3, 'Distal Descending',		1,1,1,1,1,1,1,0)
	, (3, 'Proximal Sigmoid',		1,1,1,1,1,1,1,0)
	, (3, 'Distal Sigmoid',			1,1,1,1,1,1,1,0)
	, (3, 'Rectum',					1,1,1,1,1,1,1,0)
	, (3, 'Rectosigmoid Junction',	1,1,1,1,1,1,1,0)
	, (3, 'Anal Margin',			1,1,1,1,1,1,1,1)
	, (3, 'Terminal Ileum',			1,1,1,1,1,1,1,0)
	, (3, 'Anus',					1,1,1,1,1,1,1,0)

	, (4, 'Caecum',					1,1,1,1,1,1,1,0)
	, (4, 'Ileocecal Valve',		1,1,1,1,1,1,1,0)
	, (4, 'Appendiceal Orifice',	1,1,1,1,1,1,1,0)
	, (4, 'Proximal Ascending',		1,1,1,1,1,1,1,0)
	, (4, 'Mid Ascending',			1,1,1,1,1,1,1,0)
	, (4, 'Mid Descending',			1,1,1,1,1,1,1,0)
	, (4, 'Distal Ascending',		1,1,1,1,1,1,1,0)
	, (4, 'Hepatic Flexure',		1,1,1,1,1,1,1,0)
	, (4, 'Proximal Transverse',	1,1,1,1,1,1,1,0)
	, (4, 'Mid Transverse',			1,1,1,1,1,1,1,0)
	, (4, 'Distal Transverse',		1,1,1,1,1,1,1,0)
	, (4, 'Splenic Flexure',		1,1,1,1,1,1,1,0)
	, (4, 'Proximal Descending',	1,1,1,1,1,1,1,0)
	, (4, 'Distal Descending',		1,1,1,1,1,1,1,0)
	, (4, 'Proximal Sigmoid',		1,1,1,1,1,1,1,0)
	, (4, 'Distal Sigmoid',			1,1,1,1,1,1,1,0)
	, (4, 'Rectum',					1,1,1,1,1,1,1,0)
	, (4, 'Rectosigmoid Junction',	1,1,1,1,1,1,1,0)
	, (4, 'Anal Margin',			1,1,1,1,1,1,1,1)
	, (4, 'Terminal Ileum',			1,1,1,1,1,1,1,0)
	, (4, 'Anus',					1,1,1,1,1,1,1,0)

	, (5, 'Caecum',					1,1,1,1,1,1,1,0)
	, (5, 'Ileocecal Valve',		1,1,1,1,1,1,1,0)
	, (5, 'Appendiceal Orifice',	1,1,1,1,1,1,1,0)
	, (5, 'Proximal Ascending',		1,1,1,1,1,1,1,0)
	, (5, 'Mid Ascending',			1,1,1,1,1,1,1,0)
	, (5, 'Mid Descending',			1,1,1,1,1,1,1,0)
	, (5, 'Distal Ascending',		1,1,1,1,1,1,1,0)
	, (5, 'Hepatic Flexure',		1,1,1,1,1,1,1,0)
	, (5, 'Proximal Transverse',	1,1,1,1,1,1,1,0)
	, (5, 'Mid Transverse',			1,1,1,1,1,1,1,0)
	, (5, 'Distal Transverse',		1,1,1,1,1,1,1,0)
	, (5, 'Splenic Flexure',		1,1,1,1,1,1,1,0)
	, (5, 'Proximal Descending',	1,1,1,1,1,1,1,0)
	, (5, 'Distal Descending',		1,1,1,1,1,1,1,0)
	, (5, 'Proximal Sigmoid',		1,1,1,1,1,1,1,0)
	, (5, 'Distal Sigmoid',			1,1,1,1,1,1,1,0)
	, (5, 'Rectum',					1,1,1,1,1,1,1,0)
	, (5, 'Rectosigmoid Junction',	1,1,1,1,1,1,1,0)
	, (5, 'Anal Margin',			1,1,1,1,1,1,1,1)
	, (5, 'Terminal Ileum',			1,1,1,1,1,1,1,0)
	, (5, 'Anus',					1,1,1,1,1,1,1,0)
GO


CREATE TABLE [dbo].[ERS_AbnormalitiesMatrixAntegrade](
	[AbnormalitiesMatrixAntegradeId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureType] [int] NOT NULL,
	[Region] [varchar] (500) NOT NULL,
	[Gastritis] [bit] NOT NULL,
	[Gastric Ulcer] [bit] NOT NULL,
	[Lumen] [bit] NOT NULL,
	[Malignancy] [bit] NOT NULL,
	[Post Surgery] [bit] NOT NULL,
	[Deformity] [bit] NOT NULL,
	[Polyps] [bit] NOT NULL,
	[Varices] [bit] NOT NULL,
	[Hiatus Hernia] [bit] NOT NULL,
	[Achalasia] [bit] NOT NULL,
	[Oesophagitis] [bit] NOT NULL,
	[Barretts] [bit] NOT NULL,
	[Miscellaneous] [bit] NOT NULL,
	[Diverticulum/Other] [bit] NOT NULL,
	[Tumour] [bit] NOT NULL,
	[Duodenitis] [bit] NOT NULL,
	[Pyloric Ulcer] [bit] NOT NULL,
	[Duodenal Ulcer] [bit] NOT NULL,
	[Lesions] [bit] NOT NULL,
	[Jejunitis] [bit] NOT NULL,
	[Jejunal Ulcer] [bit] NOT NULL,
	[Ileitis] [bit] NOT NULL,
	[Ileal Ulcer] [bit] NOT NULL,
	[Scarring/Stenosis] [bit] NOT NULL,
	[Vascular Lesions] [bit] NOT NULL,
	[Atrophic Duodenum] [bit] NOT NULL,
	[Area] [varchar] (50) NOT NULL
	CONSTRAINT [PK_AbnormalitiesMatrixAntegrade] PRIMARY KEY CLUSTERED ([AbnormalitiesMatrixAntegradeId]),
	CONSTRAINT [UK_AbnormalitiesMatrixAntegrade] UNIQUE ([ProcedureType],[Region])
) ON [PRIMARY]
GO


INSERT INTO [ERS_AbnormalitiesMatrixAntegrade] 
VALUES 
	  (8, 'Right Upper Oesophagus',			0,0,0,0,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Upper Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Left Upper Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Right Middle Oesophagus',		0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Middle Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Left Middle Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Right Lower Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Lower Oesophagus',				0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Left Lower Oesophagus',			0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Oesophagus')
	, (8, 'Cardia',							1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Fundus',							1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Lesser Curve Upper Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Upper Body',						1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Greater Curve Upper Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Lesser Curve Middle Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Middle Body',					1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Greater Curve Middle Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Angulus',						1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Lower Body',						1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Greater Curve Lower Body',		1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Lesser Curve Antrum',			1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Antrum',							1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Greater Curve Antrum',			1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Lesser Curve Prepyloric Region',	1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Prepyloric Region',				1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Greater Curve Prepyloric Region',1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0, 'Stomach')
	, (8, 'Superior Pylorus',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Pylorus',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Inferior Pylorus',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Superior Bulb',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Bulb',							0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Inferior Bulb',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Lateral Wall First Part',		0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'First Part',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Medial First Part',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Lateral Wall Second Part',		0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Second Part',					0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Medial Second Part',				0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Third Part',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Fourth Part',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1, 'Duodenum')
	, (8, 'Jejunum',						0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,0, 'Duodenum')
	, (8, 'Ileum',							0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,1,0, 'Duodenum')
GO


CREATE TABLE [dbo].[ERS_AbnormalitiesMatrixRetrograde](
	[AbnormalitiesMatrixRetrogradeId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureType] [int] NOT NULL,
	[Region] [varchar] (500) NOT NULL,
	[Calibre] [bit] NOT NULL,
	[Mucosa] [bit] NOT NULL, 
	[Diverticulum] [bit] NOT NULL, 
	[Lesions] [bit] NOT NULL, 
	[Vascularity] [bit] NOT NULL, 
	[Haemorrhage] [bit] NOT NULL
	CONSTRAINT [PK_AbnormalitiesMatrixRetrograde] PRIMARY KEY CLUSTERED ([AbnormalitiesMatrixRetrogradeId]),
	CONSTRAINT [UK_AbnormalitiesMatrixRetrograde] UNIQUE ([ProcedureType],[Region])
) ON [PRIMARY]
GO


INSERT INTO [ERS_AbnormalitiesMatrixRetrograde] VALUES (9, 'Small intestine', 1,1,1,1,1,1)

GO


CREATE TABLE [dbo].[ERS_AbnormalitiesMatrixBRT](
	[AbnormalitiesMatrixBRTId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureType] [int] NOT NULL,
	[Region] [varchar] (500) NOT NULL,
	[Abnormality Descriptions] [bit] NOT NULL,
	[EBUS Abnormality Descriptions] [bit] NOT NULL
	CONSTRAINT [PK_AbnormalitiesMatrixBRT] PRIMARY KEY CLUSTERED ([AbnormalitiesMatrixBRTId]),
	CONSTRAINT [UK_AbnormalitiesMatrixBRT] UNIQUE ([ProcedureType],[Region])
) ON [PRIMARY]
GO


INSERT INTO [ERS_AbnormalitiesMatrixBRT] VALUES 
(10, 'BRT', 1,0),
(11, 'EBUS', 1,1)

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------106 Create Table ERS_SiteDetailsMenuUrls.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_SiteDetailsMenuUrls] (
	[SiteDetailsMenuUrlsId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureType] [int] NOT NULL,
	[Menu] [varchar] (500) NOT NULL,
	[NavigateUrl] [varchar] (4000)
	CONSTRAINT [PK_SiteDetailsMenuUrls] PRIMARY KEY CLUSTERED ([SiteDetailsMenuUrlsId])
) ON [PRIMARY]


INSERT INTO [ERS_SiteDetailsMenuUrls] 
VALUES 
	  (1, 'Gastritis',			'~/Products/Gastro/Abnormalities/OGD/Gastritis.aspx')
	, (1, 'Gastric Ulcer',		'~/Products/Gastro/Abnormalities/OGD/GastricUlcer.aspx')
	, (1, 'Lumen',				'~/Products/Gastro/Abnormalities/OGD/Lumen.aspx')
	, (1, 'Malignancy',			'~/Products/Gastro/Abnormalities/OGD/Malignancy.aspx')
	, (1, 'Post Surgery',		'~/Products/Gastro/Abnormalities/OGD/PostSurgery.aspx')
	, (1, 'Deformity',			'~/Products/Gastro/Abnormalities/OGD/Deformity.aspx')
	, (1, 'Polyps',				'~/Products/Gastro/Abnormalities/OGD/Polyps.aspx')
	, (1, 'Varices',				'~/Products/Gastro/Abnormalities/OGD/Varices.aspx')
	, (1, 'Hiatus Hernia',		'~/Products/Gastro/Abnormalities/OGD/HiatusHernia.aspx')
	, (1, 'Achalasia',			'~/Products/Gastro/Abnormalities/OGD/Achalasia.aspx')
	, (1, 'Oesophagitis',		'~/Products/Gastro/Abnormalities/OGD/Oesophagitis.aspx')
	, (1, 'Barretts',			'~/Products/Gastro/Abnormalities/OGD/BarrettEpithelium.aspx')
	, (1, 'Miscellaneous',		'~/Products/Gastro/Abnormalities/OGD/Miscellaneous.aspx')
	, (1, 'Diverticulum/Other',	'~/Products/Gastro/Abnormalities/Common/Diverticulum.aspx')
	, (1, 'Tumour',				'~/Products/Gastro/Abnormalities/Common/Tumour.aspx')
	, (1, 'Duodenitis',			'~/Products/Gastro/Abnormalities/Common/Duodenitis.aspx')
	, (1, 'Pyloric Ulcer',		'~/Products/UnderConstruction.aspx')
	, (1, 'Duodenal Ulcer',		'~/Products/Gastro/Abnormalities/Common/DuodenalUlcer.aspx')
	, (1, 'Scarring/Stenosis',	'~/Products/Gastro/Abnormalities/Common/Scarring.aspx')
	, (1, 'Vascular Lesions',	'~/Products/Gastro/Abnormalities/Common/VascularLesions.aspx')
	, (1, 'Atrophic Duodenum',	'~/Products/Gastro/Abnormalities/Common/AtrophicDuodenum.aspx')

	, (2, 'Gall Bladder',		'~/Products/Gastro/Abnormalities/ERCP/Duct.aspx')
	, (2, 'Duct',				'~/Products/Gastro/Abnormalities/ERCP/Duct.aspx')
	, (2, 'Parenchyma',			'~/Products/Gastro/Abnormalities/ERCP/Parenchyma.aspx')
	, (2, 'Appearance',			'~/Products/Gastro/Abnormalities/ERCP/Appearance.aspx')
	, (2, 'Diverticulum',		'~/Products/Gastro/Abnormalities/ERCP/Diverticulum.aspx')
	, (2, 'Tumour',				'~/Products/Gastro/Abnormalities/ERCP/Tumour.aspx')
	, (2, 'Diverticulum/Other',	'~/Products/Gastro/Abnormalities/Common/Diverticulum.aspx')
	, (2, 'TumourCommon',		'~/Products/Gastro/Abnormalities/Common/Tumour.aspx')
	, (2, 'Duodenitis',			'~/Products/Gastro/Abnormalities/Common/Duodenitis.aspx')
	, (2, 'Duodenal Ulcer',		'~/Products/Gastro/Abnormalities/Common/DuodenalUlcer.aspx')
	, (2, 'Scarring/Stenosis',	'~/Products/Gastro/Abnormalities/Common/Scarring.aspx')
	, (2, 'Vascular Lesions',	'~/Products/Gastro/Abnormalities/Common/VascularLesions.aspx')
	, (2, 'Atrophic Duodenum',	'~/Products/Gastro/Abnormalities/Common/AtrophicDuodenum.aspx')

	, (3, 'Calibre',			'~/Products/Gastro/Abnormalities/Colon/Calibre.aspx')
	, (3, 'Mucosa',				'~/Products/Gastro/Abnormalities/Colon/Mucosa.aspx')
	, (3, 'Diverticulum',		'~/Products/Gastro/Abnormalities/Colon/Diverticulum.aspx')
	, (3, 'Lesions',			'~/Products/Gastro/Abnormalities/Colon/Lesions.aspx')
	, (3, 'Vascularity',		'~/Products/Gastro/Abnormalities/Colon/Vascularity.aspx')
	, (3, 'Haemorrhage',		'~/Products/Gastro/Abnormalities/Colon/Haemorrhage.aspx')
	, (3, 'Miscellaneous',		'~/Products/Gastro/Abnormalities/Colon/Miscellaneous.aspx')
	, (3, 'Perianal Lesions',	'~/Products/Gastro/Abnormalities/Colon/PerianalLesions.aspx')

	, (4, 'Calibre',			'~/Products/Gastro/Abnormalities/Colon/Calibre.aspx')
	, (4, 'Mucosa',				'~/Products/Gastro/Abnormalities/Colon/Mucosa.aspx')
	, (4, 'Diverticulum',		'~/Products/Gastro/Abnormalities/Colon/Diverticulum.aspx')
	, (4, 'Lesions',			'~/Products/Gastro/Abnormalities/Colon/Lesions.aspx')
	, (4, 'Vascularity',		'~/Products/Gastro/Abnormalities/Colon/Vascularity.aspx')
	, (4, 'Haemorrhage',		'~/Products/Gastro/Abnormalities/Colon/Haemorrhage.aspx')
	, (4, 'Miscellaneous',		'~/Products/Gastro/Abnormalities/Colon/Miscellaneous.aspx')
	, (4, 'Perianal Lesions',	'~/Products/Gastro/Abnormalities/Colon/PerianalLesions.aspx')

	, (5, 'Calibre',			'~/Products/Gastro/Abnormalities/Colon/Calibre.aspx')
	, (5, 'Mucosa',				'~/Products/Gastro/Abnormalities/Colon/Mucosa.aspx')
	, (5, 'Diverticulum',		'~/Products/Gastro/Abnormalities/Colon/Diverticulum.aspx')
	, (5, 'Lesions',			'~/Products/Gastro/Abnormalities/Colon/Lesions.aspx')
	, (5, 'Vascularity',		'~/Products/Gastro/Abnormalities/Colon/Vascularity.aspx')
	, (5, 'Haemorrhage',		'~/Products/Gastro/Abnormalities/Colon/Haemorrhage.aspx')
	, (5, 'Perianal Lesions',	'~/Products/Gastro/Abnormalities/Colon/PerianalLesions.aspx')

	, (6, 'Gastritis',			'~/Products/Gastro/Abnormalities/OGD/Gastritis.aspx')
	, (6, 'Gastric Ulcer',		'~/Products/Gastro/Abnormalities/OGD/GastricUlcer.aspx')
	, (6, 'Lumen',				'~/Products/Gastro/Abnormalities/OGD/Lumen.aspx')
	, (6, 'Malignancy',			'~/Products/Gastro/Abnormalities/OGD/Malignancy.aspx')
	, (6, 'Post Surgery',		'~/Products/Gastro/Abnormalities/OGD/PostSurgery.aspx')
	, (6, 'Deformity',			'~/Products/Gastro/Abnormalities/OGD/Deformity.aspx')
	, (6, 'Polyps',				'~/Products/Gastro/Abnormalities/OGD/Polyps.aspx')
	, (6, 'Varices',				'~/Products/Gastro/Abnormalities/OGD/Varices.aspx')
	, (6, 'Hiatus Hernia',		'~/Products/Gastro/Abnormalities/OGD/HiatusHernia.aspx')
	, (6, 'Achalasia',			'~/Products/Gastro/Abnormalities/OGD/Achalasia.aspx')
	, (6, 'Oesophagitis',		'~/Products/Gastro/Abnormalities/OGD/Oesophagitis.aspx')
	, (6, 'Barretts',			'~/Products/Gastro/Abnormalities/OGD/BarrettEpithelium.aspx')
	, (6, 'Miscellaneous',		'~/Products/Gastro/Abnormalities/OGD/Miscellaneous.aspx')
	, (6, 'Diverticulum/Other',	'~/Products/Gastro/Abnormalities/Common/Diverticulum.aspx')
	, (6, 'Tumour',				'~/Products/Gastro/Abnormalities/Common/Tumour.aspx')
	, (6, 'Duodenitis',			'~/Products/Gastro/Abnormalities/Common/Duodenitis.aspx')
	, (6, 'Pyloric Ulcer',		'~/Products/UnderConstruction.aspx')
	, (6, 'Duodenal Ulcer',		'~/Products/Gastro/Abnormalities/Common/DuodenalUlcer.aspx')
	, (6, 'Scarring/Stenosis',	'~/Products/Gastro/Abnormalities/Common/Scarring.aspx')
	, (6, 'Vascular Lesions',	'~/Products/Gastro/Abnormalities/Common/VascularLesions.aspx')
	, (6, 'Atrophic Duodenum',	'~/Products/Gastro/Abnormalities/Common/AtrophicDuodenum.aspx')
	, (6, 'Mediastinal',		'~/Products/Gastro/Abnormalities/EUS/Mediastinal.aspx')

	, (7, 'Gall Bladder',		'~/Products/Gastro/Abnormalities/ERCP/Duct.aspx')
	, (7, 'Duct',				'~/Products/Gastro/Abnormalities/ERCP/Duct.aspx')
	, (7, 'Parenchyma',			'~/Products/Gastro/Abnormalities/ERCP/Parenchyma.aspx')
	, (7, 'Appearance',			'~/Products/Gastro/Abnormalities/ERCP/Appearance.aspx')
	, (7, 'Diverticulum',		'~/Products/Gastro/Abnormalities/ERCP/Diverticulum.aspx')
	, (7, 'Tumour',				'~/Products/Gastro/Abnormalities/ERCP/Tumour.aspx')
	, (7, 'Diverticulum/Other',	'~/Products/Gastro/Abnormalities/Common/Diverticulum.aspx')
	, (7, 'TumourCommon',		'~/Products/Gastro/Abnormalities/Common/Tumour.aspx')
	, (7, 'Duodenitis',			'~/Products/Gastro/Abnormalities/Common/Duodenitis.aspx')
	, (7, 'Duodenal Ulcer',		'~/Products/Gastro/Abnormalities/Common/DuodenalUlcer.aspx')
	, (7, 'Scarring/Stenosis',	'~/Products/Gastro/Abnormalities/Common/Scarring.aspx')
	, (7, 'Vascular Lesions',	'~/Products/Gastro/Abnormalities/Common/VascularLesions.aspx')
	, (7, 'Atrophic Duodenum',	'~/Products/Gastro/Abnormalities/Common/AtrophicDuodenum.aspx')
	, (7, 'Site',				'~/Products/Gastro/Abnormalities/EUS/Mediastinal.aspx')

	, (8, 'Gastritis',			'~/Products/Gastro/Abnormalities/OGD/Gastritis.aspx')
	, (8, 'Gastric Ulcer',		'~/Products/Gastro/Abnormalities/OGD/GastricUlcer.aspx')
	, (8, 'Lumen',				'~/Products/Gastro/Abnormalities/OGD/Lumen.aspx')
	, (8, 'Malignancy',			'~/Products/Gastro/Abnormalities/OGD/Malignancy.aspx')
	, (8, 'Post Surgery',		'~/Products/Gastro/Abnormalities/OGD/PostSurgery.aspx')
	, (8, 'Deformity',			'~/Products/Gastro/Abnormalities/OGD/Deformity.aspx')
	, (8, 'Polyps',				'~/Products/Gastro/Abnormalities/OGD/Polyps.aspx')
	, (8, 'Varices',			'~/Products/Gastro/Abnormalities/OGD/Varices.aspx')
	, (8, 'Hiatus Hernia',		'~/Products/Gastro/Abnormalities/OGD/HiatusHernia.aspx')
	, (8, 'Achalasia',			'~/Products/UnderConstruction.aspx')
	, (8, 'Oesophagitis',		'~/Products/Gastro/Abnormalities/OGD/Oesophagitis.aspx')
	, (8, 'Barretts',			'~/Products/Gastro/Abnormalities/OGD/BarrettEpithelium.aspx')
	, (8, 'Miscellaneous',		'~/Products/Gastro/Abnormalities/OGD/Miscellaneous.aspx')
	, (8, 'Diverticulum/Other',	'~/Products/Gastro/Abnormalities/Common/Diverticulum.aspx')
	, (8, 'Diverticulum',		'~/Products/Gastro/Abnormalities/Colon/Diverticulum.aspx')
	, (8, 'Tumour',				'~/Products/Gastro/Abnormalities/Common/Tumour.aspx')
	, (8, 'Duodenitis',			'~/Products/Gastro/Abnormalities/Common/Duodenitis.aspx')
	, (8, 'Pyloric Ulcer',		'~/Products/UnderConstruction.aspx')
	, (8, 'Duodenal Ulcer',		'~/Products/Gastro/Abnormalities/Common/DuodenalUlcer.aspx')
	, (8, 'Lesions',			'~/Products/Gastro/Abnormalities/Colon/Lesions.aspx')
	, (8, 'Jejunitis',			'~/Products/Gastro/Abnormalities/Common/Duodenitis.aspx')
	, (8, 'Jejunal Ulcer',		'~/Products/Gastro/Abnormalities/Common/DuodenalUlcer.aspx')
	, (8, 'Ileitis',			'~/Products/Gastro/Abnormalities/Common/Duodenitis.aspx')
	, (8, 'Ileal Ulcer',		'~/Products/Gastro/Abnormalities/Common/DuodenalUlcer.aspx')
	, (8, 'Scarring/Stenosis',	'~/Products/Gastro/Abnormalities/Common/Scarring.aspx')
	, (8, 'Vascular Lesions',	'~/Products/Gastro/Abnormalities/Common/VascularLesions.aspx')
	, (8, 'Atrophic Duodenum',	'~/Products/Gastro/Abnormalities/Common/AtrophicDuodenum.aspx')

	, (9, 'Calibre',			'~/Products/Gastro/Abnormalities/Colon/Calibre.aspx')
	, (9, 'Mucosa',				'~/Products/Gastro/Abnormalities/Colon/Mucosa.aspx')
	, (9, 'Diverticulum',		'~/Products/Gastro/Abnormalities/Colon/Diverticulum.aspx')
	, (9, 'Lesions',			'~/Products/Gastro/Abnormalities/Colon/Lesions.aspx')
	, (9, 'Vascularity',		'~/Products/Gastro/Abnormalities/Colon/Vascularity.aspx')
	, (9, 'Miscellaneous',		'~/Products/Gastro/Abnormalities/Colon/Miscellaneous.aspx')
	, (9, 'Haemorrhage',		'~/Products/Gastro/Abnormalities/Colon/Haemorrhage.aspx')

	, (10, 'Abnormality Descriptions',		'~/Products/Broncho/Abnormalities/BrtAbnoDescriptions.aspx')

	, (11, 'Abnormality Descriptions',		'~/Products/Broncho/Abnormalities/BrtAbnoDescriptions.aspx')
	, (11, 'EBUS abnormality Descriptions',		'~/Products/Broncho/Abnormalities/EBUSAbnoDescriptions.aspx');

--,(1, 'Gastritis',			'~/Products/Gastro/Abnormalities/OGD/Gastritis.aspx')
--,(1, 'Gastric Ulcer',		'~/Products/Gastro/Abnormalities/OGD/GastricUlcer.aspx')
--,(1, 'Lumen',				'~/Products/Gastro/Abnormalities/OGD/Lumen.aspx')
--,(1, 'Malignancy',			'~/Products/Gastro/Abnormalities/OGD/Malignancy.aspx')
--,(1, 'Post Surgery',		'~/Products/Gastro/Abnormalities/OGD/PostSurgery.aspx')
--,(1, 'Deformity',			'~/Products/Gastro/Abnormalities/OGD/Deformity.aspx')
--,(1, 'Polyps',				'~/Products/Gastro/Abnormalities/OGD/Polyps.aspx')
--,(1, 'Varices / Vascular',	'~/Products/Gastro/Abnormalities/OGD/VaricesVascular.aspx')
--,(1, 'Hiatus Hernia',		'~/Products/Gastro/Abnormalities/OGD/HiatusHernia.aspx')
--,(1, 'Achalasia',			'~/Products/Gastro/Abnormalities/OGD/Achalasia.aspx')
--,(1, 'Oesophagitis',		'~/Products/Gastro/Abnormalities/OGD/Oesophagitis.aspx')
--,(1, 'Barrett''s',			'~/Products/Gastro/Abnormalities/OGD/Barretts.aspx')
--,(1, 'Miscellaneous',		'~/Products/Gastro/Abnormalities/OGD/Miscellaneous.aspx')
--,(1, 'Diverticulum/Other',	'~/Products/Gastro/Abnormalities/OGD/DiverticulumOther.aspx')
--,(1, 'Tumour',				'~/Products/Gastro/Abnormalities/Common/Tumour.aspx')
--,(1, 'Duodenitis',			'~/Products/Gastro/Abnormalities/OGD/Duodenitis.aspx')
--,(1, 'Pyloric Ulcer',		'~/Products/Gastro/Abnormalities/OGD/PyloricUlcer.aspx')
--,(1, 'Duodenal Ulcer',		'~/Products/Gastro/Abnormalities/OGD/DuodenalUlcer.aspx')
--,(1, 'Scarring/Stenosis',	'~/Products/Gastro/Abnormalities/OGD/ScarringStenosis.aspx')
--,(1, 'Vascular Lesions',	'~/Products/Gastro/Abnormalities/OGD/VascularLesions.aspx')
--,(1, 'Atrophic Duodenum',	'~/Products/Gastro/Abnormalities/OGD/AtrophicDuodenum.aspx')

--,(2, 'NONE',				'~/Products/Gastro/Abnormalities/ERCP/NONE.aspx')
--,(2, 'Duct',				'~/Products/Gastro/Abnormalities/ERCP/Duct.aspx')
--,(2, 'Parenchyma',			'~/Products/Gastro/Abnormalities/ERCP/Parenchyma.aspx')
--,(2, 'Appearance',			'~/Products/Gastro/Abnormalities/ERCP/Appearance.aspx')
--,(2, 'Diverticulum',		'~/Products/Gastro/Abnormalities/ERCP/Diverticulum.aspx')
--,(2, 'Tumour',				'~/Products/Gastro/Abnormalities/ERCP/Tumour.aspx')
--,(2, 'Diverticulum/Other',	'~/Products/Gastro/Abnormalities/ERCP/DiverticulumOther.aspx')
--,(2, 'TumourCommon',				'~/Products/Gastro/Abnormalities/ERCP/Tumour2.aspx')
--,(2, 'Duodenitis',			'~/Products/Gastro/Abnormalities/ERCP/Duodenitis.aspx')
--,(2, 'Duodenal Ulcer',		'~/Products/Gastro/Abnormalities/ERCP/DuodenalUlcer.aspx')
--,(2, 'Scarring/Stenosis',	'~/Products/Gastro/Abnormalities/ERCP/ScarringStenosis.aspx')
--,(2, 'Vascular Lesions',	'~/Products/Gastro/Abnormalities/ERCP/VascularLesions.aspx')
--,(2, 'Atrophic Duodenum',	'~/Products/Gastro/Abnormalities/ERCP/AtrophicDuodenum.aspx')

--,(3, 'Calibre',				'~/Products/Gastro/Abnormalities/Colon/Calibre.aspx')
--,(3, 'Mucosa',				'~/Products/Gastro/Abnormalities/Colon/Mucosa.aspx')
--,(3, 'Diverticulum',		'~/Products/Gastro/Abnormalities/Colon/Diverticulum.aspx')
--,(3, 'Lesions',				'~/Products/Gastro/Abnormalities/Colon/Lesions.aspx')
--,(3, 'Vascularity',			'~/Products/Gastro/Abnormalities/Colon/Vascularity.aspx')
--,(3, 'Haemorrhage',			'~/Products/Gastro/Abnormalities/Colon/Haemorrhage.aspx')
--,(3, 'Perianal Lesions',	'~/Products/Gastro/Abnormalities/Colon/PerianalLesions.aspx')

--,(4, 'Calibre',				'~/Products/Gastro/Abnormalities/Colon/Calibre.aspx')
--,(4, 'Mucosa',				'~/Products/Gastro/Abnormalities/Colon/Mucosa.aspx')
--,(4, 'Diverticulum',		'~/Products/Gastro/Abnormalities/Colon/Diverticulum.aspx')
--,(4, 'Lesions',				'~/Products/Gastro/Abnormalities/Colon/Lesions.aspx')
--,(4, 'Vascularity',			'~/Products/Gastro/Abnormalities/Colon/Vascularity.aspx')
--,(4, 'Haemorrhage',			'~/Products/Gastro/Abnormalities/Colon/Haemorrhage.aspx')
--,(4, 'Perianal Lesions',	'~/Products/Gastro/Abnormalities/Colon/PerianalLesions.aspx')

--,(5, 'Calibre',				'~/Products/Gastro/Abnormalities/Colon/Calibre.aspx')
--,(5, 'Mucosa',				'~/Products/Gastro/Abnormalities/Colon/Mucosa.aspx')
--,(5, 'Diverticulum',		'~/Products/Gastro/Abnormalities/Colon/Diverticulum.aspx')
--,(5, 'Lesions',				'~/Products/Gastro/Abnormalities/Colon/Lesions.aspx')
--,(5, 'Vascularity',			'~/Products/Gastro/Abnormalities/Colon/Vascularity.aspx')
--,(5, 'Haemorrhage',			'~/Products/Gastro/Abnormalities/Colon/Haemorrhage.aspx')
--,(5, 'Perianal Lesions',	'~/Products/Gastro/Abnormalities/Colon/PerianalLesions.aspx')

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------107 Create Table ERS_GP.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO

--CREATE TABLE [dbo].[ERS_GP](
--	[GPId]				[int]			IDENTITY(1,1) NOT NULL,
--	[Title]				[varchar](10)	NOT NULL,
--	[Initials]			[varchar](10)	NOT NULL,
--	[ForeName]			[varchar](100),
--	[Surname]			[varchar](100)	NOT NULL,
--	[PracticeName]		[varchar](30),
--	[Address]			[varchar](500)	NOT NULL,
--	[Telephone]			[varchar](20),
--	[Suppressed]		[bit]			NOT NULL CONSTRAINT DF_GP_Supress DEFAULT 0,
--	CONSTRAINT [PK_ERS_GP] PRIMARY KEY CLUSTERED ([GPId]),
--) ON [PRIMARY]
--GO


--INSERT INTO ERS_GP VALUES ('Dr', 'K', 'Kerry', 'Medisa', 'Family Care', '13 Sugary Rd ' + CHAR(13) + 'London' + CHAR(13) + 'WS1 2RJ', '0123456789', 0)

--------------------------------------------------------------------------------------------------------------------
-------------------------------------109 Create Table ERS_EthnicOrigins.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_EthnicOrigins] (
	[EthnicOriginId] [int] IDENTITY(1,1) NOT NULL,
	[EthnicOrigin] [varchar] (100) NOT NULL,
	[UsedIn] [varchar] (50),
	CONSTRAINT [PK_EthnicOrigins] PRIMARY KEY CLUSTERED ([EthnicOriginId])
) ON [PRIMARY]

GO

INSERT INTO [ERS_EthnicOrigins] ([EthnicOrigin], [UsedIn]) 
VALUES 
	  ('White',				NULL)
	, ('Black/Caribbean',	NULL)
	, ('Black/African',		NULL)
	, ('Black/other',		NULL)
	, ('Indian',			NULL)
	, ('Pakistani',			NULL)
	, ('Bangladeshi',		NULL)
	, ('Chinese',			NULL)
	, ('Other',				NULL)


	, ('Not stated',				'NHS Data Dictionary')
	, ('White British',				'NHS Data Dictionary')
	, ('White Irish',				'NHS Data Dictionary')
	, ('Any other white background','NHS Data Dictionary')
	, ('White & Black Caribbean',	'NHS Data Dictionary')
	, ('White & Black African',		'NHS Data Dictionary')
	, ('White & Asian',				'NHS Data Dictionary')
	, ('Any other mixed background','NHS Data Dictionary')
	, ('Indian',					'NHS Data Dictionary')
	, ('Pakistani',					'NHS Data Dictionary')
	, ('Bangladeshi',				'NHS Data Dictionary')
	, ('Any other Asian background','NHS Data Dictionary')
	, ('Caribbean',					'NHS Data Dictionary')
	, ('African',					'NHS Data Dictionary')
	, ('Any other Black background','NHS Data Dictionary')
	, ('Chinese',					'NHS Data Dictionary')
	, ('Any other ethnic group',	'NHS Data Dictionary')


	, ('Any Other Ethnic Group',				'Bolton')
	, ('Asian/Asian Brit - any other Asian b/g','Bolton')
	, ('Asian/Asian Brit - Bangladeshi',		'Bolton')
	, ('Asian/Asian Brit - Indian',				'Bolton')
	, ('Asian/Asian Brit - Pakistani',			'Bolton')
	, ('Black/Blk Brit - African',				'Bolton')
	, ('Black/Blk Brit - any other Black b/g',	'Bolton')
	, ('Black/Blk Brit - Caribbean',			'Bolton')
	, ('Mixed - any other mixed b/g',			'Bolton')
	, ('Mixed - White & Asian',					'Bolton')
	, ('Mixed - White & Black African',			'Bolton')
	, ('Mixed - White & Black Caribbean',		'Bolton')
	, ('Not Known',								'Bolton')
	, ('Not Specified',							'Bolton')
	, ('Not Stated',							'Bolton')
	, ('Other Ethnic Group - Chinese',			'Bolton')
	, ('White - any other White b/g',			'Bolton')
	, ('White - British',						'Bolton')
	, ('White - Irish',							'Bolton')


	, ('Indigenous',					'Australia')
	, ('Non Indigenous',				'Australia')
	, ('Aboriginal',					'Australia')
	, ('Torres Strait Islander',		'Australia')
	, ('Australian South Sea Islander',	'Australia')

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------110 Create Table ERS_Codes.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Codes](
	[CodeId]	[int]		IDENTITY(1,1) NOT NULL,
	[Code]		[varchar] (50) NOT NULL,
	[CodeKey]	[varchar] (50),
	[CodeValue] [int] NOT NULL
	CONSTRAINT	[UK_Codes] UNIQUE ([Code], [CodeKey]),
	CONSTRAINT	[PK_CodeId] PRIMARY KEY CLUSTERED ([CodeId]),
) ON [PRIMARY]

GO



INSERT INTO [ERS_Codes] (Code, CodeKey, CodeValue)
VALUES 
	  ('GastritisSeverity', 'Mild', 1)
	, ('GastritisSeverity', 'Moderate', 2)
	, ('GastritisSeverity', 'Severe', 3)

	, ('GastritisBleeding', 'None', 9)
	, ('GastritisBleeding', 'Active', 1)
	, ('GastritisBleeding', 'Recent', 2)


	, ('LumenAmount', 'Small', 1)
	, ('LumenAmount', 'Moderate', 2)
	, ('LumenAmount', 'Large', 3)

	, ('LumenOrigin', 'Unidentified', 1)
	, ('LumenOrigin', 'Transported', 2)

	, ('MucosaDistribution', 'patchy', 1)
	, ('MucosaDistribution', 'extensive', 2)

	, ('MucosaSeverity', 'mild', 1)
	, ('MucosaSeverity', 'moderate', 2)
	, ('MucosaSeverity', 'severe', 3)

	, ('MucosaUlcerType', 'few', 1)
	, ('MucosaUlcerType', 'multiple', 2)

	, ('BronchoQABleeding', 'mild', 1)
	, ('BronchoQABleeding', 'moderate', 2)
	, ('BronchoQABleeding', 'severe', 3)
GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------111 Create Table ERS_SystemConfig.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

DECLARE @sql NVARCHAR(MAX)
DECLARE @HospitalID [INT] = 99,						@OperatingHospitalID [int] = 1,			@ApplicationTimeOut [int] = 15,					@SystemDisabled [bit]  = 0,					
		@HospitalSiteCode VARCHAR(10) = '',			@OrganisationCode VARCHAR(10)= '',		@APIKey VARCHAR(100)='',						@BatchId VARCHAR(5)='',
		@ScheduledShutdown [datetime] = NULL,		@PwdRuleMinLength [int] = NULL,			@PwdRuleNoOfSpecialChars [int] = NULL,			@PwdRuleNoSpaces [bit] = NULL,					
		@PwdRuleCantBeUserId [bit] = NULL,			@PwdRuleDaysToExpiration [int] = NULL,	@PwdRuleNoOfPastPwdsToAvoid [int] = NULL,		@SiteIdentification [TINYINT] = (SELECT SiteIdentification FROM #variables),		
		@SiteRadius [DECIMAL](3,1) = 5,				@OGDDiagnosis [bit] = 0,				@UreaseTestsIncludeTickBoxes [bit] = 0,			@OesophagitisClassification [bit] = 0,		
		@BostonBowelPrepScale [bit] = 0,			@ReportHeading [varchar] (200) = NULL,	@ReportTrustType [varchar] (200) = 'NHS Trust',	@ReportSubHeading [varchar] (200) = NULL,
		@PatientConsent [TINYINT] = 1,				@SortReferringConsultantBy [bit] = 0,	@CompleteWHOSurgicalSafetyCheckList [bit] = 1,	@ReportLocking [tinyint] = 1,
		@DepartmentName [varchar] (200) = NULL ,	@LockingTime [varchar](10) = '00:00',	@LockingDays [int] = 1,							@CountryLabel [TINYINT] = (SELECT CountryLabel FROM #variables),
		@NEDEnabled [bit] = 0,						@IncludeUGI [bit] = (SELECT IncludeUGI FROM #variables),
		@DefaultPatientStatus [TINYINT] =0,			@DefaultPatientType [TINYINT] =0,		@DefaultWard [TINYINT] =0,						@BrtPulmonaryPhysiology [BIT] =0,
		@PhotosURL [varchar] (500) = (SELECT PhotosURL FROM #variables),					@PhotosUNC [varchar] (500) = (SELECT PhotosUNC FROM #variables), 
		@MaxWorklistDays [TINYINT] = (SELECT MaxWorklistDays FROM #variables)

IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'ERS_SystemConfig'))
BEGIN
	SELECT TOP(1) 
		@HospitalID = HospitalID,						@OperatingHospitalID = OperatingHospitalID,			@ApplicationTimeOut = ApplicationTimeOut,							@SystemDisabled = SystemDisabled,					
		@ScheduledShutdown = ScheduledShutdown,			@PwdRuleMinLength = PwdRuleMinLength,				@PwdRuleNoOfSpecialChars = PwdRuleNoOfSpecialChars,					@PwdRuleNoSpaces = PwdRuleNoSpaces,					
		@PwdRuleCantBeUserId = PwdRuleCantBeUserId,		@PwdRuleDaysToExpiration = PwdRuleDaysToExpiration,	@PwdRuleNoOfPastPwdsToAvoid = PwdRuleNoOfPastPwdsToAvoid,			
		@SiteRadius = SiteRadius,						@OGDDiagnosis = OGDDiagnosis,						@UreaseTestsIncludeTickBoxes = UreaseTestsIncludeTickBoxes,			@OesophagitisClassification = OesophagitisClassification,
		@BostonBowelPrepScale = BostonBowelPrepScale,	@ReportHeading = ReportHeading,						@ReportTrustType = ReportTrustType,									@ReportSubHeading = ReportSubHeading,
		@DepartmentName = DepartmentName,				@PatientConsent = PatientConsent,					@CompleteWHOSurgicalSafetyCheckList = CompleteWHOSurgicalSafetyCheckList,	
		@ReportLocking = ReportLocking,					@LockingTime = LockingTime,							@LockingDays = LockingDays,											@PhotosURL = PhotosURL,
		@PhotosUNC = PhotosUNC,							@MaxWorklistDays = MaxWorklistDays
	FROM [dbo].[ERS_SystemConfig]

	IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'CountryLabel' AND Object_ID = Object_ID(N'ERS_SystemConfig')) 
	BEGIN
		SET @sql = 'SELECT TOP(1) @CountryLabel = CountryLabel FROM [dbo].[ERS_SystemConfig]'
		EXEC SP_EXECUTESQL @sql  = @sql, @Params = N'@CountryLabel TINYINT OUTPUT', @CountryLabel = @CountryLabel OUTPUT
	END
	IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'SortReferringConsultantBy' AND Object_ID = Object_ID(N'ERS_SystemConfig')) 
	BEGIN
		SET @sql = 'SELECT TOP(1) @SortReferringConsultantBy = SortReferringConsultantBy FROM [dbo].[ERS_SystemConfig]'
		EXEC SP_EXECUTESQL @sql  = @sql, @Params = N'@SortReferringConsultantBy BIT OUTPUT', @SortReferringConsultantBy = @SortReferringConsultantBy OUTPUT
	END
	IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'NEDEnabled' AND Object_ID = Object_ID(N'ERS_SystemConfig')) 
	BEGIN
		SET @sql = 'SELECT TOP(1) @NEDEnabled = NEDEnabled FROM [dbo].[ERS_SystemConfig]'
		EXEC SP_EXECUTESQL @sql  = @sql, @Params = N'@NEDEnabled BIT OUTPUT', @NEDEnabled = @NEDEnabled OUTPUT
	END
	--IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'IncludeUGI' AND Object_ID = Object_ID(N'ERS_SystemConfig')) 
	--BEGIN
	--	SET @sql = 'SELECT TOP(1) @IncludeUGI = IncludeUGI FROM [dbo].[ERS_SystemConfig]'
	--	EXEC SP_EXECUTESQL @sql  = @sql, @Params = N'@IncludeUGI BIT OUTPUT', @IncludeUGI = @IncludeUGI OUTPUT
	--END
	IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'DefaultPatientStatus' AND Object_ID = Object_ID(N'ERS_SystemConfig')) 
	BEGIN
		SET @sql = 'SELECT TOP(1) @DefaultPatientStatus = DefaultPatientStatus FROM [dbo].[ERS_SystemConfig]'
		EXEC SP_EXECUTESQL @sql  = @sql, @Params = N'@DefaultPatientStatus BIT OUTPUT', @DefaultPatientStatus = @DefaultPatientStatus OUTPUT
	END
	IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'DefaultPatientType' AND Object_ID = Object_ID(N'ERS_SystemConfig')) 
	BEGIN
		SET @sql = 'SELECT TOP(1) @DefaultPatientType = DefaultPatientType FROM [dbo].[ERS_SystemConfig]'
		EXEC SP_EXECUTESQL @sql  = @sql, @Params = N'@DefaultPatientType BIT OUTPUT', @DefaultPatientType = @DefaultPatientType OUTPUT
	END
	IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'DefaultWard' AND Object_ID = Object_ID(N'ERS_SystemConfig')) 
	BEGIN
		SET @sql = 'SELECT TOP(1) @DefaultWard = DefaultWard FROM [dbo].[ERS_SystemConfig]'
		EXEC SP_EXECUTESQL @sql  = @sql, @Params = N'@DefaultWard BIT OUTPUT', @DefaultWard = @DefaultWard OUTPUT
	END
	IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'BRTPulmonaryPhysiology' AND Object_ID = Object_ID(N'ERS_SystemConfig')) 
	BEGIN
		SET @sql = 'SELECT TOP(1) @BrtPulmonaryPhysiology = BRTPulmonaryPhysiology FROM [dbo].[ERS_SystemConfig]'
		EXEC SP_EXECUTESQL @sql  = @sql, @Params = N'@BrtPulmonaryPhysiology BIT OUTPUT', @BrtPulmonaryPhysiology = @BrtPulmonaryPhysiology OUTPUT
	END

	DROP TABLE [dbo].[ERS_SystemConfig]
END


CREATE TABLE [dbo].[ERS_SystemConfig](
	[SystemConfigID] [int] IDENTITY(1,1) NOT NULL,
	[HospitalID] [int] NOT NULL,
	[OperatingHospitalID] [int] NOT NULL,
	[ApplicationTimeOut] [int] NOT NULL,
	[SystemDisabled] [bit] NULL,
	[ScheduledShutdown] [datetime] NULL,
	[PwdRuleMinLength] [int] NULL,
	[PwdRuleNoOfSpecialChars] [int] NULL,
	[PwdRuleNoSpaces] [bit] NULL,
	[PwdRuleCantBeUserId] [bit] NULL,
	[PwdRuleDaysToExpiration] [int] NULL,
	[PwdRuleNoOfPastPwdsToAvoid] [int] NULL,
	[SiteIdentification] [TINYINT] NULL,
	[SiteRadius] [DECIMAL](3,1) NULL CONSTRAINT [DF_ERS_SystemConfig_SiteRadius]  DEFAULT 5,
	[OGDDiagnosis] [bit] NULL,
	[UreaseTestsIncludeTickBoxes] [bit] NULL,
	[OesophagitisClassification] [bit] NULL,
	[BostonBowelPrepScale] [bit] NOT NULL CONSTRAINT [DF_ERS_SystemConfig_BostonBowelPrepScale]  DEFAULT 0,
	[ReportHeading] [varchar] (200) NULL,
	[ReportTrustType] [varchar] (200) NULL,
	[ReportSubHeading] [varchar] (200) NULL,
	[DepartmentName] [varchar] (200) NULL,
	[PatientConsent] [TINYINT] NULL,
	[SortReferringConsultantBy] [bit] NULL,
	[CompleteWHOSurgicalSafetyCheckList] [bit] NULL,
    [ReportLocking] [tinyint] NULL CONSTRAINT [DF_ERS_SystemConfig_ReportLocking]  DEFAULT 1,
    [LockingTime] [varchar](10) NULL CONSTRAINT [DF_ERS_SystemConfig_LockingTime]  DEFAULT ('00:00'),
    [LockingDays] [int] NULL CONSTRAINT [DF_ERS_SystemConfig_LockingDays]  DEFAULT 1,
	[CountryLabel] [TINYINT] NOT NULL CONSTRAINT [DF_ERS_SystemConfig_CountryLabel]  DEFAULT 0,
	[NED_HospitalSiteCode] [varchar](20) NULL,
	[NED_OrganisationCode] [varchar](20) NULL,
	[NED_APIKey] [varchar](100) NULL,
	[NED_BatchId] [varchar](15) NULL,
	[NED_ExportPath] [varchar](200) NOT NULL CONSTRAINT [DF_ERS_SystemConfig_NED_ExportPath] DEFAULT 'NED_xml_output\',
	[NEDEnabled] [bit] NULL,

	[AuditLogEnabled] [bit]		NOT NULL CONSTRAINT [DF_ERS_SystemConfig_AuditLogEnabled]  DEFAULT 1,
	[ErrorLogEnabled] [bit]		NOT NULL CONSTRAINT [DF_ERS_SystemConfig_ErrorLogEnabled]  DEFAULT 1,
	[ImGrabEnabled] [bit]		NOT NULL CONSTRAINT [DF_ERS_SystemConfig_ImGrabEnabled]  DEFAULT 0,

	[IncludeUGI] [bit] NULL,
	[DefaultPatientStatus] [TINYINT] NULL,
	[DefaultPatientType] [TINYINT] NULL,
	[DefaultWard] [TINYINT] NULL,
	[BRTPulmonaryPhysiology] [bit] NOT NULL CONSTRAINT [DF_ERS_SystemConfig_BRTPulmonaryPhysiology]  DEFAULT 0,
	[PhotosURL] [varchar] (500) NULL,
	[PhotosUNC] [varchar] (500) NULL,
	[MaxWorklistDays] [TINYINT],
	[WhoUpdatedId]	INT NULL Default 0,
	[WhoCreatedId]	INT NULL Default 0,
	[WhenCreated]	DATETIME NULL Default GetDate(),
	[WhenUpdated]	DATETIME NULL Default GetDate(),
 CONSTRAINT [PK_SystemConfig] PRIMARY KEY CLUSTERED 
(
	[SystemConfigID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

INSERT INTO [ERS_SystemConfig] ([HospitalID],			[OperatingHospitalID],		[ApplicationTimeOut],			[SystemDisabled],				[ScheduledShutdown],
								[PwdRuleMinLength],		[PwdRuleNoOfSpecialChars],	[PwdRuleNoSpaces],				[PwdRuleCantBeUserId],			[PwdRuleDaysToExpiration],
								[PwdRuleNoOfPastPwdsToAvoid],						[SiteIdentification],			[SiteRadius],					[OGDDiagnosis],
								[UreaseTestsIncludeTickBoxes],						[OesophagitisClassification],	[BostonBowelPrepScale],			[ReportHeading],
								[ReportTrustType],		[ReportSubHeading],			[DepartmentName],				[PatientConsent],				[CompleteWHOSurgicalSafetyCheckList],
								[ReportLocking],		[LockingTime],				[LockingDays],					[PhotosURL],					[PhotosUNC],
								[MaxWorklistDays])
SELECT @HospitalID,				eoh.OperatingHospitalID,			@ApplicationTimeOut,					@SystemDisabled,		@ScheduledShutdown,
		@PwdRuleMinLength,			@PwdRuleNoOfSpecialChars,		@PwdRuleNoSpaces,					
		@PwdRuleCantBeUserId,		@PwdRuleDaysToExpiration,		@PwdRuleNoOfPastPwdsToAvoid,			@SiteIdentification,
		@SiteRadius,				@OGDDiagnosis,					@UreaseTestsIncludeTickBoxes,			@OesophagitisClassification,
		@BostonBowelPrepScale,		@ReportHeading,					@ReportTrustType,						@ReportSubHeading,
		@DepartmentName,			@PatientConsent,				@CompleteWHOSurgicalSafetyCheckList,	
		@ReportLocking,				@LockingTime,					@LockingDays,							@PhotosURL,				@PhotosUNC,
		@MaxWorklistDays
FROM ERS_OperatingHospitals eoh

		SET @sql = 'UPDATE [ERS_SystemConfig] SET [NED_HospitalSiteCode] = ''' + CONVERT(VARCHAR, @HospitalSiteCode) + ''', ' +
												'[NED_OrganisationCode] = '''  + CONVERT(VARCHAR, @OrganisationCode) + ''', ' +
												'[NED_APIKey] = ''' +  CONVERT(VARCHAR, @APIKey) + ''', ' +
												'[NED_BatchId] = ''' +  CONVERT(VARCHAR, @BatchId) + ''', ' +
												'[NEDEnabled] = ''' +  CONVERT(VARCHAR, @NEDEnabled) + ''''
		EXEC SP_EXECUTESQL @sql 
		SET @sql = 'UPDATE [ERS_SystemConfig] SET CountryLabel = ' + CONVERT(VARCHAR, @CountryLabel)
		EXEC SP_EXECUTESQL @sql 
		SET @sql = 'UPDATE [ERS_SystemConfig] SET SortReferringConsultantBy = ' + CONVERT(VARCHAR, @SortReferringConsultantBy)
		EXEC SP_EXECUTESQL @sql 
		SET @sql = 'UPDATE [ERS_SystemConfig] SET NEDEnabled = ' + CONVERT(VARCHAR, @NEDEnabled)
		EXEC SP_EXECUTESQL @sql 
		SET @sql = 'UPDATE [ERS_SystemConfig] SET IncludeUGI = ' + CONVERT(VARCHAR, @IncludeUGI)
		EXEC SP_EXECUTESQL @sql 
		SET @sql = 'UPDATE [ERS_SystemConfig] SET DefaultPatientStatus = ' + CONVERT(VARCHAR, @DefaultPatientStatus)
		EXEC SP_EXECUTESQL @sql 
		SET @sql = 'UPDATE [ERS_SystemConfig] SET DefaultPatientType = ' + CONVERT(VARCHAR, @DefaultPatientType)
		EXEC SP_EXECUTESQL @sql 
		SET @sql = 'UPDATE [ERS_SystemConfig] SET DefaultWard = ' + CONVERT(VARCHAR, @DefaultWard)
		EXEC SP_EXECUTESQL @sql 
		SET @sql = 'UPDATE [ERS_SystemConfig] SET BRTPulmonaryPhysiology = ' + CONVERT(VARCHAR, @BrtPulmonaryPhysiology)
		EXEC SP_EXECUTESQL @sql 
GO

UPDATE ERS_SystemConfig SET [PwdRuleMinLength] = 5 WHERE ISNULL([PwdRuleMinLength],0) < 4  --Set password length to a minimum of 5 characters
--------------------------------------------------------------------------------------------------------------------
-------------------------------------112 Create Table ERS_Users.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF  (NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'ERS_Users'))
		OR ((SELECT OverwriteUsers FROM #variables) = 1 )
BEGIN
	CREATE TABLE [dbo].[ERS_Users](
		[UserID] [int] IDENTITY(1,1) NOT NULL,
		[RecordCreated] [datetime] NOT NULL,
		[LastUpdated] [datetime] NOT NULL,
		[ExpiresOn] [datetime] NOT NULL,
		[Username] [nvarchar](100) NOT NULL,
		[Password] [nvarchar](50) NOT NULL,
		[PasswordExpiresOn] [datetime] NULL,
		[Title] [nvarchar](10) NOT NULL,
		[Forename] [nvarchar](100) NOT NULL,
		[Surname] [nvarchar](100) NOT NULL,
		[Initials] [nvarchar](10) NULL,
		[Qualifications] [nvarchar](30) NULL,
		[JobTitleID] [int] NULL, --MAKE THIS FOREIGN KEY *********
		[AccessID] [int] NULL,
		[AccessRights] [int] NOT NULL CONSTRAINT DF_ERS_Users_AccessRights DEFAULT (0), --TO DELETE THIS FIELD AND REPLACE WITH ROLEID ********
		[RoleID] [nvarchar](70) NOT NULL DEFAULT 0, --MAKE THIS FOREIGN KEY *********
		[Description] [nvarchar](255) NULL,
		[CanRunAK] [bit] NOT NULL,
		[IsListConsultant] [bit] NOT NULL,
		[IsEndoscopist1] [bit] NOT NULL,
		[IsEndoscopist2] [bit] NOT NULL,
		[IsAssistantOrTrainee] [bit] NOT NULL,
		[IsNurse1] [bit] NOT NULL,
		[IsNurse2] [bit] NOT NULL,
		[ResetPassword] [bit] NOT NULL,
		[Suppressed] [bit] NOT NULL,
		[LastOperatingHospital] [tinyint] NULL,
		[DiagramTheme] [nvarchar](30) NULL,
		[ShowTooltips] [bit] NOT NULL CONSTRAINT DF_ERS_Users_ShowTooltips DEFAULT (1),
		[SkinName] [nvarchar](30) NULL,
		[UGI_UserID] [nvarchar](255) NULL CONSTRAINT DF_ERS_Users_UGI_UserID DEFAULT '',
		[LoggedOn] [bit] NULL,
		[LastLoggedIn] [datetime] NULL,
		[IsImported]	BIT NULL,
		[IsGIConsultant]	BIT NOT NULL CONSTRAINT DF_ERS_Users_IsGIConsultant DEFAULT (0),
		[GMCCode] [varchar](50) NULL,
		[WhoUpdatedId]	INT NULL Default 0,
		[WhoCreatedId]	INT NULL Default 0,
		[WhenCreated]	DATETIME NULL Default GetDate(),
		[WhenUpdated]	DATETIME NULL Default GetDate(),
		CONSTRAINT [PK_ERS_Users] PRIMARY KEY CLUSTERED ([UserID] ASC)	
			WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
		CONSTRAINT [UQ_UserName] UNIQUE([Username]) 
	) ON [PRIMARY]
END
GO

IF NOT EXISTS(SELECT * FROM sys.columns WHERE Name = N'GMCCode' AND Object_ID = Object_ID(N'ERS_Users'))
		ALTER TABLE ERS_Users ADD GMCCode VARCHAR(50) NULL;

--create unique index to allow nulls and blanks
IF EXISTS (SELECT 1 FROM sys.indexes WHERE name='UK_GMCCode' AND object_id = OBJECT_ID('ERS_Users'))
	DROP INDEX [UK_GMCCode] ON [ERS_Users] ;

CREATE UNIQUE NONCLUSTERED INDEX [UK_GMCCode]
ON [ERS_Users] (GMCCode)
WHERE [GMCCode] IS NOT NULL AND [GMCCode] <> ''
GO

--if you are inserting test records, set the password to be 2818 (which is equivalent to "password") or 697 (= "r@m@") or 1708 (= "hu5531n")
IF NOT EXISTS (SELECT 1 FROM ERS_Users WHERE Username = 'admin')
BEGIN
	INSERT INTO ERS_Users 
			(RecordCreated	,LastUpdated	,ExpiresOn	,Username	,[Password]	,PasswordExpiresOn	,Title	,Forename	,Surname	,Initials	,Qualifications	
			,JobTitleID	,AccessID	,AccessRights	,RoleID	,[Description]	,CanRunAK	,IsListConsultant	,IsEndoscopist1	,IsEndoscopist2		,IsAssistantOrTrainee	
			,IsNurse1	,IsNurse2	,ResetPassword	,Suppressed	,LastOperatingHospital	,DiagramTheme	,ShowTooltips	,SkinName	,UGI_UserID	,LoggedOn	,LastLoggedIn	
			,IsImported	,IsGIConsultant	,GMCCode)
	VALUES ('2014-02-02', GETDATE(), '2020-12-31', 'admin', '1114', '2099-12-22', 'Mr', 'Administrator', 
			'Full Access', 'AG', 'Admin', 1, 1, 1, 1, '', 1, 0, 0, 0, 0, 0, 1, 0, 0, NULL, NULL, 0, '', 0, 0, GETDATE(), 0, 0, NULL)
END

--INSERT INTO ERS_Users VALUES ('2014-02-02', GETDATE(), '2020-12-31', 'steve',			'1345', '2099-12-22', 'Mr', 'Steve',		'Rainey',		'AG', 'Admin',	1, 1, 3, 3, '', 1, 1, 1,0,0,0,0,0,0, 0,1,0,0,NULL,NULL,'',0, GETDATE())

CREATE TABLE [dbo].[ERS_Roles](
	[RoleId] [int] IDENTITY(1,1) NOT NULL,
	[RoleName] [varchar](50) NOT NULL,
 CONSTRAINT [PK_Roles] PRIMARY KEY CLUSTERED ([RoleId] ASC)
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO


INSERT INTO ERS_Roles VALUES 
('System Administrators')
,('Clinical Managers')
,('Clinical Users')
,('Booking Staff')
,('Read Only')
,('Unisoft')


--------------------------------------------------------------------------------------------------------------------
-------------------------------------Create Table ERS_Pages.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_Pages](
	[PageId] [smallint] NOT NULL,
	[PageName] [nvarchar](50) NULL,
	[PageAlias] [nvarchar](50) NULL,
	[AppPageName] [nvarchar](150) NULL,
	[GroupId] [tinyint] NULL,
	[PageURL] [nvarchar](MAX) NULL,
 CONSTRAINT [PK_ERS_Pages] PRIMARY KEY CLUSTERED ([PageId] ASC)
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

--MISC
INSERT [dbo].[ERS_Pages] ([PageId], [PageName], [AppPageName], [GroupId], [PageAlias],[PageURL]) VALUES 
(1,'Add New Patient','products_common_patientdetails_aspx',8,'Add New Patient','~/products/common/patientdetails.aspx')
,(3,'PAS Download','products_pas_pasdownload_aspx',8,'PAS Download','~/products/pas/pasdownload.aspx')
,(4,'StartMenu -> Logout','security_logout_aspx',NULL,'Logout','~/security/logout.aspx')
,(5,'StartMenu -> Default','DefaultPage',NULL,'Create Procedure','~/Products/Default.aspx')
,(6,'StartMenu -> Feedback','security_feedback_aspx',NULL,'Feedback','~/security/feedback.aspx')
,(7,'Print Report','products_common_printreport_aspx',8,'Print Report','~/products/common/printreport.aspx')
,(8,'OptionsError','products_options_optionserror_aspx',NULL,'Options Error','~/products/options/optionserror.aspx')
,(9,'Photos','products_common_photos_aspx',6,'Photos','~/products/common/photos.aspx')
,(10,'PhotoMove','products_common_photomove_aspx',6,'Photo Move','~/products/common/photomove.aspx')
,(11,'Create Procedure','create_procedure',8,'Create Procedure','~/create/procedure')
,(12,'Edit Procedure','edit_procedure',8,'Edit Procedure','~/edit/procedure')
,(13,'Delete Procedure','delete_procedure',8,'Delete Procedure','~/delete/procedure')
,(14,'Report','products_reports_reports_aspx',8,'Report','~/products/reports/reports.aspx')
,(15,'Site Details Error','products_sitedetailserror_aspx',8,'Site Details Error','~/products/sitedetailserror.aspx')
,(16,'StartMenu -> About','security_about_aspx',NULL,'About','~/security/about.aspx')
,(17,'Scheduler','products_scheduler_scheduler_aspx',8,'Scheduler','~/products/scheduler/scheduler.aspx')

--System Settings
,(100,'Configure','products_options_optionsmain_aspx',8,'Configure','~/products/options/optionsmain.aspx')
,(101,'Settings -> User Settings','products_options_usersettings_aspx',2,'User Settings','~/products/options/usersettings.aspx')
,(102,'Settings -> System Configuration','products_options_systemsettings_aspx',2,'System Configuration','~/products/options/systemsettings.aspx')
--,(103,'Settings -> Startup Configuration','products_options_startupsettings_aspx',2,'Startup Configuration','~/products/options/startupsettings.aspx')
,(104,'Settings -> Licence','products_options_license_aspx',2,'Licence','~/products/options/license.aspx')
,(105,'Settings -> Print Settings','products_common_printoptions_aspx',2,'Print Settings','~/products/common/printoptions.aspx')

,(110,'Admin Utilities -> Registration Details','products_options_registrationdetails_aspx',3,'Registration Details','~/products/options/registrationdetails.aspx')
,(111,'Admin Utilities -> Password Rules','products_options_passwordrules_aspx',3,'Password Rules','~/products/options/passwordrules.aspx')
,(112,'Admin Utilities -> Who''s Logged In','products_options_systemusage_aspx',3,'Who''s Logged In','~/products/options/systemusage.aspx')
,(113,'Admin Utilities -> Referring Consultants','products_options_referingconsultant_aspx',3,'Referring Consultants','~/products/options/referingconsultant.aspx')
,(114,'Admin Utilities -> Drugs List','products_options_modifypremedicationdrugs_aspx',3,'Drugs List','~/products/options/modifypremedicationdrugs.aspx')
,(115,'Admin Utilities -> Phrase Library','products_common_wordlibrary_aspx',3,'Phrase Library','~/products/common/wordlibrary.aspx')
,(116,'Admin Utilities -> Dropdown Lists','products_options_dropdownlists_aspx',3,'Dropdown Lists','~/products/options/dropdownlists.aspx')
--,(117,'Admin Utilities -> Required Fields Setup','products_options_requiredfieldssetup_aspx',3,'Required Fields Setup','~/products/options/requiredfieldssetup.aspx')
,(118,'Admin Utilities -> Field Labels','products_options_fieldlabels_aspx',3,'Field Labels','~/products/options/fieldlabels.aspx')
--,(119,'Admin Utilities -> Diagnoses','products_options_diagnosesconfig_aspx',3,'Diagnoses','~/products/options/diagnosesconfig.aspx')
,(120,'EditDiagnoses','products_options_editdiagnoses_aspx',5,'Edit Diagnoses','~/products/options/editdiagnoses.aspx')
,(121,'EditDrugs','products_options_editdrugs_aspx',5,'Edit Drugs','~/products/options/editdrugs.aspx')
,(122,'EditConsultants','products_options_editconsultants_aspx',5,'Edit Consultants','~/products/options/editconsultants.aspx')
,(123,'Admin Utilities -> ImagePort','products_options_imageportconfig_aspx',3,'Image Port','~/products/options/imageportconfig.aspx')

,(130,'User Maintenance -> MenuRoleAssignment','products_options_menuroleassignment_aspx',4,'Menu Role Assignment','~/products/options/menuroleassignment.aspx')
,(131,'User Maintenance -> Set up Users','products_options_usermaintenance_aspx',4,'Set up Users','~/products/options/usermaintenance.aspx')
,(132,'User Maintenance -> Manage Role names','products_options_roles_aspx',4,'Manage Role names','~/products/options/roles.aspx')
,(133,'User Maintenance -> Configure the Roles','products_options_rolesassignment_aspx',4,'Configure the Roles','~/products/options/rolesassignment.aspx')
,(134,'EditUser','products_options_edituser_aspx',8,'Edit User','~/products/options/edituser.aspx')

--Scheduler
,(250,'Scheduler -> Templates','products_options_scheduler_templates_aspx',5,'Templates','~/products/options/scheduler/templates.aspx')
,(251,'EditTemplates','products_options_scheduler_edittemplates_aspx',5,'Edit Templates','~/products/options/scheduler/edittemplates.aspx')
,(252,'DiaryPages','products_options_scheduler_diarypages_aspx',5,'Diary Pages','~/products/options/scheduler/diarypages.aspx')
,(253,'Rooms','products_options_scheduler_rooms_aspx',5,'Rooms','~/products/options/scheduler/rooms.aspx')
,(254,'EditRooms','products_options_scheduler_editrooms_aspx',5,'Edit Rooms','~/products/options/scheduler/editrooms.aspx')
,(255,'Booking/Breach Status','products_options_scheduler_bookingbreachstatus_aspx',5,'Booking/Breach Status','~/products/options/scheduler/bookingbreachstatus.aspx')
,(256,'Endoscopists Rules','products_options_scheduler_endoscopistsrules_aspx', 5,'Endoscopist Rules','~/products/options/scheduler/endoscopistsrules.aspx')
,(257,'Points','products_options_scheduler_pointmappings_aspx',5,'Points','~/products/options/scheduler/pointmappings.aspx')
,(258,'PatientBooking','products_scheduler_patientbooking_aspx',5,'Patient Booking','~/products/options/scheduler/patientbooking.aspx')
,(259,'PointMappings','products_options_scheduler_pointmappings_aspx',5,'Point Mappings','~/products/options/scheduler/pointmappings.aspx')
,(260,'Scheduler -> Gender List','products_options_scheduler_genderlist_aspx',5,'Gender List','~/products/options/scheduler/genderlist.aspx')
,(261,'TherapeuticTypes','products_options_scheduler_therapeutictypes_aspx',5,'Therapeutic Types','~/products/options/scheduler/therapeutictypes.aspx')
,(262,'Free slot defaults','products_options_scheduler_freeslotdefaults_aspx',5,'Free slot defaults','~/products/options/scheduler/therapeutictypes.aspx')

--Other Data
,(300,'Other Data -> PatientProcedure','products_patientprocedure_aspx',5,'Patient Procedure','~/products/patientprocedure.aspx')
,(301,'Other Data -> Indications','products_gastro_otherdata_ogd_indications_aspx',5,'Indications','~/products/gastro/otherdata/ogd/indications.aspx')
,(302,'Other Data -> PreMed','products_common_premed_aspx',5,'PreMed','~/products/common/premed.aspx')
,(303,'Other Data -> ExtentOfIntubation','products_gastro_otherdata_ogd_extentofintubation_aspx',5,'Entent of intubation','~/products/gastro/otherdata/ogd/extentofintubation.aspx')
,(304,'Other Data -> Diagnoses','products_gastro_otherdata_ogd_diagnoses_aspx',5,'Diagnoses','~/products/gastro/otherdata/ogd/diagnoses.aspx')
,(305,'Other Data -> QA','products_gastro_otherdata_ogd_qa_aspx',5,'Quality Assurance','~/products/gastro/otherdata/ogd/qa.aspx')
,(306,'Other Data -> Rx','products_gastro_otherdata_ogd_rx_aspx',5,'Rx','~/products/gastro/otherdata/ogd/rx.aspx')
,(307,'Other Data -> FollowUp','products_gastro_otherdata_ogd_followup_aspx',5,'Follow Up','~/products/gastro/otherdata/ogd/followup.aspx')
,(308,'ExtentLim','products_common_extentlim_aspx',5,'Extent/Limiting Factors','~/products/common/extentlim.aspx')
,(309,'Other Data -> Drugs','products_broncho_otherdata_drugs_aspx',5,'Drugs','~/products/broncho/otherdata/drugs.aspx')
,(310,'Other Data -> Pathology','products_broncho_otherdata_pathology_aspx',5,'Pathology','~/products/broncho/otherdata/pathology.aspx')
,(311,'Other Data -> Coding','products_broncho_otherdata_coding_aspx',5,'Coding','~/products/broncho/otherdata/coding.aspx')
,(312,'Visualisation','products_common_visualisation_aspx',5,'Visualisation','~/products/common/visualisation.aspx')
,(313,'Other Data -> PatientMedication','products_gastro_otherdata_ogd_patientmedication_aspx',5,'Patient Medication','~/products/gastro/otherdata/ogd/patientmedication.aspx')
,(314,'Other Data -> GI Bleeds','products_gastro_otherdata_ogd_gibleeds_aspx',5,'GI Bleeds','~/products/gastro/otherdata/ogd/gibleeds.aspx')
,(315,'Other Data -> Print','products_gastro_otherdata_printprocedure_aspx',5,'Print','~/products/gastro/otherdata/printprocedure.aspx')

--Abnormalities
,(400,'SiteDetails','products_sitedetails_aspx',6,'Site Details','~/products/sitedetails.aspx')
,(401,'OGDTherapeuticProcedures','products_gastro_therapeuticprocedures_ogdtherapeuticprocedures_aspx',6,'Therapeutic Procedures','~/products/gastro/therapeuticprocedures/ogdtherapeuticprocedures.aspx')
,(402,'Calibre','products_gastro_abnormalities_colon_calibre_aspx',6,'Calibre','~/products/gastro/abnormalities/colon/calibre.aspx')
,(403,'Abnormalities','products_abnormalities_aspx',6,'Abnormalities','~/products/abnormalities.aspx')
,(404,'SiteSummary','products_common_sitesummary_aspx',6,'Site Summary','~/products/common/sitesummary.aspx')
,(405,'Mucosa','products_gastro_abnormalities_colon_mucosa_aspx',6,'Mucosa','~/products/gastro/abnormalities/colon/mucosa.aspx')
,(406,'Diverticulum','products_gastro_abnormalities_colon_diverticulum_aspx',6,'Diverticulum','~/products/gastro/abnormalities/colon/diverticulum.aspx')
,(407,'Vascularity','products_gastro_abnormalities_colon_vascularity_aspx',6,'Vascularity','~/products/gastro/abnormalities/colon/vascularity.aspx')
,(408,'Haemorrhage','products_gastro_abnormalities_colon_haemorrhage_aspx',6,'Haemorrhage','~/products/gastro/abnormalities/colon/haemorrhage.aspx')
,(409,'OGDSpecimensTaken','products_gastro_specimens_ogdspecimenstaken_aspx',6,'OGD Specimens Taken','~/products/gastro/specimens/ogdspecimenstaken.aspx')
,(410,'Notes','products_gastro_notes_notes_aspx',6,'Notes','~/products/gastro/notes/notes.aspx')
,(411,'Gastritis','products_gastro_abnormalities_ogd_gastritis_aspx',6,'Gastritis','~/products/gastro/abnormalities/ogd/gastritis.aspx')
,(412,'GastricUlcer','products_gastro_abnormalities_ogd_gastriculcer_aspx',6,'Gastric Ulcer','~/products/gastro/abnormalities/ogd/gastriculcer.aspx')
,(413,'Lumen','products_gastro_abnormalities_ogd_lumen_aspx',6,'Lumen','~/products/gastro/abnormalities/ogd/lumen.aspx')
,(414,'Malignancy','products_gastro_abnormalities_ogd_malignancy_aspx',6,'Malignancy','~/products/gastro/abnormalities/ogd/malignancy.aspx')
,(415,'PostSurgery','products_gastro_abnormalities_ogd_postsurgery_aspx',6,'Post Surgery','~/products/gastro/abnormalities/ogd/postsurgery.aspx')
,(416,'Deformity','products_gastro_abnormalities_ogd_deformity_aspx',6,'Deformity','~/products/gastro/abnormalities/ogd/deformity.aspx')
,(417,'Polyps','products_gastro_abnormalities_ogd_polyps_aspx',6,'Polyps','~/products/gastro/abnormalities/ogd/polyps.aspx')
,(418,'Varices','products_gastro_abnormalities_ogd_varices_aspx',6,'Varices','~/products/gastro/abnormalities/ogd/varices.aspx')
,(419,'HiatusHernia','products_gastro_abnormalities_ogd_hiatushernia_aspx',6,'Hiatus Hernia','~/products/gastro/abnormalities/ogd/hiatushernia.aspx')
,(420,'Oesophagitis','products_gastro_abnormalities_ogd_oesophagitis_aspx',6,'Oesophagitis','~/products/gastro/abnormalities/ogd/oesophagitis.aspx')
,(421,'BarrettEpithelium','products_gastro_abnormalities_ogd_barrettepithelium_aspx',6,'Barrett Epithelium','~/products/gastro/abnormalities/ogd/barrettepithelium.aspx')
,(422,'Miscellaneous','products_gastro_abnormalities_ogd_miscellaneous_aspx',6,'Miscellaneous','~/products/gastro/abnormalities/ogd/miscellaneous.aspx')
,(430,'PerianalLesions','products_gastro_abnormalities_colon_perianallesions_aspx',6,'Perianal Lesions','~/products/gastro/abnormalities/colon/perianallesions.aspx')
,(431,'Lesions','products_gastro_abnormalities_colon_lesions_aspx',6,'Lesions','~/products/gastro/abnormalities/colon/lesions.aspx')

,(432,'Duct','products_gastro_abnormalities_ercp_duct_aspx',6,'Duct','~/products/gastro/abnormalities/ercp/duct.aspx')
,(433,'Parenchyma','products_gastro_abnormalities_ercp_parenchyma_aspx',6,'Parenchyma','~/products/gastro/abnormalities/ercp/parenchyma.aspx')
,(434,'Appearance','products_gastro_abnormalities_ercp_appearance_aspx',6,'Appearance','~/products/gastro/abnormalities/ercp/appearance.aspx')
,(435,'Diverticulum','products_gastro_abnormalities_ercp_diverticulum_aspx',6,'Diverticulum','~/products/gastro/abnormalities/ercp/diverticulum.aspx')
,(436,'Papillary Anatomy','products_common_papillaryanatomy_aspx',6,'Papillary Anatomy','~/products/common/papillaryanatomy.aspx')
,(437,'Tumour','products_gastro_abnormalities_ercp_tumour_aspx',6,'Tumour','~/products/gastro/abnormalities/ercp/tumour.aspx')
,(438,'ERCPTherapeuticProcedures','products_gastro_therapeuticprocedures_ercptherapeuticprocedures_aspx',6,'ERCP Therapeutic Procedures','~/products/gastro/therapeuticprocedures/ercptherapeuticprocedures.aspx')

,(441,'Diverticulum','products_gastro_abnormalities_common_diverticulum_aspx',6,'Diverticulum','~/products/gastro/abnormalities/common/diverticulum.aspx')
,(442,'Tumour','products_gastro_abnormalities_common_tumour_aspx',6,'Tumour','~/products/gastro/abnormalities/common/tumour.aspx')
,(443,'Duodenitis','products_gastro_abnormalities_common_duodenitis_aspx',6,'Duodenitis','~/products/gastro/abnormalities/common/duodenitis.aspx')
,(444,'Duodenal Ulcer','products_gastro_abnormalities_common_duodenalulcer_aspx',6,'Duodenal Ulcer','~/products/gastro/abnormalities/common/duodenalulcer.aspx')
,(445,'ScarringStenosis','products_gastro_abnormalities_common_scarring_aspx',6,'Scarring Stenosis','~/products/gastro/abnormalities/common/scarring.aspx')
,(446,'AtrophicDuodenum','products_gastro_abnormalities_common_atrophicduodenum_aspx',6,'Atrophic Duodenum','~/products/gastro/abnormalities/common/atrophicduodenum.aspx')
,(447,'VascularLesions','products_gastro_abnormalities_common_vascularlesions_aspx',6,'Vascular Lesions','~/products/gastro/abnormalities/common/vascularlesions.aspx')

,(450,'Abnormality Descriptions','products_broncho_abnormalities_brtabnodescriptions_aspx',6,'Abnormality Descriptions','~/products/broncho/abnormalities/brtabnodescriptions.aspx')
,(451,'Abnormality Descriptions','products_broncho_abnormalities_ebusabnodescriptions_aspx',6,'EBUS Abnormality Descriptions','~/products/broncho/abnormalities/ebusabnodescriptions.aspx')
,(452,'BronchoSpecimens','products_broncho_specimens_bronchospecimens_aspx',6,'Broncho Specimens','~/products/broncho/specimens/bronchospecimens.aspx')
,(453,'GPDetails','products_common_gpdetails_aspx',NULL,'GP Details','~/products/common/gpdetails.aspx')
,(454,'Achalasia','products_gastro_abnormalities_ogd_achalasia_aspx',6,'Achalasia','~/products/gastro/abnormalities/ogd/achalasia.aspx')
,(455,'ReversalAgents','products_gastro_otherdata_ogd_reversalagents_aspx',6,'Reversal Agents','~/products/gastro/otherdata/ogd/reversalagents.aspx')
,(456,'PathologyPreview','products_common_pathologypreview_aspx',6,'Pathology Preview','~/products/common/pathologypreview.aspx')

,(457,'Mediastinal','products_gastro_abnormalities_eus_mediastinal_aspx',6,'Mediastinal','~/products/gastro/abnormalities/eus/mediastinal.aspx')
,(458,'Diagnoses','products_gastro_abnormalities_common_diagnoses_aspx',6,'Duodenal Ulcer','~/products/gastro/abnormalities/common/diagnoses.aspx')

,(459,'Miscellaneous','products_gastro_abnormalities_colon_miscellaneous_aspx',6,'Miscellaneous','~/products/gastro/abnormalities/colon/miscellaneous.aspx')

GO
--UPDATE [ERS_Pages] SET PageAlias = 'PatientProcedure' WHERE AppPageName ='products_patientprocedure_aspx'
--UPDATE [ERS_Pages] SET PageAlias = 'Indications' WHERE AppPageName ='products_gastro_otherdata_ogd_indications_aspx'
--UPDATE [ERS_Pages] SET PageAlias = 'PreMed' WHERE AppPageName ='products_common_premed_aspx'
--UPDATE [ERS_Pages] SET PageAlias = 'Diagnoses' WHERE AppPageName ='products_gastro_otherdata_ogd_diagnoses_aspx'
--UPDATE [ERS_Pages] SET PageAlias = 'QualityAssurance' WHERE AppPageName ='products_gastro_otherdata_ogd_qa_aspx'


CREATE TABLE [dbo].[ERS_PagesByRole](
	[PagesByRoleId] [int] IDENTITY(1,1) NOT NULL,
	[RoleId] [tinyint] NOT NULL,
	[PageId] [smallint] NOT NULL,
	[AccessLevel] [tinyint] NULL,
 CONSTRAINT [PK_ERS_PagesByRole] PRIMARY KEY CLUSTERED 
(
	[PagesByRoleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

CREATE UNIQUE INDEX IX_ERS_PagesByRole
ON [ERS_PagesByRole] ([RoleId], [PageId])


--Populate table ERS_PagesByRole for 'System Administrators'
INSERT INTO ERS_PagesByRole ([RoleId], [PageId], [AccessLevel])
SELECT  (SELECT TOP 1 RoleID FROM ERS_Roles WHERE RoleName = 'Unisoft')
		,PageId
		, 9
FROM ERS_Pages

--Populate table ERS_PagesByRole for 'System Administrators'
INSERT INTO ERS_PagesByRole ([RoleId], [PageId], [AccessLevel])
SELECT  (SELECT TOP 1 RoleID FROM ERS_Roles WHERE RoleName = 'System Administrators')
		,PageId
		, 9
FROM ERS_Pages

--Populate table ERS_PagesByRole for 'Read Only'
INSERT INTO ERS_PagesByRole ([RoleId], [PageId], [AccessLevel])
SELECT  (SELECT TOP 1 RoleID FROM ERS_Roles WHERE RoleName = 'Read Only')
		,PageId
		, 9
FROM ERS_Pages WHERE AppPageName IN ('products_common_printreport_aspx', 'products_common_pathologypreview_aspx')

--Do no display reports, user maintenance if ERSViewer
IF (SELECT IsERSViewer FROM #variables) = 1
BEGIN
	DELETE FROM ERS_PagesByRole	WHERE PageId = (SELECT  TOP 1 PageId FROM ERS_PAGES WHERE AppPageName = 'products_reports_reports_aspx')
	-- Delete User Maintenance
	DELETE FROM ERS_PagesByRole	WHERE (PageId BETWEEN 130 AND 134)
								AND RoleID <> (SELECT TOP 1 RoleID FROM ERS_Roles WHERE RoleName = 'Unisoft')
	-- Delete Scheduler
	DELETE FROM ERS_PagesByRole	WHERE (PageId BETWEEN 250 AND 254)
								AND RoleID <> (SELECT TOP 1 RoleID FROM ERS_Roles WHERE RoleName = 'Unisoft')
END
GO

CREATE TABLE [dbo].[ERS_MenuMap](
       [MapID] [int] IDENTITY(1,1) NOT NULL,
       [ParentID] [int] NULL,
       [NodeName] [varchar](50) NULL,
       [MenuCategory] [varchar](50) NULL,
       [MenuUrl] [varchar](500) NULL,
       [isViewer] [bit] NULL CONSTRAINT [DF_ERS_MenuMap_isViewer] DEFAULT 0,
       [isDemoVersion] [bit] NULL CONSTRAINT [DF_ERS_MenuMap_isDemoVersion] DEFAULT 0,
       [PageID] [int] NULL,
       [MenuIcon] [varchar](100) NULL,
       [MenuTooltip] [varchar](1000) NULL,
       [Suppressed] [bit] NULL CONSTRAINT [DF_ERS_MenuMap_Suppressed] DEFAULT 0,
CONSTRAINT [PK_ERS_MenuMap] PRIMARY KEY CLUSTERED ([MapID] ASC) ON [PRIMARY]
) ON [PRIMARY]

GO

DECLARE @MapID INT
INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
(NULL, N'Settings', N'Configure', NULL, 1, 0, 0, NULL, NULL, 0)
SET @MapID = @@IDENTITY

INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
(@MapID, N'User Settings', N'Configure', N'~/Products/Options/UserSettings.aspx', 0, 0, 101, NULL, NULL, 0)
,(@MapID, N'System Configuration', N'Configure', N'~/Products/Options/SystemSettings.aspx', 1, 0, 102, NULL, NULL, 0)
--,(@MapID, N'Startup Configuration', N'Configure', N'~/Products/Options/StartupSettings.aspx', 1, 0, 103, NULL, NULL, 0)
,(@MapID, N'Licence', N'Configure', N'~/Products/Options/License.aspx', 1, 0, 104, NULL, NULL, 0)
,(@MapID, N'Print Settings', N'Configure', N'~/Products/Common/PrintOptions.aspx?MainMenu=1', 0, 0, 105, NULL, NULL, 0)

INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
(NULL, N'Admin Utilities', N'Configure', NULL, 0, 0, 0, NULL, NULL, 0)
SET @MapID = @@IDENTITY

INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
(@MapID, N'Registration Details', N'Configure', N'~/Products/Options/RegistrationDetails.aspx', 0, 0, 110, NULL, NULL, 0)
,(@MapID, N'Password Rules', N'Configure', N'~/Products/Options/PasswordRules.aspx', 0, 0, 111, NULL, NULL, 0)
,(@MapID, N'Who''s Logged In', N'Configure', N'~/Products/Options/SystemUsage.aspx', 0, 0, 112, NULL, NULL, 0)
,(@MapID, N'Referring Consultants', N'Configure', N'~/Products/Options/ReferingConsultant.aspx', 0, 0, 113, NULL, NULL, 0)
,(@MapID, N'Premed/Rx drug lists', N'Configure', N'~/Products/Options/ModifyPremedicationDrugs.aspx', 0, 0, 114, NULL, NULL, 0)
,(@MapID, N'Phrase Library', N'Configure', N'~/Products/Common/WordLibrary.aspx?option=SystemSettings', 0, 0, 115, NULL, NULL, 0)
,(@MapID, N'Dropdown Lists', N'Configure', N'~/Products/Options/DropdownLists.aspx', 0, 0, 116, NULL, NULL, 0)
--,(@MapID, N'Required Fields Setup', N'Configure', N'~/Products/Options/RequiredFieldsSetup.aspx', 0, 0, 117, NULL, NULL, 0)
,(@MapID, N'Field Labels', N'Configure', N'~/Products/Options/FieldLabels.aspx', 0, 0, 118, NULL, NULL, 0)
--,(@MapID, N'Diagnoses', N'Configure', N'~/Products/Options/DiagnosesConfig.aspx', 0, 0, 119, NULL, NULL, 0)
,(@MapID, N'NED Export', N'Configure', N'~/Products/Options/NedExportConfig.aspx', 0, 0, 120, NULL, NULL, 0)
,(@MapID, N'Image Port', N'Configure', N'~/Products/Options/ImagePortConfig.aspx', 0, 0, 120, NULL, NULL, 0)


IF (SELECT IsERSViewer FROM #variables) <> 1
BEGIN
	IF (SELECT IncludeScheduling FROM #variables) = 1 
	BEGIN
		INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
		(NULL, N'Scheduler Setup', N'Configure', NULL, 0, 0, 0, NULL, NULL, 0)
		SET @MapID = @@IDENTITY

		INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
		(@MapID, N'Templates', N'Configure', N'~/Products/Options/Scheduler/Templates.aspx', 1, 0, 250, NULL, NULL, 0)
		,(@MapID, N'Diary Pages', N'Configure', N'~/Products/Options/Scheduler/DiaryPages.aspx', 1, 0, 252, NULL, NULL, 0)
		,(@MapID, N'Rooms', N'Configure', N'~/Products/Options/Scheduler/Rooms.aspx', 1, 0, 253, NULL, NULL, 0)
		,(@MapID, N'Points', N'Configure', N'~/Products/Options/Scheduler/PointMappings.aspx', 1, 0, 257, NULL, NULL, 0)
		,(@MapID, N'Booking/Breach Status', N'Configure', N'~/Products/Options/Scheduler/BookingBreachStatus.aspx', 1 ,0 ,255, NULL, NULL, 0)
		,(@MapID, N'Set Endoscopists Rules', N'Configure', N'~/Products/Options/Scheduler/EndoscopistsRules.aspx', 1, 0, 256, NULL, NULL, 0)
		,(@MapID, N'Set Free slot defaults', N'Configure', N'~/Products/Options/Scheduler/FreeSlotDefaults.aspx', 1, 0, 262, NULL, NULL, 0)
	END
END

INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
(NULL, N'User Maintenance', N'Configure', NULL, 1, 0, 0, NULL, NULL, 0)
SET @MapID = @@IDENTITY

INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
(@MapID, N'Manage Role names', N'Configure', N'~/Products/Options/Roles.aspx', 1, 0, 132, NULL, NULL, 0)
,(@MapID, N'Configure the Roles', N'Configure', N'~/Products/Options/RolesAssignment.aspx', 1, 0, 133, NULL, NULL, 0)
,(@MapID, N'Set up Users (and their roles)', N'Configure', N'~/Products/Options/UserMaintenance.aspx', 1, 0, 131, NULL, NULL, 0)
,(NULL, N'Home', N'StartMenu', N'~/Products/Default.aspx?Pg=1', 1, 0, 0, N'~/Images/Home.png', N'Home', 0)
,(NULL, N'System Settings', N'StartMenu', N'~/Products/Options/OptionsMain.aspx', 1, 0, 100, N'~/Images/configure.png', N'System Settings', 0)

IF (SELECT IsERSViewer FROM #variables) = 0
BEGIN
	IF (SELECT IncludeScheduling FROM #variables) = 1 
	BEGIN
		INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
		(NULL, N'Scheduling', N'StartMenu', NULL, 1, 0, 0, N'~/Images/icons/calendar.png', N'Scheduling', 0)
		SET @MapID = @@IDENTITY

		INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
		(@MapID, N'Schedule lists...', N'StartMenu', N'~/Products/Scheduler/Scheduler.aspx', 1, 0, 0,  N'~/Images/icons/lists.png', NULL, 0)
	END

	IF (SELECT IncludeReports FROM #variables) = 1 
		INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
		(NULL, N'Reports', N'StartMenu', N'~/Products/Reports/Reports.aspx', 1, 0, 0, N'~/Images/reports.png', N'Reports', 0)
END

INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
(NULL, N'Help', N'StartMenu', NULL, 1, 0, 0, N'~/Images/help.png', N'Help', 0)
SET @MapID = @@IDENTITY

INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
(@MapID, N'HD Clinical', N'StartMenu', N'http://www.hd-clinical.com', 1, 0, 0,  N'~/Images/icons/About.png', NULL, 0)
,(@MapID, N'HD Clinical Support', N'StartMenu', N'http://www.hd-clinical.com/support', 1, 0, 0,  N'~/Images/icons/help_faq.png', NULL, 0)
,(@MapID, N'|', N'StartMenu', N'.', 1, 0, 0,  NULL, NULL, 0)
,(@MapID, N'Feedback', N'StartMenu', N'OpenFeedbackWindow();', 1, 0, 0,  N'~/Images/icons/feedback1.png', NULL, 0)
,(@MapID, N'|', N'StartMenu', N'.', 1, 0, 0,  NULL, NULL, 0)
,(@MapID, N'About ERS', N'StartMenu', N'OpenFeedbackWindow();', 1, 0, 0,  N'~/Images/icons/favicon_2d.png', NULL, 0)

INSERT [dbo].[ERS_MenuMap] ([ParentID], [NodeName], [MenuCategory], [MenuUrl], [isViewer], [isDemoVersion], [PageID], [MenuIcon], [MenuTooltip], [Suppressed]) VALUES 
--(NULL, N'Help', N'StartMenu', N'~/Security/Help.aspx', 1, 0, 0, N'~/Images/help1.png', N'Help', 0)
--(NULL, N'Logout', N'StartMenu', N'~/Security/Logout.aspx', 1, 0, 0, N'~/Images/logout.png', N'Logout', 0)
(NULL, N'Return to main screen', N'OtherData', N'~/Products/Default.aspx', 0, 0, 5, N'~/Images/icons/GoPrevious5.png', NULL, 0)
,(NULL, N'Indications', N'OtherData', N'~/Products/Gastro/OtherData/OGD/Indications.aspx', 0, 0, 301, NULL, NULL, 0)
,(NULL, N'Premed', N'OtherData', N'~/Products/Common/PreMed.aspx', 0, 0, 302, NULL, NULL, 0)
,(NULL, N'Visualisation', N'OtherData', N'~/Products/Common/Visualisation.aspx', 0, 0, 311, NULL, NULL, 0)
,(NULL, N'Extent of Intubation', N'OtherData', N'~/Products/Common/ExtentLim.aspx', 0, 0, 308, NULL, NULL, 0)
,(NULL, N'Diagnoses', N'OtherData', N'~/Products/Gastro/OtherData/OGD/Diagnoses.aspx', 0, 0, 304, NULL, NULL, 0)
,(NULL, N'QA', N'OtherData', N'~/Products/Gastro/OtherData/OGD/QA.aspx', 0, 0, 305, NULL, NULL, 0)
,(NULL, N'Rx', N'OtherData', N'~/Products/Gastro/OtherData/OGD/Rx.aspx', 0, 0, 306, NULL, NULL, 0)
,(NULL, N'Follow up', N'OtherData', N'~/Products/Gastro/OtherData/OGD/FollowUp.aspx', 0, 0, 307, NULL, NULL, 0)
,(NULL, N'18w', N'OtherData', N'~/Products/Common/18w.aspx', 0, 0, 0, NULL, NULL, 0)
,(NULL, N'Pathology', N'OtherData', N'~/Products/Broncho/OtherData/Pathology.aspx', 0, 0, 310, NULL, NULL, 0)
,(NULL, N'Drugs', N'OtherData', N'~/Products/Broncho/OtherData/Drugs.aspx', 0, 0, 0, NULL, NULL, 0)
,(NULL, N'Print', N'OtherData', N'~/Products/Gastro/OtherData/PrintProcedure.aspx', 0, 0, 314, NULL, NULL, 0)


GO


CREATE TABLE [dbo].[ERS_UserLogins](
	[UserLoginID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL, --MAKE THIS FOREIGN KEY *********
	[HostName] [varchar](100) NOT NULL,
	[HostFullName] [varchar](200) NOT NULL,
	[LoggedInAt] [datetime] NOT NULL,
	[LastActiveAt] [datetime] NOT NULL,
	CONSTRAINT [PK_UserLoginID] PRIMARY KEY CLUSTERED ([UserLoginID] ASC)	
)
GO

CREATE TABLE [dbo].[ERS_UserProfiles](
	[UserProfileID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL, --MAKE THIS FOREIGN KEY *********
	[DeleteCache] [bit] NOT NULL CONSTRAINT DF_Delete_Cache DEFAULT 0,
	[ColouredDiagram] [bit] NOT NULL CONSTRAINT DF_Coloured_Diagram DEFAULT 0,
	[LastUpdatedOn] [datetime] NOT NULL CONSTRAINT DF_UserProfile_UpdatedOn DEFAULT GETDATE(),
	CONSTRAINT [PK_UserProfileID] PRIMARY KEY CLUSTERED ([UserProfileID] ASC)	
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UserPasswords](
	[UserPasswordID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL, --MAKE THIS FOREIGN KEY *********
	[Password] [varchar](50) NOT NULL,
	[CreatedOn] [datetime] NOT NULL,
	CONSTRAINT [PK_UserPasswordID] PRIMARY KEY CLUSTERED ([UserPasswordID] ASC)	
)
GO


CREATE TABLE [dbo].[ERS_JobTitles](
	[JobTitleID] [int] IDENTITY(1,1) NOT NULL,
	[Description] [varchar] (200) NOT NULL,
	[Suppressed] [bit] NOT NULL CONSTRAINT DF_JobTitles_Suppressed DEFAULT 0,
	[CreatedOn] [datetime] NOT NULL CONSTRAINT DF_JobTitles_CreatedOn DEFAULT GETDATE(),
	CONSTRAINT [PK_JobTitles] PRIMARY KEY CLUSTERED ([JobTitleID] ASC)	
) ON [PRIMARY]
GO

INSERT INTO ERS_JobTitles ([Description]) VALUES 
('Consultant Physician')
,('Consultant to Mr Cosgrove')
,('Consultant Surgeon')
,('Staff Nurse')
,('Trainee Nurse Endoscopist')
,('Enrolled Nurse')
GO

CREATE TABLE [dbo].[ERS_Feedback](
       [FeedbackID] [int] IDENTITY(1,1) NOT NULL,
       [Fullname] [varchar](500) NULL,
       [EmailAddress] [varchar](500) NULL,
       [FeedbackText] [varchar](max) NULL,
	   [DateCreated] [datetime] NULL CONSTRAINT DF_ERS_Feedback_DateCreated DEFAULT (getdate()),
CONSTRAINT [PK_ERS_Feedback] PRIMARY KEY CLUSTERED ([FeedbackID] ASC)
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------113 Create Table ERS_RequiredFields -- NEEDS REGULAR UPDATING.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_RequiredFields](
	[RequiredFieldId] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureType] [INT] NULL,		--999 -> all procedures
	[PageName] [varchar] (500) NOT NULL,
	[ClassName] [varchar] (500) NOT NULL,
	[FieldName] [varchar] (500) NOT NULL,
	[ValidatorControlId] [varchar] (500) NOT NULL,
	[Required] [bit] NOT NULL,
	[CannotBeSuppressed] [bit] NOT NULL,
	[TextMessage] varchar(2000),
	[PageURL] varchar(1000),
	[CommonField] [bit] NOT NULL DEFAULT ((0)),
	CONSTRAINT [PK_RequiredFields] PRIMARY KEY CLUSTERED ([RequiredFieldId])
) ON [PRIMARY]

GO

INSERT [dbo].[ERS_RequiredFields] ( [ProcedureType], [PageName], [ClassName], [FieldName], [ValidatorControlId], [Required], [CannotBeSuppressed], [TextMessage], [PageURL], [CommonField]) VALUES 
 (NULL, 'Create Procedure', 'Products_Default', 'Procedure', 'ProcTypeRequiredFieldValidator', 1, 1,'','',0)
,(NULL, 'Create Procedure', 'Products_Default', 'Hospital', 'HospitalRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Create Procedure', 'Products_Default', 'Consultant', 'ConsultantRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Create Procedure', 'Products_Default', 'Patient Status', 'PatStatusRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Create Procedure', 'Products_Default', 'Patient Type', 'PatientTypeRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Create Procedure', 'Products_Default', 'Category', 'CategoryRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Create Procedure', 'Products_Default', 'Endoscopist 1', 'Endo1RequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Create Procedure', 'Products_Default', 'Speciality', 'SpecialityRequiredFieldValidator', 1, 0,'','',0)

,(NULL, 'Patient Details', 'Products_Common_PatientDetails', 'Title', 'TitleRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Patient Details', 'Products_Common_PatientDetails', 'Forename', 'ForenameRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Patient Details', 'Products_Common_PatientDetails', 'Surname', 'SurnameRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Patient Details', 'Products_Common_PatientDetails', 'Date of birth', 'DobRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'Patient Details', 'Products_Common_PatientDetails', 'Case note no', 'CaseNoteNoRequiredFieldValidator', 1, 0,'','',0)

,(NULL, 'GP Details', 'Products_Common_GPDetails', 'Title', 'GPTitleRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'GP Details', 'Products_Common_GPDetails', 'Initials', 'GPInitialsRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'GP Details', 'Products_Common_GPDetails', 'Surname', 'GPSurnameRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'GP Details', 'Products_Common_GPDetails', 'Address', 'GPAddressRequiredFieldValidator', 1, 0,'','',0)

,(NULL, 'User Edit Form', 'Products_Options_EditUser', 'Title', 'TitleRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'User Edit Form', 'Products_Options_EditUser', 'Forename', 'ForenameRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'User Edit Form', 'Products_Options_EditUser', 'Surname', 'SurnameRequiredFieldValidator', 1, 0,'','',0)
,(NULL, 'User Edit Form', 'Products_Options_EditUser', 'User Id', 'UserNameRequiredFieldValidator', 1, 1,'','',0)
,(NULL, 'User Edit Form', 'Products_Options_EditUser', 'Expires On', 'ExpiresOnRequiredFieldValidator', 0, 1,'','',0)
,(NULL, 'User Edit Form', 'Products_Options_EditUser', 'Permissions', 'PermissionsRequiredFieldValidator', 1, 0,'','',0)

,(NULL, 'Therapeutic Procedures', 'Products_UserControls_TherapeuticProcedureUGI', 'Correct placement', 'TherapeuticProceduresCorrectPlacementRequiredFieldValidator', 1, 0,'','',0)
INSERT [dbo].[ERS_RequiredFields] ( [ProcedureType], [PageName], [ClassName], [FieldName], [ValidatorControlId], [Required], [CannotBeSuppressed], [TextMessage], [PageURL], [CommonField]) VALUES 
( NULL, N'QA', N'Products_Gastro_OtherData_OGD_QA', N'Patient Sedation', N'SedationOptionsRequiredFieldValidator', 1, 0, N'You must record nurse assessment of patient sedation for this procedure. <br/>The report cannot be saved without this information. ', N'../Products/Gastro/OtherData/OGD/QA.aspx?tab=1',1)
,( NULL, N'QA', N'Products_Gastro_OtherData_OGD_QA', N'Patient Discomfort', N'PatDiscomfortRequiredFieldValidator', 1, 0, N'You must record nurse assessment of patient comfort for this procedure. <br/>The report cannot be saved without this information. ', N'../Products/Gastro/OtherData/OGD/QA.aspx?tab=1',1)
,( NULL, N'PreMed', N'Products_Common_PreMed', N'Drugs administered', N'ValidateDrugs', 1, 0, N'You must record any premedication for this procedure. <br/>The report cannot be saved without this information. ', N'../Products/Common/PreMed.aspx',1)
,( NULL, N'PreMed', N'Products_Common_PreMed', N'Bowel preparation', N'ValidateBowel', 1, 0, N'You must record bowel preparation details for this procedure - both the formulation used and the quality of the preparation. <br/>The report cannot be saved without this information.', N'../Products/Common/PreMed.aspx',1)
,( NULL, N'ExtentLim', N'Products_Common_ExtentLim', N'Rectal exam (PR)', N'validateRectal', 1, 0, N'You must record extent and limiting factors (Rectal exam (PR)) for this procedure. <br/>The report cannot be saved without this information. ', N'../Products/Common/ExtentLim.aspx',1)
,( NULL, N'ExtentLim', N'Products_Common_ExtentLim', N'Retroflexion in rectum', N'validateRetroflexion', 1, 0, N'You must record extent and limiting factors (Retroflexion in rectum) for this procedure. <br/>The report cannot be saved without this information. ', N'../Products/Common/ExtentLim.aspx',1)
,( NULL, N'ExtentLim', N'Products_Common_ExtentLim', N'Insertion via', N'validateVia', 1, 0, N'You must record extent and limiting factors (Insertion via) for this procedure. <br/>The report cannot be saved without this information. ', N'../Products/Common/ExtentLim.aspx',1)
,( NULL, N'ExtentLim', N'Products_Common_ExtentLim', N'Insertion to', N'validateInsertto', 1, 0, N'You must record extent and limiting factors (Insertion to) for this procedure. <br/>The report cannot be saved without this information. ', N'../Products/Common/ExtentLim.aspx',1)
,( NULL, N'ExtentLim', N'Products_Common_ExtentLim', N'Insertion limited by', N'validateRectal', 1, 0, N'You must record extent and limiting factors (Insertion limited by) for this procedure. <br/>The report cannot be saved without this information. ', N'../Products/Common/ExtentLim.aspx',1)
,( NULL, N'PatientProcedure', N'Products_PatientProcedure', N'Instruments', N'validateInstruments', 1, 0, N'You must specify the instrument. <br/>The report cannot be saved without this information.', N'../Products/PatientProcedure.aspx',1)
,( NULL, N'Diagnoses', N'Products_Gastro_OtherData_OGD_Diagnoses', N'Diagnoses', N'validateDiagnoses', 1, 0, N'You must specify if the procedure is normal. <br/>The report cannot be saved without this information.', N'../Products/Gastro/OtherData/OGD/Diagnoses.aspx',1)
,( NULL, N'QA', N'Products_Gastro_OtherData_OGD_QA', N'Complications', N'ComplicationsRequiredFieldValidator', 1, 0, N'You must record complications for this procedure, even when they are ''None''. <br/>The report cannot be saved without this information.', N'../Products/Gastro/OtherData/OGD/QA.aspx?tab=3',1)
,( NULL, N'Indications', N'Products_Gastro_OtherData_OGD_Indications', N'Indications', N'validateIndications', 1, 0, N'You must record indications for this procedure, even when they are ''None''. <br/>The report cannot be saved without this information.', N'../Products/Gastro/OtherData/OGD/Indications.aspx?tab=2',1)
,( NULL, N'ExtentOfIntubation', N'Products_Gastro_OtherData_OGD_ExtentOfIntubation', N'ExtentOfIntubation', N'validateExtentOfIntubation', 1, 0, N'You must record data for extent on intubation for this procedure. <br/>The report cannot be saved without this information.', N'../Products/Gastro/OtherData/OGD/ExtentOfIntubation.aspx',1)
,( NULL, N'PapillaryAnatomy', N'Products_Common_PapillaryAnatomy', N'PapillaryAnatomy', N'', 1, 0, N'You must record the Papillary anatomy - to indicate whether or not this is the first ERCP for this patient. <br/>The report cannot be saved without this information.', N'../Products/Common/PapillaryAnatomy.aspx',1)
,( NULL, N'Visualisation', N'Products_Common_Visualisation', N'Duct intended for cannulation', N'', 1, 0, N'You must record the duct(s) intended for cannulation. <br/>The report cannot be saved without this information.', N'../Products/Common/Visualisation.aspx',1)


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------118 Create Tables Upper GI Abnormalities.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-------------------------------------------
--CREATE TABLES
-------------------------------------------
CREATE TABLE [dbo].[ERS_UpperGIAbnoGastritis](
	[AbnoGastritisId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoGastritis_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_None DEFAULT 0,
	[Erythematous]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_Erythematous DEFAULT 0,
	[ErythematousSeverity]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_ErythematousSeverity DEFAULT 0,
	[ErythematousBleeding]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_ErythematousBleeding DEFAULT 0,
	[FlatErosive]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_FlatErosive DEFAULT 0,
	[FlatErosiveSeverity]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_FlatErosiveSeverity DEFAULT 0,
	[FlatErosiveBleeding]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_FlatErosiveBleeding DEFAULT 0,
	[RaisedErosive]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_RaisedErosive DEFAULT 0,
	[RaisedErosiveSeverity]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_RaisedErosiveSeverity DEFAULT 0,
	[RaisedErosiveBleeding]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_RaisedErosiveBleeding DEFAULT 0,
	[Atrophic]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_Atrophic DEFAULT 0,
	[AtrophicSeverity]			[tinyint]   NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_AtrophicSeverity DEFAULT 0,
	[AtrophicBleeding]			[tinyint]   NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_AtrophicBleeding DEFAULT 0,
	[Haemorrhagic]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_Haemorrhagic DEFAULT 0,
	[HaemorrhagicSeverity]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_HaemorrhagicSeverity DEFAULT 0,
	[HaemorrhagicBleeding]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_HaemorrhagicBleeding DEFAULT 0,
	[Reflux]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_Reflux DEFAULT 0,
	[RefluxSeverity]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_RefluxSeverity DEFAULT 0,
	[RefluxBleeding]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_RefluxBleeding DEFAULT 0,
	[RugalHyperplastic]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_RugalHyperplastic DEFAULT 0,
	[RugalHyperplasticSeverity] [tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_RugalHyperplasticSeverity DEFAULT 0,
	[RugalHyperplasticBleeding] [tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_RugalHyperplasticBleeding DEFAULT 0,
	[Vomiting]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_Vomiting DEFAULT 0,
	[VomitingSeverity]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_VomitingSeverity DEFAULT 0,
	[VomitingBleeding]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_VomitingBleeding DEFAULT 0,
	[PromAreaeGastricae]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_PromAreaeGastricae DEFAULT 0,
	[PromAreaeGastricaeSeverity] [tinyint]  NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_PromAreaeGastricaeSeverity DEFAULT 0,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastritis_EUSProcType DEFAULT 0,
	[Summary]					[nVARCHAR](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoGastritis_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoGastritisId] PRIMARY KEY CLUSTERED ([AbnoGastritisId] ASC)	
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_UpperGIAbnoAchalasia](
	[AbnoAchalasiaId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId] [int] NOT NULL,
	[None] [bit] NOT NULL CONSTRAINT [DF_ERS_UpperGIAbnoAlchalasia_None] DEFAULT 0,
	[Probable] [bit] NOT NULL  CONSTRAINT [DF_ERS_UpperGIAbnoAlchalasia_Probable] DEFAULT 0 ,
	[Confirmed] [bit] NOT NULL  CONSTRAINT [DF_ERS_UpperGIAbnoAlchalasia_Confirmed] DEFAULT 0,
	[DilationLeadingToPerforation] [bit] NOT NULL  CONSTRAINT [DF_ERS_UpperGIAbnoAlchalasia_DilationLeadingToPerforation] DEFAULT 0,
	[Summary] [nvarchar](2000) NULL,
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoAchalasia_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoAchalasiaId] PRIMARY KEY CLUSTERED ([AbnoAchalasiaId] ASC)	
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_UpperGIAbnoGastricUlcer](
	[AbnoGastricUlcerId]		[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoGastricUlcer_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_None DEFAULT 0,
	[Ulcer]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_Ulcer DEFAULT 0,
	[UlcerType]					[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerType DEFAULT 0,
	[UlcerNumber]				[int]		NULL,
	[UlcerLargestDiameter]		[decimal](6,2) NULL,
	[UlcerActiveBleeding]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerActiveBleeding DEFAULT 0,
	[UlcerActiveBleedingtype]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerActiveBleedingType DEFAULT 0,
	[UlcerClotInBase]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerClotInBase DEFAULT 0,
	[UlcerVisibleVessel]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerVisibleVessel DEFAULT 0,
	[UlcerVisibleVesselType]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerVisibleVesselType DEFAULT 0,
	[UlcerOldBlood]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerOldBlood DEFAULT 0,
	[UlcerMalignantAppearance]	[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerMalignantAppearance DEFAULT 0,
	[UlcerPerforation]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_UlcerPerforation DEFAULT 0,
	[HealingUlcer]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_HealingUlcer DEFAULT 0,
	[HealingUlcerType]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_Healingulcertype DEFAULT 0,
	[NotHealed]					[bit]		NULL,
	[HealedUlcer]				[bit]		NULL,
	[NothealedText]				[varchar](1000) NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoGastricUlcer_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoGastricUlcer_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoGastricUlcerId] PRIMARY KEY CLUSTERED ([AbnoGastricUlcerId] ASC)	
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoLumen](
	[AbnoLumenId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoLumen_SiteId UNIQUE(SiteId),
	[NoBlood]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_None DEFAULT 0,
	[FreshBlood]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_FreshBlood DEFAULT 0,
	[FreshBloodAmount]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_FreshBloodAmount DEFAULT 0,
	[FreshBloodOrigin]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_FreshBloodOrigin DEFAULT 0,
	[AlteredBlood]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_AlteredBlood DEFAULT 0,
	[AlteredBloodAmount]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_AlteredBloodAmount DEFAULT 0,
	[AlteredBloodOrigin]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_AlteredBloodOrigin DEFAULT 0,
	[Food]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_Food DEFAULT 0,
	[FoodAmount]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_FoodAmount DEFAULT 0,
	[Bile]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_Bile DEFAULT 0,
	[BileAmount]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_BileAmount DEFAULT 0,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoLumen_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoLumen_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoLumenId] PRIMARY KEY CLUSTERED ([AbnoLumenId] ASC)	
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoMalignancy](
	[AbnoMalignancyId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoMalignancy_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_None DEFAULT 0,
	[EarlyCarcinoma]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_EarlyCarcinoma DEFAULT 0,
	[EarlyCarcinomaLesion]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_EarlycarcinomaLesion DEFAULT 0,
	[EarlyCarcinomaStart]		[int]		NULL,
	[EarlyCarcinomaEnd]			[int]		NULL,
	[EarlyCarcinomaLargest]		[decimal](6,2) NULL,
	[EarlyCarcinomaBleeding]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_EarlycarCinomaBleeding DEFAULT 0,
	[AdvCarcinoma]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_AdvCarcinoma DEFAULT 0,
	[AdvCarcinomaLesion]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_AdvcarcinomaLesion DEFAULT 0,
	[AdvCarcinomaStart]			[int]		NULL,
	[AdvCarcinomaEnd]			[int]		NULL,
	[AdvCarcinomaLargest]		[decimal](6,2) NULL,
	[AdvCarcinomaBleeding]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_AdvcarCinomaBleeding DEFAULT 0,
	[Lymphoma]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_Lymphoma DEFAULT 0,
	[LymphomaLesion]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_LymphomaLesion DEFAULT 0,
	[LymphomaStart]				[int]		NULL,
	[LymphomaEnd]				[int]		NULL,
	[LymphomaLargest]			[decimal](6,2) NULL,
	[LymphomaBleeding]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_LymphomaBleeding DEFAULT 0,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMalignancy_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	CONSTRAINT [FK_UpperGIAbnoMalignancy_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoMalignancyId] PRIMARY KEY CLUSTERED ([AbnoMalignancyId] ASC)	
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoPostSurgery](
	[AbnoPostSurgeryId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoPostSurgery_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPostSurgery_None DEFAULT 0,
	[PreviousSurgery]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPostSurgery_PreviousSurgery DEFAULT 0,
	[SurgicalProcedure]			[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPostSurgery_SurgicalProcedure DEFAULT 0,
	[SurgicalProcedureFindings]	[varchar](1000)	NULL,
	[DuodenumPresent]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPostSurgery_DuodenumPresent DEFAULT 0,
	[JejunumState]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPostSurgery_JejunumState DEFAULT 0,
	[JejunumAbnormalText]		[varchar](500)	NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPostSurgery_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoPostSurgery_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoPostSurgeryId] PRIMARY KEY CLUSTERED ([AbnoPostSurgeryId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoPolyps](
	[AbnoPolypsId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoPolyps_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_None DEFAULT 0,
	[Sessile]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_Sessile DEFAULT 0,
	[SessileType]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SessileType DEFAULT 0,
	[SessileBenignType]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SessileBenignType DEFAULT 0,
	[SessileQty]				[int]		NULL,
	[SessileMultiple]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SessileMultiple DEFAULT 0,
	[SessileLargest]			[decimal](6,2) NULL,
	[SessileNumExcised]			[int]		NULL,
	[SessileNumRetrieved]		[int]		NULL,
	[SessileNumToLabs]			[int]		NULL,
	[SessileEroded]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SessileEroded DEFAULT 0,
	[SessileUlcerated]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SessileUlcerated DEFAULT 0,
	[SessileOverlyingClot]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SessileOverlyingClot DEFAULT 0,
	[SessileActiveBleeding]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SessileActiveBleeding DEFAULT 0,
	[SessileOverlyingOldBlood]	[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SessileOverlyingOldBlood DEFAULT 0,
	[Pedunculated]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_Pedunculated DEFAULT 0,
	[PedunculatedType]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_PedunculatedType DEFAULT 0,
	[PedunculatedBenignType]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_PedunculatedBenignType DEFAULT 0,
	[PedunculatedQty]			[int]		NULL,
	[PedunculatedMultiple]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_PedunculatedMultiple DEFAULT 0,
	[PedunculatedLargest]		[decimal](6,2) NULL,
	[PedunculatedNumExcised]	[int]		NULL,
	[PedunculatedNumRetrieved]	[int]		NULL,
	[PedunculatedNumToLabs]		[int]		NULL,
	[PedunculatedEroded]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_PedunculatedEroded DEFAULT 0,
	[PedunculatedUlcerated]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_PedunculatedUlcerated DEFAULT 0,
	[PedunculatedOverlyingClot] [bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_PedunculatedOverlyingClot DEFAULT 0,
	[PedunculatedActiveBleeding][bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_PedunculatedActiveBleeding DEFAULT 0,
	[PedunculatedOverlyingOldBlood] [bit]	NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_PedunculatedOverlyingOldBlood DEFAULT 0,
	[Submucosal]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_Submucosal DEFAULT 0,
	[SubmucosalType]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SubmucosalType DEFAULT 0,
	[SubmucosalBenignType]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SubmucosalBenignType DEFAULT 0,
	[SubmucosalQty]				[int]		NULL,
	[SubmucosalMultiple]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SubmucosalMultiple DEFAULT 0,
	[SubmucosalLargest]			[decimal](6,2) NULL,
	[SubmucosalNumExcised]		[int]		NULL,
	[SubmucosalNumRetrieved]	[int]		NULL,
	[SubmucosalNumToLabs]		[int]		NULL,
	[SubmucosalEroded]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SubmucosalEroded DEFAULT 0,
	[SubmucosalUlcerated]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SubmucosalUlcerated DEFAULT 0,
	[SubmucosalOverlyingClot]	[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SubmucosalOverlyingClot DEFAULT 0,
	[SubmucosalActiveBleeding]	[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SubmucosalActiveBleeding DEFAULT 0,
	[SubmucosalOverlyingOldBlood] [bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_SubmucosalOverlyingOldBlood DEFAULT 0,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoPolyps_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoPolyps_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoPolypsId] PRIMARY KEY CLUSTERED ([AbnoPolypsId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoDeformity](
	[AbnoDeformityId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoDeformity_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoDeformity_None DEFAULT 0,
	[DeformityType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoDeformity_DeformityType DEFAULT 0,
	[DeformityOther]			[varchar](200),
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoDeformity_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](2000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoDeformity_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoDeformityId] PRIMARY KEY CLUSTERED ([AbnoDeformityId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoVarices](
	[AbnoVaricesId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoVarices_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoVarices_None DEFAULT 0,
	[Grading]					[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoVarices_Grading DEFAULT 0,
	[Multiple]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoVarices_Multiple DEFAULT 0,
	[Quantity]					[int]		NULL,
	[RedSign]					[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoVarices_RedSign DEFAULT 0,
	[Bleeding]					[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoVarices_Bleeding DEFAULT 0,
	[WhiteFibrinClot]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoVarices_WhiteFibrinClot DEFAULT 0,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoVarices_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](2000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoVarices_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoVaricesId] PRIMARY KEY CLUSTERED ([AbnoVaricesId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_CommonAbnoVascularLesions](
	[VascularLesionsId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_CommonAbnoVascularLesions_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_CommonAbnoVascularLesions_None DEFAULT 0,
	[Type]						[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoVascularLesions_Type DEFAULT 0,
	[Multiple]					[bit]		NOT NULL CONSTRAINT DF_CommonAbnoVascularLesions_Multiple DEFAULT 0,
	[Quantity]					[int]		NULL,
	[Bleeding]					[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoVascularLesions_Bleeding DEFAULT 0,
	[Area]						[nVARCHAR](50) NOT NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoVascularLesions_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](2000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_CommonAbnoVascularLesions_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_VascularLesionsId] PRIMARY KEY CLUSTERED ([VascularLesionsId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoHiatusHernia](
	[AbnoHiatusHerniaId]		[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]	NOT NULL CONSTRAINT UQ_UpperGIAbnoHiatusHernia_SiteId UNIQUE(SiteId),
	[None]						[bit]	NOT NULL CONSTRAINT DF_UpperGIAbnoHiatusHernia_None DEFAULT 0,
	[Sliding]					[bit]	NOT NULL CONSTRAINT DF_UpperGIAbnoHiatusHernia_Sliding DEFAULT 0,
	[Paraoesophageal]			[bit]	NOT NULL CONSTRAINT DF_UpperGIAbnoHiatusHernia_Paraoesophageal DEFAULT 0,
	[SlidingLength]				[real]	NULL,
	[ParaLength]				[real]	NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoHiatusHernia_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](2000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoHiatusHernia_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoHiatusHerniaId] PRIMARY KEY CLUSTERED ([AbnoHiatusHerniaId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoOesophagitis](
	[AbnoOesophagitisId]	[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]				[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoOeso_SiteId UNIQUE(SiteId),
	[None]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_None DEFAULT 0,
	[MucosalAppearance]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_MucosalAppearance DEFAULT 0,
	[Reflux]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Reflux DEFAULT 0,
	[ActiveBleeding]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_ActiveBleeding DEFAULT 0,
	[MSMGrade1]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Grade1 DEFAULT 0,
	[MSMGrade2a]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Grade2a DEFAULT 0,
	[MSMGrade2b]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Grade2b DEFAULT 0,
	[MSMGrade3]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Grade3 DEFAULT 0,
	[MSMGrade4]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Grade4 DEFAULT 0,
	[MSMGrade5]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Grade5 DEFAULT 0,
	[ShortOesophagus]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_ShortOesophagus DEFAULT 0,
	[Ulcer]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Ulcer DEFAULT 0,
	[Stricture]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Stricture DEFAULT 0,
	[LAClassification]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_LAClassification DEFAULT 0,
	[Other]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_Other DEFAULT 0,
	[SuspectedCandida]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_SuspectedCandida DEFAULT 0,
	[CausticIngestion]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_CausticIngestion DEFAULT 0,
	[SuspectedHerpes]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_SuspectedHerpes DEFAULT 0,
	[OtherTypeOther]		[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_OtherTypeOther DEFAULT 0,
	[OtherTypeOtherDesc]	[nvarchar](200) NULL,
	[SuspectedCandidaSeverity]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_SuspectedCandidaSeverity DEFAULT 0,
	[CausticIngestionSeverity]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_CausticIngestionSeverity DEFAULT 0,
	[SuspectedHerpesSeverity]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_SuspectedHerpesSeverity DEFAULT 0,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoOeso_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](2000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoOeso_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoOesophagitisId] PRIMARY KEY CLUSTERED ([AbnoOesophagitisId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoBarrett](
	[AbnoBarrettId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]	NOT NULL CONSTRAINT UQ_UpperGIAbnoBarrett_SiteId UNIQUE(SiteId),
	[None]						[bit]	NOT NULL CONSTRAINT DF_UpperGIAbnoBarrett_None DEFAULT 0,
	[InflammationType]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoBarrett_InflammationType DEFAULT 0,
	[ExtentStart]				[real]	NULL,
	[ExtentEnd]					[real]	NULL,
	[BarrettType]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoBarrett_BarrettType DEFAULT 0,
	[MucosalJunction]			[real]	NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoBarrett_EUSProcType DEFAULT 0,
    [BarrettIslands]			[bit] NOT NULL CONSTRAINT [DF_UpperGIAbnoBarrett_BarrettIslands]  DEFAULT 0,
    [Proximal]					[varchar](50) NULL,
    [Distal]					[varchar](50) NULL,
    [DistanceC1]				[varchar](50) NULL,
    [DistanceC2]				[varchar](50) NULL,
    [DistanceC3]				[varchar](50) NULL,
    [DistanceM1]				[varchar](50) NULL,
    [DistanceM2]				[varchar](50) NULL,
	[Summary]					[nvarchar](2000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoBarrett_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoBarrettId] PRIMARY KEY CLUSTERED ([AbnoBarrettId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIAbnoMiscellaneous](
	[AbnoMiscellaneousId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]						[int]		NOT NULL CONSTRAINT UQ_UpperGIAbnoMiscellaneous_SiteId UNIQUE(SiteId),
	[None]							[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_None DEFAULT 0,
	[Web]							[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Web DEFAULT 0,
	[Mallory]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Mallory DEFAULT 0,
	[SchatzkiRing]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_SchatzkiRing DEFAULT 0,
	[FoodResidue]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_FoodResidue DEFAULT 0,
	[ExtrinsicCompression]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_ExtrinsicCompression DEFAULT 0,
	[Diverticulum]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Diverticulum DEFAULT 0,
	[DivertMultiple]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_DivertMultiple DEFAULT 0,
	[DivertQty]						[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_DivertQty DEFAULT 0,
	[Pharyngeal]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Pharyngeal DEFAULT 0,
	[DiffuseIntramural]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_DiffuseIntramural DEFAULT 0,
	[TractionType]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_TractionType DEFAULT 0,
	[PulsionType]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_PulsionType DEFAULT 0,
	[MotilityDisorder]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_MotilityDisorder DEFAULT 0,
	[ProbableAchalasia]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_ProbableAchalasia DEFAULT 0,
	[ConfirmedAchalasia]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_ConfirmedAchalasia DEFAULT 0,
	[Presbyoesophagus]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Presbyoesophagus DEFAULT 0,
	[MarkedTertiaryContractions]	[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_MarkedTertiaryContractions DEFAULT 0,
	[LaxLowerOesoSphincter]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_LaxLowerOesoSphincter DEFAULT 0,
	[TortuousOesophagus]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_TortuousOesophagus DEFAULT 0,
	[DilatedOesophagus]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_DilatedOesophagus DEFAULT 0,
	[MotilityPoor]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_MotilityPoor DEFAULT 0,
	[Ulceration]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Ulceration DEFAULT 0,
	[UlcerationType]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_UlcerationType DEFAULT 0,
	[UlcerationMultiple]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_UlcerationMultiple DEFAULT 0,
	[UlcerationQty]					[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_UlcerationQty DEFAULT 0,
	[UlcerationLength]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_UlcerationLength DEFAULT 0,
	[UlcerationClotInBase]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_UlcerationClotInBase DEFAULT 0,
	[UlcerationReflux]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_UlcerationReflux DEFAULT 0,
	[UlcerationPostSclero]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_UlcerationPostSclero DEFAULT 0,
	[UlcerationPostBanding]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_UlcerationPostBanding DEFAULT 0,
	[Stricture]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Stricture DEFAULT 0,
	[StrictureCompression]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_StrictureCompression DEFAULT 0,
	[StrictureScopeNotPass]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_StrictureScopeNotPass DEFAULT 0,
	[StrictureSeverity]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_StrictureSeverity DEFAULT 0,
	[StrictureType]					[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_StrictureType DEFAULT 0,
	[StrictureProbably]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_StrictureProbably DEFAULT 0,
	[StrictureBenignType]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_StrictureBenignType DEFAULT 0,
	[StrictureBeginning]			[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_StrictureBeginning DEFAULT 0,
	[StrictureLength]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_StrictureLength DEFAULT 0,
	[StricturePerforation]			[tinyint]	NULL,
	[Tumour]						[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Tumour DEFAULT 0,
	[TumourType]					[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_TumourType DEFAULT 0,
	[TumourProbably]				[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_TumourProbably DEFAULT 0,
	[TumourExophytic]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_TumourExophytic DEFAULT 0,
	[TumourBenignType]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_TumourBenignType DEFAULT 0,
	[TumourBenignTypeOther]			[nVARCHAR](150) NULL,
	[TumourBeginning]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_TumourBeginning DEFAULT 0,
	[TumourLength]					[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_TumourLength DEFAULT 0,
	[MiscOther]						[nVARCHAR](150) NULL,
	[IsLAClassification]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_IsLAClassification DEFAULT 0,
	[Foreignbody]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_Foreignbody DEFAULT 0,
	[EUSProcType]					[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_EUSProcType DEFAULT 0,
	[InletPatch]					[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_InletPatch DEFAULT 0,
	[InletPatchMultiple]			[bit]		NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_InletPatchMultiple DEFAULT 0,
	[InletPatchQty]					[smallint]	NOT NULL CONSTRAINT DF_UpperGIAbnoMiscellaneous_InletPatchQty DEFAULT 0,
	[Summary]						[nVARCHAR](4000) NULL,
	[WhoUpdatedId]					[int]		NULL Default 0,
	[WhoCreatedId]					[int]		NULL Default 0,
	[WhenCreated]					[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]					[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIAbnoMiscellaneous_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoMiscellaneousId] PRIMARY KEY CLUSTERED ([AbnoMiscellaneousId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_CommonAbnoDiverticulum](
	[AbnoDiverticulumId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]	NOT NULL CONSTRAINT UQ_CommonAbnoDiverticulum_SiteId UNIQUE(SiteId),
	[None]						[bit]	NOT NULL CONSTRAINT DF_CommonAbnoDiverticulum_None DEFAULT 0,
	[Pseudodiverticulum]		[bit]	NOT NULL CONSTRAINT DF_CommonAbnoDiverticulum_Pseudodiverticulum DEFAULT 0,
	[Congenital1stPart]			[bit]	NOT NULL CONSTRAINT DF_CommonAbnoDiverticulum_Congenital1stPart DEFAULT 0,
	[Congenital2ndPart]			[bit]	NOT NULL CONSTRAINT DF_CommonAbnoDiverticulum_Congenital2ndPart DEFAULT 0,
	[Other]						[bit]	NOT NULL CONSTRAINT DF_CommonAbnoDiverticulum_Other DEFAULT 0,
	[OtherDesc]					[nVARCHAR](150) NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoDiverticulum_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](2000) NULL,
	[WhoUpdatedId]				[int]	NULL Default 0,
	[WhoCreatedId]				[int]	NULL Default 0,
	[WhenCreated]				[DATETIME] NULL Default GetDate(),
	[WhenUpdated]				[DATETIME] NULL Default GetDate(),
	CONSTRAINT [FK_CommonAbnoDiverticulum_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoDiverticulumId] PRIMARY KEY CLUSTERED ([AbnoDiverticulumId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_CommonAbnoTumour](
	[AbnoTumourId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_CommonAbnoTumour_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_CommonAbnoTumour_None DEFAULT 0,
	[Type]						[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoTumour_Type DEFAULT 0,
	[Primary]					[bit]		NOT NULL CONSTRAINT DF_CommonAbnoTumour_Primary DEFAULT 0,
	[ExternalInvasion]			[bit]		NOT NULL CONSTRAINT DF_CommonAbnoTumour_ExternalInvasion DEFAULT 0,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoTumour_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](2000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_CommonAbnoTumour_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoTumourId] PRIMARY KEY CLUSTERED ([AbnoTumourId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_CommonAbnoDuodenitis](
	[AbnoDuodenitisId]	[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]			[int]		NOT NULL CONSTRAINT UQ_CommonAbnoDuodenitis_SiteId UNIQUE(SiteId),
	[None]				[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_None DEFAULT 0,
	[Duodenitis]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_Duodenitis DEFAULT 0,
	[Severity]			[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_Severity DEFAULT 0,
	[Bleeding]			[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_Bleeding DEFAULT 0,
	[PatchyErythema]	[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_PatchyErythema DEFAULT 0,
	[DiffuseErythema]	[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_DiffuseErythema DEFAULT 0,
	[Erosions]			[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_Erosions DEFAULT 0,
	[Nodularity]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_Nodularity DEFAULT 0,
	[Oedematous]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_Oedematous DEFAULT 0,
	[EUSProcType]		[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenitis_EUSProcType DEFAULT 0,
	[Summary]			[nvarchar](2000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_CommonAbnoDuodenitis_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoDuodenitisId] PRIMARY KEY CLUSTERED ([AbnoDuodenitisId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_CommonAbnoDuodenalUlcer](
	[AbnoDuodenalUlcerId]	[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]			[int]		NOT NULL CONSTRAINT UQ_CommonAbnoDuodenalUlcer_SiteId UNIQUE(SiteId),
	[None]				[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_None DEFAULT 0,
	[Ulcer]				[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_Ulcer DEFAULT 0,
	[UlcerType]			[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_UlcerType DEFAULT 0,
	[Quantity]			[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_Quantity DEFAULT 0,
	[Largest]			[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_Largest DEFAULT 0,
	[VisibleVessel]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_VisibleVessel DEFAULT 0,
	[VisibleVesselType]	[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_VisibleVesselType DEFAULT 0,
	[FreshClot]			[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_FreshClot DEFAULT 0,
	[ActiveBleeding]	[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_ActiveBleeding DEFAULT 0,
	[ActiveBleedingType]	[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_ActiveBleedingType DEFAULT 0,
	[OldClot]			[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_OldClot DEFAULT 0,
	[Perforation]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_Perforation DEFAULT 0,
	[EUSProcType]		[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoDuodenalUlcer_EUSProcType DEFAULT 0,
	[Summary]			[nvarchar](2000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_CommonAbnoDuodenalUlcer_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoDuodenalUlcerId] PRIMARY KEY CLUSTERED ([AbnoDuodenalUlcerId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_CommonAbnoScaring](
	[AbnoScaringId]		[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]			[int]		NOT NULL CONSTRAINT UQ_CommonAbnoScaring_SiteId UNIQUE(SiteId),
	[None]				[bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_None DEFAULT 0,
	[PylorusNotEntered] [bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_PylorusNotEntered DEFAULT 0,
	[PylorusScar]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_PylorusScar DEFAULT 0,
	[PyloricStenosis]	[bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_PyloricStenosis DEFAULT 0,
	[PylorusDeformity]	[bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_PylorusDeformity DEFAULT 0,
	[DuodUlcerScar]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_DuodUlcerScar DEFAULT 0,
	[DuodDeformity]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_DuodDeformity DEFAULT 0,
	[DuodStenosis]		[bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_DuodStenosis DEFAULT 0,
	[DuodPsudodivert]	[bit]		NOT NULL CONSTRAINT DF_CommonAbnoScaring_DuodPsudodivert DEFAULT 0,
	[EUSProcType]		[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoScaring_EUSProcType DEFAULT 0,
	[Summary]			[nvarchar](2000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_CommonAbnoScaring_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoScaringId] PRIMARY KEY CLUSTERED ([AbnoScaringId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_CommonAbnoAtrophic](
	[AbnoAtrophicId]	[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]		[int]		NOT NULL CONSTRAINT UQ_CommonAbnoAtrophic_SiteId UNIQUE(SiteId),
	[None]			[bit]		NOT NULL CONSTRAINT DF_CommonAbnoAtrophic_None DEFAULT 0,
	[Type]			[tinyint]	NOT NULL CONSTRAINT DF_CommonAbnoAtrophic_Type DEFAULT 0,
	[EUSProcType]	[smallint]	NOT NULL CONSTRAINT DF_CommonAbnoAtrophic_EUSProcType DEFAULT 0,
	[Summary]		[nvarchar](2000) NULL,
	[WhoUpdatedId]	INT NULL Default 0,
	[WhoCreatedId]	INT NULL Default 0,
	[WhenCreated]	DATETIME NULL Default GetDate(),
	[WhenUpdated]	DATETIME NULL Default GetDate(),
	CONSTRAINT [FK_CommonAbnoAtrophic_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoAtrophicId] PRIMARY KEY CLUSTERED ([AbnoAtrophicId] ASC)
) ON [PRIMARY]
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------119 Create Tables Colon Abnormalities.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-------------------------------------------
--CREATE TABLES
-------------------------------------------
CREATE TABLE [dbo].[ERS_ColonAbnoCalibre](
	[AbnoCalibreId]		[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]			[int]		NOT NULL CONSTRAINT UQ_ColonAbnoCalibre_SiteId UNIQUE(SiteId),
	[None]				[bit]		NOT NULL CONSTRAINT DF_ColonAbnoCalibre_None DEFAULT 0,
	[Contraction]		[bit]		NOT NULL CONSTRAINT DF_ColonAbnoCalibre_Contraction DEFAULT 0,
	[Dilated]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoCalibre_Dilated DEFAULT 0,
	[DilatedType]		[tinyint]	NOT NULL CONSTRAINT DF_ColonAbnoCalibre_DilatedType DEFAULT 0,
	[Obstruction]		[bit]		NOT NULL CONSTRAINT DF_ColonAbnoCalibre_Obstruction DEFAULT 0,
	[Spasm]				[bit]		NOT NULL CONSTRAINT DF_ColonAbnoCalibre_Spasm DEFAULT 0,
	[Stricture]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoCalibre_Stricture DEFAULT 0,
	[StrictureType]		[tinyint]	NOT NULL CONSTRAINT DF_ColonAbnoCalibre_StrictureType DEFAULT 0,
	[StrictureLength]	[decimal](6,1) NULL,
	[StrictureImpeded]	[tinyint]	NOT NULL CONSTRAINT DF_ColonAbnoCalibre_StrictureImpeded DEFAULT 0,
	[Summary]			[nVARCHAR](4000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonAbnoCalibre_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoCalibreId] PRIMARY KEY CLUSTERED ([AbnoCalibreId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ColonAbnoMiscellaneous](
	[ColonAbnoMiscellaneousId]	[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_ColonAbnoMiscellaneous_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_None DEFAULT 0,
	[Crohn]						[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_Crohn DEFAULT 0,
	[Fistula]					[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_Fistula DEFAULT 0,
	[ForeignBody]				[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_ForeignBody DEFAULT 0,
	[Lipoma]					[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_Lipoma DEFAULT 0,
	[Melanosis]					[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_Melanosis DEFAULT 0,
	[Parasites]					[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_Parasites DEFAULT 0,
	[PneumatosisColi]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_PneumatosisColi DEFAULT 0,
	[PolyposisSyndrome]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_PolyposisSyndrome DEFAULT 0,
	[PostoperativeAppearance]	[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_PostoperativeAppearance DEFAULT 0,
	[PseudoObstruction]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoMiscellaneous_PseudoObstruction DEFAULT 0,
	[Summary]			[nVARCHAR](4000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonAbnoMiscellaneous_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_ColonAbnoMiscellaneousId] PRIMARY KEY CLUSTERED ([ColonAbnoMiscellaneousId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ColonAbnoMucosa](
	[AbnoMucosaId]				[int]				IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]				NOT NULL CONSTRAINT UQ_ColonAbnoMucosa_SiteId UNIQUE(SiteId),
	[None]						[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_None DEFAULT 0,
	[Atrophic]					[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_Atrophic DEFAULT 0,
	[AtrophicDistribution]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_AtrophicDistribution DEFAULT 0,
	[AtrophicSeverity]			[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_AtrophicSeverity DEFAULT 0,
	[Congested]					[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_Congested DEFAULT 0,
	[CongestedDistribution]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_CongestedDistribution DEFAULT 0,
	[CongestedSeverity]			[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_CongestedSeverity DEFAULT 0,
	[Erythematous]				[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_Erythematous DEFAULT 0,
	[ErythematousDistribution]	[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_ErythematousDistribution DEFAULT 0,
	[ErythematousSeverity]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_ErythematousSeverity DEFAULT 0,
	[Granular]					[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_Granular DEFAULT 0,
	[GranularDistribution]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_GranularDistribution DEFAULT 0,
	[GranularSeverity]			[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_GranularSeverity DEFAULT 0,
	[Exudate]					[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_Exudate DEFAULT 0,
	[ExudateDistribution]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_ExudateDistribution DEFAULT 0,
	[ExudateSeverity]			[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_ExudateSeverity DEFAULT 0,
	[Pigmented]					[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_Pigmented DEFAULT 0,
	[PigmentedDistribution]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_PigmentedDistribution DEFAULT 0,
	[PigmentedSeverity]			[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_PigmentedSeverity DEFAULT 0,
	[RedundantRectal]			[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_RedundantRectal DEFAULT 0,
	[Ulcerative]				[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_Ulcerative DEFAULT 0,
	[SmallUlcers]				[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_SmallUlcers DEFAULT 0,
	[SmallUlcersType]			[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_SmallUlcersType DEFAULT 0,
	[LargeUlcers]				[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_LargeUlcers DEFAULT 0,
	[LargeUlcersType]			[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_LargeUlcersType DEFAULT 0,
	[PleomorphicUlcers]			[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_PleomorphicUlcers DEFAULT 0,
	[PleomorphicUlcersType]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_PleomorphicUlcersType DEFAULT 0,
	[SerpiginousUlcers]			[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_SerpiginousUlcers DEFAULT 0,
	[SerpiginousUlcersType]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_SerpiginousUlcersType DEFAULT 0,
	[AphthousUlcers]			[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_AphthousUlcers DEFAULT 0,
	[AphthousUlcersType]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_AphthousUlcersType DEFAULT 0,
	[CobblestoneMucosa]			[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_CobblestoneMucosa DEFAULT 0,
	[CobblestoneMucosaType]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_CobblestoneMucosaType DEFAULT 0,
	[ConfluentUlceration]		[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_ConfluentUlceration DEFAULT 0,
	[DeepUlceration]			[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_DeepUlceration DEFAULT 0,
	[SolitaryUlcer]				[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_SolitaryUlcer DEFAULT 0,
	[SolitaryUlcerDiameter]		[int]				NULL,
	[InflammatoryColitis]		[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_InflammatoryColitis DEFAULT 0,
	[InflammatoryIleitis]		[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_InflammatoryIleitis DEFAULT 0,
	[InflammatoryProctitis]		[bit]				NOT NULL CONSTRAINT DF_ColonAbnoMucosa_InflammatoryProctitis DEFAULT 0,
	[InflammatoryDisorder]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_InflammatoryDisorder DEFAULT 0,
	[InflammatoryExtent]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_InflammatoryExtent DEFAULT 0,
	[InflammatoryMayoScore]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_InflammatoryMayoScore DEFAULT 0,
	[InflammatorySESCrohn]		[tinyint]			NOT NULL CONSTRAINT DF_ColonAbnoMucosa_InflammatorySESCrohn DEFAULT 0,
	[Summary]					[nVARCHAR](4000)	NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonAbnoMucosa_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoMucosaId] PRIMARY KEY CLUSTERED ([AbnoMucosaId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ColonAbnoDiverticulum](
	[AbnoDiverticulumId]	[int]			IDENTITY(1,1) NOT NULL,
	[SiteId]				[int]			NOT NULL CONSTRAINT UQ_ColonAbnoDiverticulum_SiteId UNIQUE(SiteId),
	[None]					[bit]			NOT NULL CONSTRAINT DF_ColonAbnoDiverticulum_None DEFAULT 0,
	[MucosalInflammation]	[bit]			NOT NULL CONSTRAINT DF_ColonAbnoDiverticulum_MucosalInflammation DEFAULT 0,
	[Quantity]				[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoDiverticulum_Quantity DEFAULT 0,
	[Distribution]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoDiverticulum_Distribution DEFAULT 0,
	[NarrowingTortuosity]	[bit]			NOT NULL CONSTRAINT DF_ColonAbnoDiverticulum_NarrowingTortuosity DEFAULT 0,
	[Severity]				[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoDiverticulum_Severity DEFAULT 0,
	[CircMuscleHypertrophy] [bit]			NOT NULL CONSTRAINT DF_ColonAbnoDiverticulum_CircMuscleHypertrophy DEFAULT 0,
	[Summary]				[nVARCHAR](4000) NULL,
	[WhoUpdatedId]			[int]		NULL Default 0,
	[WhoCreatedId]			[int]		NULL Default 0,
	[WhenCreated]			[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]			[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonAbnoDiverticulum_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_ColonAbnoDiverticulumId] PRIMARY KEY CLUSTERED ([AbnoDiverticulumId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ColonAbnoHaemorrhage](
	[AbnoHaemorrhageId]	[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]			[int]		NOT NULL CONSTRAINT UQ_ColonAbnoHaemorrhage_SiteId UNIQUE(SiteId),
	[None]				[bit]		NOT NULL CONSTRAINT DF_ColonAbnoHaemorrhage_None DEFAULT 0,
	[Artificial]		[bit]		NOT NULL CONSTRAINT DF_ColonAbnoHaemorrhage_Artificial DEFAULT 0,
	[Lesions]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoHaemorrhage_Lesions DEFAULT 0,
	[Melaena]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoHaemorrhage_Melaena DEFAULT 0,
	[Mucosal]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoHaemorrhage_Mucosal DEFAULT 0,
	[Purpura]			[bit]		NOT NULL CONSTRAINT DF_ColonAbnoHaemorrhage_Purpura DEFAULT 0,
	[Transported]		[bit]		NOT NULL CONSTRAINT DF_ColonAbnoHaemorrhage_Transported DEFAULT 0,
	[Summary]			[nvarchar](4000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonAbnoHaemorrhage_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoHaemorrhageId] PRIMARY KEY CLUSTERED ([AbnoHaemorrhageId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ColonAbnoVascularity](
	[AbnoVascularityId]		[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]				[int] NOT NULL CONSTRAINT UQ_ColonAbnoVascularity_SiteId UNIQUE(SiteId),
	[None]					[bit] NOT NULL CONSTRAINT DF_ColonAbnoVascularity_None DEFAULT 0,
	[Indistinct]			[bit] NOT NULL CONSTRAINT DF_ColonAbnoVascularity_Indistinct DEFAULT 0,
	[Exaggerated]			[bit] NOT NULL CONSTRAINT DF_ColonAbnoVascularity_Exaggerated DEFAULT 0,
	[Attenuated]			[bit] NOT NULL CONSTRAINT DF_ColonAbnoVascularity_Attenuated DEFAULT 0,
	[Telangeiectasia]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoVascularity_Telangeiectasia DEFAULT 0,
	[TelangeiectasiaMultiple] [bit] NOT NULL CONSTRAINT DF_ColonAbnoVascularity_TelangeiectasiaMultiple DEFAULT 0,
	[TelangeiectasiaQuantity] [int] NULL CONSTRAINT DF_ColonAbnoVascularity_TelangeiectasiaQuantity DEFAULT 0,
	[Angiodysplasia]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoVascularity_Angiodysplasia DEFAULT 0,
	[AngiodysplasiaMultiple] [bit] NOT NULL CONSTRAINT DF_ColonAbnoVascularity_AngiodysplasiaMultiple DEFAULT 0,
	[AngiodysplasiaQuantity] [int] NULL CONSTRAINT DF_ColonAbnoVascularity_AngiodysplasiaQuantity DEFAULT 0,
	[AngiodysplasiaSize]	[int] NULL CONSTRAINT DF_ColonAbnoVascularity_AngiodysplasiaSize DEFAULT 0,
	[Summary] [nvarchar](4000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonAbnoVascularity_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoVascularityId] PRIMARY KEY CLUSTERED ([AbnoVascularityId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ColonAbnoPerianalLesions](
	[PerianalLesionId]	[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]			[int] NOT NULL CONSTRAINT UQ_ColonAbnoPerianalLesions_SiteId UNIQUE(SiteId),
	[None]				[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_None DEFAULT 0,
	[Haemorrhoids]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_Haemorrhoids DEFAULT 0,
	[FirstDegree]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_FirstDegree DEFAULT 0,
	[SecondDegree]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_SecondDegree DEFAULT 0,
	[ThirdDegree]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_ThirdDegree DEFAULT 0,
	[Quantity]			[int] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_Quantity DEFAULT 0,
	[PerianalSkin]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_PerianalSkin DEFAULT 0,
	[PerianalCancer]	[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_PerianalCancer DEFAULT 0,
	[PerianalWarts]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_PerianalWarts DEFAULT 0,
	[HerpesSimplex]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_HerpesSimplex DEFAULT 0,
	[AnalFissure]		[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_AnalFissure DEFAULT 0,
	[Acute]				[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_Acute DEFAULT 0,
	[Chronic]			[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_Chronic DEFAULT 0,
	[PerianalFistula]	[bit] NOT NULL CONSTRAINT DF_ColonAbnoPerianalLesions_PerianalFistula DEFAULT 0,
	[Summary]			[nvarchar](4000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonAbnoPerianalLesions_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_PerianalLesionId] PRIMARY KEY CLUSTERED ([PerianalLesionId] ASC)
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_ColonAbnoLesions](
	[AbnoLesionId]				[int]			IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]			NOT NULL CONSTRAINT UQ_ColonAbnoLesions_SiteId UNIQUE(SiteId),
	[None]						[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_None DEFAULT 0,
	[Sessile]					[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Sessile DEFAULT 0,
	[SessileQuantity]			[int]			NULL,
	[SessileLargest]			[int]			NULL,
	[SessileExcised]			[int]			NULL,
	[SessileRetrieved]			[int]			NULL,
	[SessileToLabs]				[int]			NULL,
	[SessileRemoval]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_SessileRemoval DEFAULT 0,
	[SessileRemovalMethod]		[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_SessileRemovalMethod DEFAULT 0,
	[SessileProbably]			[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_SessileProbably DEFAULT 0,
	[SessileType]				[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_SessileType DEFAULT 0,
	[SessileParisClass]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_SessileParisClass DEFAULT 0,
	[SessilePitPattern]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_SessilePitPattern DEFAULT 0,

	[Pedunculated]				[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Pedunculated DEFAULT 0,
	[PedunculatedQuantity]		[int]			NULL,
	[PedunculatedLargest]		[int]			NULL,
	[PedunculatedExcised]		[int]			NULL,
	[PedunculatedRetrieved]		[int]			NULL,
	[PedunculatedToLabs]		[int]			NULL,
	[PedunculatedRemoval]		[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_PedunculatedRemoval DEFAULT 0,
	[PedunculatedRemovalMethod]	[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_PedunculatedRemovalMethod DEFAULT 0,
	[PedunculatedProbably]		[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_PedunculatedProbably DEFAULT 0,
	[PedunculatedType]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_PedunculatedType DEFAULT 0,
	[PedunculatedParisClass]	[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_PedunculatedParisClass DEFAULT 0,
	[PedunculatedPitPattern]	[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_PedunculatedPitPattern DEFAULT 0,

	[Pseudopolyps]				[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Pseudopolyps DEFAULT 0,
	[PseudopolypsMultiple]		[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_PseudopolypsMultiple DEFAULT 0,
	[PseudopolypsQuantity]		[int]			NULL,
	[PseudopolypsLargest]		[int]			NULL,
	[PseudopolypsExcised]		[int]			NULL,
	[PseudopolypsRetrieved]		[int]			NULL,
	[PseudopolypsToLabs]		[int]			NULL,
	[PseudopolypsInflam]		[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_PseudopolypsInflam DEFAULT 0,
	[PseudopolypsPostInflam]	[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_PseudopolypsPostInflam DEFAULT 0,
	[PseudopolypsRemoval]		[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_PseudopolypsRemoval DEFAULT 0,
	[PseudopolypsRemovalMethod]	[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_PseudopolypsRemovalMethod DEFAULT 0,

	[Submucosal]				[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Submucosal DEFAULT 0,
	[SubmucosalQuantity]		[int]			NULL,
	[SubmucosalLargest]			[int]			NULL,
	[SubmucosalProbably]		[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_SubmucosalProbably DEFAULT 0,
	[SubmucosalType]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_SubmucosalType DEFAULT 0,

	[Villous]					[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Villous DEFAULT 0,
	[VillousQuantity]			[int]			NULL,
	[VillousLargest]			[int]			NULL,
	[VillousProbably]			[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_VillousProbably DEFAULT 0,
	[VillousType]				[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_VillousType DEFAULT 0,
	
	[Ulcerative]				[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Ulcerative DEFAULT 0,
	[UlcerativeQuantity]		[int]			NULL,
	[UlcerativeLargest]			[int]			NULL,
	[UlcerativeProbably]		[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_UlcerativeProbably DEFAULT 0,
	[UlcerativeType]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_UlcerativeType DEFAULT 0,
	
	[Stricturing]				[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Stricturing DEFAULT 0,
	[StricturingQuantity]		[int]			NULL,
	[StricturingLargest]		[int]			NULL,
	[StricturingProbably]		[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_StricturingProbably DEFAULT 0,
	[StricturingType]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_StricturingType DEFAULT 0,
	
	[Polypoidal]				[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Polypoidal DEFAULT 0,
	[PolypoidalQuantity]		[int]			NULL,
	[PolypoidalLargest]			[int]			NULL,
	[PolypoidalProbably]		[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_PolypoidalProbably DEFAULT 0,
	[PolypoidalType]			[tinyint]		NOT NULL CONSTRAINT DF_ColonAbnoLesions_PolypoidalType DEFAULT 0,
	
	[Granuloma]					[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Granuloma DEFAULT 0,
	[GranulomaQuantity]			[int]			NULL,
	[GranulomaLargest]			[int]			NULL,
	[Dysplastic]				[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Dysplastic DEFAULT 0,
	[DysplasticQuantity]		[int]			NULL,
	[DysplasticLargest]			[int]			NULL,
	[PneumatosisColi]			[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_PneumatosisColi DEFAULT 0,

	[Tattooed]					[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_Tattooed DEFAULT 0,
	[PreviouslyTattooed]		[bit]			NOT NULL CONSTRAINT DF_ColonAbnoLesions_PreviouslyTattooed DEFAULT 0,
	[TattooType]				[int]			NULL,
	[TattooedQuantity]			[int]			NULL,
	[TattooedBy]				[int]			NULL,

	[Summary]					[nVARCHAR](4000) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonAbnoLesions_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoLesionId] PRIMARY KEY CLUSTERED ([AbnoLesionId] ASC)
) ON [PRIMARY]
GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Tables EUS Abnormalities.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_EUSAbnoMediastinal](
	[MediastinalId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_EUSAbnoMediastinal_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_EUSAbnoMediastinal_None DEFAULT 0,
	[MediastinalType]			[smallint]	NOT NULL CONSTRAINT DF_EUSAbnoMediastinal_MediastinalType DEFAULT 0,
	[NodeStation]				[varchar](20),
	[Summary]					[nvarchar](200) NULL,
	CONSTRAINT [FK_EUSAbnoMediastinal_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_EUSAbnoMediastinalId] PRIMARY KEY CLUSTERED ([MediastinalId] ASC)
) ON [PRIMARY]
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------120 Create Tables ERCP Abnormalities.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-------------------------------------------
--CREATE TABLES
-------------------------------------------
CREATE TABLE [dbo].[ERS_ERCPAbnoDuct](
	[AbnoDuctId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_ERCPAbnoDuct_SiteId UNIQUE(SiteId),
	[Normal]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Normal DEFAULT 0,
	[Dilated]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Dilated DEFAULT 0,
	[DilatedLength]				[int]		NULL,
	[DilatedType]				[tinyint]	NOT NULL,
	[Stricture]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Stricture DEFAULT 0,
	[StrictureLen]				[decimal](6,1) NULL,
	[UpstreamDilatation]		[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_UpstreamDilatation DEFAULT 0,
	[CompleteBlock]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CompleteBlock DEFAULT 0,
	[Smooth]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Smooth DEFAULT 0,
	[Irregular]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Irregular DEFAULT 0,
	[Shouldered]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Shouldered DEFAULT 0,
	[Tortuous]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Tortuous DEFAULT 0,
	[StrictureType]				[tinyint]	NOT NULL,
	[StrictureProbably]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_StrictureProbably DEFAULT 0,
	[Cholangiocarcinoma]		[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Cholangiocarcinoma DEFAULT 0,
	[ExternalCompression]		[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_ExternalCompression DEFAULT 0,
	[Fistula]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Fistula DEFAULT 0,
	[FistulaQty]				[int]		NULL,
	[Visceral]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Visceral DEFAULT 0,
	[Cutaneous]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Cutaneous DEFAULT 0,
	[FistulaComments]			[nvarchar](500) NULL,
	[Stones]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Stones DEFAULT 0,
	[StonesMultiple]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_StonesMultiple DEFAULT 0,
	[StonesQty]					[int]		NULL,
	[StonesSize]				[decimal](6,1) NULL,
	[Cysts]						[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_Cysts DEFAULT 0,
	[CystsMultiple]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CystsMultiple DEFAULT 0,
	[CystsQty]					[int]		NULL,
	[CystsDiameter]				[decimal](6,1) NULL,
	[CystsSimple]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CystsSimple DEFAULT 0,
	[CystsRegular]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CystsRegular DEFAULT 0,
	[CystsIrregular]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CystsIrregular DEFAULT 0,
	[CystsLoculated]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CystsLoculated DEFAULT 0,
	--[CystsPseudocyst]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CystsPseudocyst DEFAULT 0,
	[CystsCommunicating]		[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CystsCommunicating DEFAULT 0,
	[CystsCholedochal]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDuct_CystsCholedochal DEFAULT 0,
	[CystsSuspectedType]		[tinyint]	NOT NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_ERCPAbnoDuct_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ERCPAbnoDuct_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AbnoDuctId] PRIMARY KEY CLUSTERED ([AbnoDuctId] ASC)
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_ERCPAbnoParenchyma](
	[ParenchymaId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_ERCPAbnoParenchyma_SiteId UNIQUE(SiteId),
	[Normal]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_Normal DEFAULT 0,
	[Irregular]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_Irregular DEFAULT 0,
	[Dilated]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_Dilated DEFAULT 0,
	[SmallLakes]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_SmallLakes DEFAULT 0,
	[Strictures]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_Strictures DEFAULT 0,
	[Mass]						[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_Mass DEFAULT 0,
	[MassType]					[tinyint]	NOT NULL,
	[MassProbably]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_MassProbably DEFAULT 0,
	[Stones]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_Stones DEFAULT 0,
	[SpideryDuctules]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_SpideryDuctules DEFAULT 0,
	[SpiderySuspection]			[tinyint]	NOT NULL,
	[MultiStrictures]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_MultiStrictures DEFAULT 0,
	[MultiStricturesSuspection] [tinyint]	NOT NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_ERCPAbnoParenchyma_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ERCPAbnoParenchyma_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_ParenchymaId] PRIMARY KEY CLUSTERED ([ParenchymaId] ASC)
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_ERCPAbnoAppearance](
	[AppearanceId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_ERCPAbnoAppearance_SiteId UNIQUE(SiteId),
	[Normal]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Normal DEFAULT 0,
	[Bleeding]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Bleeding DEFAULT 0,
	[Suprapapillary]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Suprapapillary DEFAULT 0,
	[ImpactedStone]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_ImpactedStone DEFAULT 0,
	[Patulous]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Patulous DEFAULT 0,
	[Inflamed]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Inflamed DEFAULT 0,
	[Oedematous]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Oedematous DEFAULT 0,
	[PusExuding]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_PusExuding DEFAULT 0,
	[Reddened]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Reddened DEFAULT 0,
	[Tumour]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Tumour DEFAULT 0,
	[Other]						[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoAppearance_Other DEFAULT 0,
	[OtherText]					[nvarchar](500) NULL,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ERCPAbnoAppearance_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_AppearanceId] PRIMARY KEY CLUSTERED ([AppearanceId] ASC)
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_ERCPAbnoDiverticulum](
	[DiverticulumId]			[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_ERCPAbnoDiverticulum_SiteId UNIQUE(SiteId),
	[Normal]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoDiverticulum_Normal DEFAULT 0,
	[Quantity]					[int]		NULL,
	[SizeOfLargest]				[decimal](6,1) NULL,
	[Proximity]					[tinyint]	NOT NULL,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ERCPAbnoDiverticulum_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_DiverticulumId] PRIMARY KEY CLUSTERED ([DiverticulumId] ASC)
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_ERCPAbnoTumour](
	[AbnoTumourId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_ERCPAbnoTumour_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoTumour_Normal DEFAULT 0,
	[Firm]						[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoTumour_Firm DEFAULT 0,
	[Friable]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoTumour_Friable DEFAULT 0,
	[Ulcerated]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoTumour_Ulcerated DEFAULT 0,
	[Villous]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoTumour_Villous DEFAULT 0,
	[Polypoid]					[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoTumour_Polypoid DEFAULT 0,
	[SubMucosal]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoTumour_SubMucosal DEFAULT 0,
	[Size]						[decimal](6,1) NULL,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ERCPAbnoTumour_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_ERCPAbnoTumourId] PRIMARY KEY CLUSTERED ([AbnoTumourId] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ERCPDiagnoses](
       [ID] [int] IDENTITY(1,1) NOT NULL,
       [ProcedureID] [int] NOT NULL,
       [DuodenumNormal] [bit] NULL,
       [Angiodysplasia] [bit] NULL,
       [Diverticulum] [bit] NULL,
       [Duodenitis] [bit] NULL,
       [Polyp] [bit] NULL,
       [Tumour] [bit] NULL,
       [Ulcer] [bit] NULL,
       [WholePancreatic] [bit] NULL,
       [PapillaeNormal] [bit] NULL,
       [ImpactedStone] [bit] NULL,
       [Inflamed] [bit] NULL,
       [Periampullary] [bit] NULL,
       [Stenosed] [bit] NULL,
       [PapillaeTumour] [bit] NULL,
       [PapillaeTumourType] [smallint] NULL,
       [PancreasNormal] [bit] NULL,
       [PancreaticStone] [bit] NULL,
       [Fistula] [bit] NULL,
       [Acute] [bit] NULL,
       [Chronic] [bit] NULL,
       [MinimalChange] [bit] NULL,
       [CommunicatingCyst] [bit] NULL,
       [NoncommunicatingCyst] [bit] NULL,
       [PseudocystCyst] [bit] NULL,
       [Dilatation] [bit] NULL,
       [NoObvious] [bit] NULL,
       [Stricture] [bit] NULL,
       [ProbablyMalignant] [bit] NULL,
       [Cystadenoma] [bit] NULL,
       [TumourOther] [bit] NULL,
       [TumourOtherText] [varchar](200) NULL,
       [PancreaticAndBiliaryOther] [varchar](500) NULL,
       [BiliaryNormal] [bit] NULL,
       [AnastomicStricture] [bit] NULL,
       [CysticDuct] [bit] NULL,
       [Haemobilia] [bit] NULL,
       [Cholelithiasis] [bit] NULL,
       [FistulaLeak] [bit] NULL,
       [Mirizzi] [bit] NULL,
       [CalculousObstruction] [bit] NULL,
       [GallBladder] [bit] NULL,
       [Occlusion] [bit] NULL,
       [CommonDuct] [bit] NULL,
       [GallBladderTumour] [bit] NULL,
       [StentOcclusion] [bit] NULL,
       [NormalDucts] [bit] NULL,
       [PolycysticLiver] [bit] NULL,
       [Cirrhosis] [bit] NULL,
       [Sclerosing] [bit] NULL,
       [HydratedCyst] [bit] NULL,
       [Suppurative] [bit] NULL,
       [LiverAbscess] [bit] NULL,
       [CaroliDisease] [bit] NULL,
       [BiliaryLeakSite] [bit] NULL,
       [BiliaryLeakSiteType] [int] NULL,
       [IntrahepaticTumour] [bit] NULL,
       [IntrahepaticTumourType] [int] NULL,
       [Cholangiocarcinoma] [bit] NULL,
       [Metastatic] [bit] NULL,
       [ExternalCompression] [bit] NULL,
       [HepatocellularCarcinoma] [bit] NULL,
       [ExtrahepaticNormal] [bit] NULL,
       [CholedochalCyst] [bit] NULL,
       [PostCholecystectomy] [bit] NULL,
       [DilatedDuct] [bit] NULL,
       [ExtrahepaticLeakSite] [bit] NULL,
       [ExtrahepaticLeakSiteText] [int] NULL,
       [ExtrahepaticTumour] [bit] NULL,
       [ExtrahepaticTumourType] [int] NULL,
       [ExtrahepaticProbable] [bit] NULL,
       [BeningPancreatitis] [bit] NULL,
       [BeningPseudocyst] [bit] NULL,
       [BeningPrevious] [bit] NULL,
       [BeningSclerosing] [bit] NULL,
       [BeningProbable] [bit] NULL,
       [MalignantGallbladder] [bit] NULL,
       [MalignantMetastatic] [bit] NULL,
       [MalignantCholangiocarcinoma] [bit] NULL,
       [MalignantPancreatic] [bit] NULL,
       [MalignantProbable] [bit] NULL,
       [BiliaryOther] [varchar](500) NULL,
       [WholeOther] [smallint] NULL,
       [Summary] [varchar](max) NULL,
	CONSTRAINT [FK_ERS_ERCPDiagnoses_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId]),
	PRIMARY KEY CLUSTERED ([ID] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ERCPPapillaryAnatomy](
	[PapillaryAnatomyId]		[int]		IDENTITY(1,1) NOT NULL,
	[ProcedureId]				[int]		NOT NULL CONSTRAINT UQ_ERCPAbnoPapillaryAnatomy_ProcedureId UNIQUE(ProcedureId),
	[MajorSiteLocation]			[tinyint]	NOT NULL,
	[MajorSize]					[tinyint]	NOT NULL,
	[MajorNoOfOpenings]			[tinyint]	NOT NULL,
	[MajorFloppy]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MajorFloppy DEFAULT 0,
	[MajorStenosed]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MajorStenosed DEFAULT 0,
	[MajorSurgeryNone]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MajorSurgeryNone DEFAULT 0,
	[MajorEndoscopic]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MajorEndoscopic DEFAULT 0,
	[MajorEndoscopicSize]		[decimal](6,1) NULL,
	[MajorOperative]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MajorOperative DEFAULT 0,
	[MajorOperativeSize]		[decimal](6,1) NULL,
	[MajorSphincteroplasty]		[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MajorSphincteroplasty DEFAULT 0,
	[MajorSphincteroplastySize] [decimal](6,1) NULL,
	[MajorCholedochoduodenostomy] [bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MajorCholedochoduodenostomy DEFAULT 0,
	[MinorSiteLocation]			[tinyint]	NOT NULL,
	[MinorSize]					[tinyint]	NOT NULL,
	[MinorStenosed]				[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MinorStenosed DEFAULT 0,
	[MinorSurgeryNone]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MinorSurgeryNone DEFAULT 0,
	[MinorEndoscopic]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MinorEndoscopic DEFAULT 0,
	[MinorEndoscopicSize]		[decimal](6,1) NULL,
	[MinorOperative]			[bit]		NOT NULL CONSTRAINT DF_ERCPAbnoPapillaryAnatomy_MinorEndoscopicSize DEFAULT 0,
	[MinorOperativeSize]		[decimal](6,1) NULL,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ERCPAbnoPapillaryAnatomy_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId]),
	CONSTRAINT [PK_PapillaryAnatomyId] PRIMARY KEY CLUSTERED ([PapillaryAnatomyId] ASC)
) ON [PRIMARY]
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------101a Create Table ERS_ProcedureType.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_Visualisation](
        [ID]						INT IDENTITY(1,1) NOT NULL,
		[ProcedureID]				INT NOT NULL,
		[AccessVia]					SMALLINT NULL,
		[AccessViaOtherText]		VARCHAR(500) NULL,
		[MajorPapillaBile]			SMALLINT NULL,
		[MajorPapillaBileReason]	VARCHAR(500) NULL,
		[MajorPapillaPancreatic]	SMALLINT NULL,
		[MajorPapillaPancreaticReason] VARCHAR(500) NULL,
		[MinorPapilla]				SMALLINT NULL,
		[MinorPapillaReason]		VARCHAR(500) NULL,
		[Abandoned]					BIT NULL,
		[IntendedBileDuct]			BIT NULL,
		[IntendedPancreaticDuct]	BIT NULL,
		[MajorPapillaBile_ER]		SMALLINT NULL,
		[MajorPapillaBileReason_ER] VARCHAR(500) NULL,
		[MajorPapillaPancreatic_ER] SMALLINT NULL,
		[MajorPapillaPancreaticReason_ER] VARCHAR(500) NULL,
		[MinorPapilla_ER]			SMALLINT NULL,
		[MinorPapillaReason_ER]		VARCHAR(500) NULL,
		[Abandoned_ER]				BIT NULL,
		[IntendedBileDuct_ER]		BIT NULL,
		[IntendedPancreaticDuct_ER]	BIT NULL,
		[HepatobiliaryNotVisualised] BIT NULL,
		[HepatobiliaryWholeBiliary] BIT NULL,
		[ExceptBileDuct]			BIT NULL,
		[ExceptGallBladder]			BIT NULL,
		[ExceptCommonHepaticDuct]	BIT NULL,
		[ExceptRightHepaticDuct]	BIT NULL,
		[ExceptLeftHepaticDuct]		BIT NULL,
		[HepatobiliaryAcinarFilling] BIT NULL,
		[HepatobiliaryLimitedBy]	SMALLINT NULL,
		[HepatobiliaryLimitedByOtherText] VARCHAR(500) NULL,
		[PancreaticNotVisualised]	BIT NULL,
		[PancreaticDivisum]			BIT NULL,
		[PancreaticWhole]			BIT NULL,
		[ExceptAccesoryPancreatic]	BIT NULL,
		[ExceptMainPancreatic]		BIT NULL,
		[ExceptUncinate]			BIT NULL,
		[ExceptHead]				BIT NULL,
		[ExceptNeck]				BIT NULL,
		[ExceptBody]				BIT NULL,
		[ExceptTail]				BIT NULL,
		[PancreaticAcinar]			BIT NULL,
		[PancreaticLimitedBy]		SMALLINT NULL,
		[PancreaticLimitedByOtherText] VARCHAR(500) NULL,
		[HepatobiliaryFirst]		SMALLINT NULL,
		[HepatobiliaryFirstML]		VARCHAR(50) NULL,
		[HepatobiliarySecond]		SMALLINT NULL,
		[HepatobiliarySecondML]		VARCHAR(50) NULL,
		[HepatobiliaryBalloon]		BIT NULL,
		[PancreaticFirst]			SMALLINT NULL,
		[PancreaticFirstML]			VARCHAR(50) NULL,
		[PancreaticSecond]			SMALLINT NULL,
		[PancreaticSecondML]		VARCHAR(50) NULL,
		[PancreaticBalloon]			BIT NULL,
		[Summary]					VARCHAR(5000) NULL,
CONSTRAINT [FK_ERS_Visualisation] FOREIGN KEY ([ProcedureID]) REFERENCES ERS_Procedures([ProcedureId]), PRIMARY KEY CLUSTERED ([ID])
) ON [PRIMARY] 
GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------121 Create Tables Specimens.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-------------------------------------------
--CREATE TABLES
-------------------------------------------
CREATE TABLE [dbo].[ERS_UpperGISpecimens](
	[SpecimenId]				[int]		IDENTITY(1,1) NOT NULL,
	[SiteId]					[int]		NOT NULL CONSTRAINT UQ_UpperGISpecimens_SiteId UNIQUE(SiteId),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_None DEFAULT 0,
	[BrushCytology]				[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_BrushCytology DEFAULT 0,
	[BrushBiopsy]				[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_BrushBiopsy DEFAULT 0,
	[Biopsy]					[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_Biopsy DEFAULT 0,
	[BiopsyQtyHistology]		[int]		NULL,
	[BiopsyQtyMicrobiology]		[int]		NULL,
	[BiopsyQtyVirology]			[int]		NULL,
	[Urease]					[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_Urease DEFAULT 0,
	[UreaseResult]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGISpecimens_UreaseResult DEFAULT 0,
	[Polypectomy]				[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_Polypectomy DEFAULT 0,
	[PolypectomyQty]			[int]		NULL,
	[HotBiopsy]					[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_HotBiopsy DEFAULT 0,
	[NeedleAspirate]			[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_NeedleAspirate DEFAULT 0,
	[NeedleAspirateHistology]	[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_NeedleAspirateHistology DEFAULT 0,
	[NeedleAspirateMicrobiology][bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_NeedleAspirateMicrobiology DEFAULT 0,
	[NeedleAspirateVirology]	[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_NeedleAspirateVirology DEFAULT 0,
	[GastricWashing]			[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_GastricWashing DEFAULT 0,
	[PolypsSetByUser]			[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_PolypsSetByUser DEFAULT 0,
	[BiopsyDistance]			[decimal](6,2) NULL,
	[HotBiopsyDistance]			[decimal](6,2) NULL,
	[PolypectomyDistance]		[decimal](6,2) NULL,
	[BiopsiesTakenAtRandom]		[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_BiopsiesTakenAtRandom DEFAULT 0,
	[Bile_PanJuice]				[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_Bile_PanJuice DEFAULT 0,
	[Bile_PanJuiceCytology]		[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_Bile_PanJuiceCytology DEFAULT 0,
	[Bile_PanJuiceBacteriology]	[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_Bile_PanJuiceBacteriology DEFAULT 0,
	[Bile_PanJuiceAnalysis]		[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_Bile_PanJuiceAnalysis DEFAULT 0,
	[TumourMarkers]				[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_TumourMarkers DEFAULT 0,
	[AmylaseLipase]				[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_AmylaseLipase DEFAULT 0,
	[CytologyHistology]			[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_CytologyHistology DEFAULT 0,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGISpecimens_EUSProcType DEFAULT 0,
	[EUSFNANumberOfPasses]		[int]		NULL,
	[EUSFNANeedleGauge]			[int]		NULL,
	[FNB]						[bit]		NOT NULL CONSTRAINT DF_UpperGISpecimens_FNB DEFAULT 0,
	[EUSFNBNumberOfPasses]		[int]		NULL,
	[EUSFNBNeedleGauge]			[int]		NULL,
	[Summary]					[VARCHAR](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGISpecimens_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	CONSTRAINT [PK_SpecimenId] PRIMARY KEY CLUSTERED ([SpecimenId] ASC)
) ON [PRIMARY]
GO


--select 
--'@'+COLUMN_NAME+',', 
--'@'+COLUMN_NAME+'='+COLUMN_NAME+',', 
--COLUMN_NAME + ' = ' + '@'+COLUMN_NAME+',', 
--COLUMN_NAME + ',', 
--'[' + COLUMN_NAME + ']','[' + REPLACE(COLUMN_NAME, ' ', '') + '] NOT NULL,' , 
--is_nullable,data_type, 'CASE [' + COLUMN_NAME + '] WHEN -1 THEN 1 ELSE 0 END AS ' + REPLACE(COLUMN_NAME, ' ', '') + ',' 
--from INFORMATION_SCHEMA.COLUMNS 
--where TABLE_NAME='ERS_UpperGISpecimens'


--------------------------------------------------------------------------------------------------------------------
-------------------------------------122 Create Tables Therapeutics.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-------------------------------------------
--DROP FOREIGN KEYS
-------------------------------------------
--IF EXISTS (SELECT 1 FROM SYS.FOREIGN_KEYS WHERE OBJECT_ID = OBJECT_ID(N'dbo.FK_UpperGITherapeutics_Sites') AND parent_object_id = OBJECT_ID(N'dbo.ERS_UpperGITherapeutics'))
--  ALTER TABLE [dbo].[ERS_UpperGITherapeutics] DROP CONSTRAINT [FK_UpperGITherapeutics_Sites]
--GO

-------------------------------------------
--CREATE TABLES
-------------------------------------------
CREATE TABLE [dbo].[ERS_UpperGITherapeutics](
	[Id]						[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGITherapeutics]		PRIMARY KEY CLUSTERED,
	[SiteId]					[int]		NOT NULL CONSTRAINT [FK_UpperGITherapeutics_Sites]	FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	[None]						[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_None DEFAULT 0,
	[YAGLaser]					[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_YAGLaser DEFAULT 0,
	[YAGLaserWatts]				[int]		NULL,
	[YAGLaserPulses]			[int]		NULL,
	[YAGLaserSecs]				decimal(8, 2)		NULL,
	[YAGLaserKJ]				decimal(8, 2)		NULL,
	[ArgonBeamDiathermy]		[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_ArgonBeamDiathermy DEFAULT 0,
	[ArgonBeamDiathermyWatts]	[int]		NULL,
	[ArgonBeamDiathermyPulses]	[int]		NULL,
	[ArgonBeamDiathermySecs]	decimal(8, 2)		NULL,
	[ArgonBeamDiathermyKJ]		decimal(8, 2)		NULL,
	[BandLigation]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_BandLigation DEFAULT 0,
	[BalloonDilation]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_BalloonDilation DEFAULT 0,
	[BotoxInjection]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_BotoxInjection DEFAULT 0,
	[EndoloopPlacement]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_EndoloopPlacement DEFAULT 0,
	[HeatProbe]					[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_HeatProbe DEFAULT 0,
	[BicapElectro]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_BicapElectro DEFAULT 0,
	[Diathermy]					[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_Diathermy DEFAULT 0,
	[ForeignBody]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_ForeignBody DEFAULT 0,
	[HotBiopsy]					[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_HotBiopsy DEFAULT 0,
	[Injection]					[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_Injection DEFAULT 0,
	[InjectionType]				[int]		NULL,
	[InjectionVolume]			[int]		NULL,
	[InjectionNumber]			[int]		NULL,
	[OesophagealDilatation]		[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesophagealDilatation DEFAULT 0,
	[DilatedTo]					[int]		NULL,
	[DilatationUnits]			[tinyint]	NULL,
	[DilatorType]				[tinyint]	NULL,
	[DilatorScopePass]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_DilatorScopePass DEFAULT 0,
	[OesoDilNilByMouth]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesoDilNilByMouth DEFAULT 0,	
	[OesoDilNilByMouthHrs]		[int]		NULL,
	[OesoDilXRay]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesoDilXRay DEFAULT 0,
	[OesoDilXRayHrs]			[int]		NULL,
	[OesoDilSoftDiet]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesoDilSoftDiet DEFAULT 0,
	[OesoDilSoftDietDays]		[int]		NULL,
	[OesoDilWarmFluids]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesoDilWarmFluids DEFAULT 0,
	[OesoDilWarmFluidsHrs]		[int]		NULL,
	[OesoDilMedicalReview]		[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesoDilMedicalReview DEFAULT 0,
	[OesoYAGNilByMouth]			[bit]		NULL,
	[OesoYAGNilByMouthHrs]		[int]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesoYAGNilByMouthHrs DEFAULT 0,
	[OesoYAGWarmFluids]			[bit]		NULL,
	[OesoYAGWarmFluidsHrs]		[int]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesoYAGWarmFluidsHrs DEFAULT 0,
	[OesoYAGSoftDiet]			[bit]		NULL,
	[OesoYAGSoftDietDays]		[int]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_OesoYAGSoftDietDays DEFAULT 0,
	[OesoYAGMedicalReview]		[bit]		NULL,
	[Polypectomy]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_Polypectomy DEFAULT 0,
	[PolypectomyRemoval]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGITherapeutics_PolypectomyRemoval DEFAULT 0,
	[PolypectomyRemovalType]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGITherapeutics_PolypectomyRemovalType DEFAULT 0,
	[BandingPiles]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_BandingPiles DEFAULT 0,
	[BandingNum]				[int]		NULL,
	[GastrostomyInsertion]		[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_GastrostomyInsertion DEFAULT 0,
	[GastrostomyInsertionSize]	[int]		NULL,
	[GastrostomyInsertionUnits]	[tinyint]	NULL,
	[GastrostomyInsertionType]	[tinyint]	NULL,
	[GastrostomyInsertionBatchNo] [varchar](100) NULL,
	[CorrectPEGPlacement]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGITherapeutics_CorrectPEGPlacement DEFAULT 0,
	[PEGPlacementFailureReason] [varchar](500) NULL,
	[GastrostomyPEGOutcome]		[tinyint]	NULL,
	[NilByMouth]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_NilByMouth DEFAULT 0,
	[NilByMouthHrs]				[int]		NULL,
	[NilByProc]					[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_NilByProc DEFAULT 0,
	[NilByProcHrs]				[int]		NULL,
	[FlangePosition]			[int]		NULL,
	[AttachmentToWard]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_AttachmentToWard DEFAULT 0,
	[GastrostomyRemoval]		[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_GastrostomyRemoval DEFAULT 0,
	[PyloricDilatation]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_PyloricDilatation DEFAULT 0,
	[PyloricLeadingToPerforation] [bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_Pyloric_LeadingToPerforation DEFAULT 0,
	[VaricealSclerotherapy]		[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_VaricealSclerotherapy DEFAULT 0,
	[VaricealSclerotherapyInjectionType] [smallint]	NULL,
	[VaricealSclerotherapyInjectionVol] [int] NULL,
	[VaricealSclerotherapyInjectionNum] [int] NULL,
	[VaricealBanding]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_VaricealBanding DEFAULT 0,
	[VaricealBandingNum]		[int]		NULL,
	[VaricealClip]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_VaricealClip DEFAULT 0,
	[StentInsertion]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_StentInsertion DEFAULT 0,
	[StentInsertionQty]			[int]		NULL,
	[StentInsertionType]		[smallint]	NULL,
	[StentInsertionLength]		[int]		NULL,
	[StentInsertionDiameter]	[int]		NULL,
	[StentInsertionDiameterUnits][tinyint]	NULL,
	[StentInsertionBatchNo]		[varchar](100) NULL,
	[CorrectStentPlacement]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGITherapeutics_CorrectStentPlacement DEFAULT 0,
	[StentPlacementFailureReason] [varchar](500) NULL,
	[StentRemoval]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_StentRemoval DEFAULT 0,
	[StentRemovalTechnique]		[int]		NULL,
	[EMR]						[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_EMR DEFAULT 0,
	[EMRType]					[tinyint]	NULL,
	[EMRFluid]					[int]		NULL,
	[EMRFluidVolume]			[int]		NULL,
	[Sigmoidopexy]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_Sigmoidopexy DEFAULT 0,
	[SigmoidopexyQty]			[smallint]	NULL,
	[SigmoidopexyMake]			[smallint]	NULL,
	[SigmoidopexyFluids]		[smallint]	NULL,
	[SigmoidopexyFluidsDays]	[smallint]	NULL,
	[SigmoidopexyAntibiotics]	[smallint]	NULL,
	[SigmoidopexyAntibioticsDays] [smallint] NULL,
	[RFA]						[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_RFA DEFAULT 0,
	[RFAType]					[tinyint]	NOT NULL CONSTRAINT DF_UpperGITherapeutics_RFAType DEFAULT 0,
	[RFATreatmentFrom]			[int]		NULL,
	[RFATreatmentTo]			[int]		NULL,
	[RFAEnergyDel]				[int]		NULL,
	[RFANumSegTreated]			[int]		NULL,
	[RFANumTimesSegTreated]		[int]		NULL,
	[pHProbeInsert]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_pHProbeInsert DEFAULT 0,
	[pHProbeInsertAt]			[int]		NULL,
	[pHProbeInsertChk]			[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_pHProbeInsertChk DEFAULT 0,
	[pHProbeInsertChkTopTo]		[int]		NULL,
	[Haemospray]				[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_Haemospray DEFAULT 0,
	[Marking]					[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_Marking DEFAULT 0,
	[MarkingType]				[int]		NULL,
	[MarkedQuantity]			[int]		NULL,
	[Clip]						[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_Clip DEFAULT 0,
	[ClipNum] [int] NULL,
	[EndoClot]					[bit]		NOT NULL CONSTRAINT DF_UpperGITherapeutics_EndoClot DEFAULT 0,
	[Other] [varchar](1000) NULL,
	[EUSProcType] [smallint] NULL, --## Not implemented; 
	[CarriedOutRole] [tinyint] NULL,
	[Summary] [varchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate()
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ERCPTherapeutics](
	[Id]						[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_ERCPTherapeutics]	PRIMARY KEY CLUSTERED,
	[SiteId]					[int]		NOT NULL CONSTRAINT [FK_ERCPTherapeutics_Sites]	FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]),
	[None]						[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_None DEFAULT 0,
	[YAGLaser]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_YAGLaser DEFAULT 0,
	[YAGLaserWatts]				[int]		NULL,
	[YAGLaserPulses]			[int]		NULL,
	[YAGLaserSecs]				decimal(8, 2)		NULL,
	[YAGLaserKJ]				decimal(8, 2)		NULL,
	[ArgonBeamDiathermy]		[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_ArgonBeamDiathermy DEFAULT 0,
	[ArgonBeamDiathermyWatts]	[int]		NULL,
	[ArgonBeamDiathermyPulses]	[int]		NULL,
	[ArgonBeamDiathermySecs]	decimal(8, 2)		NULL,
	[ArgonBeamDiathermyKJ]		decimal(8, 2)		NULL,
	[BandLigation]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_BandLigation DEFAULT 0,
	[BotoxInjection]			[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_BotoxInjection DEFAULT 0,
	[EndoloopPlacement]			[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_EndoloopPlacement DEFAULT 0,
	[HeatProbe]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_HeatProbe DEFAULT 0,
	[BicapElectro]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_BicapElectro DEFAULT 0,
	[Diathermy]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_Diathermy DEFAULT 0,
	[ForeignBody]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_ForeignBody DEFAULT 0,
	[HotBiopsy]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_HotBiopsy DEFAULT 0,
	[Injection]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_Injection DEFAULT 0,
	[InjectionType]				[int]		NULL,
	[InjectionVolume]			[int]		NULL,
	[InjectionNumber]			[int]		NULL,
	[GastrostomyInsertion]		[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_GastrostomyInsertion DEFAULT 0,
	[GastrostomyInsertionSize]	[int]		NULL,
	[GastrostomyInsertionUnits]	[tinyint]	NULL,
	[GastrostomyInsertionType]	[tinyint]	NULL,
	[GastrostomyInsertionBatchNo] [varchar](100) NULL,
	[GastrostomyRemoval]		[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_GastrostomyRemoval DEFAULT 0,
	[NilByMouth]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_NilByMouth DEFAULT 0,
	[NilByMouthHrs]				[int]		NULL,
	[NilByProc]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_NilByProc DEFAULT 0,
	[NilByProcHrs]				[int]		NULL,
	[AttachmentToWard]			[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_AttachmentToWard DEFAULT 0,
	[PyloricDilatation]			[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_PyloricDilatation DEFAULT 0,
	[StentInsertion]			[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_StentInsertion DEFAULT 0,
	[StentInsertionQty]			[int]		NULL,
	[StentInsertionType]		[smallint]	NULL,
	[StentInsertionLength]		[int]		NULL,
	[StentInsertionDiameter]	[int]		NULL,
	[StentInsertionDiameterUnits][tinyint]	NULL,
	[RadioactiveWirePlaced]		[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_RadioactiveWirePlaced DEFAULT 0,
	[StentInsertionBatchNo]		[varchar](100) NULL,
	[StentDecompressedDuct]		BIT			NULL,
	[CorrectStentPlacement]		BIT			NULL,
	[StentRemoval]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_StentRemoval DEFAULT 0,
	[StentRemovalTechnique]		[int]		NULL,
	[EMR]						[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_EMR DEFAULT 0,
	[EMRType]					[tinyint]	NULL,
	[EMRFluid]					[int]		NULL,
	[EMRFluidVolume]			[int]		NULL,
	[Marking]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_Marking DEFAULT 0,
	[MarkingType]				[int]		NULL,
	[Clip]						[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_Clip DEFAULT 0,
	[ClipNum]					[int]		NULL,
--ERCP
	[Papillotomy]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_Papillotomy DEFAULT 0,	
	[Sphincterotome]			[tinyint]	NULL, 
	[PapillotomyLength]			[real]		NULL,
	[PapillotomyAcceptBalloonSize] [real]	NULL,
	[ReasonForPapillotomy]		[tinyint]	NULL,
	[PapillotomyBleeding]		[tinyint]	NULL,
	[SphincterDecompressed]		BIT			NULL,
	[PanOrificeSphincterotomy]	[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_PanOrifice DEFAULT 0,
	[StoneRemoval]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_StoneRemoval DEFAULT 0,
	[RemovalUsing]				[tinyint]	NULL,
	[ExtractionOutcome]			[tinyint]	NULL,
	[InadequateSphincterotomy]	[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_InadequateSphincterotomy DEFAULT 0,
	[StoneSize]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_StoneSize DEFAULT 0,
	[QuantityOfStones]			[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_QuantityOfStones DEFAULT 0,
	[ImpactedStones]			[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_ImpactedStones DEFAULT 0,
	[OtherReason]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_OtherReason DEFAULT 0,
	[OtherReasonText]			[varchar](200) NULL,
	[StoneDecompressed]			BIT			NULL,
	[StrictureDilatation]		[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_StrictureDilatation DEFAULT 0,
	[DilatedTo]					[real] NULL,
	[DilatationUnits]			[tinyint]	NULL,
	[DilatorType]				[tinyint]	NULL,
	[StrictureDecompressed]		BIT	NULL,
	[EndoscopicCystPuncture]	[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_EndoscopicCystPuncture DEFAULT 0,
	[CystPunctureDevice]		[tinyint]	NULL,
	[CystPunctureVia]			[tinyint]	NULL,
	[Cannulation]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_Cannulation DEFAULT 0,
	[Manometry]					[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_Manometry DEFAULT 0,
	[Haemostasis]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_Haemostasis DEFAULT 0,
	[NasopancreaticDrain]		[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_NasopancreaticDrain DEFAULT 0,
	[RendezvousProcedure]		[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_RendezvousProcedure DEFAULT 0,
	[SnareExcision]				BIT			NULL,
	[BalloonDilation]			[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_BalloonDilation DEFAULT 0,
	[BalloonDilatedTo]			[real]		NULL,
	[BalloonDilatationUnits]	[smallint]	NULL,
	[BalloonDilatorType]		[smallint]	NULL,
	[BalloonTrawl]				[bit]		NOT NULL CONSTRAINT DF_ERCPTherapeutics_BalloonTrawl DEFAULT 0,
	[BalloonTrawlDilatorType]	[smallint]	NULL,
	[BalloonTrawlDilatorSize]	[real]		NULL,
	[BalloonTrawlDilatorUnits]	[smallint]	NULL,
	[BalloonDecompressed]		BIT			NULL,
	[DiagCholangiogram]			BIT			NULL,
	[DiagPancreatogram]			BIT			NULL,
	[Other]						[varchar](1000) NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_ERCPTherapeutics_EUSProcType DEFAULT 0,
	[CarriedOutRole]			[tinyint]	NOT NULL CONSTRAINT DF_ERCPTherapeutics_CarriedOutRole DEFAULT 1,
	[Summary]					[VARCHAR](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate()
) ON [PRIMARY]
GO

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_ERCPTherapeuticStentInsertions](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TherapeuticId] [int] NOT NULL,
	[StentInsertionType] [smallint] NOT NULL,
	[StentInsertionLength] [int] NULL,
	[StentInsertionDiameter] [int] NULL,
	[StentInsertionDiameterUnits] [tinyint] NULL,
 CONSTRAINT [PK_ERS_ERCPTherapeuticStentInsertions] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
),
CONSTRAINT [FK_ERS_ERCPTherapeuticStentInsertions_TherapeuticId] FOREIGN KEY([TherapeuticId]) REFERENCES [dbo].[ERS_ERCPTherapeutics] ([Id])
) ON [PRIMARY]
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------123 Create Tables Other Data.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

-------------------------------------------
--CREATE TABLES
-------------------------------------------
CREATE TABLE [dbo].[ERS_UpperGIIndications](
	[IndicationId]				[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIIndications] PRIMARY KEY CLUSTERED,
	[ProcedureId]				[int]		NOT NULL CONSTRAINT UQ_UpperGIIndications_ProcedureId UNIQUE(ProcedureId),
	[Anaemia]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_None DEFAULT 0,
	[AnaemiaType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIIndications_AnaemiaType DEFAULT 0,
	[AbdominalPain]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_AbdominalPain DEFAULT 0,
	[AbnormalCapsuleStudy]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_AbnormalCapsuleStudy DEFAULT 0,
	[AbnormalMRI]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_AbnormalMRI DEFAULT 0,
	[AbnormalityOnBarium]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_AbnormalityOnBarium DEFAULT 0,
	[ChestPain]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_ChestPain DEFAULT 0,
	[ChronicLiverDisease]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_ChronicLiverDisease DEFAULT 0,
	[CoffeeGroundsVomit]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_CoffeeGroundsVomit DEFAULT 0,
	[Diarrhoea]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Diarrhoea DEFAULT 0,
	[DrugTrial]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_DrugTrial DEFAULT 0,
	[Dyspepsia]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Dyspepsia DEFAULT 0,
	[DyspepsiaAtypical]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_DyspepsiaAtypical DEFAULT 0,
	[DyspepsiaUlcerType]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_DyspepsiaUlcerType DEFAULT 0,	
	[Dysphagia]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Dysphagia DEFAULT 0,
	[Haematemesis]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Haematemesis DEFAULT 0,
	[Melaena]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Melaena DEFAULT 0,
	[NauseaAndOrVomiting]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_NauseaAndOrVomiting DEFAULT 0,
	[Odynophagia]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Odynophagia DEFAULT 0,
	[PositiveTTG_EMA]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_PositiveTTG_EMA DEFAULT 0,
	[RefluxSymptoms]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_RefluxSymptoms DEFAULT 0,
	[UlcerExclusion]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_UlcerExclusion DEFAULT 0,
	[WeightLoss]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_WeightLoss DEFAULT 0,
	[PreviousHPyloriTest]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_PreviousHPyloriTest DEFAULT 0,
	[SerologyTest]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_SerologyTest DEFAULT 0,
	[SerologyTestResult]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIIndications_SerologyTestResult DEFAULT 0,
	[BreathTest]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_BreathTest DEFAULT 0,
	[BreathTestResult]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIIndications_BreathTestResult DEFAULT 0,
	[UreaseTest]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_UreaseTest DEFAULT 0,
	[UreaseTestResult]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIIndications_UreaseTestResult DEFAULT 0,
	[StoolAntigenTest]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_StoolAntigenTest DEFAULT 0,
	[StoolAntigenTestResult]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIIndications_StoolAntigenTestResult DEFAULT 0,
	[OpenAccess]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_OpenAccess DEFAULT 0,
	[OtherIndication]			[nvarchar](1000) NULL,
	[ClinicallyImpComments]		[nvarchar](4000) NULL,
	[UrgentTwoWeekReferral]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_UrgentTwoWeekReferral DEFAULT 0,
	[Cancer]					[int]		NOT NULL CONSTRAINT DF_UpperGIIndications_Cancer DEFAULT 0,
	[WHOStatus]					[smallint]	NULL,

	[BariatricPreAssessment]	[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_BariatricPreAssessment DEFAULT 0,
	[BalloonInsertion]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_BalloonInsertion DEFAULT 0,
	[BalloonRemoval]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_BalloonRemoval DEFAULT 0,
	[SingleBalloonEnteroscopy]	[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_SingleBalloonEnteroscopy DEFAULT 0,
	[DoubleBalloonEnteroscopy]	[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_DoubleBalloonEnteroscopy DEFAULT 0,
	[PostBariatricSurgeryAssessment][bit]	NOT NULL CONSTRAINT DF_UpperGIIndications_PostBariatricSurgeryAssessment DEFAULT 0,
	[EUS]						[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_EUS DEFAULT 0,
	[GastrostomyInsertion]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_GastrostomyInsertion DEFAULT 0,
	[InsertionOfPHProbe]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_InsertionOfPHProbe DEFAULT 0,
	[JejunostomyInsertion]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_JejunostomyInsertion DEFAULT 0,
	[NasoDuodenalTube]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_NasoDuodenalTube DEFAULT 0,
	[OesophagealDilatation]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_OesophagealDilatation DEFAULT 0,
	[PEGRemoval]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_PEGRemoval DEFAULT 0,
	[PEGReplacement]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_PEGReplacement DEFAULT 0,
	[PushEnteroscopy]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_PushEnteroscopy DEFAULT 0,
	[SmallBowelBiopsy]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_SmallBowelBiopsy DEFAULT 0,
	[StentRemoval]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_StentRemoval DEFAULT 0,
	[StentInsertion]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_StentInsertion DEFAULT 0,
	[StentReplacement]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_StentReplacement DEFAULT 0,
	[EUSRefGuidedFNABiopsy]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_EUSRefGuidedFNABiopsy DEFAULT 0,
	[EUSOesophagealStricture]	[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_EUSOesophagealStricture DEFAULT 0,
	[EUSAssessmentOfSubmucosalLesion] [bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_EUSAssessmentOfSubmucosalLesion DEFAULT 0,
	[EUSTumourStagingOesophageal] [bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_EUSTumourStagingOesophageal DEFAULT 0,
	[EUSTumourStagingGastric]	[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_EUSTumourStagingGastric DEFAULT 0,
	[EUSTumourStagingDuodenal]	[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_EUSTumourStagingDuodenal DEFAULT 0,
	[OtherPlannedProcedure]		[nvarchar](1000) NULL,

	[CoMorbidityNone]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_CoMorbidityNone DEFAULT 0,
	[Angina]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmAngina DEFAULT 0,
	[Asthma]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmAsthma DEFAULT 0,
	[COPD]						[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmCOPD DEFAULT 0,
	[DiabetesMellitus]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmDiabetesMellitus DEFAULT 0,
	[DiabetesMellitusType]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIIndications_cmDiabetesMellitusType DEFAULT 0,
	[Epilepsy]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmEpilepsy DEFAULT 0,
	[HemiPostStroke]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmHemiPostStroke DEFAULT 0,
	[Hypertension]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmHypertension DEFAULT 0,
	[MI]						[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmMI DEFAULT 0,
	[Obesity]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmObesity DEFAULT 0,
	[TIA]						[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_cmTIA DEFAULT 0,
	[OtherCoMorbidity]			[nvarchar](1000) NULL,
	
	[ASAStatus]					[smallint]	NULL,
	[PotentiallyDamagingDrug]	[nvarchar](4000) NULL,
	[Allergy]					[tinyint]	NOT NULL CONSTRAINT DF_UpperGIIndications_Allergy DEFAULT 0,
	[AllergyDesc]				[nvarchar](1000) NULL,
	[CurrentMedication]			[nvarchar](4000) NULL,
	[IncludeCurrentRxInReport]	[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_IncludeCurrentRxInReport DEFAULT 0,
	[SurgeryFollowUpProc]		[int]		NOT NULL CONSTRAINT DF_UpperGIIndications_SurgeryFollowUpProc DEFAULT 0,
	[SurgeryFollowUpProcPeriod]	[int]		NOT NULL CONSTRAINT DF_UpperGIIndications_SurgeryFollowUpProcPeriod DEFAULT 0,
	[SurgeryFollowUpText]		[nvarchar](1000) NULL,
	[DiseaseFollowUpProc]		[int]		NOT NULL CONSTRAINT DF_UpperGIIndications_DiseaseFollowUpProc DEFAULT 0,
	[DiseaseFollowUpProcPeriod]	[int]		NOT NULL CONSTRAINT DF_UpperGIIndications_DiseaseFollowUpProcPeriod DEFAULT 0,
	[BarrettsOesophagus]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_BarrettsOesophagus DEFAULT 0,
	[CoeliacDisease]			[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_CoeliacDisease DEFAULT 0,
	[Dysplasia]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Dysplasia DEFAULT 0,
	[Gastritis]					[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Gastritis DEFAULT 0,
	[Malignancy]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Malignancy DEFAULT 0,
	[OesophagealDilatationFollowUp]	[bit]	NOT NULL CONSTRAINT DF_UpperGIIndications_OesophagealDilatationFollowUp DEFAULT 0,
	[OesophagealVarices]		[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_OesophagealVarices DEFAULT 0,
	[Oesophagitis]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_Oesophagitis DEFAULT 0,	
	[UlcerHealing]				[bit]		NOT NULL CONSTRAINT DF_UpperGIIndications_UlcerHealing DEFAULT 0,
	[ColonSreeningColonoscopy]	[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonSreeningColonoscopy  DEFAULT 0,
	[ColonBowelCancerScreening] [bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonBowelCancerScreening  DEFAULT 0, 
	[ColonFOBT]					[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonFOBT  DEFAULT 0, 
	[ColonFIT]					[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonFIT  DEFAULT 0, 
	[ColonAlterBowelHabit]		[int]		NOT NULL,
	[ColonRectalBleeding]		[int]		NOT NULL,
	[ColonAnaemia]				[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonAnaemia  DEFAULT 0, 
	[ColonAnaemiaType]			[int]		NOT NULL,
	[ColonAbnormalCTScan]		[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonAbnormalCTScan  DEFAULT 0, 
	[ColonAbnormalSigmoidoscopy] [bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonAbnormalSigmoidoscopy  DEFAULT 0, 
	[ColonAbnormalBariumEnema]	[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonAbnormalBariumEnema  DEFAULT 0, 
	[ColonAbdominalMass]		[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonAbdominalMass  DEFAULT 0, 
	[ColonColonicObstruction]	[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonColonicObstruction  DEFAULT 0, 
	[ColonAbdominalPain]		[bit]		NOT NULL CONSTRAINT DF_ERS_UpperGIIndications_ColonAbdominalPain  DEFAULT 0, 
	[ColonAssessment]			[bit]		NOT NULL,
	[ColonAssessmentType]		[int]		NOT NULL,
	[ColonSurveillance]			[bit]		NOT NULL,
	[ColonFamily]				[bit]		NOT NULL,
	[ColonFamilyType]			[int]		NOT NULL,
	[ColonFamilyAdditionalText] [varchar](7000) NULL,
	[ColonCarcinoma]			[bit]		NOT NULL,
	[ColonPolyps]				[bit]		NOT NULL,
	[ColonDysplasia]			[bit]		NOT NULL,
	[ColonMelaena]				[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ColonMelaena			DEFAULT 0,	
	[ColonPolyposisSyndrome]	[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ColonPolyposisSyndrome DEFAULT 0,
	[ColonRaisedFaecalCalprotectin]	[bit]	NULL	CONSTRAINT DF_ERS_UpperGIIndications_ColonRaisedFaecalCalprotectin DEFAULT 0,
	[ColonTumourAssessment]		[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ColonTumourAssessment  DEFAULT 0,
	[ColonWeightLoss]			[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ColonWeightLoss		DEFAULT 0,
	[ERSAbdominalPain]			[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSAbdominalPain		DEFAULT 0,
    [ERSChronicPancreatisis]	[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSChronicPancreatisis DEFAULT 0,
    [ERSSphincter]				[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSSphincter			DEFAULT 0,
    [ERSAbnormalEnzymes]		[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSAbnormalEnzymes		DEFAULT 0,
    [ERSJaundice]				[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSJaundice  DEFAULT 0,
    [ERSStentOcclusion]			[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSStentOcclusion  DEFAULT 0,
    [ERSAcutePancreatitisAcute] [bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSAcutePancreatitisAcute  DEFAULT 0,
    [ERSObstructedCBD]			[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSObstructedCBD  DEFAULT 0,
    [ERSSuspectedPapillary]		[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSSuspectedPapillary  DEFAULT 0,
    [ERSBiliaryLeak]			[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSBiliaryLeak  DEFAULT 0,
    [ERSOpenAccess]				[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSOpenAccess  DEFAULT 0,
    [ERSCholangitis]			[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSCholangitis  DEFAULT 0,
    [ERSPrelaparoscopic]		[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSPrelaparoscopic  DEFAULT 0,
    [ERSRecurrentPancreatitis]	[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSRecurrentPancreatitis  DEFAULT 0,

	[ERSBileDuctInjury]			[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSBileDuctInjury DEFAULT 0,
	[ERSPurulentCholangitis]	[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSPurulentCholangitis DEFAULT 0,
	[ERSPancreaticPseudocyst]	[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSPancreaticPseudocyst DEFAULT 0,
	[ERSPancreatobiliaryPain]	[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSPancreatobiliaryPain DEFAULT 0,
	[ERSPapillaryDysfunction]	[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSPapillaryDysfunction DEFAULT 0,
	[ERSPriSclerosingChol]		[bit]		NULL	CONSTRAINT DF_ERS_UpperGIIndications_ERSPriSclerosingChol DEFAULT 0,

    [ERSImgUltrasound]			[bit]		NULL,
    [ERSImgCT]					[bit]		NULL,
    [ERSImgMRI]					[bit]		NULL,
    [ERSImgMRCP]				[bit]		NULL,
    [ERSImgIDA]					[bit]		NULL,
    [ERSImgEUS]					[bit]		NULL,
    [ERSNormal]					[bit]		NULL,
    [ERSChronicPancreatitis]	[bit]		NULL,
    [ERSAcutePancreatitis]		[bit]		NULL,
    [ERSGallBladder]			[bit]		NULL,
    [ERSFluidCollection]		[bit]		NULL,
    [ERSPancreaticMass]			[bit]		NULL,
    [ERSDilatedPancreatic]		[bit]		NULL,
    [ERSStonedBiliary]			[bit]		NULL,
    [ERSHepaticMass]			[bit]		NULL,
    [ERSObstructed]				[bit]		NULL,
    [ERSDilatedDucts]			[bit]		NULL,
	[AmpullaryMass]				[bit]		NULL,
    [BiliaryLeak]				[bit]		NULL,
	[GallBladderMass]			[bit]		NULL,
	[GallBladderPolyp]			[bit]		NULL,
    [ERSDilatedDuctsType1]		[bit]		NULL,
    [ERSDilatedDuctsType2]		[bit]		NULL,
    [ERSImgOthersTextBox]		[varchar](2000) NULL,
    [EPlanCanunulate]			[bit]		NULL,
    [EplanManometry]			[bit]		NULL,
    [EplanStentremoval]			[bit]		NULL,
    [EplanCombinedProcedure]	[bit]		NULL,
    [EplanNasoPancreatic]		[bit]		NULL,
    [EplanStentReplacement]		[bit]		NULL,
    [EPlanEndoscopicCyst]		[bit]		NULL,
    [EplanPapillotomy]			[bit]		NULL,
    [EplanStoneRemoval]			[bit]		NULL,
    [EplanStentInsertion]		[bit]		NULL,
    [EplanStrictureDilatation]	[bit]		NULL,
    [EplanOthersTextBox]		[varchar](2000) NULL,
    [ERSFollowPrevious]			[smallint]	NULL,
    [ERSFollowCarriedOut]		[smallint]	NULL,
    [ERSFollowBileDuct]			[bit]		NULL,
    [ERSFollowMalignancy]		[bit]		NULL,
    [ERSFollowBiliaryStricture] [bit]		NULL,
    [ERSFollowStentReplacement] [bit]		NULL,
	[PolypTumourAssess]			[bit]		NULL,
	[EMR]						[bit]		NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIIndications_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIIndications_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIBleeds](
	[BleedId]  [int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIBleeds] PRIMARY KEY CLUSTERED,
	[ProcedureId] [int] NOT NULL UNIQUE(ProcedureId),
	[AgeRange] [tinyint] NOT NULL,
	[Gender] [tinyint] NOT NULL,
	[Melaena] [tinyint]	NOT NULL CONSTRAINT DF_UpperGIBleeds_Melaena DEFAULT 0,
	[Syncope] [tinyint]	NOT NULL CONSTRAINT DF_UpperGIBleeds_Syncope DEFAULT 0,
	[LowestSystolicBP] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_LowestSystolicBP DEFAULT 0,
	[HighestPulseGreaterThan100] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_HighestPulseGreaterThan100 DEFAULT 0,
	[Urea] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_Urea DEFAULT 0,
	[Haemoglobin] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_Haemoglobin DEFAULT 0,
	[HeartFailure] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_HeartFailure DEFAULT 0,
	[LiverFailure] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_LiverFailure DEFAULT 0,
	[RenalFailure] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_RenalFailure DEFAULT 0,
	[MetastaticCancer] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_MetastaticCancer DEFAULT 0,
	[Diagnosis] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_Diagnosis DEFAULT 0,
	[Bleeding] [tinyint] NOT NULL CONSTRAINT DF_UpperGIBleeds_Bleeding DEFAULT 0,
	[OverallRiskAssessment] [nvarchar](6) NULL,
	--CONSTRAINT [FK_UpperGIBleeds_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIExtentOfIntubation](
	[IntubationId]				[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIExtentOfIntubation] PRIMARY KEY CLUSTERED,
	[ProcedureId]				[int]		NOT NULL CONSTRAINT UQ_UpperGIExtentOfIntubation_ProcedureId UNIQUE(ProcedureId),
	[CompletionStatus]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIExtentOfIntubation_CompletionStatus DEFAULT 0,
	[Extent]					[smallint]	NOT NULL CONSTRAINT DF_UpperGIExtentOfIntubation_Extent DEFAULT 0,
	[FailureReason]				[tinyint]	NOT NULL CONSTRAINT DF_UpperGIExtentOfIntubation_FailureReason DEFAULT 0,
	[FailureReasonOther]		[nvarchar](1000) NULL,
	[Jmanoeuvre]				[smallint]	NULL,

	[TrainerCompletionStatus]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIExtentOfIntubation_TrainerCompletionStatus DEFAULT 0,
	[TrainerExtent]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIExtentOfIntubation_TrainerExtent DEFAULT 0,
	[TrainerFailureReason]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIExtentOfIntubation_TrainerFailureReason DEFAULT 0,
	[TrainerFailureReasonOther]	[nvarchar](1000) NULL,
	[TrainerJmanoeuvre]			[smallint]	NULL,

	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIExtentOfIntubation_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIExtentOfIntubation_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_UpperGIDiagnoses](
	[DiagnoseId]				[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIDiagnoses] PRIMARY KEY CLUSTERED,
	[ProcedureId]			[int]		NOT NULL CONSTRAINT UQ_UpperGIDiagnoses_ProcedureId UNIQUE(ProcedureId),
	[OverallNormal]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OverallNormal DEFAULT 0,
	[OesophagusNotEntered]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusNotEntered DEFAULT 0,
	[OesophagusNormal]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusNormal DEFAULT 0,
	[OesophagusBarrettsMucosa] [bit]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusBarrettsMucosa DEFAULT 0,
	[OesophagusCandida]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusCandida DEFAULT 0,
	[OesophagusDiverticulum][bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusDiverticulum DEFAULT 0,
	[OesophagusForeignBody]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusForeignBody DEFAULT 0,
	[OesophagusHiatusHernia][bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusHiatusHernia DEFAULT 0,
	[OesophagusMalloryWeissTear] [bit]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusMalloryWeissTear DEFAULT 0,
	[OesophagusMotilityDisorder] [bit]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusMotilityDisorder DEFAULT 0,
	[OesophagusOesophagitis][bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusOesophagitis DEFAULT 0,
	[OesophagusReflux]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusReflux DEFAULT 0,
	[OesophagusStricture]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusStricture DEFAULT 0,
	[OesophagusTumourBenign][bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusTumourBenign DEFAULT 0,
	[OesophagusTumourBenignProbable] [bit] NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusTumourBenignProbable DEFAULT 0,
	[OesophagusTumourMalignant]	[bit]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusTumourMalignant DEFAULT 0,
	[OesophagusTumourMalignantProbable]	[bit] NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusTumourMalignantProbable DEFAULT 0,
	[OesophagusTelangiectasia]	[bit]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusTelangiectasia DEFAULT 0,
	[OesophagusUlcer]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusUlcer DEFAULT 0,
	[OesophagusVarices]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusVarices DEFAULT 0,
	[OesophagusVaricesBleed][bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusVaricesBleed DEFAULT 0,
	[OesophagusWeb]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_OesophagusWeb DEFAULT 0,
	[OesophagusOtherDiagnosis]	[nvarchar](1000) NULL,
	[StomachNotEntered]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachNotEntered DEFAULT 0,
	[StomachNormal]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachNormal DEFAULT 0,
	[StomachAngioma]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachAngioma DEFAULT 0,
	[StomachCancer]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachCancer DEFAULT 0,
	[StomachErosions]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachErosions DEFAULT 0,
	[StomachForeignBody]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachForeignBody DEFAULT 0,
	[StomachGastritis]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachGastritis DEFAULT 0,
	[StomachPolyp]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachPolyp DEFAULT 0,
	[StomachPostSurgical]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachPostSurgical DEFAULT 0,
	[StomachPyloricStenosis][bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachPyloricStenosis DEFAULT 0,
	[StomachScar]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachScar DEFAULT 0,
	[StomachTelangiectasia]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachTelangiectasia DEFAULT 0,
	[StomachUlcer]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachUlcer DEFAULT 0,
	[StomachMultipleUlcers]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachMultipleUlcers DEFAULT 0,
	[StomachVarices]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_StomachVarices DEFAULT 0,
	[PortalHypertensiveGastropathy][bit]NOT NULL CONSTRAINT DF_UpperGIDiagnoses_Portalhypertensivegastropathy DEFAULT 0,
	[StomachOtherDiagnosis]	[nvarchar](1000) NULL,
	[DuodenumNotEntered]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumNotEntered DEFAULT 0,
	[Duodenum2ndPartNotEntered]	[bit]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_Duodenum2ndPartNotEntered DEFAULT 0,
	[DuodenumNormal]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumNormal DEFAULT 0,
	[DuodenumDiverticulum]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumDiverticulum DEFAULT 0,
	[DuodenumDuodenitis]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumDuodenitis DEFAULT 0,
	[DuodenumPolyp]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumPolyp DEFAULT 0,
	[DuodenumScar]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumScar DEFAULT 0,
	[DuodenumTelangiectasia][bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumTelangiectasia DEFAULT 0,
	[DuodenumTumour]		[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumTumour DEFAULT 0,
	[DuodenumUlcer]			[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumUlcer DEFAULT 0,
	[DuodenumMultipleUlcers][bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_DuodenumMultipleUlcers DEFAULT 0,
	[DuodenumOtherDiagnosis][nvarchar](1000) NULL,
	
	[EndoscribeDiagnoses]	[bit]		NOT NULL CONSTRAINT DF_UpperGIDiagnoses_EndoscribeDiagnoses DEFAULT 0,	
	[EUSProcType]			[smallint]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_EUSProcType DEFAULT 0,
	[EUSTNMPrimaryTumourLocation] [smallint]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_EUSTNMPrimaryTumourLocation DEFAULT 0,
	[EUSTNMT]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_EUSTNMT DEFAULT 0,
	[EUSTNMN]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_EUSTNMN DEFAULT 0,
	[EUSTNMM]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIDiagnoses_EUSTNMM DEFAULT 0,
	[Summary]				[nvarchar](4000) NULL,
	CONSTRAINT [FK_UpperGIDiagnoses_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIQA](
	[Id]					[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIQA] PRIMARY KEY CLUSTERED,
	[ProcedureId]			[int]		NOT NULL CONSTRAINT UQ_UpperGIQA_ProcedureId UNIQUE(ProcedureId),
	[NoNotes]				[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_NoNotes DEFAULT 0,	
	[ReferralLetter]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_ReferralLetter DEFAULT 0,	
	[ManagementNone]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_ManagementNone DEFAULT 0,	
	[PulseOximetry]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_PulseOximetry DEFAULT 0,	
	[IVAccess]				[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_IVAccess DEFAULT 0,	
	[IVAntibiotics]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_IVAntibiotics DEFAULT 0,	
	[Oxygenation]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Oxygenation DEFAULT 0,	
	[OxygenationMethod]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIQA_OxygenationMethod DEFAULT 0,	
	[OxygenationFlowRate]	[decimal](6,2) NULL,
	[ContinuousECG]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_ContinuousECG DEFAULT 0,	
	[BP]					[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_BP DEFAULT 0,	
	[BPSystolic]			[decimal](6,2) NULL,
	[BPDiastolic]			[decimal](6,2) NULL,
	[ManagementOther]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_ManagementOther DEFAULT 0,	
	[ManagementOtherText]	[nvarchar](1000) NULL,
	
	[PatSedation]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIQA_PatSedation DEFAULT 0,	
	[PatSedationAsleepResponseState] [tinyint]	NOT NULL CONSTRAINT DF_UpperGIQA_PatSedationAsleepResponseState DEFAULT 0,
	[PatDiscomfortNurse]	[tinyint]	NOT NULL CONSTRAINT DF_UpperGIQA_PatDiscomfortNurse DEFAULT 0,	
	[PatDiscomfortEndo]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIQA_PatDiscomfortEndo DEFAULT 0,	
	[PatDiscomfortPatient]	[tinyint]	NULL,	
	
	[ConsentSignedInRoom]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_ConsentSignedInRoom	DEFAULT 0,	
	[O2Desaturation]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_O2Desaturation			DEFAULT 0,	
	[WithdrawalOfConsent]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_WithdrawalOfConsent	DEFAULT 0,	
	[UnplannedAdmission]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_UnplannedAdmission		DEFAULT 0,	
	[UnsupervisedTrainee]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_UnsupervisedTrainee	DEFAULT 0,	

	[Ventilation]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Ventilation DEFAULT 0,
	[ComplicationsNone]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_ComplicationsNone DEFAULT 0,	
	[PoorlyTolerated]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_PoorlyTolerated DEFAULT 0,	
	[PatientDiscomfort]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_PatientDiscomfort DEFAULT 0,	
	[PatientDistress]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_PatientDistress DEFAULT 0,	
	[InjuryToMouth]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_InjuryToMouth DEFAULT 0,	
	[FailedIntubation]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Failedintubation DEFAULT 0,	
	[DifficultIntubation]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_DifficultIntubation DEFAULT 0,	
	[DamageToScope]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_DamageToScope DEFAULT 0,	
	[DamageToScopeType]		[tinyint]	NOT NULL CONSTRAINT DF_UpperGIQA_DamageToScopeType DEFAULT 0,	
	[GastricContentsAspiration][bit]	NOT NULL CONSTRAINT DF_UpperGIQA_GastricContentsAspiration DEFAULT 0,	
	[ShockHypotension]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_ShockHypotension DEFAULT 0,	
	[Haemorrhage]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Haemorrhage DEFAULT 0,	
	[SignificantHaemorrhage][bit]		NOT NULL CONSTRAINT DF_UpperGIQA_SignificantHaemorrhage DEFAULT 0,	
	[Hypoxia]				[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Hypoxia DEFAULT 0,	
	[RespiratoryDepression]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_RespiratoryDepression DEFAULT 0,	
	[RespiratoryArrest]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_RespiratoryArrest DEFAULT 0,	
	[CardiacArrest]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_CardiacArrest DEFAULT 0,	
	[CardiacArrythmia]		[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_CardiacArrythmia DEFAULT 0,	
	[Death]					[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Death DEFAULT 0,	
	[TechnicalFailure]		[nvarchar](1000),
	
	[AllergyToMedium]		[bit]		NOT NULL CONSTRAINT [DF_ERS_UpperGIQA_AllergyToMedium]  DEFAULT ((0)),
	[Arcinarisation]		[bit]		NOT NULL CONSTRAINT [DF_ERS_UpperGIQA_Arcinarisation]  DEFAULT ((0)),
	[ContrastExtravasation] [bit]		NOT NULL CONSTRAINT [DF_ERS_UpperGIQA_ContrastExtravasation]  DEFAULT ((0)),
	[FailedERCP]			[bit]		NOT NULL CONSTRAINT [DF_ERS_UpperGIQA_FailedERCP]  DEFAULT ((0)),
	[FailedCannulation]		[bit]		NOT NULL CONSTRAINT [DF_ERS_UpperGIQA_FailedCannulation]  DEFAULT ((0)),
	[FailedStentInsertion]	[bit]		NOT NULL CONSTRAINT [DF_ERS_UpperGIQA_FailedStentInsertion]  DEFAULT ((0)),
	[Pancreatitis]			[bit]		NOT NULL CONSTRAINT [DF_ERS_UpperGIQA_Pancreatitis]  DEFAULT ((0)),

	[Perforation]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Perforation DEFAULT 0,	
	[PerforationText]		[nvarchar](500),
	[ComplicationsOther]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_ComplicationsOther DEFAULT 0,	
	[ComplicationsOtherText][nvarchar](1000),
	[ComplicationsSummary]  [nvarchar](4000) NULL,

	[Bleeding]					[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Bleeding DEFAULT 0,
	[BleedingSeverity]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIQA_BleedingSeverity DEFAULT 0,
	[BleedingAdrenalineUsed]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_BleedingAdrenalineUsed DEFAULT 0,
	[BleedingAdrenalineAmount]	[decimal](8,2) NULL,
	[BleedingColdSalineUsed]	[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_BleedingColdSalineUsed DEFAULT 0,
	[BleedingBlockingDeviceUsed][bit]		NOT NULL CONSTRAINT DF_UpperGIQA_BleedingBlockingDeviceUsed DEFAULT 0,
	[Pneumothorax]				[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Pneumothorax DEFAULT 0,
	[PneumothoraxAspirChestDrain][bit]		NOT NULL CONSTRAINT DF_UpperGIQA_PneumothoraxAspirChestDrain DEFAULT 0,
	[Hospitalisation]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Hospitalisation DEFAULT 0,
	[MyocardInfarction]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_MyocardInfarction DEFAULT 0,
	[Oversedation]				[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_Oversedation DEFAULT 0,
	[AdmissionToICU]			[bit]		NOT NULL CONSTRAINT DF_UpperGIQA_AdmissionToICU DEFAULT 0,
	[EUSproctype]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIQA_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIQA_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIFollowUp](
	[FollowUpId]			[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIFollowUp] PRIMARY KEY CLUSTERED,
	[ProcedureId]			[int]		NOT NULL CONSTRAINT UQ_UpperGIFollowUp_ProcedureId UNIQUE(ProcedureId),
	[NoFurtherTestsRequired][bit]		NOT NULL CONSTRAINT DF_UpperGIFollowUp_NoFurtherTestsRequired DEFAULT 0,
	[AwaitingPathologyResults][bit]		NOT NULL CONSTRAINT DF_UpperGIFollowUp_AwaitingPathologyResults DEFAULT 0,
	[FurtherProcedure]		[int]		NOT NULL CONSTRAINT DF_UpperGIFollowUp_FurtherProcedure DEFAULT 0,
	[FurtherProcedureDueCount][int]		NULL,
	[FurtherProcedureDueType][tinyint]	NOT NULL CONSTRAINT DF_UpperGIFollowUp_FurtherProcedureDueType DEFAULT 0,
	[FurtherProcedureText]	[nvarchar](500) NULL,
	[ReturnTo]				[smallint]	NOT NULL CONSTRAINT DF_UpperGIFollowUp_ReturnTo DEFAULT 0,
	[NoFurtherFollowUp]		[bit]		NOT NULL CONSTRAINT DF_UpperGIFollowUp_NoFurtherFollowUp DEFAULT 0,
	[ReviewLocation]		[smallint]	NOT NULL CONSTRAINT DF_UpperGIFollowUp_ReviewLocation DEFAULT 0,
	[ReviewDueCount]		[int]		NULL,
	[ReviewDueType]			[tinyint]	NOT NULL CONSTRAINT DF_UpperGIFollowUp_ReviewDueType DEFAULT 0,
	[ReviewText]			[nvarchar](500) NULL,
	[Comments]				[nvarchar](500) NULL,
	[PP_PFRFollowUp]		[nvarchar](500) NULL,
	[CopyToPatient]			[tinyint]		NOT NULL CONSTRAINT DF_UpperGIFollowUp_CopyToPatient DEFAULT 0,
	[CopyToPatientText]		[nvarchar](500) NULL,
	[PatientNotCopiedReason][nvarchar](500) NULL,
	[CopyToRefCon]			[bit]		NOT NULL CONSTRAINT DF_UpperGIFollowUp_CopyToRefCon DEFAULT 0,
	[CopyToRefConText]		[nvarchar](500) NULL,
	[CopyToOther]			[bit]		NOT NULL CONSTRAINT DF_UpperGIFollowUp_CopyToOther DEFAULT 0,
	[CopyToOtherText]		[nvarchar](500) NULL,
	[Salutation]			[nvarchar](200) NULL,
	[EUSproctype]			[smallint]	NOT NULL CONSTRAINT DF_UpperGIFollowUp_EUSProcType DEFAULT 0,
	[Summary]				[nvarchar](4000) NULL,
	[WhoUpdatedId]			[int]		NULL Default 0,
	[WhoCreatedId]			[int]		NULL Default 0,
	[WhenCreated]			[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]			[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIFollowUp_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_UpperGIPathologyResults](
		[Id] [bigint] IDENTITY(1,1)				NOT NULL,
	[ProcedureId]			[int]			NOT NULL CONSTRAINT UQ_UpperGIPathologyResults_ProcedureId UNIQUE(ProcedureId),
	[AdenomaConfirmedHistologically] [bit]	NOT NULL CONSTRAINT DF_UpperGIPathologyResults_AdenomaConfirmedHistologically DEFAULT 0,
	[FurtherProcedureText]	[nvarchar](MAX) NULL,
	[NoFurtherFollowUp]		[bit]			NOT NULL CONSTRAINT DF_UpperGIPathologyResults_NoFurtherFollowUp DEFAULT 0,
	[ReviewText]			[nvarchar](MAX) NULL,
	[Comments]				[nvarchar](MAX) NULL,
	[DateOfSpecimen]		[datetime]		NULL,
	[LabReportNo]			[varchar](50)	NULL,
	[DateOfReport]			[datetime]		NULL,
	[DateReceived]			[datetime]		NULL,
	CONSTRAINT [EPK_UpperGIPathologyResults] PRIMARY KEY CLUSTERED ([Id] ASC) ON [PRIMARY],
	CONSTRAINT [FK_UpperGIPathologyResults_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]

GO

CREATE TABLE [dbo].[ERS_UpperGIPremedication](
	[PremedicationId]	[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIPremedication] PRIMARY KEY CLUSTERED,
	[ProcedureId]		[int]			NOT NULL,
	[DrugNo]			[smallint]		NULL,
	[DrugName]			[nvarchar](50)	NULL,
	[Dose]				[decimal](8, 2) NULL,
	[Units]				[nvarchar](12)	NULL,
	[DeliveryMethod]	[nvarchar](25)	NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate()
 CONSTRAINT [FK_UpperGIPremedication_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIPremedication_Summary](
	[Id]				[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIPremedication_Summary] PRIMARY KEY CLUSTERED,
	[ProcedureId]		[int]			NOT NULL,
	[Summary]			[nvarchar](4000) NULL
 CONSTRAINT [FK_UpperGIPremedication_Procedures_Summary] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_UpperGIRx](
	[RxId]						[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_UpperGIRx] PRIMARY KEY CLUSTERED,
	[ProcedureId]				[int]		NOT NULL CONSTRAINT UQ_UpperGIRx_ProcedureId UNIQUE(ProcedureId),
	[ContMedication]			[bit]		NOT NULL CONSTRAINT DF_UpperGIRx_ContMedication DEFAULT 0,
	[ContMedicationByGP]		[bit]		NOT NULL CONSTRAINT DF_UpperGIRx_ContMedicationByGP DEFAULT 0,
	[ContPrescribeMedication]	[bit]		NOT NULL CONSTRAINT DF_UpperGIRx_ContPrescribeMedication DEFAULT 0,
	[SuggestPrescribe]			[bit]		NOT NULL CONSTRAINT DF_UpperGIRx_SuggestPrescribe DEFAULT 0,
	[MedicationText]			[nvarchar]	(500) NULL,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_UpperGIRx_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_BowelPreparation](
	[BowelPrepID]		[int] IDENTITY(1,1) NOT NULL,
	[ProcedureID]		[int] NOT NULL,
	[BowelPrepSettings] [bit] NULL		CONSTRAINT [DF_ERS_BowelPreparation_BowelPrepSettings] DEFAULT 0,
	[OnNoBowelPrep]		[bit] NULL		CONSTRAINT [DF_ERS_BowelPreparation_OnNoBowelPrep] DEFAULT 0,
	[OnFormulation]		[varchar](500) NULL,
	[CO2Insufflation]	[bit] NULL,
	[OnRight]			[int] NULL,
	[OnTransverse]		[int] NULL,
	[OnLeft]			[int] NULL,
	[OnTotalScore]		[int] NULL,
	[OffNoBowelPrep]	[bit] NULL		CONSTRAINT [DF_ERS_BowelPreparation_OffNoBowelPrep] DEFAULT 0,
	[OffFormulation]	[varchar](500) NULL,
	[BowelPrepQuality]	[tinyint] NULL,
	[Summary] [varchar](5000) NULL,
 CONSTRAINT [PK_ERS_BowelPreparation] PRIMARY KEY CLUSTERED ([BowelPrepID] ASC)
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_ColonExtentOfIntubation](
	[ExtId]						[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_ColonExtentOfIntubation] PRIMARY KEY CLUSTERED,
	[ProcedureId]				[int] NOT NULL,
	[RectalExam]				[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_RectalExam]  DEFAULT 0, 
	[Retroflexion]				[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_Retroflexion]  DEFAULT 0, 
	[InsertionVia]				[tinyint] NULL,
	[InsertionTo]				[tinyint] NULL,
	[SpecificDistanceCm]		[tinyint] NULL,
	[InsertionConfirmedBy]		[int] NULL,
	[InsertionLimitedBy]		[int] NULL,
	[DifficultiesEncountered]	[int] NULL,
	[IleocecalValve]			[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_IleocecalValve]  DEFAULT 0, 
	[TransIllumination]			[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_TransIllumination]  DEFAULT 0, 
	[IlealIntubation]			[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_IlealIntubation]  DEFAULT 0, 
	[AppendicularOrifice]		[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_AppendicularOrifice]  DEFAULT 0, 
	[TriRadiateCaecalFold]		[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_TriRadiateCaecalFold]  DEFAULT 0, 
	[DigitalPressure]			[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_DigitalPressure]  DEFAULT 0, 
	[DegreeOfConfidence]		[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_DegreeOfConfidence]  DEFAULT 0, 
	[Positively]				[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_Positively]  DEFAULT 0, 
	[WithReasonableConfidence]	[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_WithReasonableConfidence]  DEFAULT 0, 
	[TimeToCaecumMin]			[tinyint] NULL,
	[TimeToCaecumSec]			[tinyint] NULL,
	[TimeForWithdrawalMin]		[tinyint] NULL,
	[TimeForWithdrawalSec]		[tinyint] NULL,
	[TimeToCaecumMin_Photo]		[tinyint] NULL,
	[TimeToCaecumSec_Photo]		[tinyint] NULL,
	[TimeForWithdrawalMin_Photo][tinyint] NULL,
	[TimeForWithdrawalSec_Photo][tinyint] NULL,
	[Abandoned]					[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_Abandoned]  DEFAULT 0, 
	[NED_RectalExam]			[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_RectalExam]  DEFAULT 0, 
	[NED_Retroflexion]			[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_Retroflexion]  DEFAULT 0, 
	[NED_InsertionTo]			[tinyint] NULL,
	[NED_SpecificDistanceCm]	[tinyint] NULL,
	[NED_InsertionConfirmedBy]	[int] NULL,
	[NED_InsertionLimitedBy]	[int] NULL,
	[NED_DifficultiesEncountered] [int] NULL,
	[NED_IleocecalValve]		[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_IleocecalValve]  DEFAULT 0, 
	[NED_TransIllumination]		[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_TransIllumination]  DEFAULT 0, 
	[NED_IlealIntubation]		[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_IlealIntubation]  DEFAULT 0, 
	[NED_AppendicularOrifice]	[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_AppendicularOrifice]  DEFAULT 0, 
	[NED_TriRadiateCaecalFold]	[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_TriRadiateCaecalFold]  DEFAULT 0, 
	[NED_DigitalPressure]		[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_DigitalPressure]  DEFAULT 0, 
	[NED_DegreeOfConfidence]	[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_DegreeOfConfidence]  DEFAULT 0, 
	[NED_Positively]			[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_Positively]  DEFAULT 0, 
	[NED_WithReasonableConfidence] [bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_WithReasonableConfidence]  DEFAULT 0, 
	[NED_TimeToCaecumMin]		[tinyint] NULL,
	[NED_TimeToCaecumSec]		[tinyint] NULL,
	[NED_TimeForWithdrawalMin]	[tinyint] NULL,
	[NED_TimeForWithdrawalSec]	[tinyint] NULL,
	[NED_Abandoned]				[bit] NOT NULL CONSTRAINT [DF_ColonExtentOfIntubation_NED_Abandoned]  DEFAULT 0, 
	[ICVDistance]				[int] NULL,
    [NumberLoops]				[int] NULL,
	[EUSProcType]				[smallint]	NOT NULL CONSTRAINT DF_ColonExtentOfIntubation_EUSProcType DEFAULT 0,
	[Summary]					[nvarchar](4000) NULL,
	[IntubationStartDateTime]	[datetime] NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_ColonExtentOfIntubation_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_BRT_BronchoDrugs](
	[BronchoDrugId]				[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_BRT_BronchoDrugs] PRIMARY KEY CLUSTERED,
	[ProcedureId]				[int] NOT NULL,
	[EffectOfSedation]			[int] NOT NULL CONSTRAINT [DF_BronchoDrugs_EffectOfSedation]  DEFAULT 0,
	[LignocaineSpray]			[bit] NOT NULL CONSTRAINT [DF_BronchoDrugs_LignocaineSpray]  DEFAULT 0,
	[LignocaineGel]				[bit] NOT NULL CONSTRAINT [DF_BronchoDrugs_LignocaineGel]  DEFAULT 0,
	[LignocaineViaScope1pc]		[decimal](8,2) NULL,
	[LignocaineViaScope2pc]		[decimal](8,2) NULL,
	[LignocaineViaScope4pc]		[decimal](8,2) NULL,
	[LignocaineNebuliser2pc]	[decimal](8,2) NULL,
	[LignocaineNebuliser4pc]	[decimal](8,2) NULL,
	[LignocaineTranscricoid2pc] [decimal](8,2) NULL,
	[LignocaineTranscricoid4pc] [decimal](8,2) NULL,
	[LignocaineBronchial1pc]	[decimal](8,2) NULL,
	[LignocaineBronchial2pc]	[decimal](8,2) NULL,
	[SupplyOxygen]				[bit] NOT NULL CONSTRAINT [DF_BronchoDrugs_SupplyOxygen]  DEFAULT 0,
	[SupplyOxygenPercentage]	[decimal](8,2) NULL,
	[Nasal]						[decimal](8,2) NULL,
	[SpO2Base]					[decimal](8,2) NULL,
	[SpO2Min]					[decimal](8,2) NULL,
	[Summary]					[nvarchar](4000) NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_BronchoDrugs_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_BRT_BronchoCoding](
	[BronchoCodingId]		[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_BRT_BronchoCoding] PRIMARY KEY CLUSTERED,
	[ProcedureId]			[int]		NOT NULL,
	[CodeId]				[int]		NOT NULL,
	[FibreOpticCodeValue]	[bit]		NULL,
	[RigidCodeValue]		[bit]		NULL,
	[WhoUpdatedId]			[int]		NULL Default 0,
	[WhoCreatedId]			[int]		NULL Default 0,
	[WhenCreated]			[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]			[DATETIME]	NULL Default GetDate(),
 CONSTRAINT [FK_BronchoCoding_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO

CREATE TABLE [dbo].[ERS_BRT_BronchoPathology](
	[BronchoPathologyId]		[int]		IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_BRT_BronchoPathology] PRIMARY KEY CLUSTERED,
	[ProcedureId]				[int] NOT NULL,
	--Indications
	[AsthmaThermoplasty]		[bit] NOT NULL,
	[EmphysemaLungVolRed]		[bit] NOT NULL,
	[Haemoptysis]				[bit] NOT NULL,
	[HilarMediaLymphadenopathy]	[bit] NOT NULL,
	[Infection]					[bit] NOT NULL,
	[InfectionImmunoSuppressed]	[bit] NOT NULL,
	[LungLobarCollapse]			[bit] NOT NULL,
	[RadiologicalAbno]			[bit] NOT NULL,
	[SuspectedLCa]				[bit] NOT NULL,
	[SuspectedSarcoidosis]		[bit] NOT NULL,
	[SuspectedTB]				[bit] NOT NULL,
	[ClinicalDetails]			[varchar](1000) NULL,
	--Co-Morbidity
	[AtrialFibrillation]		[bit] NOT NULL,
	[ChronicKidneyDisease]		[bit] NOT NULL,
	[COPD]						[bit] NOT NULL,
	[EnlargedLymphNodes]		[bit] NOT NULL,
	[EssentialHyperTension]		[bit] NOT NULL,
	[HeartFailure]				[bit] NOT NULL,
	[InterstitialLungDisease]	[bit] NOT NULL,
	[IschaemicHeartDisease]		[bit] NOT NULL,
	[LungCancer]				[bit] NOT NULL,
	[Obesity]					[bit] NOT NULL,
	[PleuralEffusion]			[bit] NOT NULL,
	[Pneumonia]					[bit] NOT NULL,
	[RheumatoidArthritis]		[bit] NOT NULL,
	[SecondaryCancer]			[bit] NOT NULL,
	[Stroke]					[bit] NOT NULL,
	[Type2Diabetes]				[bit] NOT NULL,
	[OtherComorb]				[varchar](1000) NULL,
	--Staging
	[StagingInvestigations]		[bit] NOT NULL,
	[ClinicalGrounds]			[bit] NOT NULL,
	[ImagingOfThorax]			[bit] NOT NULL,
	[MediastinalSampling]		[bit] NOT NULL,
	[Metastases]				[bit] NOT NULL,
	[PleuralHistology]			[bit] NOT NULL,
	[Bronchoscopy]				[bit] NOT NULL,
	[Stage]						[bit] NOT NULL,
	[StageT]					[int] NOT NULL,
	[StageN]					[int] NOT NULL,
	[StageM]					[int] NOT NULL,
	[StageType]					[int] NOT NULL,
	[StageDate]					[datetime] NULL,
	[PerformanceStatus]			[bit] NOT NULL,
	[PerformanceStatusType]		[int] NULL,
	--Referral Data
	[DateBronchRequested]		[datetime] NULL,
	[DateOfReferral]			[datetime] NULL,
	[LCaSuspectedBySpecialist]	[bit] NOT NULL,
	[CTScanAvailable]			[bit] NOT NULL,
	[DateOfScan]				[datetime] NULL,
	--Pulmonary physiology
	[FEV1Result]				[decimal](8,2) NULL,
	[FEV1Percentage]			[decimal](8,2) NULL,
	[FVCResult]					[decimal](8,2) NULL,
	[FVCPercentage]				[decimal](8,2) NULL,
	[WHOPerformanceStatus]		[int] NULL,
	[WhoUpdatedId]				[int]		NULL Default 0,
	[WhoCreatedId]				[int]		NULL Default 0,
	[WhenCreated]				[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]				[DATETIME]	NULL Default GetDate(),
 CONSTRAINT [FK_BronchoPathology_Procedures] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureId])
) ON [PRIMARY]
GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------172 Create Tables Drug.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-------------------------------------------
--CREATE TABLES
-------------------------------------------

CREATE TABLE [dbo].[ERS_DrugList](
	[ProductID]			[nvarchar](2) NOT NULL,
	[LocationID]		[nvarchar](4) NOT NULL,
	[DrugNo]			[smallint] IDENTITY(1,1) NOT NULL,
	[DrugType]			[smallint] NULL,
	[DrugName]			[nvarchar](50) NULL,
	[DeliveryMethod]	[nvarchar](25) NULL,
	[Units]				[nvarchar](12) NULL,
	[DoseNotApplicable] [bit] NULL CONSTRAINT [DF_ERS_DrugList_DoseNotApplicable] DEFAULT 0,
	[DefaultDose]		[real] NULL,
	[DoseIncrement]		[real] NULL,
	[UsedInColonSig]	[smallint] NULL,
	[UsedInERCP]		[smallint] NULL,
	[UsedInUpperGI]		[smallint] NULL,
	[IsReversingAgent]	[smallint] NULL,
	[UsedInEUS_OGD]		[smallint] NULL,
	[UsedInEUS_HPB]		[smallint] NULL,
	[UsedInAntegrade]	[smallint] NULL,
	[UsedInRetrograde]	[smallint] NULL,
	[UsedInBroncho]		[smallint] NULL,
	CONSTRAINT [PK_DrugList] PRIMARY KEY CLUSTERED ([DrugNo])
) ON [PRIMARY]
GO

INSERT INTO [ERS_DrugList]
			   ([ProductID]				,[LocationID]		,[DrugType]			,[DrugName]
			   ,[DeliveryMethod]		,[Units]			,[DefaultDose]		,[DoseIncrement]
			   ,[UsedInColonSig]		,[UsedInERCP]		,[UsedInUpperGI]	,[IsReversingAgent]
			   ,[UsedInEUS_OGD]			,[UsedInEUS_HPB]	,[UsedInAntegrade]	,[UsedInRetrograde]
			   ,[UsedInBroncho])
VALUES
('GI','XXXX',0,'Midazolam','IV','mg',2.5,0.5,1,1,1,0,1,1,1,1,1)
,('GI','XXXX',0,'Pethidine','IV','mg',50,10,1,1,1,0,1,1,1,1,0)
,('GI','XXXX',0,'Buscopan','IV','mg',20,20,1,1,1,0,1,1,1,1,0)
,('GI','XXXX',0,'Fentanyl','IV','ug',50,50,0,1,1,0,1,1,1,0,0)

IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Drug list'))
BEGIN

	--Copy data from [Drug list] to [ERS_DrugList]
	SET IDENTITY_INSERT [ERS_DrugList] ON;
	
	DECLARE @DrugNo INT = ISNULL((SELECT MAX([Drug no]) FROM [Drug list]),0)

	INSERT INTO [ERS_DrugList]
			   ([ProductID]				,[LocationID]		,[DrugType]			,[DrugName], [DrugNo]
			   ,[DeliveryMethod]		,[Units]			,[DefaultDose]		,[DoseIncrement]
			   ,[UsedInColonSig]		,[UsedInERCP]		,[UsedInUpperGI]	,[IsReversingAgent]
			   ,[UsedInEUS_OGD]			,[UsedInEUS_HPB]	,[UsedInAntegrade]	,[UsedInRetrograde]
			   ,[UsedInBroncho])
	SELECT		[Product ID]			,[Location ID]		,[Drug type]		,[Drug name], [Drug no]
				,[Delivery method]		,[Units]			,[Default dose]		,[Dose increment]		
				,CASE WHEN [Used in ColonSig] = -1 THEN 1 ELSE 0 END
				,CASE WHEN [Used in ERCP] = -1 THEN 1 ELSE 0 END
				,CASE WHEN [Used in Upper GI] = -1 THEN 1 ELSE 0 END
				,CASE WHEN [Is reversing agent] = -1 THEN 1 ELSE 0 END
				,CASE WHEN [Used in EUS OGD] = -1 THEN 1 ELSE 0 END
				,CASE WHEN [Used in EUS HPB] = -1 THEN 1 ELSE 0 END
				,CASE WHEN [Used in ENTER ante] = -1 THEN 1 ELSE 0 END
				,CASE WHEN [Used in ENTER retro] = -1 THEN 1 ELSE 0 END
				,0
	FROM [Drug list]
	WHERE [Drug Name] NOT IN (SELECT DrugName FROM ERS_DrugList)
-- Insert new drugs for Bronchoscopy
	UNION
		SELECT 'GI', 'XXXX', 0, 'Omnopon', @DrugNo + 1, 'sc', 'mg', 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1
		WHERE NOT EXISTS (SELECT 1 FROM [Drug list] WHERE [Drug name] = 'Omnopon')
	UNION 
		SELECT 'GI', 'XXXX', 0, 'Scopolamine', @DrugNo + 2, 'sc', 'ug', 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1
		WHERE NOT EXISTS (SELECT 1 FROM [Drug list] WHERE [Drug name] = 'Scopolamine')
	UNION
		SELECT 'GI', 'XXXX', 0, 'Thalamonal', @DrugNo + 3, 'IV', 'ml', 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1
		WHERE NOT EXISTS (SELECT 1 FROM [Drug list] WHERE [Drug name] = 'Thalamonal')

	-- Update existing drugs for Bronchoscopy	
	UPDATE ERS_DrugList SET UsedInBroncho = 1 WHERE DrugName IN ('Midazolam', 'Naloxone', 'Flumazenil', 'Atropine')

	----Append "s" at the end of the units  (HD : confirmed with Steve - not required)
	--UPDATE ERS_DrugList SET Units = Units + 's' WHERE Units IN ('mg', 'ug', 'gm', 'mcg', 'ml')
	
	SET IDENTITY_INSERT [ERS_DrugList] OFF;
	
END

GO
---------------------------


CREATE TABLE [dbo].[ERS_DrugRegime](
	[RegimenNo]			[smallint] NOT NULL,
	[Description]		[nvarchar](100) NULL,
	[ProcedureNo]		[smallint] NULL,
	[DrugNo]			[smallint] NOT NULL,
	[DrugDose]			[real] NULL,
	[Frequency]			[varchar](50) NULL,
	[Duration]			[varchar](50) NULL,
	[DrugCount]			[smallint] NOT NULL,
	[RegimeText]		[varchar](1000) NULL,
 CONSTRAINT [PK_Drug_Regimen] PRIMARY KEY CLUSTERED ([RegimenNo] ASC,[DrugNo] ASC,[DrugCount] ASC)
) ON [PRIMARY]

GO

-------------------------------------------------------------------------------------------------
------------------------------------- Bronchoscopy Code List Table ------------------------------
-------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_BRT_CodeList](
	[CodeId]			[int] IDENTITY(1,1) NOT NULL,
	[Name]				[varchar](200) NOT NULL,
	[FibreOpticCode]	[varchar](100) NULL,
	[RigidCode]			[varchar](100) NULL,
	[Section]			[smallint] NOT NULL,
	CONSTRAINT [PK_CodeList] PRIMARY KEY CLUSTERED ([CodeID])
) ON [PRIMARY]
GO

INSERT INTO ERS_BRT_CodeList ([Name], [FibreOpticCode], [RigidCode], [Section]) 
--Diagnostic
VALUES	('Diathermy-argon plasma coag.', 'E48.8+Y10.2/Y17.1', NULL, 1)
		,('Biopsy of lesion', 'E49.1', 'E51.1', 1)
		,('Other specified', 'E49.8', 'E51.8', 1)
		,('Other unspecified', 'E49.9', 'E51.9', 1)
		,('Radial EBUS (lung biopsy)', 'E63.2+E49.1', NULL, 1)
		,('Radial EBUS (brushings)', 'E63.2+E49.3', NULL, 1)
		,('Cryobiopsy', 'E49.1+Y13.2', NULL, 1)
		,('Bronchial thermoplasty', 'E488+Y114+Z245', NULL, 1)
		,('Endobronchial valve', 'E546+Y748+Y022', NULL, 1)
		,('Research bronchoscopy', 'Z006', NULL, 1)

--Therapeutic
		,('Snare resection', 'E48.1', 'E50.1', 2)
		,('Laser destruction', 'E48.2', 'E50.2', 2)
		,('Destruction of lesion', 'E48.3', 'E50.3', 2)
		,('Aspiration of lower respiratory tract', 'E48.4', 'E50.4', 2)
		,('Removal of foreign body', 'E48.5', 'E50.5', 2)
		,('Irrigation of lower respiratory tract', 'E48.6', 'E50.6', 2)
		,('Other specified', 'E48.8', 'E50.8', 2)
		,('Unspecified', 'E48.9', 'E50.9', 2)

--EBUS Lymph Node
		,('Single node biopsy (Intermediate HRG)', 'E63.2+T87.4+Y20.4/Y20.3', NULL, 3)
		,('Sampling of lymph nodes (Major HRG)', 'E63.2+T86.5+Y20.4/Y20.3', NULL, 3)
		,('Bilateral sampling of lymph nodes (Complex HRG)', 'E63.2+T86.5+Z94.1+Y20.4/Y20.3', NULL, 3)

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------173 Create Table QA_Default.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_QADefault](
	[DefaultQAID]			[int] IDENTITY(1,1) NOT NULL,
	[ProcedureType]			[int] NOT NULL,
	[ManagementNone]		[bit] NOT NULL			CONSTRAINT DF_QADefault_ManagementNone DEFAULT 0,
	[PulseOximetry]			[bit] NOT NULL			CONSTRAINT DF_QADefault_PulseOximetry DEFAULT 0,
	[IVAccess]				[bit] NOT NULL			CONSTRAINT DF_QADefault_IVAccess DEFAULT 0,
	[IVAntibiotics]			[bit] NOT NULL			CONSTRAINT DF_QADefault_IVAntibiotics DEFAULT 0,
	[Oxygenation]			[bit] NOT NULL			CONSTRAINT DF_QADefault_Oxygenation DEFAULT 0,
	[OxygenationMethod]		[tinyint] NOT NULL		CONSTRAINT DF_QADefault_OxygenationMethod DEFAULT 0,
	[OxygenationFlowRate]	[decimal](6, 2) NULL,
	[ContinuousECG]			[bit] NOT NULL			CONSTRAINT DF_QADefault_ContinuousECG DEFAULT 0,
	[BP]					[bit] NOT NULL			CONSTRAINT DF_QADefault_BP DEFAULT 0,
	[BPSystolic]			[decimal](6, 2) NULL,
	[BPDiastolic]			[decimal](6, 2) NULL,
	[ManagementOther]		[bit] NOT NULL			CONSTRAINT DF_QADefault_ManagementOther DEFAULT 0,
	[ManagementOtherText]	[nvarchar](1000) NULL,
	[Datestamp]				[datetime] NULL			CONSTRAINT DF_QADefault_Datestamp DEFAULT (getdate()),
	[WhoUpdatedId]			[int]		NULL Default 0,
	[WhoCreatedId]			[int]		NULL Default 0,
	[WhenCreated]			[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]			[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [PK_ERS_QADefault] PRIMARY KEY CLUSTERED ([DefaultQAID] ASC),
	CONSTRAINT [UQ_QADefault_ProcedureType] UNIQUE NONCLUSTERED ([ProcedureType] ASC)
) ON [PRIMARY]
GO


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------173a Create Table PatientMedication.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_PatientMedication](
	[PatientMedicationID] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureNo] [smallint] NOT NULL,
	[DrugCount] [smallint] NOT NULL,
	[DrugNo] [smallint] NULL,
	[DrugDose] [real] NULL,
	[Frequency] [varchar](50) NULL,
	[Duration] [varchar](50) NULL,
	[HPyloriDrug] [smallint] NULL,
	[WhoPrescribed] [nvarchar](1) NULL,
	[AuthenticationDate] [datetime] NULL,
	[AuthenticatedBy] [nvarchar](50) NULL,
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [pk_ERS_PatientMedication] PRIMARY KEY CLUSTERED ([PatientMedicationID] ASC,	[ProcedureNo] ASC,	[DrugCount] ASC)
) ON [PRIMARY]
GO

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------173b Create Table ERS_BowelPreparation.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO

--IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'ERS_BowelPreparation'))
--	DROP TABLE [dbo].[ERS_BowelPreparation]
--GO	

--CREATE TABLE [dbo].[ERS_BowelPreparation](
--	[BowelPrepID] [int] IDENTITY(1,1) NOT NULL,
--	[ProcedureID] [int] NOT NULL,
--	[OnNoBowelPrep] [bit] NULL CONSTRAINT DF_ERS_BowelPreparation_OnNoBowelPrep DEFAULT 0,
--	[OnFormulation] [varchar](500) NULL,
--	[OnRight] [int] NULL,
--	[OnTransverse] [int] NULL,
--	[OnLeft] [int] NULL,
--	[OnTotalScore] [int] NULL,
--	[OffNoBowelPrep] [bit] NULL CONSTRAINT [DF_ERS_BowelPreparation_OffNoBowelPrep] DEFAULT 0,
--	[OffFormulation] [varchar](500) NULL,
--	[OffQualityGood] [bit] NULL  CONSTRAINT [DF_ERS_BowelPreparation_OffGood] DEFAULT 0,
--	[OffQualitySatisfactory] [bit] NULL  CONSTRAINT [DF_ERS_BowelPreparation_OffQualitySatisfactory] DEFAULT 0,
--	[OffQualityPoor] [bit] NULL CONSTRAINT [DF_ERS_BowelPreparation_OffQualityPoor] DEFAULT 0,
-- CONSTRAINT [PK_ERS_BowelPreparation] PRIMARY KEY CLUSTERED 
--(
--	[BowelPrepID] ASC
--)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
--) ON [PRIMARY]

--GO

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------174 Create Table ERS_FieldLabels.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_FieldLabels](
	[FieldLabelID] [int] IDENTITY(1,1) NOT NULL,
	[LabelID] [nvarchar](100) NOT NULL,
	[PageID] [int] NULL,
	[FormName] [nvarchar](70) NULL,
	[LabelName] [nvarchar](100) NULL,
	[Override] [nvarchar](100) NULL,
	[Plural] [nvarchar](100) NULL,
	[Hint] [nvarchar](150) NULL,
	[Language] [nvarchar](10) NULL,
	[Colour] [nchar](15) NULL,
	[ProcedureType] [nvarchar](50) NULL,
	[ControlType] [nvarchar](100) NULL,
	[FieldName] [varchar](500) NULL,
	[Required] [bit] NULL,
	[CannotBeSuppressed] [bit] NULL,
	[ErrorMessage] [nvarchar] (500)
 CONSTRAINT [PK_ERS_FieldLabel] PRIMARY KEY CLUSTERED 
(
	[FieldLabelID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO


DECLARE @PageID INT = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_common_patientdetails_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('TitleTextBox',@PageID,NULL,NULL,NULL,NULL,'Patient Title  (text box)',NULL,NULL,'0','RadTextBox','Title','0',NULL,'0')
,('ForenameTextBox',@PageID,NULL,NULL,NULL,NULL,'Patient Forname  (text box)',NULL,NULL,'0','RadTextBox','Forename','1',NULL,'0')
,('SurnameTextBox',@PageID,NULL,NULL,NULL,NULL,'Patient Surname  (text box)',NULL,NULL,'0','RadTextBox','Surname','1',NULL,'0')
,('DobDateInput',@PageID,NULL,NULL,NULL,NULL,'Patient DOB  (date input)',NULL,NULL,'0','RadDateInput','Date of birth','1',NULL,'0')
,('CaseNoteNoTextBox',@PageID,NULL,NULL,NULL,NULL,'Case No  (text box)',NULL,NULL,'0','RadTextBox','Case note no','1',NULL,'0')
,('EthnicOriginComboBox',@PageID,NULL,'',NULL,NULL,'Ethnic Origin (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('GPNameComboBox',@PageID,NULL,'',NULL,NULL,'GP Name (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('lblGPAddress',@PageID,NULL,'Address :',NULL,NULL,'Address : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblGPName',@PageID,NULL,'GP name :',NULL,NULL,'GP name : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientAddress',@PageID,NULL,'Address :',NULL,NULL,'Address : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientAdvocateRequired',@PageID,NULL,'Advocate required :',NULL,NULL,'Advocate required : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientCaseNoteNo',@PageID,NULL,'Case note no :',NULL,NULL,'Case note no : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientDHACode',@PageID,NULL,'DHA Code :',NULL,NULL,'DHA Code : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientDistrict',@PageID,NULL,'District :',NULL,NULL,'District : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientDOB',@PageID,NULL,'Date of birth :',NULL,NULL,'Date of birth : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientDOD',@PageID,NULL,'Date of death :',NULL,NULL,'Date of death : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientEthnicity',@PageID,NULL,'Ethnic Origin :',NULL,NULL,'Ethnic Origin : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientForname',@PageID,NULL,'Forename :',NULL,NULL,'Forename : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientGender',@PageID,NULL,'Gender :',NULL,NULL,'Gender : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientNHSNo',@PageID,NULL,'NHS no :',NULL,NULL,'NHS no : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientPostCode',@PageID,NULL,'Postcode :',NULL,NULL,'Postcode : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientSurname',@PageID,NULL,'Surname :',NULL,NULL,'Surname : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPatientTitle',@PageID,NULL,'Title :',NULL,NULL,'Title : (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('DhaCodeTextBox',@PageID,NULL,'',NULL,NULL,'DHA Code (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('DistrictTextBox',@PageID,NULL,'',NULL,NULL,'District (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('GPAddressTextBox',@PageID,NULL,'',NULL,NULL,'GP Address (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('PatAddressTextBox',@PageID,NULL,'',NULL,NULL,'Patient Address (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('PostCodeTextBox',@PageID,NULL,'',NULL,NULL,'Postcode (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('NhsNoTextBox',@PageID,NULL,'',NULL,NULL,'NHS No (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'DefaultPage')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('Address',@PageID,NULL,'Address:',NULL,NULL,'Address  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('CaseNoteNoTextBox',@PageID,NULL,'CategoryRad',NULL,NULL,'Case Note No  (textBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('CNN',@PageID,NULL,'Case note no ',NULL,NULL,'Case note no  (text)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ConsentRadioButtonList',@PageID,NULL,'',NULL,NULL,'Patient consent  (radio buttons)',NULL,NULL,'0','RadioButtonList','Patient Consent','1',NULL,'0')
,('ConsultantComboBox',@PageID,NULL,'',NULL,NULL,'Referring Consultant  (dropdown)',NULL,NULL,'0','RadComboBox','Consultant','1',NULL,'1')
,('ConsultantEndoscopistsLabel',@PageID,NULL,'Consultant/Endoscopists',NULL,NULL,'Consultant/Endoscopists  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('CreateProcedureButton',@PageID,NULL,'Create Procedure',NULL,NULL,'Create Procedure  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('DOB',@PageID,NULL,'Date of birth:',NULL,NULL,'Date of birth  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Endo1ComboBox',@PageID,NULL,'',NULL,NULL,'Endoscopist 1  (dropdown)',NULL,'#FF0000','0','RadComboBox','Endoscopist 1','1',NULL,'1')
,('Endo1RoleComboBox',@PageID,NULL,'',NULL,NULL,'Endoscopist 1 role  (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('Endo2ComboBox',@PageID,NULL,'',NULL,NULL,'Endoscopist 2  (dropdown)',NULL,'#FF0000','0','RadComboBox',NULL,'0',NULL,'0')
,('Endo2RoleComboBox',@PageID,NULL,'',NULL,NULL,'Endoscopist 2 role  (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('Endoscopist1Label',@PageID,NULL,'Endoscopist 1:',NULL,NULL,'Endoscopist 1  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Endoscopist2Label',@PageID,NULL,'Endoscopist 2:',NULL,NULL,'Endoscopist 2  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ForenameTextBox',@PageID,NULL,'',NULL,NULL,'Forename  (TextBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('GPAddress',@PageID,NULL,'GP Detail:',NULL,NULL,'GP Address (label)',NULL,NULL,'0',NULL,NULL,'0',NULL,'0')
,('GPName',@PageID,NULL,'GP Detail:',NULL,NULL,'GP Name (label)',NULL,NULL,'0',NULL,NULL,'0',NULL,'0')
,('HospitalComboBox',@PageID,NULL,'',NULL,NULL,'Referring Hospital  (dropdown)',NULL,NULL,'0','RadComboBox','Hospital','1',NULL,'1')
,('lblCaseNoteNo',@PageID,NULL,'Case note no.:',NULL,NULL,'Case note no  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblNHSNo',@PageID,NULL,'NHS No:',NULL,NULL,'NHS No  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ListConsultantComboBox',@PageID,NULL,'',NULL,NULL,'List consultant  (dropdown)',NULL,'#FF0000','0','RadComboBox','List consultant','1',NULL,'1')
,('ListConsultantLabel',@PageID,NULL,'List consultant:',NULL,NULL,'List consultant  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ListTypeComboBox',@PageID,NULL,'',NULL,NULL,'List type  (dropdown)',NULL,'#FF0000','0','RadComboBox','List type','1',NULL,'1')
,('ListTypeLabel',@PageID,NULL,'List type:',NULL,NULL,'List type  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('NHSNo',@PageID,NULL,'NHS No:',NULL,NULL,'NHS No  (text)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('NHSNoTextBox',@PageID,NULL,'',NULL,NULL,'NHS No  (TextBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('Nurse1ComboBox',@PageID,NULL,'',NULL,NULL,'Nurse 1  (dropdown)',NULL,'#FF0000','0','RadComboBox',NULL,'0',NULL,'0')
,('Nurse1Label',@PageID,NULL,'Nurse 1:',NULL,NULL,'Nurse 1  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Nurse2ComboBox',@PageID,NULL,'',NULL,NULL,'Nurse 2  (dropdown)',NULL,'#FF0000','0','RadComboBox',NULL,'0',NULL,'0')
,('Nurse2Label',@PageID,NULL,'Nurse 2:',NULL,NULL,'Nurse 2  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Nurse3ComboBox',@PageID,NULL,'',NULL,NULL,'Nurse 3  (dropdown)',NULL,'#FF0000','0','RadComboBox',NULL,'0',NULL,'0')
,('Nurse3Label',@PageID,NULL,'Nurse 3:',NULL,NULL,'Nurse 3  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('PatientConsentLabel',@PageID,NULL,'Has the patient given consent?',NULL,NULL,'Patient consent  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('PatientName',@PageID,NULL,'Patient Name',NULL,NULL,'Patient Name label',NULL,'#FF0000','0','Label',NULL,'0',NULL,'0')
,('PatientPostCode',@PageID,NULL,'Post Code',NULL,NULL,'Post Code  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('PatientTypeRadioButtonList',@PageID,NULL,'',NULL,NULL,'Patient Type  (radio buttons)',NULL,NULL,'0','RadioButtonList','Patient Type','1',NULL,'1')
,('PatStatusRadioButtonList',@PageID,NULL,'',NULL,NULL,'Patient Status',NULL,NULL,'0','RadioButtonList','Patient Status','1',NULL,'1')
,('PrintGPReportCheckBox',@PageID,NULL,'GP Report',NULL,NULL,'GP Report  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('PrintLabRequestCheckBox',@PageID,NULL,'Lab Request Form(s)',NULL,NULL,'Lab request form (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('PrintPatientCopyCheckBox',@PageID,NULL,'Patient Copy',NULL,NULL,'Patient copy  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('PrintPhotosCheckBox',@PageID,NULL,'Photos',NULL,NULL,'Photos  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ProcedureDate',@PageID,NULL,'',NULL,NULL,'Date textbox',NULL,NULL,'0','RadDatePicker',NULL,'0',NULL,'0')
,('ProcTypeRadioButtonList',@PageID,NULL,'',NULL,NULL,'Procedure  (radio buttons)',NULL,NULL,'0','RadioButtonList','Procedure','1',NULL,'1')
,('ProductRadioButtonList',@PageID,NULL,'',NULL,NULL,'Specialty  (radio buttons)',NULL,NULL,'0','RadioButtonList',NULL,'0',NULL,'0')
,('rbSearch_And',@PageID,NULL,'Search - AND',NULL,NULL,'Advanced search  (option)',NULL,NULL,'0','RadioButton',NULL,'0',NULL,'0')
,('rbSearch_Or',@PageID,NULL,'Search - OR',NULL,NULL,'Advanced search  (option)',NULL,NULL,'0','RadioButton',NULL,'0',NULL,'0')
,('rbSurgicalChecklistNo',@PageID,NULL,'Surgical safety - No',NULL,NULL,'Surgical safety  (radio button)',NULL,NULL,'0','RadioButton',NULL,'0',NULL,'0')
,('rbSurgicalChecklistYes',@PageID,NULL,'Surgical safety - Yes',NULL,NULL,'Surgical safety  (radio button)',NULL,NULL,'0','RadioButton',NULL,'0',NULL,'0')
,('RecCreated',@PageID,NULL,'Record created:',NULL,NULL,'Record created  (label)','',NULL,'0','Label',NULL,'0',NULL,'0')
,('ReturnToRadioButtonList',@PageID,NULL,'',NULL,NULL,'After printing, return to..  (radio buttons)',NULL,NULL,'0','RadioButtonList',NULL,'0',NULL,'0')
,('SetDefaultCheckBox',@PageID,NULL,'Set as default staff for this list',NULL,NULL,'Set default  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('SpecialityRadComboBox',@PageID,NULL,'',NULL,NULL,'Speciality  (dropdown)',NULL,NULL,'0','RadComboBox','Speciality','1',NULL,'1')
,('SurnameTextBox',@PageID,NULL,'',NULL,NULL,'Surname  (TextBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('WardComboBox',@PageID,NULL,'',NULL,NULL,'Ward  (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('CategoryRadComboBox',@PageID,NULL,'',NULL,NULL,'Category (dropdown)',NULL,NULL,'0','RadComboBox','Category','1',NULL,'1')
,('FAQTileText',@PageID,NULL,'Knowledge management portal',NULL,NULL,'Knowledge management portal (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ImageDescriptionLabel',@PageID,NULL,'ImageDescription',NULL,NULL,'Image Description (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblAfterDiagram',@PageID,NULL,'lblAfterDiagram',NULL,NULL,'After Diagram (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblBowelPrep',@PageID,NULL,'lblBowelPrep',NULL,NULL,'Bowel Prep (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblHospitalNumber',@PageID,NULL,'Hospital number',NULL,NULL,'Hospital Number (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblLeftRptText',@PageID,NULL,'lblLeftRptText',NULL,NULL,'Left Hand Report Header (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblLoggedOn',@PageID,NULL,'09/08/2018 10:11',NULL,NULL,'Logged On Date/Time (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblProcTitle',@PageID,NULL,'lblProcTitle',NULL,NULL,'Procedure Title (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblRightRptText',@PageID,NULL,'lblRightRptText',NULL,NULL,'Right Hand Report Header (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblWelcomeMessage',@PageID,NULL,'Welcome  Administrator',NULL,NULL,'Welcome  Administrator (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('LicenceExpiryLabel',@PageID,NULL,'LicenceExpiry',NULL,NULL,'Licene Expiry (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('LicenceLabel',@PageID,NULL,'Over 20 years of market leading endoscopy software from <br /> HD Clinical Ltd',NULL,NULL,'Over 20 years of market leading endoscopy software from <br /> HD Clinical Ltd (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('rblEmergencyNedCatOption',@PageID,NULL,'1',NULL,NULL,'Emergency NED Category Option (radio buttons)',NULL,NULL,'0','RadioButtonList',NULL,'0',NULL,'0')
,('rblOpenAccessCatOption',@PageID,NULL,'1',NULL,NULL,'Open Access Category Option (radio buttons)',NULL,NULL,'0','RadioButtonList',NULL,'0',NULL,'0')
,('SkinChooser',@PageID,NULL,'SkinChooser',NULL,NULL,'0',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('lblCNN',@PageID,NULL,'',NULL,NULL,'CNN (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,'Add New Item (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('AddNewWardRadTextBox',@PageID,NULL,'',NULL,NULL,'Add New Ward (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('txtRecordLimit',@PageID,NULL,'10',NULL,NULL,'10 (radnumerictextbox)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('lblDatabaseName',@PageID,NULL,'Stoke_Gastro_Live',NULL,NULL,'Stoke_Gastro_Live (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPermissions',@PageID,NULL,'Read Only',NULL,NULL,'Read Only (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblVersion',@PageID,NULL,'1.0.8.4',NULL,NULL,'1.0.8.4 (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('chkElectiveNED',@PageID,NULL,'On waiting list',NULL,NULL,'On waiting list (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ImagePortLookup',@PageID,NULL,'Image Port',NULL,NULL,'Image Port (textbox)',NULL,NULL,'0','RadTextBox','Image port required','1','Image port required','1')
,('ImagePortLabel',@PageID,NULL,NULL,NULL,NULL,'Image Port (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_common_photos_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('HeaderLabel',@PageID,NULL,'Attach photo(s) to the Report',NULL,NULL,'Attach photo(s) to the Report (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ImageDescriptionLabel',@PageID,NULL,'Image 1 of 3',NULL,NULL,'Image 1 of 3 (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ModifiedPhotoLabel',@PageID,NULL,'* This is a modified photo',NULL,NULL,'* This is a modified photo (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('SiteComboBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_options_usersettings_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('PasswordRulesLabel',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ServerErrorLabel',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ConfirmPasswordTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('NewPasswordTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('OldPasswordTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_options_editdrugs_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AddNewTitleRadTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('BronchoscopyCheckBox',@PageID,NULL,'Bronchoscopy',NULL,NULL,'Bronchoscopy (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ChkDoseNotApplicable',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ColonoscopyCheckBox',@PageID,NULL,'Colonoscopy/sigmoidoscopy',NULL,NULL,'Colonoscopy/sigmoidoscopy (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('DeafaultDoseRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('DeliveryDropDownList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('DoseIncrementRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('DrugNameTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','TextBox','Drug name','1','Drug name required','1')
,('EnteroscopyAntegradeCheckBox',@PageID,NULL,'Enteroscopy antegrade',NULL,NULL,'Enteroscopy antegrade (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('EnteroscopyRetrograde',@PageID,NULL,'Enteroscopy retrograde',NULL,NULL,'Enteroscopy retrograde (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ERCPCheckBox',@PageID,NULL,'ERCP',NULL,NULL,'ERCP (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('EUSCheckBox',@PageID,NULL,'EUS',NULL,NULL,'EUS (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('GastroscopyCheckBox',@PageID,NULL,'Gastroscopy',NULL,NULL,'Gastroscopy (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('HeadingLabel',@PageID,NULL,'Add Premedication Drug',NULL,NULL,'Add Premedication Drug (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('HPBCheckBox',@PageID,NULL,'HPB',NULL,NULL,'HPB (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('lblno',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ReversingAgentCheckBox',@PageID,NULL,'Is a reversing agent',NULL,NULL,'Is a reversing agent (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('UnitsDropDown',@PageID,NULL,'Units',NULL,NULL,'units (dropdown list)',NULL,NULL,'0','RadDropDownList','Drugs','1','Units required','1')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_options_usermaintenance_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('TitleTextBox',@PageID,NULL,'TitleTextBox',NULL,NULL,'Title (text box)',NULL,NULL,'0','RadTextBox','Title','1',NULL,'0')
,('TitleLabel',@PageID,NULL,'TitleLabel',NULL,NULL,'Title (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('UserIDLabel',@PageID,NULL,'UserIDLabel',NULL,NULL,'UserID (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('UserNameTextBox',@PageID,NULL,'UserNameTextBox',NULL,NULL,'UserName (text box)',NULL,NULL,'0','RadTextBox','User Id','1',NULL,'1')
,('ForenameLabel',@PageID,NULL,'ForenameLabel',NULL,NULL,'Forename (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ForenameTextBox',@PageID,NULL,'ForenameTextBox',NULL,NULL,'Forename (text box)',NULL,NULL,'0','RadTextBox','Forename','0',NULL,'0')
,('SurnameLabel',@PageID,NULL,'SurnameLabel',NULL,NULL,'Surname (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('SurnameTextBox',@PageID,NULL,'SurnameTextBox',NULL,NULL,'Surname (text box)',NULL,NULL,'0','RadTextBox','Surname','0',NULL,'0')
,('RolesLabel',@PageID,NULL,'RolesLabel',NULL,NULL,'Role(s) (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('PermissionsDropDownList',@PageID,NULL,'PermissionsDropDownList',NULL,NULL,'Roles (dropdown)',NULL,NULL,'0','RadComboBox','Roles','1',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_options_edituser_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('TitleLabel',@PageID,NULL,'TitleLabel',NULL,NULL,'Title (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('TitleTextBox',@PageID,NULL,'TitleTextBox',NULL,NULL,'Title (textbox)',NULL,NULL,'0','RadTextBox','Title','1',NULL,'1')
,('ForenameLabel',@PageID,NULL,'ForenameLabel',NULL,NULL,'Forename: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ForenameTextBox',@PageID,NULL,'ForenameTextBox',NULL,NULL,'Forename (textbox)',NULL,NULL,'0','RadTextBox','Forename','1',NULL,'1')
,('SurnameLabel',@PageID,NULL,'SurnameLabel',NULL,NULL,'Surname (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('SurnameTextBox',@PageID,NULL,'SurnameTextBox',NULL,NULL,'Surname (textbox)',NULL,NULL,'0','RadTextBox','Surname','1',NULL,'1')
,('UserIDLabel',@PageID,NULL,'UserIDLabel',NULL,NULL,'User ID: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('UserNameTextBox',@PageID,NULL,'UserNameTextBox',NULL,NULL,'User ID: (textbox)',NULL,NULL,'0','RadTextBox','User ID','1',NULL,'1')
,('ExpiresOnLabel',@PageID,NULL,'ExpiresOnLabel',NULL,NULL,'Expires On: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ExpiresOnDatePicker',@PageID,NULL,'ExpiresOnDatePicker',NULL,NULL,'Expires On (textbox)',NULL,NULL,'0','RadDatePicker',NULL,'0',NULL,'0')
,('RolesLabel',@PageID,NULL,'RolesLabel',NULL,NULL,'Role(s): (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('PermissionsDropDownList',@PageID,NULL,'PermissionsDropDownList',NULL,NULL,'Roles (dropdown)',NULL,NULL,'0','RadComboBox','Roles','1',NULL,'1')
,('SuppressedCheckBox',@PageID,NULL,'SuppressedCheckBox',NULL,NULL,'Suppressed',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('StaffTitleLabel',@PageID,NULL,'StaffTitleLabel',NULL,NULL,'Staff Title (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('TitleRadDropDownList',@PageID,NULL,'TitleRadDropDownList',NULL,NULL,'Staff Title (dropdown)',NULL,NULL,'0','RadDropDowList',NULL,'0',NULL,'0')
,('QualificationsLabel',@PageID,NULL,'QualificationsLabel',NULL,NULL,'Qualifications (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('QualificationsRadTextBox',@PageID,NULL,'QualificationsRadTextBox',NULL,NULL,'Qualifications (textbox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('CanAppearAsLabel',@PageID,NULL,'CanAppearAsLabel',NULL,NULL,'Can Appear As: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ListConsultantCheckBox',@PageID,NULL,'ListConsultantCheckBox',NULL,NULL,'List Consultant (cehckbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('AssistantTraineeCheckBox',@PageID,NULL,'AssistantTraineeCheckBox',NULL,NULL,'Assistant/Trainee (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('Endoscopist1',@PageID,NULL,'Endoscopist1',NULL,NULL,'Endoscopist 1 (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('Nurse1CheckBox',@PageID,NULL,'Nurse1CheckBox',NULL,NULL,'Nurse 1 (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('Endoscopist2',@PageID,NULL,'Endoscopist2',NULL,NULL,'Endoscopist 2 (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('Nurse2CheckBox',@PageID,NULL,'Nurse2CheckBox',NULL,NULL,'Nurse 2 (label)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ShowHelpToolTipsLabel',@PageID,NULL,'ShowHelpToolTipsLabel',NULL,NULL,'Show help tooltips: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ShowTooltipsCheckBox',@PageID,NULL,'ShowTooltipsCheckBox',NULL,NULL,'Show help tooltips (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_patientprocedure_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AddSiteButton',@PageID,NULL,'Add Site',NULL,NULL,'Add Site  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('cboInstrument1',@PageID,NULL,'',NULL,NULL,'1st Scope  (dropdown)',NULL,'#FF0000','0','RadComboBox','Instruments','1',NULL,'0')
,('cboInstrument2',@PageID,NULL,'',NULL,NULL,'2nd Scope  (dropdown)',NULL,'#FF0000','0','RadComboBox','Instruments','1',NULL,'0')
,('cmd18w',@PageID,NULL,'18w',NULL,NULL,'18w  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('cmdNormalProc',@PageID,NULL,'Normal procedure',NULL,NULL,'Normal procedure  (button)',NULL,'#FF66FF','3','RadButton',NULL,'0',NULL,'0')
,('cmdExtLim',@PageID,NULL,'Extent of Intubation',NULL,NULL,'Extent of Intubation  (button)',NULL,'#FF33FF','0','RadButton',NULL,'0',NULL,'0')
,('cmdFollowUp',@PageID,NULL,'Follow up',NULL,NULL,'Follow up  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('cmdIndications',@PageID,NULL,'Indications',NULL,NULL,'Indications  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('cmdMainScreen',@PageID,NULL,'Return to home page',NULL,NULL,'Return to home page  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('cmdPremed',@PageID,NULL,'Premed',NULL,NULL,'Premed  (button)',NULL,'#FF33FF','3','RadButton',NULL,'0',NULL,'0')
,('cmdPrint',@PageID,NULL,'Print',NULL,NULL,'Print  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('cmdQA',@PageID,NULL,'QA',NULL,NULL,'QA  (button)',NULL,'#FF33FF','0','RadButton',NULL,'0',NULL,'0')
,('cmdRx',@PageID,NULL,'Rx',NULL,NULL,'Rx  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('cmdVisualisation',@PageID,NULL,'Visualisation',NULL,NULL,'Visualisation  (button)',NULL,'#FF33FF','0','RadButton',NULL,'0',NULL,'0')
,('DrugsButton',@PageID,NULL,'Drugs',NULL,NULL,'Drugs  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('Endo2ComboBox',@PageID,NULL,NULL,NULL,NULL,'Edit Staff : Endoscopist 2  (dropdown)',NULL,'#FF0000','0',NULL,NULL,'0',NULL,'0')
,('Flip180Button',@PageID,NULL,'Flip 180°',NULL,NULL,'Flip 180°  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('Label1',@PageID,NULL,'1st Scope',NULL,NULL,'1st Scopev (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Label2',@PageID,NULL,'2nd Scope',NULL,NULL,'2nd Scope  (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ListConsultantComboBox',@PageID,NULL,NULL,NULL,NULL,'Edit Staff : List Consultant  (dropdown)',NULL,'#FF0000','0','RadComboBox',NULL,'0',NULL,'0')
,('MarkAreaButton',@PageID,NULL,'Mark Area',NULL,NULL,'Mark Area  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('Nurse1ComboBox',@PageID,NULL,NULL,NULL,NULL,'Edit Staff : Nurse 1  (dropdown)',NULL,'#FF0000','0',NULL,NULL,'0',NULL,'0')
,('Nurse2ComboBox',@PageID,NULL,NULL,NULL,NULL,'Edit Staff : Nurse 2  (dropdown)',NULL,'#FF0000','0',NULL,NULL,'0',NULL,'0')
,('Nurse3ComboBox',@PageID,NULL,NULL,NULL,NULL,'Edit Staff : Nurse 3  (dropdown)',NULL,'#FF0000','0',NULL,NULL,'0',NULL,'0')
,('PapillaryAnatomyButton',@PageID,NULL,'Papillary anatomy',NULL,NULL,'Papillary anatomy  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('PathologyButton',@PageID,NULL,'Pathology',NULL,NULL,'Pathology  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('PatientName',@PageID,NULL,'Patient Name',NULL,NULL,'Patient Name label',NULL,'#FF0000','0','Label',NULL,'0',NULL,'0')
,('PhotosButton',@PageID,NULL,'Photos',NULL,NULL,'Photos  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('RemoveSiteButton',@PageID,NULL,'Remove',NULL,NULL,'Remove Site (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('ResectedColonButton',@PageID,NULL,'Resected colon',NULL,NULL,'Resected colon  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('ShowRegionsButton',@PageID,NULL,'Regions',NULL,NULL,'Regions  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('AccessMethodComboBox',@PageID,NULL,'AccessMethodComboBox',NULL,NULL,'AccessMethod (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('AccessMethodLabel',@PageID,NULL,'Access Via',NULL,NULL,'Access Via (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('EndoscopistsLabel',@PageID,NULL,'Endoscopist',NULL,NULL,'Endoscopist (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Label4',@PageID,NULL,'Manometry:',NULL,NULL,'Manometry: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblDeleteMessage',@PageID,NULL,'lblDeleteMessage',NULL,NULL,'Report Incomplete - Delete report? message (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblFirstERCP',@PageID,NULL,'lblFirstERCP',NULL,NULL,'First ERCP Message (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblPreviousGastricUlcer',@PageID,NULL,'lblPreviousGastricUlcer',NULL,NULL,'Previous Gastric Ulcer Message (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('lblProcDate',@PageID,NULL,'lblPreviousGastricUlcer',NULL,NULL,'Procedure Date (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('NodeNameLabel',@PageID,NULL,'NodeNameLabel',NULL,NULL,'Node Name (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('NodeSummaryLabel',@PageID,NULL,'NodeSummaryLabel',NULL,NULL,'Node Summary (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('NursesLabel',@PageID,NULL,'Not Specified',NULL,NULL,'Not Specified (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('PositionLabel',@PageID,NULL,'PositionLabel',NULL,NULL,'Position (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('rbScopeGuide',@PageID,NULL,'rbScopeGuide',NULL,NULL,'Scope Guide Yes|No Options (radio button)',NULL,NULL,'0','RadioButtonList',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,'Add New Item (button)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('ByDistanceAtTextBox',@PageID,NULL,'',NULL,NULL,'Distance From Insertion Point (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('ByDistanceToTextBox',@PageID,NULL,'',NULL,NULL,'Distance To Insertion Point (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('BiliaryCheckBox',@PageID,NULL,'biliary',NULL,NULL,'biliary (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('CancelledProcCheckBox',@PageID,NULL,'<b>Transnasal endoscopy</b>',NULL,NULL,'<b>Transnasal endoscopy</b> (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('CNN',@PageID,NULL,'XXC01719',NULL,NULL,'XXC01719 (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('DOB',@PageID,NULL,'16/04/2011',NULL,NULL,'16/04/2011 (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Endo1RoleComboBox',@PageID,NULL,'Independent (no trainer)',NULL,NULL,'Independent (no trainer) (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('Endo2RoleComboBox',@PageID,NULL,'Independent (no trainer)',NULL,NULL,'Independent (no trainer) (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('Endoscopist1Label',@PageID,NULL,'TrainER:',NULL,NULL,'TrainER: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Endoscopist2Label',@PageID,NULL,'TrainEE:',NULL,NULL,'TrainEE: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('NHSNo',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Nurse1Label',@PageID,NULL,'Nurse 1:',NULL,NULL,'Nurse 1: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Nurse2Label',@PageID,NULL,'Nurse 2:',NULL,NULL,'Nurse 2: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('Nurse3Label',@PageID,NULL,'Nurse 3:',NULL,NULL,'Nurse 3: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('PancreasDivisumCheckBox',@PageID,NULL,'Pancreas divisum present',NULL,NULL,'Pancreas divisum present (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('PancreaticCheckBox',@PageID,NULL,'pancreatic',NULL,NULL,'pancreatic (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('RecCreated',@PageID,NULL,'06/08/2018',NULL,NULL,'06/08/2018 (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('RecCreated',@PageID,NULL,'18/12/2015',NULL,NULL,'18/12/2015 (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('TransnasalCheckBox',@PageID,NULL,'<b>Procedure not carried out</b>',NULL,NULL,'<b>Procedure not carried out</b> (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_otherdata_ogd_indications_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AbdominalPainCheckBox',@PageID,NULL,'Abdominal pain',NULL,NULL,'Abdominal pain  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('AbnormalCapsuleStudyCheckBox',@PageID,NULL,'Abnormal capsule study',NULL,NULL,'Abnormal capsule study  (checkbox)',NULL,NULL,'8','CheckBox',NULL,'0',NULL,'0')
,('AbnormalityOnBariumCheckBox',@PageID,NULL,'Abnormality on barium',NULL,NULL,'Abnormality on barium  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('AbnormalMRICheckBox',@PageID,NULL,'Abnormal MRI',NULL,NULL,'Abnormal MRI  (checkbox)',NULL,NULL,'8','CheckBox',NULL,'0',NULL,'0')
,('AddButton',@PageID,NULL,'Add',NULL,NULL,'Add  (button)',NULL,NULL,'3,4,5,1,7,8','RadButton',NULL,'0',NULL,'0')
,('AllergyDescTextBox',@PageID,NULL,NULL,'','','Allergy Description (TextBox)',NULL,'','3,4,5,1,7,8','RadTextBox','Allergy Description','0',NULL,'1')
,('AllergyNoneRadioButton',@PageID,NULL,'None',NULL,NULL,'Allergy none (radio button)',NULL,NULL,'3,4,5,1,7,8','RadioButton',NULL,'0',NULL,'0')
,('AllergyUnknownRadioButton',@PageID,NULL,'Unknown',NULL,NULL,'Allergy unknown (radio button)',NULL,NULL,'3,4,5,1,7,8','RadioButton',NULL,'0',NULL,'0')
,('AllergyYesRadioButton',@PageID,NULL,'Yes',NULL,NULL,'Allergy yes (radio button)',NULL,NULL,'3,4,5,1,7,8','RadioButton',NULL,'0',NULL,'0')
,('AmpullaryMassCheckBox',@PageID,NULL,'ampullary mass',NULL,NULL,'ampullary mass  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('AnaemiaCheckBox',@PageID,NULL,'Anaemia',NULL,NULL,'Anaemia  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('AnaemiaTypeComboBox',@PageID,NULL,NULL,NULL,NULL,'AnaemiaType  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('AnginaCheckBox',@PageID,NULL,'Angina',NULL,NULL,'Angina  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('AsaStatusRadioButtonList',@PageID,NULL,NULL,NULL,NULL,'radio buttons',NULL,NULL,'1,2,3,4,5,6,7,8,9','RadioButtonList',NULL,'0',NULL,'0')
,('AsthmaCheckBox',@PageID,NULL,'Asthma',NULL,NULL,'Asthma  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('BalloonInsertionCheckBox',@PageID,NULL,'Balloon insertion',NULL,NULL,'Balloon insertion  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('BalloonRemovalCheckBox',@PageID,NULL,'Balloon removal',NULL,NULL,'Balloon removal  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('BariatricPreAssessmentCheckBox',@PageID,NULL,'Bariatric pre-assessment',NULL,NULL,'Bariatric pre-assessment  (checkbox)',NULL,NULL,'1','CheckBox',NULL,'0',NULL,'0')
,('BarrettsOesophagusCheckBox',@PageID,NULL,'Barrett''s oesophagus',NULL,NULL,'Barrett''s oesophagus  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('BiliaryLeakCheckBox',@PageID,NULL,'biliary leak',NULL,NULL,'biliary leak  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('BreathCheckBox',@PageID,NULL,'Breath',NULL,NULL,'Breath  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('BreathResultComboBox',@PageID,NULL,NULL,NULL,NULL,'BreathResult  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('CancelButton',@PageID,NULL,'Cancel',NULL,NULL,'Cancel  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('CancerComboBox',@PageID,NULL,NULL,NULL,NULL,'Cancer  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('ChestPainCheckBox',@PageID,NULL,'Chest pain',NULL,NULL,'Chest pain  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('ChronicLiverCheckBox',@PageID,NULL,'Chronic liver disease ?varices',NULL,NULL,'Chronic liver disease ?varices  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('ClinicallyImportantCommentsTextBox',@PageID,NULL,NULL,NULL,NULL,'Clinically Important Comments (TextBox)',NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('CloseButtn',@PageID,NULL,'Close',NULL,NULL,'Close  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('CloseWhoPickerButton',@PageID,NULL,'Close',NULL,NULL,'Close  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('CoeliacDiseaseCheckBox',@PageID,NULL,'Coeliac disease',NULL,NULL,'Coeliac disease  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CoffeeGroundsVomitCheckBox',@PageID,NULL,'Coffee grounds vomit',NULL,NULL,'Coffee grounds vomit  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('ColonAbdominalMassCheckBox',@PageID,NULL,'Abdominal mass',NULL,NULL,'Abdominal mass  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonAbdominalPainCheckBox',@PageID,NULL,'Abdominal pain',NULL,NULL,'Abdominal pain  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonAbnormalBariumEnemaCheckBox',@PageID,NULL,'Abnormal barium enema',NULL,NULL,'Abnormal barium enema  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonAbnormalCTScanCheckBox',@PageID,NULL,'Abnormal CT scan',NULL,NULL,'Abnormal CT scan  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonAbnormalSigmoidoscopyCheckBox',@PageID,NULL,'Abnormal sigmoidoscopy',NULL,NULL,'Abnormal sigmoidoscopy  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonAdditionalRadTextBox',@PageID,NULL,NULL,NULL,NULL,'Colon Additional (textbox)',NULL,NULL,'3,4,5','RadTextBox',NULL,'0',NULL,'1')
,('ColonAlterBowelRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ColonAlterBowel  (dropdown)',NULL,NULL,'3,4,5','RadComboBox',NULL,'0',NULL,'0')
,('ColonAnaemiaRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ColonAnaemia  (dropdown)',NULL,NULL,'3,4,5','RadComboBox',NULL,'0',NULL,'0')
,('ColonAnamemiaCheckBox',@PageID,NULL,'Anaemia',NULL,NULL,'Anaemia  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonAssessmentCheckBox',@PageID,NULL,'Assessment',NULL,NULL,'Assessment  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonBowelCancerCheckBox',@PageID,NULL,'bowel cancer screening programme',NULL,NULL,'bowel cancer screening programme  (checkbox)',NULL,NULL,'3,4','CheckBox',NULL,'0',NULL,'0')
,('ColonCancerRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ColonCancer  (dropdown)',NULL,NULL,'3,4,5','RadComboBox',NULL,'0',NULL,'0')
,('ColonCarcinomaCheckBox',@PageID,NULL,'Carcinoma',NULL,NULL,'Carcinoma  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonColonicObstructionCheckBox',@PageID,NULL,'Colonic obstruction',NULL,NULL,'Colonic obstruction  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonCrohnRadioButton',@PageID,NULL,'Crohn''s Disease',NULL,NULL,'radio buttons',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('ColonDysplasiaCheckBox',@PageID,NULL,'Dysplasia',NULL,NULL,'Dysplasia  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonFamilialRadioButton',@PageID,NULL,'familial adenomatous polyposis',NULL,NULL,'radio buttons',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('ColonFamilyCheckBox',@PageID,NULL,'Family history taken/known',NULL,NULL,'Family history taken/known  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonFOBTCheckBox',@PageID,NULL,'FOBT',NULL,NULL,'FOBT  (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('ColonFollowUpAddRadButton',@PageID,NULL,'Add',NULL,NULL,'Add  (button)',NULL,NULL,'3,4,5','RadButton',NULL,'0',NULL,'0')
,('ColonFollowUpLeftRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ColonFollowUpLeft  (dropdown)',NULL,NULL,'3,4,5','RadComboBox',NULL,'0',NULL,'0')
,('ColonFollowUpRadTextBox',@PageID,NULL,NULL,NULL,NULL,'Colon FollowUp (textbox)',NULL,NULL,'3,4,5','RadTextBox',NULL,'0',NULL,'0')
,('ColonFollowUpRightRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ColonFollowUpRight  (dropdown)',NULL,NULL,'3,4,5','RadComboBox',NULL,'0',NULL,'0')
,('ColonHereditoryRadioButton',@PageID,NULL,'hereditary non-polyposis colorectal cancer(HNPCC)',NULL,NULL,'hereditary non-polyposis colorectal cancer(HNPCC) (radio button)',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('ColonHistoryRadioButton',@PageID,NULL,'family history of colorectal cancer(unspecified)',NULL,NULL,'radio buttons',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('ColonHnpccRadioButton',@PageID,NULL,'HNPCC gene carrier',NULL,NULL,'radio buttons',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('ColonImportantCommentsRadTextBox',@PageID,NULL,NULL,NULL,NULL,'Colon Important Comments (textbox)',NULL,NULL,'3,4,5','RadTextBox',NULL,'0',NULL,'0')
,('ColonNoRiskRadioButton',@PageID,NULL,'no risk',NULL,NULL,'no risk (radio button)',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('ColonOtherRadTextBox',@PageID,NULL,NULL,NULL,NULL,'Colon Other (textbox)',NULL,NULL,'3,4,5','RadTextBox',NULL,'0',NULL,'0')
,('ColonPolypsCheckBox',@PageID,NULL,'Polyps',NULL,NULL,'Polyps  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonRectalRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ColonRectal  (dropdown)',NULL,NULL,'3,4,5','RadComboBox',NULL,'0',NULL,'0')
,('ColonRiskRadioButton',@PageID,NULL,'risk unknown',NULL,NULL,'Risk Unknown (radio button)',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('ColonScreeningCheckBox',@PageID,NULL,'screening colonoscopy(family history)',NULL,NULL,'screening colonoscopy (family history) (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('ColonStentInsertionCheckBox',@PageID,NULL,'Stent insertion',NULL,NULL,'Stent insertion  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonStentRemovalCheckBox',@PageID,NULL,'Stent removal',NULL,NULL,'Stent removal  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonStentReplacementCheckBox',@PageID,NULL,'Stent replacement',NULL,NULL,'Stent replacement  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonSurveillanceCheckBox',@PageID,NULL,'Surveillance',NULL,NULL,'Surveillance  (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonUlcerativeRadioButton',@PageID,NULL,'Ulcerative Colitis',NULL,NULL,'ulcerative colitis (radio button)',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('ColonUnspecifiedRadioButton',@PageID,NULL,'unspecified',NULL,NULL,'unspecified (radio button)',NULL,NULL,'3,4,5','RadioButton',NULL,'0',NULL,'1')
,('CoMorbidityNoneCheckbox',@PageID,NULL,'None',NULL,NULL,'None  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('CopdCheckBox',@PageID,NULL,'COPD',NULL,NULL,'COPD  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('CTCheckBox',@PageID,NULL,'CT',NULL,NULL,'CT  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('cUrgentCheckBox',@PageID,NULL,'Urgent two week referral',NULL,NULL,'Urgent two week referral  (checkbox)',NULL,'#FF0000','3,4,5','CheckBox',NULL,'0',NULL,'0')
,('cWhoPerformanceStatusTextBox',@PageID,NULL,NULL,NULL,NULL,'cWHO Performance Status (textbox)',NULL,NULL,'3,4,5','RadTextBox',NULL,'0',NULL,'0')
,('DamagingDrugsComboBox',@PageID,NULL,'Damaging Drugs',NULL,NULL,'Damaging Drugs (dropdown)',NULL,NULL,'3,4,5,1,7,8','RadComboBox',NULL,'0',NULL,'0')
,('DamagingDrugsMultiTextBox',@PageID,NULL,'Damaging Drugs',NULL,NULL,'Damaging Drugs (textbox)',NULL,NULL,'3,4,5,1,7,8','RadTextBox',NULL,'0',NULL,'0')
,('DiabetesMellitusCheckBox',@PageID,NULL,'Diabetes Mellitus',NULL,NULL,'Diabetes Mellitus  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('DiabetesMellitusTypeComboBox',@PageID,NULL,NULL,NULL,NULL,'DiabetesMellitusType  (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9','RadComboBox',NULL,'0',NULL,'1')
,('DiseaseFollowUpProcComboBox',@PageID,NULL,NULL,NULL,NULL,'DiseaseFollowUpProc  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('DiseaseFollowUpProcPeriodComboBox',@PageID,NULL,NULL,NULL,NULL,'DiseaseFollowUpProcPeriod  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('DoubleBalloonEnteroscopyCheckBox',@PageID,NULL,'Double balloon enteroscopy (push-pull enteroscopy)',NULL,NULL,'Double balloon enteroscopy  (push-pull enteroscopy) (checkbox)',NULL,NULL,'8','CheckBox',NULL,'0',NULL,'0')
,('DrugTrialCheckBox',@PageID,NULL,'Drug trial',NULL,NULL,'Drug trial  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DyspepsiaAtypicalCheckBox',@PageID,NULL,'Dyspepsia - atypical',NULL,NULL,'Dyspepsia  (atypical  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DyspepsiaCheckBox',@PageID,NULL,'Dyspepsia',NULL,NULL,'Dyspepsia  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DyspepsiaUlcerTypeCheckBox',@PageID,NULL,'Dyspepsia - ulcer type',NULL,NULL,'Dyspepsia  (ulcer type  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DysphagiaCheckBox',@PageID,NULL,'Dysphagia',NULL,NULL,'Dysphagia  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DysplasiaCheckBox',@PageID,NULL,'Dysplasia',NULL,NULL,'Dysplasia  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('EpilepsyCheckBox',@PageID,NULL,'Epilepsy',NULL,NULL,'Epilepsy  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('EPlanCanunulateCheckBox',@PageID,NULL,'Canunulate and opacify the biliary tree',NULL,NULL,'Canunulate and opacify the biliary tree  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanCombinedProcedureCheckBox',@PageID,NULL,'Combined procedure(Rendezvous)',NULL,NULL,'Combined procedure (Rendezvous) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EPlanEndoscopicCystCheckBox',@PageID,NULL,'Endoscopic cyst puncture',NULL,NULL,'Endoscopic cyst puncture  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanManometryCheckBox',@PageID,NULL,'Manometry',NULL,NULL,'Manometry  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanNasoPancreaticCheckBox',@PageID,NULL,'Naso-pancreatic/biliary drains',NULL,NULL,'Naso-pancreatic/biliary drains  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanOthersTextBox',@PageID,NULL,NULL,NULL,NULL,'Eplan Others (textbox)',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('EplanPapillotomyCheckBox',@PageID,NULL,'Papillotomy/sphincterotomy',NULL,NULL,'Papillotomy/sphincterotomy  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanStentInsertionCheckBox',@PageID,NULL,'Stent insertion',NULL,NULL,'Stent insertion  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanStentremovalCheckBox',@PageID,NULL,'Stent removal',NULL,NULL,'Stent removal  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanStentReplacementCheckBox',@PageID,NULL,'Stent replacement',NULL,NULL,'Stent replacement  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanStoneRemovalCheckBox',@PageID,NULL,'Stone removal',NULL,NULL,'Stone removal  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanStrictureDilatationCheckBox',@PageID,NULL,'Stricture dilatation',NULL,NULL,'Stricture dilatation  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSAbdominalPainCheckBox',@PageID,NULL,'Abdominal pain',NULL,NULL,'Abdominal pain  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSAbnormalEnzymesCheckBox',@PageID,NULL,'Abnormal enzymes',NULL,NULL,'Abnormal enzymes  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSAcutePancreatitisAcuteCheckBox',@PageID,NULL,'Acute pancreatitis',NULL,NULL,'Acute pancreatitis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSAcutePancreatitisCheckBox',@PageID,NULL,'acute pancreatitis',NULL,NULL,'acute pancreatitis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSBileDuctCheckBox',@PageID,NULL,'Bile duct stone(s)',NULL,NULL,'Bile duct stone(s) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSBileDuctInjuryCheckBox',@PageID,NULL,'Bile duct injury',NULL,NULL,'Bile duct injury  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSBiliaryLeakCheckBox',@PageID,NULL,'Biliary leak',NULL,NULL,'Biliary leak  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSBiliaryStrictureCheckBox',@PageID,NULL,'Biliary stricture',NULL,NULL,'Biliary stricture  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSCancerRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ERSCancer  (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'1')
,('ERSCarriedOutRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ERSCarriedOut  (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('ERSCholangitisCheckBox',@PageID,NULL,'Cholangitis',NULL,NULL,'Cholangitis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSChronicPancreatisisCheckBox',@PageID,NULL,'Chronic pancreatisis',NULL,NULL,'Chronic pancreatisis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSChronicPancreatitisCheckBox',@PageID,NULL,'chronic pancreatitis',NULL,NULL,'chronic pancreatitis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSDilatedDuctsCheckBox',@PageID,NULL,'dilated bile ducts',NULL,NULL,'dilated bile ducts  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSDilatedDuctType1',@PageID,NULL,'extrahepatic',NULL,NULL,'extrahepatic  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'1')
,('ERSDilatedDuctType2',@PageID,NULL,'intrahepatic',NULL,NULL,'intrahepatic  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'1')
,('ERSDilatedPancreaticCheckBox',@PageID,NULL,'dilated pancreatic duct',NULL,NULL,'dilated pancreatic duct  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSFluidCollectionCheckBox',@PageID,NULL,'fluid collection',NULL,NULL,'fluid collection  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSGallBladderCheckBox',@PageID,NULL,'gall bladder stones',NULL,NULL,'gall bladder stones  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSGallBladderMassCheckBox',@PageID,NULL,'gall bladder mass',NULL,NULL,'gall bladder mass  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSGallBladderPolypCheckBox',@PageID,NULL,'gall bladder polyp',NULL,NULL,'gall bladder polyp  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSHepaticMassCheckBox',@PageID,NULL,'hepatic mass',NULL,NULL,'hepatic mass  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSImgOthersTextBox',@PageID,NULL,NULL,NULL,NULL,'Image Others (textbox)',NULL,NULL,'2,7','RadTextBox','Image Others','0',NULL,'1')
,('ERSImportantCommentsRadTextBox',@PageID,NULL,NULL,NULL,NULL,'Important Comments (textbox)',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('ERSJaundiceCheckBox',@PageID,NULL,'Jaundice',NULL,NULL,'Jaundice  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSMalignancyCheckBox',@PageID,NULL,'Malignancy',NULL,NULL,'Malignancy  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSNormalCheckBox',@PageID,NULL,'Normal',NULL,NULL,'Normal  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSObstructedCBDCheckBox',@PageID,NULL,'Obstructed CBD/CHD',NULL,NULL,'Obstructed CBD/CHD  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSObstructedCheckBox',@PageID,NULL,'Obstructed CBD/CHD',NULL,NULL,'Obstructed CBD/CHD  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSOpenAccessCheckBox',@PageID,NULL,'Open access',NULL,NULL,'Open access  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSOtherRadTextBox',@PageID,NULL,NULL,NULL,NULL,'Other (textbox)',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('ERSPancreaticMassCheckBox',@PageID,NULL,'pancreatic mass',NULL,NULL,'pancreatic mass  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSPancreaticPseudocystCheckBox',@PageID,NULL,'Pancreatic pseudocyst',NULL,NULL,'Pancreatic pseudocyst  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSPancreatobiliaryPainCheckBox',@PageID,NULL,'Pancreatobiliary pain',NULL,NULL,'Pancreatobiliary pain  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSPapillaryDysfunctionCheckBox',@PageID,NULL,'Papillary dysfunction',NULL,NULL,'Papillary dysfunction  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSPrelaparoscopicCheckBox',@PageID,NULL,'Pre-laparoscopic cholecystectomy',NULL,NULL,'Pre-laparoscopic cholecystectomy  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSPreviousRadComboBox',@PageID,NULL,NULL,NULL,NULL,'ERSPrevious  (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('ERSPriSclerosingCholCheckBox',@PageID,NULL,'Primary sclerosing cholangitis',NULL,NULL,'Primary sclerosing cholangitis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSPurulentCholangitisCheckBox',@PageID,NULL,'Purulent cholangitis',NULL,NULL,'Purulent cholangitis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSRecurrentPancreatitisCheckBox',@PageID,NULL,'Recurrent pancreatitis',NULL,NULL,'Recurrent pancreatitis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSSphincterCheckBox',@PageID,NULL,'Sphincter of Oddi dysfunction',NULL,NULL,'Sphincter of Oddi dysfunction  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSStentOcclusionCheckBox',@PageID,NULL,'Stent occlusion',NULL,NULL,'Stent occlusion  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSStentReplacementCheckBox',@PageID,NULL,'Stent replacement',NULL,NULL,'Stent replacement  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSStonedBiliaryCheckBox',@PageID,NULL,'stone(s) in biliary tree',NULL,NULL,'stone(s) in biliary tree (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSSuspectedPapillaryCheckBox',@PageID,NULL,'Suspected papillary stenosis',NULL,NULL,'Suspected papillary stenosis  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSUrgentCheckBox',@PageID,NULL,'Urgent two week referral',NULL,NULL,'Urgent two week referral  (checkbox)',NULL,'#FF0000','2,7','CheckBox',NULL,'0',NULL,'0')
,('ERSWHOPerformanceRadTextBox',@PageID,NULL,NULL,NULL,NULL,'WHO Performance (textbox)',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'1')
,('EusCheckBox',@PageID,NULL,'EUS',NULL,NULL,'EUS  (checkbox)',NULL,NULL,'1','CheckBox',NULL,'0',NULL,'0')
,('EUSCheckBoxe',@PageID,NULL,'EUS',NULL,NULL,'EUS  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('GastritisCheckbox',@PageID,NULL,'Gastritis',NULL,NULL,'Gastritis  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionCheckBox',@PageID,NULL,'Gastrostomy insertion (PEG)',NULL,NULL,'Gastrostomy insertion (PEG) (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('GIBleedsButton',@PageID,NULL,'GI Bleeds',NULL,NULL,'GI Bleeds  (button)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('HaematemesisCheckBox',@PageID,NULL,'Haematemesis',NULL,NULL,'Haematemesis  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('HemiparesisPostStrokeCheckBox',@PageID,NULL,'Hemiparesis post stroke',NULL,NULL,'Hemiparesis post stroke  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('HypertensionCheckBox',@PageID,NULL,'Hypertension',NULL,NULL,'Hypertension  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('IDACheckBox',@PageID,NULL,'IDA - isotope scan',NULL,NULL,'IDA  (isotope scan  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('InsertionOfPhProbeCheckBox',@PageID,NULL,'Insertion of pH probe',NULL,NULL,'Insertion of pH probe  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('InsertionOfPhProbeEnteroscopyCheckBox',@PageID,NULL,'Insertion of pH probe',NULL,NULL,'Insertion of pH probe  (checkbox)',NULL,NULL,'8','CheckBox',NULL,'0',NULL,'0')
,('JejunostomyInsertionCheckBox',@PageID,NULL,'Jejunostomy insertion (PEJ)',NULL,NULL,'Jejunostomy insertion (PEJ) (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('MalignancyCheckBox',@PageID,NULL,'Malignancy',NULL,NULL,'Malignancy  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('MelaenaCheckBox',@PageID,NULL,'Melaena',NULL,NULL,'Melaena  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('MICheckBox',@PageID,NULL,'MI',NULL,NULL,'MI  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('MRCPCheckBox',@PageID,NULL,'MRCP',NULL,NULL,'MRCP  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('MRICheckBox',@PageID,NULL,'MRI',NULL,NULL,'MRI  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('NasojejunalCheckBox',@PageID,NULL,'Nasojejunal tube (NJT)',NULL,NULL,'Nasojejunal tube (NJT) (checkbox)',NULL,NULL,'1','CheckBox',NULL,'0',NULL,'0')
,('NauseaAndOrVomitingCheckBox',@PageID,NULL,'Nausea and/or vomiting',NULL,NULL,'Nausea and/or vomiting  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('ObesityCheckBox',@PageID,NULL,'Obesity',NULL,NULL,'Obesity  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('OdynophagiaCheckBox',@PageID,NULL,'Odynophagia',NULL,NULL,'Odynophagia  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('OesophagealDilatationCheckBox',@PageID,NULL,'Oesophageal dilatation',NULL,NULL,'Oesophageal dilatation  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('OesophagealDilatationFollowUpCheckBox',@PageID,NULL,'Oesophageal dilatation',NULL,NULL,'Oesophageal dilatation  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('OesophagealVaricesCheckBox',@PageID,NULL,'Oesophageal varices',NULL,NULL,'Oesophageal varices  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('OesophagitisCheckBox',@PageID,NULL,'Oesophagitis',NULL,NULL,'Oesophagitis  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('OtherCoMorbidityTextBox',@PageID,NULL,NULL,NULL,NULL,'Other Co-Morbidity (textbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','RadTextBox',NULL,'0',NULL,'0')
,('OtherIndicationTextBox',@PageID,NULL,NULL,NULL,NULL,'Other Indication (textbox)',NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('OtherPlannedProcedureTextBox',@PageID,NULL,NULL,NULL,NULL,'Other Planned Procedure (textbox)',NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('PegRemovalCheckBox',@PageID,NULL,'PEG removal',NULL,NULL,'PEG removal  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PostBariatricSurgeryAssessmentCheckBox',@PageID,NULL,'Post bariatric surgery assessment',NULL,NULL,'Post bariatric surgery assessment  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PrevHPyloriCheckBox',@PageID,NULL,'Previous H. pylori test',NULL,NULL,'Previous H. pylori test  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PushEnteroscopyCheckBox',@PageID,NULL,'Push enteroscopy',NULL,NULL,'Push enteroscopy  (checkbox)',NULL,NULL,'1','CheckBox',NULL,'0',NULL,'0')
,('RefluxSymptomsCheckBox',@PageID,NULL,'Reflux symptoms',NULL,NULL,'Reflux symptoms  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SaveButton',@PageID,NULL,'Save & Close',NULL,NULL,'Save & Close  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('SerologyCheckBox',@PageID,NULL,'Serology',NULL,NULL,'Serology  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SerologyResultComboBox',@PageID,NULL,NULL,NULL,NULL,'SerologyResult  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('SingleBalloonEnteroscopyCheckBox',@PageID,NULL,'Single balloon enteroscopy',NULL,NULL,'Single balloon enteroscopy  (checkbox)',NULL,NULL,'8','CheckBox',NULL,'0',NULL,'0')
,('SmallBowelBiopsyCheckBox',@PageID,NULL,'Small bowel biopsy',NULL,NULL,'Small bowel biopsy  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('StentInsertionCheckBox',@PageID,NULL,'Stent insertion',NULL,NULL,'Stent insertion  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('StentRemovalCheckBox',@PageID,NULL,'Stent removal',NULL,NULL,'Stent removal  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('StentReplacementCheckBox',@PageID,NULL,'Stent replacement',NULL,NULL,'Stent replacement  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('StoolAntigenCheckBox',@PageID,NULL,'Stool antigen',NULL,NULL,'Stool antigen  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('StoolAntigenResultComboBox',@PageID,NULL,NULL,NULL,NULL,'StoolAntigenResult  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('SurgeryFollowUpAddButton',@PageID,NULL,'Add',NULL,NULL,'Add  (button)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('SurgeryFollowUpProcComboBox',@PageID,NULL,NULL,NULL,NULL,'SurgeryFollowUpProc  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('SurgeryFollowUpProcPeriodComboBox',@PageID,NULL,NULL,NULL,NULL,'SurgeryFollowUpProcPeriod  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('SurgeryFollowUpTextBox',@PageID,NULL,NULL,NULL,NULL,'Surgery Follow Up (textbox)',NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('TiaCheckBox',@PageID,NULL,'TIA',NULL,NULL,'TIA  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('UlcerExclusionCheckBox',@PageID,NULL,'Ulcer exclusion',NULL,NULL,'Ulcer exclusion  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('UlcerHealingCheckBox',@PageID,NULL,'Ulcer healing',NULL,NULL,'Ulcer healing  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('UltrasoundCheckBox',@PageID,NULL,'Ultrasound',NULL,NULL,'Ultrasound  (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('UreaseCheckBox',@PageID,NULL,'Urease',NULL,NULL,'Urease  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('UreaseResultComboBox',@PageID,NULL,NULL,NULL,NULL,'UreaseResult  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('UrgentTwoWeekCheckBox',@PageID,NULL,'Urgent two week referral',NULL,NULL,'Urgent two week referral  (checkbox)',NULL,'#FF0000','1,6,8','CheckBox',NULL,'0',NULL,'0')
,('WeightLossCheckBox',@PageID,NULL,'Weight loss',NULL,NULL,'Weight loss  (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('WhoPerformanceStatusTextBox',@PageID,NULL,NULL,NULL,NULL,'Who Performance Status (textbox)',NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('WHOStatusRadioButtonList',@PageID,NULL,NULL,NULL,NULL,'radio buttons',NULL,NULL,'0','RadioButtonList',NULL,'0',NULL,'0')
,('ColonMelaenaCheckBox',@PageID,NULL,'Melaena',NULL,NULL,'Melaena (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonTumourAssessmentCheckBox',@PageID,NULL,'Tumour assessment',NULL,NULL,'Tumour assessment (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('ColonWeightLossCheckBox',@PageID,NULL,'Weight loss',NULL,NULL,'Weight loss (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('DiarrhoeaCheckBox',@PageID,NULL,'Diarrhoea',NULL,NULL,'Diarrhoea (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PEGReplacementCheckBox',@PageID,NULL,'PEG replacement',NULL,NULL,'PEG replacement (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PolyposisSyndromeCheckBox',@PageID,NULL,'Polyposis syndrome',NULL,NULL,'Polyposis syndrome (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('PositiveTTGCheckBox',@PageID,NULL,'Positive TTG / EMA',NULL,NULL,'Positive TTG / EMA (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('ColonRaisedFaecalCalprotectinCheckBox',@PageID,NULL,NULL,NULL,NULL,'Raised Faecal Calprotectin (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('EplanPolypTumourAssessCheckBox',@PageID,NULL,'Polyp/Tumour Assessment',NULL,NULL,'Polyp/Tumour Assessment (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EplanEMRCheckBox',@PageID,NULL,'EMR',NULL,NULL,'EMR (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('PolypTumourAssessCheckBox',@PageID,NULL,'Polyp/Tumour Assessment',NULL,NULL,'Polyp/Tumour Assessment (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('EMRCheckBox',@PageID,NULL,'EMR',NULL,NULL,'EMRCheckBox (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_common_premed_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('FormationComboBox',@PageID,NULL,'Formation:',NULL,NULL,'Formation: (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9','RadComboBox',NULL,'0',NULL,'0')
,('FormationRadComboBoxOff',@PageID,NULL,'Formation:',NULL,NULL,'Formation: (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9','RadComboBox',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,2,3,4,5,6,7,8,9','RadTextBox',NULL,'0',NULL,'0')
,('LeftRadNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,2,3,4,5,6,7,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('RightRadNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,2,3,4,5,6,7,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('TotalScoreLabel',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,2,3,4,5,6,7,8,9','TextBox',NULL,'0',NULL,'0')
,('TransverseRadNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,2,3,4,5,6,7,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('CO2InsufflationCheckBox',@PageID,NULL,'CO<sub>2</sub> insufflation',NULL,NULL,'CO<sub>2</sub> insufflation (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('FormationLabel',@PageID,NULL,'Formulation:',NULL,NULL,'Formulation: (label)',NULL,NULL,'1,2,3,4,5,6,7,8,9','Label',NULL,'0',NULL,'0')
,('GeneralAnaestheticChkBox',@PageID,NULL,'General anaesthetic',NULL,NULL,'General anaesthetic (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('NoBowelCheckBox',@PageID,NULL,'No bowel preparation',NULL,NULL,'No bowel preparation (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('NoBowelPreparationOffCheckBox',@PageID,NULL,'No bowel preparation',NULL,NULL,'No bowel preparation (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('NoSedationChkBox',@PageID,NULL,'No sedation/premedication',NULL,NULL,'No sedation/premedication (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_otherdata_ogd_extentofintubation_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('ExtentComboBox',@PageID,NULL,'ExtentComboBox',NULL,NULL,'Extent (dropdown)',NULL,NULL,'1,8','RadComboBox',NULL,'0',NULL,'0')
,('JmanoeuvreRadioButtonList',@PageID,NULL,'JmanoeuvreRadioButtonList',NULL,NULL,'Jmanoeuvre (radio buttons)',NULL,NULL,'1,8','RadioButtonList',NULL,'0',NULL,'0')
,('TrainerExtentComboBox',@PageID,NULL,'TrainerExtentComboBox',NULL,NULL,'TrainerExtent (dropdown)',NULL,NULL,'1,8','RadComboBox',NULL,'0',NULL,'0')
,('TrainerJmanoeuvreRadioButtonList',@PageID,NULL,'TrainerJmanoeuvreRadioButtonList',NULL,NULL,'Trainer Jmanoeuvre (radio buttons)',NULL,NULL,'1,8','RadioButtonList',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,'Add new item (text box)',NULL,NULL,'1,8','RadTextBox',NULL,'0',NULL,'0')
,('FailedOtherTextBox',@PageID,NULL,'',NULL,NULL,'Failed Reason - other (text box)',NULL,NULL,'1,8','RadTextBox',NULL,'0',NULL,'0')
,('TrainerFailedOtherTextBox',@PageID,NULL,'',NULL,NULL,'Trainers Failed Reason - other (text box)',NULL,NULL,'1,8','RadTextBox',NULL,'0',NULL,'0')
,('TrainerSuccessfulRadioButton',@PageID,NULL,NULL,NULL,NULL,'Trainer Successful Intubation (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('TrainerFailedRadioButton',@PageID,NULL,NULL,NULL,NULL,'Trainer Failed to complete due to (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('TrainerAbandonedRadioButton',@PageID,NULL,NULL,NULL,NULL,'Trainer Failed Reason - Abandoned (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('TrainerFailedIntubationRadioButton',@PageID,NULL,NULL,NULL,NULL,'Trainer Failed Reason -  Failed Intubation (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('TrainerOesoStrictureRadioButton',@PageID,NULL,NULL,NULL,NULL,'Trainer Failed Reason - Oesophageal stricture (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('AbandonedRadioButton',@PageID,NULL,NULL,NULL,NULL,'Failed Reason - Abandoned (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('FailedIntubationRadioButton',@PageID,NULL,NULL,NULL,NULL,'Failed Reason -  Failed Intubation (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('OesoStrictureRadioButton',@PageID,NULL,NULL,NULL,NULL,'Failed Reason - Oesophageal stricture (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('FailedOtherRadioButton',@PageID,NULL,NULL,NULL,NULL,'Failed reason - other (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('SuccessfulRadioButton',@PageID,NULL,NULL,NULL,NULL,'Successful Intubation (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('SaveButton',@PageID,NULL,NULL,NULL,NULL,'Save (button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('CancelButton',@PageID,NULL,NULL,NULL,NULL,'Cancel (button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('FailedRadioButton',@PageID,NULL,NULL,NULL,NULL,'Failed to complete due to (radio button)',NULL,NULL,'1,8',NULL,NULL,'0',NULL,'0')
,('ExtentComboBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,8','RadComboBox',NULL,'0',NULL,'0')
,('FailedOtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,8','RadTextBox',NULL,'0',NULL,'0')
,('JmanoeuvreRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,8','RadioButtonList',NULL,'0',NULL,'0')
,('TrainerExtentComboBox',@PageID,NULL,'D3',NULL,NULL,'D3 (dropdown)',NULL,NULL,'1,8','RadComboBox',NULL,'0',NULL,'0')
,('TrainerFailedOtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,8','RadTextBox',NULL,'0',NULL,'0')
,('TrainerJmanoeuvreRadioButtonList',@PageID,NULL,'2',NULL,NULL,'2 (radio buttons)',NULL,NULL,'1,8','RadioButtonList',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_otherdata_ogd_diagnoses_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('BiliaryLeakSiteRadComboBox',@PageID,NULL,'BiliaryLeakSiteRadComboBox',NULL,NULL,'BiliaryLeakSiteRad (dropdown)',NULL,NULL,'','RadComboBox',NULL,'0',NULL,'0')
,('Duodenum2ndPartNotEnteredLabel',@PageID,NULL,'2nd Part Not Entered',NULL,NULL,'2nd Part Not Entered (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('DuodenumNormalLabel',@PageID,NULL,'Normal',NULL,NULL,'Duodenum Normal (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('DuodenumNotEnteredlbl',@PageID,NULL,'Not Entered',NULL,NULL,'Duodenum Not Entered (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('ExtentDropdownlist',@PageID,NULL,'ExtentDropdownlist',NULL,NULL,'ExtentDropdownlist (dropdown)',NULL,NULL,'','RadComboBox',NULL,'0',NULL,'0')
,('ExtrahepaticLeakSiteRadComboBox',@PageID,NULL,'ExtrahepaticLeakSiteRadComboBox',NULL,NULL,'ExtrahepaticLeakSiteRad (dropdown)',NULL,NULL,'','RadComboBox',NULL,'0',NULL,'0')
,('ExtrahepaticTumourRadioButtonList',@PageID,NULL,'ExtrahepaticTumourRadioButtonList',NULL,NULL,'ExtrahepaticTumour (radio buttons)',NULL,NULL,'','RadioButtonList',NULL,'0',NULL,'0')
,('GradingDropDownList',@PageID,NULL,'GradingDropDownList',NULL,NULL,'GradingDropDownList (dropdown)',NULL,NULL,'','RadComboBox',NULL,'0',NULL,'0')
,('OesophagusNormallbl',@PageID,NULL,'Normal',NULL,NULL,'Oesophagus Normal (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('OesophagusNotEnteredlbl',@PageID,NULL,'Not Entered',NULL,NULL,'Oesophagus Not Entered (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('StomachNormalCheckBoxLabel',@PageID,NULL,'Normal',NULL,NULL,'Stomach Normal (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('StomachNotEnteredlbl',@PageID,NULL,'Not Entered',NULL,NULL,'Stomach Not Entered (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('WholeOtherRadComboBox',@PageID,NULL,'WholeOtherRadComboBox',NULL,NULL,'WholeOtherRad (dropdown)',NULL,NULL,'','RadComboBox',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,'Add New Item (text box)',NULL,NULL,'','RadTextBox',NULL,'0',NULL,'0')
,('BiliaryOtherTextBox',@PageID,NULL,'',NULL,NULL,'Biliary Other (text box)',NULL,NULL,'','TextBox',NULL,'0',NULL,'0')
,('ColonOtherDiagnosisTextBox',@PageID,NULL,'',NULL,NULL,'Colon Other Diagnosis (text box)',NULL,NULL,'','RadTextBox',NULL,'0',NULL,'0')
,('DuodenumOtherDiagnosisTextBox',@PageID,NULL,'',NULL,NULL,'Duodenum Other Diagnosis (text box)',NULL,NULL,'','RadTextBox',NULL,'0',NULL,'0')
,('OesophagusOtherDiagnosisTextBox',@PageID,NULL,'',NULL,NULL,'Oesophagus Other Diagnosis (text box)',NULL,NULL,'','RadTextBox',NULL,'0',NULL,'0')
,('PancreaticOtherTextBox',@PageID,NULL,'',NULL,NULL,'Pancreatic Other (text box)',NULL,'#FF3399','','TextBox','Pancreas Other','0',NULL,'1')
,('StomachOtherDiagnosisTextBox',@PageID,NULL,'',NULL,NULL,'Stomach Other Diagnosis (text box)',NULL,NULL,'','RadTextBox',NULL,'0',NULL,'0')
,('BiliaryLeakSiteRadComboBox',@PageID,NULL,'',NULL,NULL,'Biliary Leak Site (dropdown)',NULL,NULL,'','RadComboBox',NULL,'0',NULL,'0')
,('ExtrahepaticTumourRadioButtonList',@PageID,NULL,'',NULL,NULL,'ExtrahepaticTumour (radio buttons)',NULL,NULL,'','RadioButtonList',NULL,'0',NULL,'0')
,('ColitisCheckBox',@PageID,NULL,'Colitis',NULL,NULL,'Colitis (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D138P2_CheckBox',@PageID,NULL,'Normal',NULL,NULL,'Biliary Normal (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D140P2_CheckBox',@PageID,NULL,'Anastomic stricture',NULL,NULL,'Anastomic stricture (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D145P2_CheckBox',@PageID,NULL,'Fistula',NULL,NULL,'Fistula (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D150P2_CheckBox',@PageID,NULL,'Occlusion',NULL,NULL,'Occlusion (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D155P2_CheckBox',@PageID,NULL,'Cystic duct stones',NULL,NULL,'Cystic duct stones (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D160P2_CheckBox',@PageID,NULL,'Mirizzi syndrome',NULL,NULL,'Mirizzi syndrome (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D165P2_CheckBox',@PageID,NULL,'Common duct stone(s)',NULL,NULL,'Common duct stone(s) (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D170P2_CheckBox',@PageID,NULL,'Haemobilia',NULL,NULL,'Haemobilia (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D175P2_CheckBox',@PageID,NULL,'Calculous obstruction of cystic duct',NULL,NULL,'Calculous obstruction of cystic duct (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D180P2_CheckBox',@PageID,NULL,'Gall bladder tumour',NULL,NULL,'Gall bladder tumour (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D185P2_CheckBox',@PageID,NULL,'Cholelithiasis',NULL,NULL,'Cholelithiasis (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D190P2_CheckBox',@PageID,NULL,'Gall bladder stones',NULL,NULL,'Gall bladder stones (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D195P2_CheckBox',@PageID,NULL,'Stent occlusion',NULL,NULL,'Stent occlusion (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D198P2_CheckBox',@PageID,NULL,'Normal ducts',NULL,NULL,'Normal ducts (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D210P2_CheckBox',@PageID,NULL,'Suppurative cholangitis',NULL,NULL,'Suppurative cholangitis (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D220P2_CheckBox',@PageID,NULL,'Biliary leak',NULL,NULL,'Biliary leak (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D242P2_CheckBox',@PageID,NULL,'probable',NULL,NULL,'probable (Intraheptic tumour) (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D243P2_CheckBox',@PageID,NULL,'possible',NULL,NULL,'possible (Intraheptic tumour) (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D265P2_CheckBox',@PageID,NULL,'Normal ducts',NULL,NULL,'Normal ducts (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D280P2_CheckBox',@PageID,NULL,'Biliary leak',NULL,NULL,'Biliary leak (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D290P2_CheckBox',@PageID,NULL,'Stricture',NULL,NULL,'Stricture (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D305P2_CheckBox',@PageID,NULL,'pancreatitis',NULL,NULL,'pancreatitis (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D310P2_CheckBox',@PageID,NULL,'a pseudocyst',NULL,NULL,'a pseudocyst (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D315P2_CheckBox',@PageID,NULL,'previous surgery',NULL,NULL,'previous surgery (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D320P2_CheckBox',@PageID,NULL,'sclerosing cholangitis',NULL,NULL,'sclerosing cholangitis (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D325P2_CheckBox',@PageID,NULL,'(probable)',NULL,NULL,'(probable) (Extraheptic Stricture) (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D32P2_CheckBox',@PageID,NULL,'Whole pancreatic and biliary system normal',NULL,NULL,'Whole pancreatic and biliary system normal (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D337P2_CheckBox',@PageID,NULL,'(probable)',NULL,NULL,'(probable) (Extraheptic Benign probable) (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D338P2_CheckBox',@PageID,NULL,'(probable)',NULL,NULL,'(probable) (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D33P2_CheckBox',@PageID,NULL,'Normal',NULL,NULL,'Normal (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D340P2_CheckBox',@PageID,NULL,'gallbladder carcinoma',NULL,NULL,'gallbladder carcinoma (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D345P2_CheckBox',@PageID,NULL,'metastatic carcinoma',NULL,NULL,'metastatic carcinoma (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D350P2_CheckBox',@PageID,NULL,'cholangiocarcinoma',NULL,NULL,'cholangiocarcinoma (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D355P2_CheckBox',@PageID,NULL,'pancreatic carcinoma',NULL,NULL,'pancreatic carcinoma (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D41P2_CheckBox',@PageID,NULL,'Stenosed',NULL,NULL,'Stenosed (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D45P2_CheckBox',@PageID,NULL,'probably benign',NULL,NULL,'probably benign (papillae tumour) (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D50P2_CheckBox',@PageID,NULL,'Not Entered',NULL,NULL,'Not Entered (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D51P2_CheckBox',@PageID,NULL,'Normal',NULL,NULL,'Normal (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D52P2_CheckBox',@PageID,NULL,'2nd Part Not Entered',NULL,NULL,'2nd Part Not Entered (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D65P2_CheckBox',@PageID,NULL,'probably malignant',NULL,NULL,'probably malignant (papillae tumour) (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D67P2_CheckBox',@PageID,NULL,'Normal',NULL,NULL,'Normal (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D68P2_CheckBox',@PageID,NULL,'Annulare',NULL,NULL,'Annulare (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D69P2_CheckBox',@PageID,NULL,'Duct injury',NULL,NULL,'Duct injury (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D74P2_CheckBox',@PageID,NULL,'Stent occlusion',NULL,NULL,'Stent occlusion (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('D75P2_CheckBox',@PageID,NULL,'IPMT',NULL,NULL,'IPMT (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('Duodenum2ndPartNotEnteredCheckBox',@PageID,NULL,'',NULL,NULL,'2nd Part Not Entered (check box)',NULL,NULL,'','HtmlInputCheckBox',NULL,'0',NULL,'0')
,('DuodenumNormalCheckBox',@PageID,NULL,'',NULL,NULL,'Normal (check box)',NULL,NULL,'','HtmlInputCheckBox',NULL,'0',NULL,'0')
,('DuodenumNotEnteredCheckBox',@PageID,NULL,'',NULL,NULL,'Duodenum Not Entered (check box)',NULL,NULL,'','HtmlInputCheckBox',NULL,'0',NULL,'0')
,('OesophagusNormalCheckBox',@PageID,NULL,'',NULL,NULL,'Oesophagus Normal (check box)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('OesophagusNotEnteredCheckBox',@PageID,NULL,'',NULL,NULL,'Oesophagus Not Entered (check box)',NULL,NULL,'','HtmlInputCheckBox',NULL,'0',NULL,'0')
,('OverallNormalCheckBox',@PageID,NULL,'Whole upper gastro-intestinal tract normal',NULL,NULL,'Whole upper gastro-intestinal tract normal (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('StomachNormalCheckBox',@PageID,NULL,'',NULL,NULL,'Stomach Normal (check box)',NULL,NULL,'','HtmlInputCheckBox',NULL,'0',NULL,'0')
,('StomachNotEnteredCheckBox',@PageID,NULL,'',NULL,NULL,'Stomach Not Entered (check box)',NULL,NULL,'','HtmlInputCheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_otherdata_ogd_qa_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('BPCheckBox',@PageID,NULL,'Blood Pressure',NULL,NULL,'Blood Pressure  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('BPDiaTextBox',@PageID,NULL,NULL,NULL,NULL,'BPDia  (textBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('BPSysTextBox',@PageID,NULL,NULL,NULL,NULL,'BPSys  (textBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('CancelButton',@PageID,NULL,'Cancel',NULL,NULL,'Cancel  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('CardiacArrestCheckBox',@PageID,NULL,'Cardiac arrest',NULL,NULL,'Cardiac arrest  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('CardiacArrythmiaCheckBox',@PageID,NULL,'Cardiac arrhythmia',NULL,NULL,'Cardiac arrhythmia  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('CloseButtn',@PageID,NULL,'Close',NULL,NULL,'Close  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('ComplicationsNoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('ComplicationsOtherCheckBox',@PageID,NULL,'Other complication',NULL,NULL,'Other complication  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('ComplicationsOtherTextBox',@PageID,NULL,NULL,NULL,NULL,'ComplicationsOther  (textBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('ContinueSessionButton',@PageID,NULL,'Continue my session',NULL,NULL,'Continue my session  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('ContinuousECGCheckBox',@PageID,NULL,'Continuous ECG',NULL,NULL,'Continuous ECG  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('DamageToScopeCheckBox',@PageID,NULL,'Damage to ''scope',NULL,NULL,'Damage to ''scope  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('DeathCheckBox',@PageID,NULL,'Death',NULL,NULL,'Death  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('DefaultRadButton',@PageID,NULL,'Save as default',NULL,NULL,'Save as default  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('DifficultIntubationCheckBox',@PageID,NULL,'Difficult intubation',NULL,NULL,'Difficult intubation  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('FailedIntubationCheckBox',@PageID,NULL,'Failed intubation',NULL,NULL,'Failed intubation  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('GastricContentsAspirationCheckBox',@PageID,NULL,'Gastric contents aspiration',NULL,NULL,'Gastric contents aspiration  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('HaemorrhageCheckBox',@PageID,NULL,'Haemorrhage',NULL,NULL,'Haemorrhage  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('HypoxiaCheckBox',@PageID,NULL,'Hypoxia',NULL,NULL,'Hypoxia  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('InjuryToMouthCheckBox',@PageID,NULL,'Injury to mouth/teeth',NULL,NULL,'Injury to mouth/teeth  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('IVAccessCheckBox',@PageID,NULL,'IV Access',NULL,NULL,'IV Access  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('IVAntibioticsCheckBox',@PageID,NULL,'IV Antibiotics',NULL,NULL,'IV Antibiotics  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ManagementNoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ManagementOtherCheckBox',@PageID,NULL,'Other',NULL,NULL,'Other  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ManagementOtherTextBox',@PageID,NULL,NULL,NULL,NULL,'ManagementOther  (textBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('NoNotesCheckBox',@PageID,NULL,'Patient notes NOT available',NULL,NULL,'Patient notes NOT available  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OxygenationCheckBox',@PageID,NULL,'Oxygenation',NULL,NULL,'Oxygenation  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OxygenationFlowRateTextBox',@PageID,NULL,NULL,NULL,NULL,'OxygenationFlowRate  (TextBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('OxygenationMethodRadioButtonList',@PageID,NULL,NULL,NULL,NULL,'Oxygenation Method (radio button list)',NULL,NULL,'0','RadioButtonList',NULL,'0',NULL,'0')
,('PatDiscomfortEndoRadioButtonList',@PageID,'Patient Discomfort Endoscopist ','Patient Discomfort Endoscopist ',NULL,NULL,'Patient Discomfort Endoscopist (radio button list)',NULL,NULL,'0','RadioButtonList','Endoscopist''s patient discomfort','1',NULL,'0')
,('PatDiscomfortNurseRadioButtonList',@PageID,'Patient Discomfort Nurse','Patient Discomfort Nurse',NULL,NULL,'Patient Discomfort Nurse (radio button list)',NULL,'#C000C0','0','RadioButtonList','Nurse''s patient discomfort','1',NULL,'0')
,('PatientDiscomfortCheckBox',@PageID,NULL,'Patient discomfort',NULL,NULL,'Patient discomfort  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('PatientDistressCheckBox',@PageID,NULL,'Patient distress',NULL,NULL,'Patient distress  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('PatSedationAsleepResponseStateComboBox',@PageID,NULL,'Patient sedation asleep response',NULL,NULL,'Pat Sedation Asleep  (drop down)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('PatSedationRadioButton',@PageID,'Patient sedation','Patient sedation',NULL,NULL,'Patient Sedation (radio buttons)',NULL,'#C000C0','0','RadioButtonList','Patient sedation score','1',NULL,'0')
,('PerforationCheckBox',@PageID,NULL,'Perforation',NULL,NULL,'Perforation  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('PerforationTextBox',@PageID,NULL,'Perforation',NULL,NULL,'Perforation  (textBox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('PoorlyToleratedCheckBox',@PageID,NULL,'Poorly tolerated',NULL,NULL,'Poorly tolerated  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('PulseOximetryCheckBox',@PageID,NULL,'Pulse Oximetry',NULL,NULL,'Pulse Oximetry  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ReferralLetterCheckBox',@PageID,NULL,'But referral letter/documentation WAS available',NULL,NULL,'But referral letter/documentation WAS available  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('RespiratoryArrestCheckBox',@PageID,NULL,'Respiratory arrest requiring immediate action',NULL,NULL,'Respiratory arrest requiring immediate action  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('RespiratoryDepressionCheckBox',@PageID,NULL,'Respiratory depression',NULL,NULL,'Respiratory depression  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('SaveButton',@PageID,NULL,'Save & Close',NULL,NULL,'Save & Close  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('ShockHypotensionCheckBox',@PageID,NULL,'Shock/hypotension',NULL,NULL,'Shock/hypotension  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('SignificantHaemorrhageCheckBox',@PageID,NULL,'Significant haemorrhage',NULL,NULL,'Significant haemorrhage  (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('TechnicalFailureTextBox',@PageID,NULL,NULL,NULL,NULL,'Technical Failure  (textBox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','RadTextBox',NULL,'0',NULL,'0')
,('BleedingSeverityComboBox',@PageID,NULL,'BleedingSeverityComboBox',NULL,NULL,'BleedingSeverity (dropdown)',NULL,NULL,'10,11,12','RadComboBox',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,'Add New Item (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('BleedingAdrenalineAmountNumericTextBox',@PageID,NULL,'BleedingAdrenalineAmountNumericTextBox',NULL,NULL,'Bleeding Adrenaline Amount (text box)',NULL,NULL,'10,11,12','RadNumericTextBox',NULL,'0',NULL,'0')
,('ComplicationsBronchoscopyOtherTextBox',@PageID,NULL,'ComplicationsBronchoscopyOtherCheckBox',NULL,NULL,'Complications Bronchoscopy Other (text box)',NULL,NULL,'10,11,12','RadTextBox',NULL,'0',NULL,'0')
,('BleedingSeverityComboBox',@PageID,NULL,'Bleeding severity',NULL,NULL,'Bleeding severity (dropdown)',NULL,NULL,'10,11,12','RadComboBox',NULL,'0',NULL,'0')
,('ComplicationsBronchoscopyOtherTextBox',@PageID,NULL,'Complications Other',NULL,NULL,'Complications Bronchoscopy other (textbox)',NULL,NULL,'10,11,12','RadTextBox',NULL,'0',NULL,'0')
,('ComplicationsOtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('AdmissionToIcuCheckBox',@PageID,NULL,'Admission to ICU',NULL,NULL,'Admission to ICU (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('BleedingAdrenalineUsedCheckbox',@PageID,NULL,'Adrenaline 1 in 10,000',NULL,NULL,'Adrenaline 1 in 10,000 (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('BleedingBlockingDeviceUsedCheckbox',@PageID,NULL,'Blocking device',NULL,NULL,'Blocking device (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('BleedingCheckBox',@PageID,NULL,'Bleeding',NULL,NULL,'Bleeding (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('BleedingColdSalineUsedCheckbox',@PageID,NULL,'Cold saline',NULL,NULL,'Cold saline (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('CardiacArrythmiaBronchoscopyCheckBox',@PageID,NULL,'Cardiac arrhythmia',NULL,NULL,'Cardiac arrhythmia (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('chkAllergyToContrast',@PageID,NULL,'Allergy to contrast medium',NULL,NULL,'Allergy to contrast medium (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('chkArcinarisation',@PageID,NULL,'Arcinarisation of the parenchyma',NULL,NULL,'Arcinarisation of the parenchyma (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('chkConsentSignedInRoom',@PageID,NULL,'Consent signed in room',NULL,NULL,'Consent signed in room (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('chkContrast',@PageID,NULL,'Contrast extravasation',NULL,NULL,'Contrast extravasation (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('chkFailedCannulation',@PageID,NULL,'Failed cannulation',NULL,NULL,'Failed cannulation (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('chkFailedERCP',@PageID,NULL,'Failed ERC/ERP',NULL,NULL,'Failed ERC/ERP (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('chkFailedStentInsertion',@PageID,NULL,'Failed stent insertion',NULL,NULL,'Failed stent insertion (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('chkO2Desaturation',@PageID,NULL,'O2 desaturation',NULL,NULL,'O2 desaturation (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('chkPancreatitis',@PageID,NULL,'Pancreatitis',NULL,NULL,'Pancreatitis (checkbox)',NULL,NULL,'3','CheckBox',NULL,'0',NULL,'0')
,('chkUnplannedAdmission',@PageID,NULL,'Unplanned admission',NULL,NULL,'Unplanned admission (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('chkUnsupervisedTrainee',@PageID,NULL,'Unsupervised trainee',NULL,NULL,'Unsupervised trainee (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('chkVentilation',@PageID,NULL,'Ventilation',NULL,NULL,'Ventilation (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('chkWithdrawalOfConsent',@PageID,NULL,'Withdrawal of consent',NULL,NULL,'Withdrawal of consent (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('ComplicationsBronchoscopyNoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('ComplicationsBronchoscopyOtherCheckBox',@PageID,NULL,'Other complication',NULL,NULL,'Other complication (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('DeathBronchoscopyCheckBox',@PageID,NULL,'Death',NULL,NULL,'Death (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('HospitalisationCheckBox',@PageID,NULL,'Hospitalisation',NULL,NULL,'Hospitalisation (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('MechanicalCheckBox',@PageID,NULL,'mechanical',NULL,NULL,'mechanical (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('MyocardInfarctionCheckbox',@PageID,NULL,'Myocardial infarction/pulmonary oedema',NULL,NULL,'Myocardial infarction/pulmonary oedema (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('OversedationCheckbox',@PageID,NULL,'Oversedation requiring ventilatory support or reversal',NULL,NULL,'Oversedation requiring ventilatory support or reversal (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('PatientInitiatedCheckBox',@PageID,NULL,'patient initiated',NULL,NULL,'patient initiated (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,13,14,15,16,17','CheckBox',NULL,'0',NULL,'0')
,('PneumothoraxAspirChestDrainCheckBox',@PageID,NULL,'required aspiration/chest drain',NULL,NULL,'required aspiration/chest drain (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')
,('PneumothoraxCheckBox',@PageID,NULL,'Pneumothorax',NULL,NULL,'Pneumothorax (checkbox)',NULL,NULL,'10,11,12','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_otherdata_ogd_rx_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('ContMedication',@PageID,NULL,NULL,NULL,NULL,'Continue existing medication (check box)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ModifyMedicationRadButton',@PageID,NULL,NULL,NULL,NULL,'Set / Modify Medication (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('ContMedicationByGP',@PageID,NULL,NULL,NULL,NULL,'Medication to be prescribed by GP (check box)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ModifyGPMedicationRadButton',@PageID,NULL,NULL,NULL,NULL,'Set / Modify Medication (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('ContPrescribeMedication',@PageID,NULL,NULL,NULL,NULL,'Medication to be prescribed by hospital (check box)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ModifyPrescribeMedicationRadButton',@PageID,NULL,NULL,NULL,NULL,'Set / Modify Medication (check box)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('SuggestPrescribe',@PageID,NULL,NULL,NULL,NULL,'Suggest prescribe (check box)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ModifySuggestMedicationRadButton',@PageID,NULL,NULL,NULL,NULL,'Set / Modify Medication (check box)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('SaveButton',@PageID,NULL,NULL,NULL,NULL,'Save & Close (button)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('CancelButton',@PageID,NULL,NULL,NULL,NULL,'Cancel (button)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('MedicationText',@PageID,NULL,'Continue medication.',NULL,NULL,'Continue medication. (textbox)',NULL,NULL,'0','RadTextBox','Continue medication','0',NULL,'1')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_otherdata_ogd_followup_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AwaitingPathologyResultsCheckBox',@PageID,NULL,'Awaiting pathology results',NULL,NULL,'Awaiting pathology results  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('CancelButton',@PageID,NULL,'Cancel',NULL,NULL,'Cancel  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('CloseButtn',@PageID,NULL,'Close',NULL,NULL,'Close  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('CommentsTextBox',@PageID,NULL,NULL,NULL,NULL,'Comments  (textbox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('CopyToOtherCheckBox',@PageID,NULL,'Other',NULL,NULL,'Other  (checkbox)',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('CopyToOtherTextBox',@PageID,NULL,NULL,NULL,NULL,'CopyToOther  (textbox)',NULL,'#CC0099','1,2,3,4,5,6,7,8,9','RadTextBox',NULL,'0',NULL,'0')
,('CopyToPatientRadioButton',@PageID,NULL,'Patient',NULL,NULL,'Patient  (radio button)',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','RadioButton',NULL,'0',NULL,'0')
,('CopyToPatientTextBox',@PageID,NULL,NULL,NULL,NULL,'CopyToPatient  (textbox)',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','RadTextBox',NULL,'0',NULL,'0')
,('CopyToRefConCheckBox',@PageID,NULL,'Referring Consultant',NULL,NULL,'Referring Consultant  (checkbox)',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','CheckBox',NULL,'0',NULL,'0')
,('CopyToRefConTextBox',@PageID,NULL,NULL,NULL,NULL,'CopyToRefCon',NULL,'#CC0099','1,2,3,4,5,6,7,8,9','RadDropDownList',NULL,'0',NULL,'0')
,('DearLabel',@PageID,NULL,'Dear:',NULL,NULL,'Dear  (label)',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','Label',NULL,'0',NULL,'0')
,('FurtherProcedureDueCountNumericTextBox',@PageID,NULL,NULL,NULL,NULL,'FurtherProcedureDueCount  (textbox)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('FurtherProcedureTextBox',@PageID,NULL,NULL,NULL,NULL,'FurtherProcedure  (textbox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('NoFurtherFollowUpCheckBox',@PageID,NULL,NULL,NULL,NULL,'No Further FollowUp  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('NoFurtherTestsCheckBox',@PageID,NULL,'No further tests',NULL,NULL,'No further tests  (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('PatientNotCopiedRadioButton',@PageID,NULL,'Patient NOT copied',NULL,NULL,'Patient NOT copied  (radio button)',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','RadioButton',NULL,'0',NULL,'0')
,('PatientNotCopiedReasonTextBox',@PageID,NULL,NULL,NULL,NULL,'PatientNotCopiedReason',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','RadDropDownList',NULL,'0',NULL,'0')
,('PfrFollowUpTextBox',@PageID,NULL,NULL,NULL,NULL,'PfrFollowUp  (textbox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('ReasonLabel',@PageID,NULL,'(reason):',NULL,NULL,'(reason) (label)',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','Label',NULL,'0',NULL,'0')
,('ReviewDueCountNumericTextBox',@PageID,NULL,NULL,NULL,NULL,'ReviewDueCount  (textbox)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('ReviewTextBox',@PageID,NULL,NULL,NULL,NULL,'Review  (textbox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('SalutationLabel',@PageID,NULL,'Salutation:',NULL,NULL,'Salutation  (label)',NULL,'#CC00CC','1,2,3,4,5,6,7,8,9','Label',NULL,'0',NULL,'0')
,('SalutationTextBox',@PageID,NULL,NULL,NULL,NULL,'Salutation  (textbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9','RadTextBox',NULL,'0',NULL,'0')
,('SaveButton',@PageID,NULL,'Save & Close',NULL,NULL,'Save & Close  (button)',NULL,NULL,'0','RadButton',NULL,'0',NULL,'0')
,('FurtherProcedureComboBox',@PageID,NULL,'FurtherProcedureComboBox',NULL,NULL,'FurtherProcedure (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('FurtherProcedureDueTypeComboBox',@PageID,NULL,'FurtherProcedureDueTypeComboBox',NULL,NULL,'FurtherProcedureDueType (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('lblCompany',@PageID,NULL,'&#169; 1994-2018<b> HD Clinical Ltd</b> | Version 1.0.8.4',NULL,NULL,'&#169; 1994-2018<b> HD Clinical Ltd</b> | Version 1.0.8.4 (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('ReturnToComboBox',@PageID,NULL,'ReturnToComboBox',NULL,NULL,'ReturnTo (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('ReviewDueTypeComboBox',@PageID,NULL,'ReviewDueTypeComboBox',NULL,NULL,'ReviewDueType (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('ReviewLocationComboBox',@PageID,NULL,'ReviewLocationComboBox',NULL,NULL,'ReviewLocation (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('CommentsTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('CopyToOtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('CopyToPatientTextBox',@PageID,NULL,'Patient Name',NULL,NULL,'Patient Name (textbox)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('CopyToRefConTextBox',@PageID,NULL,'Referring Consultant',NULL,NULL,'Referrring Consultant (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('DearLabel',@PageID,NULL,'Dear:',NULL,NULL,'Dear: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('FurtherProcedureComboBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('FurtherProcedureDueCountNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('FurtherProcedureDueTypeComboBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('FurtherProcedureTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('PatientNotCopiedReasonTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('PfrFollowUpTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('ReasonLabel',@PageID,NULL,'(reason):',NULL,NULL,'(reason): (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('ReturnToComboBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('ReviewDueCountNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('ReviewDueTypeComboBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('ReviewLocationComboBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('ReviewTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('SalutationLabel',@PageID,NULL,'Salutation:',NULL,NULL,'Salutation: (label)',NULL,NULL,'0','Label',NULL,'0',NULL,'0')
,('SalutationTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_common_visualisation_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('cboAccessViaOther',@PageID,NULL,'',NULL,NULL,'Access via other (radio button)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboBileReasons1',@PageID,NULL,'',NULL,NULL,'Cannulation via major papilla to bile duct using (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboBileReasons1_ER',@PageID,NULL,'',NULL,NULL,'Cannulation via major papilla to bile duct using (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboBileReasons2',@PageID,NULL,'',NULL,NULL,'Cannulation viamajor papilla to bile duct - reason for partially successful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboBileReasons2_ER',@PageID,NULL,'',NULL,NULL,'Cannulation via major papilla to bile duct  - reason for partially successful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboBileReasons4',@PageID,NULL,'',NULL,NULL,'Cannulation via major papilla to bile duct  - reason for unsuccessful (dropdown)',NULL,NULL,'2,7','RadComboBox','Bile Duct cannulation unseccessful reason','0',NULL,'0')
,('cboBileReasons4_ER',@PageID,NULL,'',NULL,NULL,'Cannulation via major papilla to bile duct  - reason for unsuccessful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboMinorPapReasons1',@PageID,NULL,'',NULL,NULL,'Cannulation via minor papilla - using (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboMinorPapReasons1_ER',@PageID,NULL,'',NULL,NULL,'Cannulation via minor papilla - using (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboMinorPapReasons2',@PageID,NULL,'',NULL,NULL,'Cannulation via minor papilla - reason for partially successful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboMinorPapReasons2_ER',@PageID,NULL,'',NULL,NULL,'Cannulation via minor papilla - reason for partially successful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboMinorPapReasons4',@PageID,NULL,'',NULL,NULL,'Cannulation via minor papilla - reason for unsuccessful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboMinorPapReasons4_ER',@PageID,NULL,'',NULL,NULL,'Cannulation via minor papilla - reason for unsuccessful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboPancreaticReasons1',@PageID,NULL,'',NULL,NULL,'Cannulation via major papilla to pancreatic duct using (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboPancreaticReasons1_ER',@PageID,NULL,'',NULL,NULL,'Cannulation via major papilla to pancreatic duct using (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboPancreaticReasons2',@PageID,NULL,'',NULL,NULL,'Cannulation viamajor papilla to pancreatic duct - reason for partially successful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboPancreaticReasons2_ER',@PageID,NULL,'',NULL,NULL,'Cannulation viamajor papilla to pancreatic duct - reason for partially successful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboPancreaticReasons4',@PageID,NULL,'',NULL,NULL,'Cannulation viamajor papilla to pancreatic duct - reason for unsuccessful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('cboPancreaticReasons4_ER',@PageID,NULL,'',NULL,NULL,'Cannulation viamajor papilla to pancreatic duct - reason for unsuccessful (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('HepatobiliaryFirstComboBox',@PageID,NULL,'',NULL,NULL,'HepatobiliaryFirst (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('HepatobiliarySecondComboBox',@PageID,NULL,'',NULL,NULL,'HepatobiliarySecond (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('optLB2ComboBox',@PageID,NULL,'',NULL,NULL,'optLB2 (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('optOtherComboBox',@PageID,NULL,'',NULL,NULL,'optOther (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('PancreaticFirstComboBox',@PageID,NULL,'',NULL,NULL,'PancreaticFirst (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('PancreaticSecondComboBox',@PageID,NULL,'',NULL,NULL,'PancreaticSecond (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,'Add New Item (text box)',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('HepatobiliaryFirstMLTextBox',@PageID,NULL,'',NULL,NULL,'Hepatobiliary First ML (text box',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('HepatobiliarySecondMLRadTextBox',@PageID,NULL,'',NULL,NULL,'Hepatobiliary Second ML (text box',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('PancreaticFirstMLTextBox',@PageID,NULL,'',NULL,NULL,'Pancreatic First ML (text box)',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('PancreaticSecondMLTextBox',@PageID,NULL,'',NULL,NULL,'Pancreatic Second ML (text box)',NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('Abandoned_ER_CheckBox',@PageID,NULL,'Procedure abandoned',NULL,NULL,'Procedure abandoned (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('AbandonedCheckBox',@PageID,NULL,'Procedure abandoned',NULL,NULL,'Procedure abandoned (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkAcinar1',@PageID,NULL,'Acinar filling',NULL,NULL,'Acinar filling (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkAcinar2',@PageID,NULL,'Acinar filling',NULL,NULL,'Acinar filling (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkExcept1',@PageID,NULL,'common bile duct',NULL,NULL,'common bile duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkExcept2',@PageID,NULL,'gall bladder',NULL,NULL,'gall bladder (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkExcept3',@PageID,NULL,'common hepatic duct',NULL,NULL,'common hepatic duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkExcept4',@PageID,NULL,'right hepatic duct',NULL,NULL,'right hepatic duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkExcept5',@PageID,NULL,'left hepatic duct',NULL,NULL,'left hepatic duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkHVNotVisualised',@PageID,NULL,'Not visualised',NULL,NULL,'Not visualised (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkHVWholeBiliary',@PageID,NULL,'Whole biliary system visualised',NULL,NULL,'Whole biliary system visualised (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ExceptCheckBox1',@PageID,NULL,'accessory pancreatic duct',NULL,NULL,'accessory pancreatic duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ExceptCheckBox2',@PageID,NULL,'main pancreatic duct',NULL,NULL,'main pancreatic duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ExceptCheckBox3',@PageID,NULL,'uncinate process',NULL,NULL,'uncinate process (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ExceptCheckBox4',@PageID,NULL,'head',NULL,NULL,'head (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ExceptCheckBox5',@PageID,NULL,'neck',NULL,NULL,'neck (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ExceptCheckBox6',@PageID,NULL,'body',NULL,NULL,'body (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ExceptCheckBox7',@PageID,NULL,'tail',NULL,NULL,'tail (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('HepatobiliaryBalloonCheckBox',@PageID,NULL,'balloon catheter used (occlusion cholangiography)',NULL,NULL,'balloon catheter used (occlusion cholangiography) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('IntendedBileDuct_ER_CheckBox',@PageID,NULL,'bile duct',NULL,NULL,'bile duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('IntendedBileDuctCheckBox',@PageID,NULL,'bile duct',NULL,NULL,'bile duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('IntendedPancreaticDuct_ER_CheckBox',@PageID,NULL,'pancreatic duct',NULL,NULL,'pancreatic duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('IntendedPancreaticDuctCheckBox',@PageID,NULL,'pancreatic duct',NULL,NULL,'pancreatic duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('PancreasCheckBox',@PageID,NULL,'Pancreas divisum',NULL,NULL,'Pancreas divisum (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('PancreaticBalloonCheckBox',@PageID,NULL,'balloon catheter used (occlusion pancreatography)',NULL,NULL,'balloon catheter used (occlusion pancreatography) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('pNotVisualisedCheckBox',@PageID,NULL,'Not visualised',NULL,NULL,'Not visualised (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('WholeCheckBox',@PageID,NULL,'Whole pancreatic system visualised',NULL,NULL,'Whole pancreatic system visualised (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_therapeuticprocedures_ogdtherapeuticprocedures_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('CorrectPEGPlacementRadioButtonList',@PageID,NULL,'',NULL,NULL,'Correct Placement  (radio button list)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadioButtonList','Correct placement','0',NULL,'1')
,('DilatationUnitsComboBox',@PageID,NULL,'DilatationUnitsComboBox',NULL,NULL,'Dilatation Units (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadComboBox',NULL,'0',NULL,'0')
,('DilatorTypeComboBox',@PageID,NULL,'DilatorTypeComboBox',NULL,NULL,'Dilator Type (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadComboBox',NULL,'0',NULL,'0')
,('EmrFluidComboBox',@PageID,NULL,'EmrFluidComboBox',NULL,NULL,'Emr Fluid (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('EmrTypeRadioButtonList',@PageID,NULL,'EmrTypeRadioButtonList',NULL,NULL,'Emr Type (radio buttons)',NULL,NULL,'0','RadioButtonList',NULL,'0',NULL,'0')
,('GastrostomyInsertionTypeComboBox',@PageID,NULL,'GastrostomyInsertionTypeComboBox',NULL,NULL,'Gastrostomy Insertion Type (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadComboBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionUnitsComboBox',@PageID,NULL,'GastrostomyInsertionUnitsComboBox',NULL,NULL,'GastrostomyInsertionUnits (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadComboBox',NULL,'0',NULL,'0')
,('InjectionTypeComboBox',@PageID,NULL,'InjectionTypeComboBox',NULL,NULL,'Injection Type (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('MarkingTypeComboBox',@PageID,NULL,'MarkingTypeComboBox',NULL,NULL,'Marking Type (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('PolypectomyRemovalRadioButtonList',@PageID,NULL,'PolypectomyRemovalRadioButtonList',NULL,NULL,'Polypectomy Removal (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('PolypectomyRemovalTypeRadioButtonList',@PageID,NULL,'PolypectomyRemovalTypeRadioButtonList',NULL,NULL,'Polypectomy Removal Type (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('RFATypeRadioButtonList',@PageID,NULL,'RFATypeRadioButtonList',NULL,NULL,'RFA Type (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('SigmoidopexyMakeComboBox',@PageID,NULL,'SigmoidopexyMakeComboBox',NULL,NULL,'Sigmoidopexy Make (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('StentInsertionDiaUnitsComboBox',@PageID,NULL,'StentInsertionDiaUnitsComboBox',NULL,NULL,'Stent Insertion Dia Units (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('StentInsertionTypeComboBox',@PageID,NULL,'StentInsertionTypeComboBox',NULL,NULL,'Stent Insertion Type (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('StentRemovalTechniqueComboBox',@PageID,NULL,'StentRemovalTechniqueComboBox',NULL,NULL,'Stent Removal Technique (dropdown)',NULL,NULL,'0','RadComboBox',NULL,'0',NULL,'0')
,('VaricealScleroInjTypeComboBox',@PageID,NULL,'VaricealScleroInjTypeComboBox',NULL,NULL,'Variceal Sclero Injection Type (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadComboBox',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,'Add New Item (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermyKJNumericTextBox',@PageID,NULL,'',NULL,NULL,'Argon Beam Diathermy KJ (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermyPulsesNumericTextBox',@PageID,NULL,'',NULL,NULL,'Argon Beam Diathermy Pulses (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermySecsNumericTextBox',@PageID,NULL,'',NULL,NULL,'Argon Beam Diathermy Secs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermyWattsNumericTextBox',@PageID,NULL,'',NULL,NULL,'Argon Beam Diathermy Watts (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('BandingNumRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Banding Num Rad (text box)',NULL,NULL,'2,4,5,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('ClipRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Clip Rad (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('ClipTextBox',@PageID,NULL,'',NULL,NULL,'Clip (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('EmrFluidVolNumericTextBox',@PageID,NULL,'',NULL,NULL,'Emr Fluid Vol (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('FlangePositionNumericTextBox',@PageID,NULL,'',NULL,NULL,'Flange Position (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionBatchNoTextBox',@PageID,NULL,'',NULL,NULL,'Gastrostomy Insertion Batch No (text box)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadTextBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionSizeNumericTextBox',@PageID,NULL,'',NULL,NULL,'Gastrostomy Insertion Size (text box)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadNumericTextBox',NULL,'0',NULL,'0')
,('InjectionNumberNumericTextBox',@PageID,NULL,'',NULL,NULL,'Injection Number (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('InjectionVolumeNumericTextBox',@PageID,NULL,'',NULL,NULL,'Injection Volume (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('MarkedQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,'Marked Qty (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('NilByMouthHrsNumericTextBox',@PageID,NULL,'',NULL,NULL,'Nil By Mouth Hrs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('NilByProcHrsNumericTextBox',@PageID,NULL,'',NULL,NULL,'Nil By Proc Hrs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('OesoDilNilByMouthHrsRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Oesophagus Dil Nil By Mouth Hrs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('OesoDilSoftDietDaysRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Oesophagus Dil Soft Diet Days (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('OesoDilWarmFluidsHrsRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Oesophagus Dil Warm Fluids Hrs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('OesoDilXRayHrsRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Oesophagus Dil XRay Hrs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('OtherTextBox',@PageID,NULL,'',NULL,NULL,'Other (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('PEGPlacementFailureReasonTextBox',@PageID,NULL,'',NULL,NULL,'PEG Placement Failure Reason (text box)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadTextBox',NULL,'0',NULL,'0')
,('SigmoidopexyAtibioticDaysRadNumeric',@PageID,NULL,'',NULL,NULL,'SigmoidopexyAtibioticDays (text box)',NULL,NULL,'3,4,5,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('SigmoidopexyFluidDaysRadNumeric',@PageID,NULL,'',NULL,NULL,'Sigmoidopexy Fluid Days (text box)',NULL,NULL,'3,4,5,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('SigmoidopexyQtyNumericBox',@PageID,NULL,'',NULL,NULL,'Sigmoidopexy Qty (text box)',NULL,NULL,'3,4,5,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('StentInsertionBatchNoTextBox',@PageID,NULL,'',NULL,NULL,'StentInsertion Batch No (text box)',NULL,NULL,'0','RadTextBox',NULL,'0',NULL,'0')
,('StentInsertionDiaNumericTextBox',@PageID,NULL,'',NULL,NULL,'Stent Insertion Dia (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('StentInsertionLengthNumericTextBox',@PageID,NULL,'',NULL,NULL,'Stent Insertion Length (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('StentInsertionQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,'Stent Insertion Qty (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('VaricealBandingNumNumericTextBox',@PageID,NULL,'',NULL,NULL,'Variceal Banding Num (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('VaricealScleroInjNumNumericTextBox',@PageID,NULL,'',NULL,NULL,'Variceal Sclero Injection Num (text box)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadNumericTextBox',NULL,'0',NULL,'0')
,('VaricealScleroInjVolNumericTextBox',@PageID,NULL,'',NULL,NULL,'Variceal Sclero Injection Vol  (text box)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadNumericTextBox',NULL,'0',NULL,'0')
,('YAGDilNilByMouthHrsRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'YAG Dil Nil By Mouth Hrs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagDilSoftDietDaysRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Yag Dil Soft Diet Days (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagDilWarmFluidsHrsRadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Yag Dil Warm Fluids Hrs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagLaserKJNumericTextBox',@PageID,NULL,'',NULL,NULL,'Yag Laser KJ (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagLaserPulsesNumericTextBox',@PageID,NULL,'',NULL,NULL,'Yag Laser Pulses (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagLaserSecsNumericTextBox',@PageID,NULL,'',NULL,NULL,'Yag Laser Secs (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagLaserWattsNumericTextBox',@PageID,NULL,'',NULL,NULL,'Yag Laser Watts (text box)',NULL,NULL,'0','RadNumericTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermyCheckBox',@PageID,NULL,'Argon beam diathermy',NULL,NULL,'Argon beam diathermy (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('AttachmentToWardCheckBox',@PageID,NULL,'All attachments for feeding returned to the ward with patient',NULL,NULL,'All attachments for feeding returned to the ward with patient (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('BalloonDilationCheckBox',@PageID,NULL,'Balloon dilation',NULL,NULL,'Balloon dilation (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('BandingPilesCheckBox',@PageID,NULL,'Banding of piles',NULL,NULL,'Banding of piles (checkbox)',NULL,NULL,'2,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('BandLigationCheckBox',@PageID,NULL,'Band ligation',NULL,NULL,'Band ligation (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('BicapElectroCheckBox',@PageID,NULL,'Bicap electrocautery',NULL,NULL,'Bicap electrocautery (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('BotoxInjectionCheckBox',@PageID,NULL,'Botox injection',NULL,NULL,'Botox injection (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('chkNoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('ClipCheckBox',@PageID,NULL,'Clip',NULL,NULL,'Clip (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('DiathermyCheckBox',@PageID,NULL,'Diathermy',NULL,NULL,'Diathermy (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('EmrCheckBox',@PageID,NULL,'Endoscopic',NULL,NULL,'Endoscopic (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('EndoClotCheckBox',@PageID,NULL,'EndoClot',NULL,NULL,'EndoClot (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('EndoloopPlacementCheckBox',@PageID,NULL,'Endoloop placement',NULL,NULL,'Endoloop placement (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('EndoscopicCheck',@PageID,NULL,'Endoscopic check',NULL,NULL,'Endoscopic check (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('ForeignBodyCheckBox',@PageID,NULL,'Foreign body removal',NULL,NULL,'Foreign body removal (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionCheckBox',@PageID,NULL,'Gastrostomy insertion (PEG)',NULL,NULL,'Gastrostomy insertion (PEG) (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('GastrostomyRemovalCheckBox',@PageID,NULL,'Gastrostomy removal (PEG)',NULL,NULL,'Gastrostomy removal (PEG) (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('HaemosprayCheckBox',@PageID,NULL,'Haemospray',NULL,NULL,'Haemospray (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('HeatProbeCheckBox',@PageID,NULL,'Heater probe coagulation',NULL,NULL,'Heater probe coagulation (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('HotBiopsyCheckBox',@PageID,NULL,'Hot biopsy',NULL,NULL,'Hot biopsy (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('InjectionTherapyCheckBox',@PageID,NULL,'Injection therapy',NULL,NULL,'Injection therapy (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('MarkingCheckBox',@PageID,NULL,'Marking',NULL,NULL,'Marking (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('NilByMouthCheckBox',@PageID,NULL,'Nil by mouth for',NULL,NULL,'Nil by mouth for (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('NilByProcCheckBox',@PageID,NULL,'Nil by PEG for',NULL,NULL,'Nil by PEG for (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OesoDilMedicalReviewCheckBox',@PageID,NULL,'Medical review before discharge',NULL,NULL,'Medical review before discharge (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OesoDilNilByMouthCheckBox',@PageID,NULL,'Nil by mouth for',NULL,NULL,'Nil by mouth for (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OesoDilSoftDietCheckBox',@PageID,NULL,'Soft diet for',NULL,NULL,'Soft diet for (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OesoDilWarmFluidsCheckBox',@PageID,NULL,'Warm fluids only',NULL,NULL,'Warm fluids only (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OesoDilXRayCheckBox',@PageID,NULL,'Chest X-ray after',NULL,NULL,'Chest X-ray after (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OesophagealDilatationCheckBox',@PageID,NULL,'Oesophageal dilatation',NULL,NULL,'Oesophageal dilatation (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('PH_ProbeInsertionCheckBox',@PageID,NULL,'pH probe insertion',NULL,NULL,'pH probe insertion (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('PolypectomyCheckBox',@PageID,NULL,'Polypectomy',NULL,NULL,'Polypectomy (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PyloricDilatationChekBox',@PageID,NULL,'Pyloric/duodenal dilatation',NULL,NULL,'Pyloric/duodenal dilatation (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('DilatedToTextBox',@PageID,NULL,'',NULL,NULL,'Dilate To (text box)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadNumericTextBox',NULL,'0',NULL,'0')
,('NoTimesSegmentTreatedNumericTextBox',@PageID,NULL,'',NULL,NULL,'No. of times each segment treated (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('ProbeInsertedAtNumericTextBox',@PageID,NULL,'',NULL,NULL,'probe inserted at (text box)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadNumericTextBox',NULL,'0',NULL,'0')
,('TopOfProbeNumericTextBox',@PageID,NULL,'',NULL,NULL,'top of probe (text box)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadNumericTextBox',NULL,'0',NULL,'0')
,('RFATreatmentFromNumericTextBox',@PageID,NULL,'',NULL,NULL,'Treatment From (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('RFATreatmentToNumericTextBox',@PageID,NULL,'',NULL,NULL,'Treatment To (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('RFAEnergyDeliveredNumericTextBox',@PageID,NULL,'',NULL,NULL,'Energy delivered (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('RFASegmentsTreatedNumericTextBox',@PageID,NULL,'',NULL,NULL,'No of segments treated (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('RFACheckBox',@PageID,NULL,'Radio Frequency Ablation',NULL,NULL,'Radio Frequency Ablation (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('ScopePassCheckBox',@PageID,NULL,'scope could pass',NULL,NULL,'scope could pass (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('SigmoidopexyAntibioticsCheckBox',@PageID,NULL,'Antibiotics for',NULL,NULL,'Antibiotics for (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('SigmoidopexyCheckBox',@PageID,NULL,'Sigmoidopexy',NULL,NULL,'Sigmoidopexy (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('SigmoidopexyClearFluidsCheckBox',@PageID,NULL,'Clear fluids for',NULL,NULL,'Clear fluids for (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('StentInsertionCheckBox',@PageID,NULL,'Stent insertion',NULL,NULL,'Stent insertion (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('StentRemovalCheckBox',@PageID,NULL,'Stent removal',NULL,NULL,'Stent removal (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('VaricealBandingCheckBox',@PageID,NULL,'Variceal banding',NULL,NULL,'Variceal banding (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('VaricealClipCheckBox',@PageID,NULL,'Variceal clip',NULL,NULL,'Variceal clip (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('VaricealSclerotherapyCheckBox',@PageID,NULL,'Variceal sclerotherapy',NULL,NULL,'Variceal sclerotherapy (checkbox)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','CheckBox',NULL,'0',NULL,'0')
,('YagDilMedicalReviewCheckBox',@PageID,NULL,'Medical review before discharge',NULL,NULL,'Medical review before discharge (checkbox)',NULL,NULL,'','CheckBox',NULL,'0',NULL,'0')
,('YAGDilNilByMouthCheckBox',@PageID,NULL,'Nil by mouth for',NULL,NULL,'Nil by mouth for (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('YagDilSoftDietCheckBox',@PageID,NULL,'Soft diet for',NULL,NULL,'Soft diet for (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('YagDilWarmFluidsCheckBox',@PageID,NULL,'Warm fluids only',NULL,NULL,'Warm fluids only (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('YagLaserCheckBox',@PageID,NULL,'YAG laser',NULL,NULL,'YAG laser (checkbox)',NULL,NULL,'0','CheckBox',NULL,'0',NULL,'0')
,('OesoInstructionforCareButton',@PageID,NULL,'Instructions for care...',NULL,NULL,'Instructions for care (button)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadButton',NULL,'0',NULL,'0')
,('NPSAAlertButton',@PageID,NULL,'NPSA Alert',NULL,NULL,'NPSA alter (button)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadButton',NULL,'0',NULL,'0')
,('PEGOutcomeComboBox',@PageID,NULL,'PEG Outcome',NULL,NULL,'PEG Outcome (dropdown)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadComboBox',NULL,'0',NULL,'0')
,('PEGInstructionforcareButton',@PageID,NULL,'Instructions for care... (PEG)',NULL,NULL,'Instrutions for care (PEG) (button)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadButton',NULL,'0',NULL,'0')
,('PyloricLeadingToPerforationRadioButton',@PageID,NULL,'Dilatation leading to perforation?',NULL,NULL,'Dilatation leading to perforation? (radio button)',NULL,NULL,'1,2,3,4,5,6,7,8,9,10,11','RadioButtonList',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_colon_calibre_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('DilatedTypeRadioButtonList',@PageID,NULL,'DilatedTypeRadioButtonList',NULL,NULL,'Dilated Type (radio buttons)',NULL,NULL,'3,4,5,9','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureImpededRadioButtonList',@PageID,NULL,'StrictureImpededRadioButtonList',NULL,NULL,'Stricture Impeded (radio buttons)',NULL,NULL,'3,4,5,9','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureTypeRadioButtonList',@PageID,NULL,'StrictureTypeRadioButtonList',NULL,NULL,'Stricture Type (radio buttons)',NULL,NULL,'3,4,5,9','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureLengthNumericTextBox',@PageID,NULL,'',NULL,NULL,'Stricture Length (text box)',NULL,NULL,'3,4,5,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('ContractionCheckBox',@PageID,NULL,'Contraction',NULL,NULL,'Contraction (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('DilatedCheckBox',@PageID,NULL,'Dilated',NULL,NULL,'Dilated (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('NormalCheckBox',@PageID,NULL,'Normal',NULL,NULL,'Normal (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('ObstructionCheckBox',@PageID,NULL,'Obstruction',NULL,NULL,'Obstruction (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('SpasmCheckBox',@PageID,NULL,'Spasm',NULL,NULL,'Spasm (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('StrictureCheckBox',@PageID,NULL,'Stricture',NULL,NULL,'Stricture (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_colon_mucosa_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AphthousUlcers_Type_ComboBox',@PageID,NULL,'AphthousUlcers_Type_ComboBox',NULL,NULL,'Aphthous Ulcers Type (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Atrophic_Distribution_ComboBox',@PageID,NULL,'Atrophic_Distribution_ComboBox',NULL,NULL,'Atrophic Distribution (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Atrophic_Severity_ComboBox',@PageID,NULL,'Atrophic_Severity_ComboBox',NULL,NULL,'Atrophic Severity (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Cobblestone_Distribution_ComboBox',@PageID,NULL,'Cobblestone_Distribution_ComboBox',NULL,NULL,'Cobblestone Distribution (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Congested_Distribution_ComboBox',@PageID,NULL,'Congested_Distribution_ComboBox',NULL,NULL,'Congested Distribution (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Congested_Severity_ComboBox',@PageID,NULL,'Congested_Severity_ComboBox',NULL,NULL,'Congested Severity (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Erythematous_Distribution_ComboBox',@PageID,NULL,'Erythematous_Distribution_ComboBox',NULL,NULL,'Erythematous Distribution (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Erythematous_Severity_ComboBox',@PageID,NULL,'Erythematous_Severity_ComboBox',NULL,NULL,'Erythematous Severity  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Granular_Distribution_ComboBox',@PageID,NULL,'Granular_Distribution_ComboBox',NULL,NULL,'Granular Distribution  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Granular_Severity_ComboBox',@PageID,NULL,'Granular_Severity_ComboBox',NULL,NULL,'Granular Severity  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('LargeUlcers_Type_ComboBox',@PageID,NULL,'LargeUlcers_Type_ComboBox',NULL,NULL,'Large Ulcers Type  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Mucopurulent_Distribution_ComboBox',@PageID,NULL,'Mucopurulent_Distribution_ComboBox',NULL,NULL,'Mucopurulent Distribution  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Mucopurulent_Severity_ComboBox',@PageID,NULL,'Mucopurulent_Severity_ComboBox',NULL,NULL,'Mucopurulent Severity  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Pigmented_Distribution_ComboBox',@PageID,NULL,'Pigmented_Distribution_ComboBox',NULL,NULL,'Pigmented Distribution  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('Pigmented_Severity_ComboBox',@PageID,NULL,'Pigmented_Severity_ComboBox',NULL,NULL,'Pigmented Severity  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('PleomorphicUlcers_Type_ComboBox',@PageID,NULL,'PleomorphicUlcers_Type_ComboBox',NULL,NULL,'Pleomorphic Ulcers Type  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('SerpiginousUlcers_Type_ComboBox',@PageID,NULL,'SerpiginousUlcers_Type_ComboBox',NULL,NULL,'Serpiginous Ulcers Type  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('SmallUlcers_Type_ComboBox',@PageID,NULL,'SmallUlcers_Type_ComboBox',NULL,NULL,'Small Ulcers Type  (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('DiameterNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'','RadNumericTextBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_colon_diverticulum_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('DistributionComboBox',@PageID,NULL,'DistributionComboBox',NULL,NULL,'Distribution (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('NarrowingTortuosity_Severity_ComboBox',@PageID,NULL,'NarrowingTortuosity_Severity_ComboBox',NULL,NULL,'Narrowing Tortuosity Severity (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('QuantityComboBox',@PageID,NULL,'QuantityComboBox',NULL,NULL,'Quantity (dropdown)',NULL,NULL,'3,4,5,9','RadComboBox',NULL,'0',NULL,'0')
,('CircMuscleHypertrophy_CheckBox',@PageID,NULL,'CircMuscleHypertrophy_CheckBox',NULL,NULL,'Circular muscle hypertrophy (check box)',NULL,NULL,'3,4,5,9','RadButton',NULL,'0',NULL,'0')
,('NarrowingTortuosity_CheckBox',@PageID,NULL,'NarrowingTortuosity_CheckBox',NULL,NULL,'Narrowing/tortuosity (check box)',NULL,NULL,'3,4,5,9','RadButton',NULL,'0',NULL,'0')
,('MucosalInflammation_CheckBox',@PageID,NULL,'MucosalInflammation_CheckBox',NULL,NULL,'Mucosal inflammation (check box)',NULL,NULL,'3,4,5,9','RadButton',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'NoneCheckBox',NULL,NULL,'None (check box)',NULL,NULL,'3,4,5,9','RadButton',NULL,'0',NULL,'0')
,('QuantityLabel',@PageID,NULL,'QuantityLabel',NULL,NULL,'Quantity (label)',NULL,NULL,'3,4,5,9','Label',NULL,'0',NULL,'0')
,('DistributionLabel',@PageID,NULL,'DistributionLabel',NULL,NULL,'Distribution (label)',NULL,NULL,'3,4,5,9','Label',NULL,'0',NULL,'0')
,('SeverityLabel',@PageID,NULL,'SeverityLabel',NULL,NULL,'Severity (label)',NULL,NULL,'3,4,5,9','Label',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_colon_vascularity_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('Amlabel',@PageID,NULL,'mm',NULL,NULL,'Angiodysplasia mm (label)',NULL,NULL,'3,4,5,9','Label',NULL,'0',NULL,'0')
,('ASlabel',@PageID,NULL,'Size of largest',NULL,NULL,'Angiodysplasia Size of largest (label)',NULL,NULL,'3,4,5,9','Label',NULL,'0',NULL,'0')
,('ASizeTextBox',@PageID,NULL,'',NULL,NULL,'Angiodysplasia Size (text box)',NULL,NULL,'3,4,5,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('QuantityTextBox',@PageID,NULL,'',NULL,NULL,'Angiodysplasia Quantity (text box)',NULL,NULL,'3,4,5,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('Angiodysplasia_RadioButton',@PageID,NULL,'Angiodysplasia',NULL,NULL,'Angiodysplasia (option)',NULL,NULL,'3,4,5,9','RadioButton',NULL,'0',NULL,'0')
,('Attenuated_RadioButton',@PageID,NULL,'Attenuated with Neovascularization',NULL,NULL,'Attenuated with Neovascularization (option)',NULL,NULL,'3,4,5,9','RadioButton',NULL,'0',NULL,'0')
,('CancelButton',@PageID,NULL,'Close',NULL,NULL,'Close (button)',NULL,NULL,'3,4,5,9','RadButton',NULL,'0',NULL,'0')
,('Exaggerated_RadioButton',@PageID,NULL,'Exaggerated',NULL,NULL,'Exaggerated (option)',NULL,NULL,'3,4,5,9','RadioButton',NULL,'0',NULL,'0')
,('Indistinct_RadioButton',@PageID,NULL,'Indistict',NULL,NULL,'Indistict (option)',NULL,NULL,'3,4,5,9','RadioButton',NULL,'0',NULL,'0')
,('MultipleCheckbox',@PageID,NULL,'MultipleCheckbox',NULL,NULL,'Multiple(checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'NoneCheckBox',NULL,NULL,'No vascular lesions (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('SaveButton',@PageID,NULL,'Save',NULL,NULL,'Save (button)',NULL,NULL,'3,4,5,9','RadButton',NULL,'0',NULL,'0')
,('Telangiectasia_RadioButton',@PageID,NULL,'Telangiectasia',NULL,NULL,'Telangiectasia (option)',NULL,NULL,'3,4,5,9','RadioButton',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_colon_haemorrhage_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('ArtificialCheckBox',@PageID,NULL,'Artifactual bleeding',NULL,NULL,'Artifactual bleeding (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('LesionsCheckBox',@PageID,NULL,'Bleeding from lesions',NULL,NULL,'Bleeding from lesions (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('MelaenaCheckBox',@PageID,NULL,'Melaena from ileocaecal valve',NULL,NULL,'Melaena from ileocaecal valve (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('MucosalCheckBox',@PageID,NULL,'Mucosal bleeding',NULL,NULL,'Mucosal bleeding (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'<b>None</b>',NULL,NULL,'<b>None</b> (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('PurpuraCheckBox',@PageID,NULL,'Purpura coli',NULL,NULL,'Purpura coli (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')
,('TransportedCheckBox',@PageID,NULL,'Transported blood',NULL,NULL,'Transported blood (checkbox)',NULL,NULL,'3,4,5,9','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_notes_notes_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('hintLabel',@PageID,NULL,'HintLabel',NULL,NULL,'Additional Notes Message (label)',NULL,NULL,'','Label',NULL,'0',NULL,'0')
,('NotesTextBox',@PageID,NULL,'',NULL,NULL,'Notes (text box)',NULL,NULL,'','RadTextBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_gastritis_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('Atrophic_Bleeding_ComboBox',@PageID,NULL,'Atrophic_Bleeding_ComboBox',NULL,NULL,'Atrophic Bleeding (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Atrophic_Severity_ComboBox',@PageID,NULL,'Atrophic_Severity_ComboBox',NULL,NULL,'Atrophic Severity (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Erythematous_Bleeding_ComboBox',@PageID,NULL,'Erythematous_Bleeding_ComboBox',NULL,NULL,'Erythematous Bleeding  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Erythematous_Severity_ComboBox',@PageID,NULL,'Erythematous_Severity_ComboBox',NULL,NULL,'Erythematous Severity  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('FlatErosive_Bleeding_ComboBox',@PageID,NULL,'FlatErosive_Bleeding_ComboBox',NULL,NULL,'FlatErosive Bleeding  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('FlatErosive_Severity_ComboBox',@PageID,NULL,'FlatErosive_Severity_ComboBox',NULL,NULL,'FlatErosive Severity  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Haemorrhagic_Bleeding_ComboBox',@PageID,NULL,'Haemorrhagic_Bleeding_ComboBox',NULL,NULL,'Haemorrhagic Bleeding  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Haemorrhagic_Severity_ComboBox',@PageID,NULL,'Haemorrhagic_Severity_ComboBox',NULL,NULL,'Haemorrhagic Severity  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('PromAreaeGastricae_Severity_ComboBox',@PageID,NULL,'PromAreaeGastricae_Severity_ComboBox',NULL,NULL,'PromAreaeGastricae Severity  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('RaisedErosive_Bleeding_ComboBox',@PageID,NULL,'RaisedErosive_Bleeding_ComboBox',NULL,NULL,'Raised Erosive Bleeding  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('RaisedErosive_Severity_ComboBox',@PageID,NULL,'RaisedErosive_Severity_ComboBox',NULL,NULL,'Raised Erosive Severity  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Reflux_Bleeding_ComboBox',@PageID,NULL,'Reflux_Bleeding_ComboBox',NULL,NULL,'Reflux Bleeding  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Reflux_Severity_ComboBox',@PageID,NULL,'Reflux_Severity_ComboBox',NULL,NULL,'Reflux Severity  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('RugalHyperplastic_Bleeding_ComboBox',@PageID,NULL,'RugalHyperplastic_Bleeding_ComboBox',NULL,NULL,'Rugal Hyperplastic Bleeding  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('RugalHyperplastic_Severity_ComboBox',@PageID,NULL,'RugalHyperplastic_Severity_ComboBox',NULL,NULL,'Rugal Hyperplastic Severity  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Vomiting_Bleeding_ComboBox',@PageID,NULL,'Vomiting_Bleeding_ComboBox',NULL,NULL,'Vomiting Bleeding  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Vomiting_Severity_ComboBox',@PageID,NULL,'Vomiting_Severity_ComboBox',NULL,NULL,'Vomiting Severity  (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Atrophic_CheckBox',@PageID,NULL,'Atrophic_CheckBox',NULL,NULL,'Atrophic (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('Erythematous_CheckBox',@PageID,NULL,'Erythematous_CheckBox',NULL,NULL,'Erythematous (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('FlatErosive_CheckBox',@PageID,NULL,'FlatErosive_CheckBox',NULL,NULL,'Flat Erosive (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('Haemorrhagic_CheckBox',@PageID,NULL,'Haemorrhagic_CheckBox',NULL,NULL,'Haemorrhagic (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('RaisedErosive_CheckBox',@PageID,NULL,'RaisedErosive_CheckBox',NULL,NULL,'Raised Erosive (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('Reflux_CheckBox',@PageID,NULL,'Reflux_CheckBox',NULL,NULL,'Reflux (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('RugalHyperplastic_CheckBox',@PageID,NULL,'RugalHyperplastic_CheckBox',NULL,NULL,'Rugal Hyperplastic (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('PromAreaeGastricae_CheckBox',@PageID,NULL,'PromAreaeGastricae_CheckBox',NULL,NULL,'PromAreae Gastricae (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('Vomiting_CheckBox',@PageID,NULL,'Vomiting_CheckBox',NULL,NULL,'Vomiting (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_gastriculcer_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('ActiveBleedingRadioButtonList',@PageID,NULL,'ActiveBleedingRadioButtonList',NULL,NULL,'ActiveBleeding (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('HealingUlcerRadioButtonList',@PageID,NULL,'HealingUlcerRadioButtonList',NULL,NULL,'HealingUlcer (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('PrevUlcerLabel',@PageID,NULL,'PrevUlcerLabel',NULL,NULL,'Previous gastric ulcer recorded message (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('TypeRadioButtonList',@PageID,NULL,'TypeRadioButtonList',NULL,NULL,'Type (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('VisibleVesselRadioButtonList',@PageID,NULL,'VisibleVesselRadioButtonList',NULL,NULL,'VisibleVessel (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('NotHealedRemarksTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('UlcerDiameterRadNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('UlcerNoRadNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('ActiveBleedingCheckBox',@PageID,NULL,'active bleeding',NULL,NULL,'active bleeding (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('FreshClotCheckBox',@PageID,NULL,'fresh clot in base',NULL,NULL,'fresh clot in base (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('HealedCheckBox',@PageID,NULL,'Healed',NULL,NULL,'Healed (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('HealingUlcerCheckBox',@PageID,NULL,'Healing Ulcer',NULL,NULL,'Healing Ulcer (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('MalignantCheckBox',@PageID,NULL,'malignant appearance',NULL,NULL,'malignant appearance (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('NotHealedCheckBox',@PageID,NULL,'Not Healed',NULL,NULL,'Not Healed (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('OverlyingCheckBox',@PageID,NULL,'overlying old blood',NULL,NULL,'overlying old blood (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PerforationCheckBox',@PageID,NULL,'perforation',NULL,NULL,'perforation (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('UlcerCheckBox',@PageID,NULL,'Ulcer',NULL,NULL,'Ulcer (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('VisibleVesselCheckBox',@PageID,NULL,'visible vessel',NULL,NULL,'visible vessel (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_lumen_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AlteredBlood_Amount_ComboBox',@PageID,NULL,'AlteredBlood_Amount_ComboBox',NULL,NULL,'Altered Blood Amount (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('AlteredBlood_Origin_ComboBox',@PageID,NULL,'AlteredBlood_Origin_ComboBox',NULL,NULL,'Altered Blood Origin (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Bile_Amount_ComboBox',@PageID,NULL,'Bile_Amount_ComboBox',NULL,NULL,'Bile Amount (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Food_Amount_ComboBox',@PageID,NULL,'Food_Amount_ComboBox',NULL,NULL,'Food Amount (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('FreshBlood_Amount_ComboBox',@PageID,NULL,'FreshBlood_Amount_ComboBox',NULL,NULL,'Fresh Blood Amount (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('FreshBlood_Origin_ComboBox',@PageID,NULL,'FreshBlood_Origin_ComboBox',NULL,NULL,'Fresh Blood Origin (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('FreshBlood_CheckBox',@PageID,NULL,'FreshBlood_CheckBox',NULL,NULL,'Fresh Blood (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('AlteredBlood_CheckBox',@PageID,NULL,'AlteredBlood_CheckBox',NULL,NULL,'Altered Blood (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('Food_CheckBox',@PageID,NULL,'Food_CheckBox',NULL,NULL,'Food (checkbox)',NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')
,('Bile_CheckBox',@PageID,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'1,6,8','RadButton',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_malignancy_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AdvCarcinomaBleedingRadioButtonList',@PageID,NULL,'AdvCarcinomaBleedingRadioButtonList',NULL,NULL,'AdvCarcinomaBleeding (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('AdvCarcinomaLesionRadioButtonList',@PageID,NULL,'AdvCarcinomaLesionRadioButtonList',NULL,NULL,'AdvCarcinomaLesion (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('EarlyCarcinomaBleedingRadioButtonList',@PageID,NULL,'EarlyCarcinomaBleedingRadioButtonList',NULL,NULL,'EarlyCarcinomaBleeding (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('EarlyCarcinomaLesionRadioButtonList',@PageID,NULL,'EarlyCarcinomaLesionRadioButtonList',NULL,NULL,'EarlyCarcinomaLesion (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('LymphomaBleedingRadioButtonList',@PageID,NULL,'LymphomaBleedingRadioButtonList',NULL,NULL,'LymphomaBleeding (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('LymphomaLesionRadioButtonList',@PageID,NULL,'LymphomaLesionRadioButtonList',NULL,NULL,'LymphomaLesion (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('AdvCarcinomaDiaNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('AdvCarcinomaEndNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('AdvCarcinomaStartNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('EarlyCarcinomaDiaNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('EarlyCarcinomaEndNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('EarlyCarcinomaStartNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('LymphomaDiaNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('LymphomaEndNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('LymphomaStartNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('AdvCarcinomaCheckBox',@PageID,NULL,'Established Gastric Carcinoma',NULL,NULL,'Established Gastric Carcinoma (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('EarlyCarcinomaCheckBox',@PageID,NULL,'Early Carcinoma',NULL,NULL,'Early Carcinoma (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('LymphomaCheckBox',@PageID,NULL,'Gastric Lymphoma',NULL,NULL,'Gastric Lymphoma (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_postsurgery_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('JejunumStateRadioButtonList',@PageID,NULL,'JejunumStateRadioButtonList',NULL,NULL,'JejunumState (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('SurgicalProcedureComboBox',@PageID,NULL,'SurgicalProcedureComboBox',NULL,NULL,'SurgicalProcedure (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('AbnormalTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('FindingsTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'NoneCheckBox',NULL,NULL,'No evidence of previous surgery (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SurgicalProcedureLabel',@PageID,NULL,'SurgicalProcedureLabel',NULL,NULL,'Surgical procedure: (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('FindingsLabel',@PageID,NULL,'FindingsLabel',NULL,NULL,'Findings: (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('DuodenumCheckBox',@PageID,NULL,'Duodenum not present',NULL,NULL,'Duodenum not present (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('JejunumCheckBox',@PageID,NULL,'Jejunum',NULL,NULL,'Jejunum (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SurgicalProcedureCheckBox',@PageID,NULL,'Previous surgery',NULL,NULL,'Previous surgery (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_deformity_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('OtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('ExtrinsicCompRadioButton',@PageID,NULL,'ExtrinsicCompRadioButton',NULL,NULL,'Extrinsic compression (radio button)',NULL,NULL,'1,6,8','RadioButton',NULL,'0',NULL,'0')
,('CupAndSpillRadioButton',@PageID,NULL,'CupAndSpillRadioButton',NULL,NULL,'Cup and spill stomach (radio button)',NULL,NULL,'1,6,8','RadioButton',NULL,'0',NULL,'0')
,('HourglassRadioButton',@PageID,NULL,'HourglassRadioButton',NULL,NULL,'Hourglass stomach (radio button)',NULL,NULL,'1,6,8','RadioButton',NULL,'0',NULL,'0')
,('PostOperativeRadioButton',@PageID,NULL,'PostOperativeRadioButton',NULL,NULL,'PostOperativeRadioButton (radio button)',NULL,NULL,'1,6,8','RadioButton',NULL,'0',NULL,'0')
,('JShapedRadioButton',@PageID,NULL,'JShapedRadioButton',NULL,NULL,'J-shaped stomach (radio button)',NULL,NULL,'1,6,8','RadioButton',NULL,'0',NULL,'0')
,('SubMucosalRadioButton',@PageID,NULL,'SubMucosalRadioButton',NULL,NULL,'Submucosal tumour (radio button)',NULL,NULL,'1,6,8','RadioButton',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_polyps_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('PedunculatedBenignTypeRadioButtonList',@PageID,NULL,'PedunculatedBenignTypeRadioButtonList',NULL,NULL,'PedunculatedBenignType (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('PedunculatedPolypRemovalTypeRadioButtonList',@PageID,NULL,'PedunculatedPolypRemovalTypeRadioButtonList',NULL,NULL,'PedunculatedPolypRemovalType (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('PedunculatedPolyRemovalRadioButtonList',@PageID,NULL,'PedunculatedPolyRemovalRadioButtonList',NULL,NULL,'PedunculatedPolyRemoval (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('PedunculatedTypeRadioButtonList',@PageID,NULL,'PedunculatedTypeRadioButtonList',NULL,NULL,'PedunculatedType (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('SessileBenignTypeRadioButtonList',@PageID,NULL,'SessileBenignTypeRadioButtonList',NULL,NULL,'SessileBenignType (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('SessilePolypRemovalTypeRadioButtonList',@PageID,NULL,'SessilePolypRemovalTypeRadioButtonList',NULL,NULL,'SessilePolypRemovalType (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('SessilePolyRemovalRadioButtonList',@PageID,NULL,'SessilePolyRemovalRadioButtonList',NULL,NULL,'SessilePolyRemoval (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('SessileTypeRadioButtonList',@PageID,NULL,'SessileTypeRadioButtonList',NULL,NULL,'SessileType (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('SubmucosalBenignTypeRadioButtonList',@PageID,NULL,'SubmucosalBenignTypeRadioButtonList',NULL,NULL,'SubmucosalBenignType (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('SubmucosalTypeRadioButtonList',@PageID,NULL,'SubmucosalTypeRadioButtonList',NULL,NULL,'SubmucosalType (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('PedunculatedLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedNumExcisedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedNumRetrievedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedNumToLabsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileNumExcisedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileNumRetrievedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileNumToLabsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SubmucosalLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SubmucosalNumExcisedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SubmucosalNumRetrievedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SubmucosalNumToLabsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SubmucosalQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PedunculatedActiveBleedingCheckBox',@PageID,NULL,'Active bleeding',NULL,NULL,'Active bleeding (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PedunculatedCheckBox',@PageID,NULL,'Pedunculated',NULL,NULL,'Pedunculated (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PedunculatedErodedCheckBox',@PageID,NULL,'Eroded',NULL,NULL,'Eroded (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PedunculatedMultipleCheckBox',@PageID,NULL,'Multiple',NULL,NULL,'Multiple (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PedunculatedOverlyingClotCheckBox',@PageID,NULL,'Overlying clot',NULL,NULL,'Overlying clot (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PedunculatedOverlyingOldBloodCheckBox',@PageID,NULL,'Overlying old blood',NULL,NULL,'Overlying old blood (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('PedunculatedUlceratedCheckBox',@PageID,NULL,'Ulcerated',NULL,NULL,'Ulcerated (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SessileActiveBleedingCheckBox',@PageID,NULL,'Active bleeding',NULL,NULL,'Active bleeding (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SessileCheckBox',@PageID,NULL,'Sessile',NULL,NULL,'Sessile (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SessileErodedCheckBox',@PageID,NULL,'Eroded',NULL,NULL,'Eroded (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SessileMultipleCheckBox',@PageID,NULL,'Multiple',NULL,NULL,'Multiple (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SessileOverlyingClotCheckBox',@PageID,NULL,'Overlying clot',NULL,NULL,'Overlying clot (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SessileOverlyingOldBloodCheckBox',@PageID,NULL,'Overlying old blood',NULL,NULL,'Overlying old blood (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SessileUlceratedCheckBox',@PageID,NULL,'Ulcerated',NULL,NULL,'Ulcerated (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SubmucosalActiveBleedingCheckBox',@PageID,NULL,'Active bleeding',NULL,NULL,'Active bleeding (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SubmucosalCheckBox',@PageID,NULL,'Submucosal (? Leiomyoma)',NULL,NULL,'Submucosal (? Leiomyoma) (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SubmucosalErodedCheckBox',@PageID,NULL,'Eroded',NULL,NULL,'Eroded (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SubmucosalMultipleCheckBox',@PageID,NULL,'Multiple',NULL,NULL,'Multiple (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SubmucosalOverlyingClotCheckBox',@PageID,NULL,'Overlying clot',NULL,NULL,'Overlying clot (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SubmucosalOverlyingOldBloodCheckBox',@PageID,NULL,'Overlying old blood',NULL,NULL,'Overlying old blood (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SubmucosalUlceratedCheckBox',@PageID,NULL,'Ulcerated',NULL,NULL,'Ulcerated (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_varices_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('BleedingRadioButtonList',@PageID,NULL,'BleedingRadioButtonList',NULL,NULL,'Bleeding (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('GradingRadioButtonList',@PageID,NULL,'GradingRadioButtonList',NULL,NULL,'Grading (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('RedSignRadioButtonList',@PageID,NULL,'RedSignRadioButtonList',NULL,NULL,'RedSign (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('QuantityNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'NoneCheckBox',NULL,NULL,'None (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('WhiteFibrinClotCheckBox',@PageID,NULL,'WhiteFibrinClotCheckBox',NULL,NULL,'White fibrin clot (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('MultipleCheckBox',@PageID,NULL,'Multiple',NULL,NULL,'Multiple (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_hiatushernia_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('ParaLengthTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('SlidingLengthTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (Check box)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('ParaoesophagealCheckBox',@PageID,NULL,'ParaoesophagealCheckBox',NULL,NULL,'Paraoesophageal (Checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('SlidingCheckBox',@PageID,NULL,'SlidingCheckBox',NULL,NULL,'Sliding (Checkbox)',NULL,NULL,'1,6,8','Checkbox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_oesophagitis_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('Caustic_Ingestion_Other_ComboBox',@PageID,NULL,'Caustic_Ingestion_Other_ComboBox',NULL,NULL,'Caustic_Ingestion_Other (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('MucosalAppearanceRadioButtonList',@PageID,NULL,'MucosalAppearanceRadioButtonList',NULL,NULL,'MucosalAppearance (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('Suspected_Candida_Other_ComboBox',@PageID,NULL,'Suspected_Candida_Other_ComboBox',NULL,NULL,'Suspected_Candida_Other_ (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Suspected_Herpes_Other_ComboBox',@PageID,NULL,'Suspected_Herpes_Other_ComboBox',NULL,NULL,'Suspected_Herpes_Other_ (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('OtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('MSM_RefluxCheckBox',@PageID,NULL,'MSM_RefluxCheckBox',NULL,NULL,'Refulx (checkbox)',NULL,NULL,'1,6,8','Checkbox',NULL,'0',NULL,'0')
,('MSM_ActiveBleedingCheckBox',@PageID,NULL,'MSM_ActiveBleedingCheckBox',NULL,NULL,'Active Bleeding (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Grade1CheckBox_ME',@PageID,NULL,'Grade1CheckBox_ME',NULL,NULL,'Grade 1 (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Grade1Label',@PageID,NULL,'Grade1Label',NULL,NULL,'Single or isolated erosion(s) (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('Grade2aCheckBox_ME',@PageID,NULL,'Grade2aCheckBox_ME',NULL,NULL,'Grade 2 (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Grade2aLabel',@PageID,NULL,'Grade2aLabel',NULL,NULL,'Multiple erosions, non-circumferential (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('Grade3CheckBox_ME',@PageID,NULL,'Grade3CheckBox_ME',NULL,NULL,'Grade 3 (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Grade3Label',@PageID,NULL,'Grade3Label',NULL,NULL,'Circumferential erosion',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('Grade4CheckBox',@PageID,NULL,'Grade4CheckBox',NULL,NULL,'Grade 4 (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Grade4Label',@PageID,NULL,'Grade4Label',NULL,NULL,'Chronic lesions (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('MSM_ShortOesophagusCheckBox',@PageID,NULL,'MSM_ShortOesophagusCheckBox',NULL,NULL,'Short oesophagus (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Grade5CheckBox',@PageID,NULL,'Grade5CheckBox',NULL,NULL,'Grade 5 (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Grade5Label',@PageID,NULL,'Grade5Label',NULL,NULL,'Barrett''s epithelium in continuity with the Z-line (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('Other_CheckBox',@PageID,NULL,'Other_CheckBox',NULL,NULL,'Other (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Caustic_Ingestion_CheckBox',@PageID,NULL,'Caustic_Ingestion_CheckBox',NULL,NULL,'Caustic ingestion (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Caustic_Ingestion_Other_ComboBox',@PageID,NULL,'Caustic_Ingestion_Other_ComboBox',NULL,NULL,'Caustic Ingestion Other (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Suspected_Candida_CheckBox',@PageID,NULL,'Suspected_Candida_CheckBox',NULL,NULL,'Suspected candida (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Suspected_Candida_Other_ComboBox',@PageID,NULL,'Suspected_Candida_Other_ComboBox',NULL,NULL,'Suspected Candida (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Suspected_Herpes_CheckBox',@PageID,NULL,'Suspected_Herpes_CheckBox',NULL,NULL,'Suspected Herpes (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Suspected_Herpes_Other_ComboBox',@PageID,NULL,'Suspected_Herpes_Other_ComboBox',NULL,NULL,'Suspected Herpes (dropdown)',NULL,NULL,'1,6,8','RadComboBox',NULL,'0',NULL,'0')
,('Other_Other_CheckBox',@PageID,NULL,'Other_Other_CheckBox',NULL,NULL,'Other (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('OtherTextBox',@PageID,NULL,'OtherTextBox',NULL,NULL,'Other (textbox)',NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('Grade2bCheckBox_ME',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('Grade2bLabel',@PageID,NULL,'As 2a, with confluence, but not circumferential',NULL,NULL,'As 2a, with confluence, but not circumferential (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('LA_ActiveBleedingCheckBox',@PageID,NULL,'with active bleeding',NULL,NULL,'with active bleeding (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('LA_RefluxCheckBox',@PageID,NULL,'Reflux',NULL,NULL,'Reflux (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('LA_ShortOesophagusCheckBox',@PageID,NULL,'Short oesophagus',NULL,NULL,'Short oesophagus (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'No oesophagitis',NULL,NULL,'No oesophagitis (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_barrettepithelium_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('C1RadNumericTextBox',@PageID,NULL,'',NULL,NULL,'M (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('C2RadNumericTextBox',@PageID,NULL,'',NULL,NULL,'C (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('D1RadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Distance (Maximal extent) (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('D2RadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Distance (Extent of circumferential metaplasia) (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('D3RadNumericTextBox',@PageID,NULL,'',NULL,NULL,'Distance (GOJ) (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('DistalNumericTextBox',@PageID,NULL,'',NULL,NULL,'Distal (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('ProximalNumericTextBox',@PageID,NULL,'',NULL,NULL,'Proximal (text box)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('BarrettIslandsCheckBox',@PageID,NULL,'Barrett''s islands, distance (ab oral) cm',NULL,NULL,'Barrett Islands (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (check box)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DistalLabel',@PageID,NULL,'DistalLabel',NULL,NULL,'Distal (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('ProximalLabel',@PageID,NULL,'ProximalLabel',NULL,NULL,'Proximal (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('MaximalExtentLabel',@PageID,NULL,'MaximalExtentLabel',NULL,NULL,'Maximal extent of metaplasia (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('ExtentLabel',@PageID,NULL,'ExtentLabel',NULL,NULL,'Extent of circumferential metaplasia',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('GOJLabel',@PageID,NULL,'GOJLabel',NULL,NULL,'Gastro-oesophageal junction (GOJ)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('DistanceEntryNoteLabel',@PageID,NULL,'DistanceEntryNoteLabel',NULL,NULL,'Note: You can either enter all three valid Ab oral distances or alternatively record just M and C values. (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')
,('DistanceAbOralLabel',@PageID,NULL,'DistanceAbOralLabel',NULL,NULL,'Distance Ab oral (cm) (label)',NULL,NULL,'1,6,8','Label',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_miscellaneous_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('CheckBox1',@PageID,NULL,'Web',NULL,NULL,'Web (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox10',@PageID,NULL,'Confirmed achalasia',NULL,NULL,'Confirmed achalasia (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox11',@PageID,NULL,'Presbyoesophagus',NULL,NULL,'Presbyoesophagus (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox12',@PageID,NULL,'Ulceration',NULL,NULL,'Ulceration (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox13',@PageID,NULL,'Pulsion type',NULL,NULL,'Pulsion type (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox14',@PageID,NULL,'Traction type',NULL,NULL,'Traction type (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox15',@PageID,NULL,'Diffuse intramural',NULL,NULL,'Diffuse intramural (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox16',@PageID,NULL,'Pharyngeal (Zenker''s)',NULL,NULL,'Pharyngeal (Zenker''s) (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox17',@PageID,NULL,'Lax lower oesophageal sphincter',NULL,NULL,'Lax lower oesophageal sphincter (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox18',@PageID,NULL,'Tortuous oesophagus',NULL,NULL,'Tortuous oesophagus (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox19',@PageID,NULL,'Clot in base',NULL,NULL,'Clot in base (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox2',@PageID,NULL,'Mallory - Weiss tear',NULL,NULL,'Mallory - Weiss tear (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox20',@PageID,NULL,'Dilated oesophagus',NULL,NULL,'Dilated oesophagus (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox21',@PageID,NULL,'Poor motility',NULL,NULL,'Poor motility (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox22',@PageID,NULL,'Post banding',NULL,NULL,'Post banding (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox23',@PageID,NULL,'Reflux (grade 4)',NULL,NULL,'Reflux (grade 4) (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox25',@PageID,NULL,'Post sclerotherapy',NULL,NULL,'Post sclerotherapy (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox27',@PageID,NULL,'(probably)',NULL,NULL,'(probably) (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox28',@PageID,NULL,'''scope could not pass',NULL,NULL,'''scope could not pass (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox29',@PageID,NULL,'Foreign body',NULL,NULL,'Foreign body (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox3',@PageID,NULL,'Schatzki ring',NULL,NULL,'Schatzki ring (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox4',@PageID,NULL,'Food residue',NULL,NULL,'Food residue (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox7',@PageID,NULL,'Motility disorder',NULL,NULL,'Motility disorder (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox8',@PageID,NULL,'Marked tertiary contractions',NULL,NULL,'Marked tertiary contractions (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('CheckBox9',@PageID,NULL,'Probable achalasia',NULL,NULL,'Probable achalasia (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DiverticulumCheckBox',@PageID,NULL,'Diverticulum',NULL,NULL,'Diverticulum (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DivertMultipleCheckBox',@PageID,NULL,'Multiple <i>OR</i> qty',NULL,NULL,'Multiple  <i>OR</i>  qty (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('DivertQtyNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('InletPatchCheckBox',@PageID,NULL,'Inlet patch',NULL,NULL,'Inlet patch (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('InletPatchMultipleCheckBox',@PageID,NULL,'Multiple  <i>OR</i> qty',NULL,NULL,'Multiple <i>OR</i> qty (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('InletPatchQtyNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('MiscOtherCheckBox',@PageID,NULL,'Other',NULL,NULL,'Other (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('MiscOtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('StrictureBeginningNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('StrictureBenignTypeRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureCheckBox',@PageID,NULL,'Stricture',NULL,NULL,'Stricture (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('StrictureCompressionRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureLengthNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('StricturePerforationRadioButtonList',@PageID,NULL,'0',NULL,NULL,'0 (radio buttons)',NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureSeverityRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureTypeRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('TumourBeginningNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('TumourBenignTypeOtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('TumourBenignTypeRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('TumourCheckBox',@PageID,NULL,'Tumour',NULL,NULL,'Tumour (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('TumourExophyticRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('TumourLengthNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('TumourMalignantTypeOtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadTextBox',NULL,'0',NULL,'0')
,('TumourMalignantTypeRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('TumourProbablyCheckBox',@PageID,NULL,'(probably)',NULL,NULL,'(probably) (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('TumourTypeRadioButtonList',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,6,8','RadioButtonList',NULL,'0',NULL,'0')
,('UlcerationLengthNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('UlcerationMultipleCheckBox',@PageID,NULL,'Multiple  <i>OR</i>  qty',NULL,NULL,'Multiple  <i>OR</i>  qty (checkbox)',NULL,NULL,'1,6,8','CheckBox',NULL,'0',NULL,'0')
,('UlcerationQtyNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'1,6,8','RadNumericTextBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_colon_perianallesions_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('BandingNumRadNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5','RadNumericTextBox',NULL,'0',NULL,'0')
,('QuantityRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'3,4,5','RadNumericTextBox',NULL,'0',NULL,'0')
,('Acute_Checkbox',@PageID,NULL,'acute',NULL,NULL,'acute (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('Anal_Checkbox',@PageID,NULL,'Anal fissure',NULL,NULL,'Anal fissure (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('BandingPilesCheckBox',@PageID,NULL,'Banding of piles',NULL,NULL,'Banding of piles (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('Cancer_Checkbox',@PageID,NULL,'Perianal cancer',NULL,NULL,'Perianal cancer (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('Chronic_Checkbox',@PageID,NULL,'chronic',NULL,NULL,'chronic (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('Fistula_Checkbox',@PageID,NULL,'Perianal fistula',NULL,NULL,'Perianal fistula (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('Haemorrhoids_Checkbox',@PageID,NULL,'Haemorrhoids',NULL,NULL,'Haemorrhoids (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('Herpes_CheckBox',@PageID,NULL,'Herpes simplex',NULL,NULL,'Herpes simplex (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'<b>None</b>',NULL,NULL,'<b>None</b> (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('Skin_CheckBox',@PageID,NULL,'Skin tag',NULL,NULL,'Skin tag (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')
,('Wart_Checkbox',@PageID,NULL,'Perianal warts',NULL,NULL,'Perianal warts (checkbox)',NULL,NULL,'3,4,5','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_colon_lesions_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('Pedunculated_Removal_ComboBox',@PageID,NULL,'Pedunculated_Removal_ComboBox',NULL,NULL,'Pedunculated_Removal_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('Pedunculated_Removal_Method_ComboBox',@PageID,NULL,'Pedunculated_Removal_Method_ComboBox',NULL,NULL,'Pedunculated_Removal_Method_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('Pedunculated_Type_ComboBox',@PageID,NULL,'Pedunculated_Type_ComboBox',NULL,NULL,'Pedunculated_Type_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('PolypTattooedRadioButtonList',@PageID,NULL,'PolypTattooedRadioButtonList',NULL,NULL,'PolypTattooed (radio buttons)',NULL,NULL,'3,4,5,8,9','RadioButtonList',NULL,'0',NULL,'0')
,('Pseudo_Removal_ComboBox',@PageID,NULL,'Pseudo_Removal_ComboBox',NULL,NULL,'Pseudo_Removal_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('Pseudo_Removal_Method_ComboBox',@PageID,NULL,'Pseudo_Removal_Method_ComboBox',NULL,NULL,'Pseudo_Removal_Method_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('Sessile_Removal_ComboBox',@PageID,NULL,'Sessile_Removal_ComboBox',NULL,NULL,'Sessile_Removal_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('Sessile_Removal_Method_ComboBox',@PageID,NULL,'Sessile_Removal_Method_ComboBox',NULL,NULL,'Sessile_Removal_Method_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('Sessile_Type_ComboBox',@PageID,NULL,'Sessile_Type_ComboBox',NULL,NULL,'Sessile_Type_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('Tattoo_Marking_ComboBox',@PageID,NULL,'Tattoo_Marking_ComboBox',NULL,NULL,'Tattoo_Marking_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('TattooedByRadioButtonList',@PageID,NULL,'TattooedByRadioButtonList',NULL,NULL,'TattooedBy (radio buttons)',NULL,NULL,'3,4,5,8,9','RadioButtonList',NULL,'0',NULL,'0')
,('Tumour_Type_ComboBox',@PageID,NULL,'Tumour_Type_ComboBox',NULL,NULL,'Tumour_Type_ (dropdown)',NULL,NULL,'3,4,5,8,9','RadComboBox',NULL,'0',NULL,'0')
,('TumourRadioButtonList',@PageID,NULL,'TumourRadioButtonList',NULL,NULL,'Tumour (radio buttons)',NULL,NULL,'3,4,5,8,9','RadioButtonList',NULL,'0',NULL,'0')
,('DysplasticLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('DysplasticQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('GranulomaLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('GranulomaQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedExcisedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedPolypsQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedRetrievedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PedunculatedToLabsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PseudoExcisedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PseudoLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PseudoPolypsQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PseudoRetrievedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('PseudoToLabsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileExcisedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileRetrievedNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('SessileToLabsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('TattooedQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('TumourLargestNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')
,('TumourQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'3,4,5,8,9','RadNumericTextBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ercp_duct_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('CystsSuspectedTypeRadioButtonList',@PageID,NULL,'CystsSuspectedTypeRadioButtonList',NULL,NULL,'CystsSuspectedType (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('DilatedTypeRadioButtonList',@PageID,NULL,'DilatedTypeRadioButtonList',NULL,NULL,'DilatedType (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('HeadingLabel',@PageID,NULL,'Duct',NULL,NULL,'Duct (label)',NULL,NULL,'2,7','Label',NULL,'0',NULL,'0')
,('StrictureTypeRadioButtonList',@PageID,NULL,'StrictureTypeRadioButtonList',NULL,NULL,'StrictureType (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('CystsDiameterNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('CystsQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('DilatedLengthNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('FistulaQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('StonesQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('StonesSizeNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('StrictureLengthNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('CholangiocarcinomaCheckBox',@PageID,NULL,'cholangiocarcinoma',NULL,NULL,'cholangiocarcinoma (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CommentsTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('CompleteBlockCheckBox',@PageID,NULL,'complete block',NULL,NULL,'complete block (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CutaneousCheckBox',@PageID,NULL,'cutaneous',NULL,NULL,'cutaneous (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CystsCheckBox',@PageID,NULL,'Cysts',NULL,NULL,'Cysts (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CystsCholedochalCheckBox',@PageID,NULL,'choledochal cyst',NULL,NULL,'choledochal cyst (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CystsCommunicatingCheckBox',@PageID,NULL,'communicating with biliary duct',NULL,NULL,'communicating with biliary duct (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CystsIrregularCheckBox',@PageID,NULL,'irregular',NULL,NULL,'irregular (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CystsLoculatedCheckBox',@PageID,NULL,'loculated',NULL,NULL,'loculated (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CystsMultipleCheckBox',@PageID,NULL,'multiple',NULL,NULL,'multiple (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CystsRegularCheckBox',@PageID,NULL,'regular',NULL,NULL,'regular (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CystsSimpleCheckBox',@PageID,NULL,'simple',NULL,NULL,'simple (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('DilatedCheckBox',@PageID,NULL,'Dilated',NULL,NULL,'Dilated (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ExternalCompressionCheckBox',@PageID,NULL,'external compression (metastases)',NULL,NULL,'external compression (metastases) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('FistulaCheckBox',@PageID,NULL,'Fistula',NULL,NULL,'Fistula (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('IrregularCheckBox',@PageID,NULL,'irregular',NULL,NULL,'irregular (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('NormalCheckBox',@PageID,NULL,'Normal',NULL,NULL,'Normal (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ProbablyCheckBox',@PageID,NULL,'probably',NULL,NULL,'probably (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ShoulderedCheckBox',@PageID,NULL,'shouldered',NULL,NULL,'shouldered (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('SmoothCheckBox',@PageID,NULL,'smooth',NULL,NULL,'smooth (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StonesCheckBox',@PageID,NULL,'Stones',NULL,NULL,'Stones (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StonesMultipleCheckBox',@PageID,NULL,'multiple',NULL,NULL,'multiple (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StrictureCheckBox',@PageID,NULL,'Stricture',NULL,NULL,'Stricture (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('TortuousCheckBox',@PageID,NULL,'tortuous',NULL,NULL,'tortuous (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('UpstreamDilatationCheckBox',@PageID,NULL,'with upstream dilatation',NULL,NULL,'with upstream dilatation (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('VisceralCheckBox',@PageID,NULL,'visceral',NULL,NULL,'visceral (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ercp_parenchyma_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('MassTypeRadioButtonList',@PageID,NULL,'MassTypeRadioButtonList',NULL,NULL,'MassType (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('MultipleStricturesRadioButtonList',@PageID,NULL,'MultipleStricturesRadioButtonList',NULL,NULL,'MultipleStrictures (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('SpideryDuctulesRadioButtonList',@PageID,NULL,'SpideryDuctulesRadioButtonList',NULL,NULL,'SpideryDuctules (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('DilatedDuctulesCheckBox',@PageID,NULL,'Dilated ductules',NULL,NULL,'Dilated ductules (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('IntrahepaticStonesCheckBox',@PageID,NULL,'Intrahepatic stones',NULL,NULL,'Intrahepatic stones (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('IrregularDuctulesCheckBox',@PageID,NULL,'Irregular ductules',NULL,NULL,'Irregular ductules (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('MassDistortingAnatomyCheckBox',@PageID,NULL,'Mass distorting anatomy',NULL,NULL,'Mass distorting anatomy (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('MultipleStricturesCheckBox',@PageID,NULL,'Multiple strictures/dilatation',NULL,NULL,'Multiple strictures/dilatation (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'No abnormalities detected',NULL,NULL,'No abnormalities detected (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ProbablyCheckBox',@PageID,NULL,'probably',NULL,NULL,'probably (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('SmallLakesCheckBox',@PageID,NULL,'Small lakes',NULL,NULL,'Small lakes (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('SpideryStretchedDuctulesCheckBox',@PageID,NULL,'Spidery stretched ductules',NULL,NULL,'Spidery stretched ductules (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StricturesCheckBox',@PageID,NULL,'Strictures',NULL,NULL,'Strictures (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_common_papillaryanatomy_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('MajorNoOfOpeningsRadioButtonList',@PageID,NULL,'1',NULL,NULL,'1 (radio buttons)',NULL,NULL,'2','RadioButtonList',NULL,'0',NULL,'0')
,('MajorSiteLocationRadioButtonList',@PageID,NULL,'2',NULL,NULL,'2 (radio buttons)',NULL,NULL,'2','RadioButtonList',NULL,'0',NULL,'0')
,('MajorSizeRadioButtonList',@PageID,NULL,'1',NULL,NULL,'1 (radio buttons)',NULL,NULL,'2','RadioButtonList',NULL,'0',NULL,'0')
,('MinorSiteLocationRadioButtonList',@PageID,NULL,'4',NULL,NULL,'4 (radio buttons)',NULL,NULL,'2','RadioButtonList',NULL,'0',NULL,'0')
,('MinorSizeRadioButtonList',@PageID,NULL,'1',NULL,NULL,'1 (radio buttons)',NULL,NULL,'2','RadioButtonList',NULL,'0',NULL,'0')
,('MajorEndoscopicSizeTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2','RadNumericTextBox',NULL,'0',NULL,'0')
,('MajorOperativeSizeTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2','RadNumericTextBox',NULL,'0',NULL,'0')
,('MajorSphincteroplastySizeTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2','RadNumericTextBox',NULL,'0',NULL,'0')
,('MinorEndoscopicSizeTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2','RadNumericTextBox',NULL,'0',NULL,'0')
,('MinorOperativeSizeTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2','RadNumericTextBox',NULL,'0',NULL,'0')
,('MajorCholedochoduodenostomyCheckBox',@PageID,NULL,'choledochoduodenostomy',NULL,NULL,'choledochoduodenostomy (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MajorEndoscopicCheckBox',@PageID,NULL,'endoscopic sphincterotomy',NULL,NULL,'endoscopic sphincterotomy (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MajorFloppyCheckBox',@PageID,NULL,'floppy',NULL,NULL,'floppy (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MajorOperativeCheckBox',@PageID,NULL,'operative sphincterotomy',NULL,NULL,'operative sphincterotomy (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MajorSphincteroplastyCheckBox',@PageID,NULL,'sphincteroplasty',NULL,NULL,'sphincteroplasty (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MajorStenosedCheckBox',@PageID,NULL,'stenosed',NULL,NULL,'stenosed (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MajorSurgeryNoneCheckBox',@PageID,NULL,'none',NULL,NULL,'none (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MinorEndoscopicCheckBox',@PageID,NULL,'endoscopic sphincterotomy',NULL,NULL,'endoscopic sphincterotomy (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MinorOperativeCheckBox',@PageID,NULL,'operative sphincterotomy',NULL,NULL,'operative sphincterotomy (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MinorStenosedCheckBox',@PageID,NULL,'stenosed',NULL,NULL,'stenosed (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')
,('MinorSurgeryNoneCheckBox',@PageID,NULL,'none',NULL,NULL,'none (checkbox)',NULL,NULL,'2','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_therapeuticprocedures_ercptherapeuticprocedures_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('BalloonDecompressedRadioButton',@PageID,NULL,'BalloonDecompressedRadioButton',NULL,NULL,'Decompressed the duct (radio button)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('BalloonDilatationUnitsComboBox',@PageID,NULL,'BalloonDilatationUnitsComboBox',NULL,NULL,'BalloonDilatationUnits (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('BalloonDilatorTypeComboBox',@PageID,NULL,'BalloonDilatorTypeComboBox',NULL,NULL,'BalloonDilatorType (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('BalloonTrawlDilatorTypeComboBox',@PageID,NULL,'BalloonTrawlDilatorTypeComboBox',NULL,NULL,'BalloonTrawlDilatorType (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('BalloonTrawlDilatorUnitsComboBox',@PageID,NULL,'BalloonTrawlDilatorUnitsComboBox',NULL,NULL,'BalloonTrawlDilatorUnits (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('CystPunctureDeviceComboBox',@PageID,NULL,'CystPunctureDeviceComboBox',NULL,NULL,'CystPunctureDevice (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('CystPunctureViaRadioButtonList',@PageID,NULL,'CystPunctureViaRadioButtonList',NULL,NULL,'CystPunctureVia (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('EmrFluidComboBox',@PageID,NULL,'EmrFluidComboBox',NULL,NULL,'EmrFluid (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('EmrTypeRadioButtonList',@PageID,NULL,'EmrTypeRadioButtonList',NULL,NULL,'EmrType (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('ExtractionOutcomeRadioButtonList',@PageID,NULL,'ExtractionOutcomeRadioButtonList',NULL,NULL,'ExtractionOutcome (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('GastrostomyInsertionTypeComboBox',@PageID,NULL,'GastrostomyInsertionTypeComboBox',NULL,NULL,'GastrostomyInsertionType (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionUnitsComboBox',@PageID,NULL,'GastrostomyInsertionUnitsComboBox',NULL,NULL,'GastrostomyInsertionUnits (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('InjectionTypeComboBox',@PageID,NULL,'InjectionTypeComboBox',NULL,NULL,'InjectionType (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('MarkingTypeComboBox',@PageID,NULL,'MarkingTypeComboBox',NULL,NULL,'MarkingType (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('PapillotomyBleedingRadioButtonList',@PageID,NULL,'PapillotomyBleedingRadioButtonList',NULL,NULL,'PapillotomyBleeding (radio buttons)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('ReasonForPapillotomyComboBox',@PageID,NULL,'ReasonForPapillotomyComboBox',NULL,NULL,'ReasonForPapillotomy (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('RemovalUsingComboBox',@PageID,NULL,'RemovalUsingComboBox',NULL,NULL,'RemovalUsing (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('SphincterDecompressedRadioButton',@PageID,NULL,'SphincterDecompressedRadioButton',NULL,NULL,'Sphincter Decompressed (radio button)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('SphincterotomeComboBox',@PageID,NULL,'SphincterotomeComboBox',NULL,NULL,'Sphincterotome (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('StentCorrectPlacementRadioButton',@PageID,NULL,'StentCorrectPlacementRadioButton',NULL,NULL,'Stent Correct Placement (radio button)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('StentDecompressedRadioButton',@PageID,NULL,'StentDecompressedRadioButton',NULL,NULL,'Stent Decompressed (radio button)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('StentInsertionDiaUnitsComboBox',@PageID,NULL,'StentInsertionDiaUnitsComboBox',NULL,NULL,'StentInsertionDiaUnits (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('StentInsertionTypeComboBox',@PageID,NULL,'StentInsertionTypeComboBox',NULL,NULL,'StentInsertionType (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('StentRemovalTechniqueComboBox',@PageID,NULL,'StentRemovalTechniqueComboBox',NULL,NULL,'StentRemovalTechnique (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('StoneRemovalDecompressedRadioButton',@PageID,NULL,'StoneRemovalDecompressedRadioButton',NULL,NULL,'Stone Removal Decompressed (radio button)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureDecompressedRadioButton',@PageID,NULL,'StrictureDecompressedRadioButton',NULL,NULL,'Stricture Decompressed (radio button)',NULL,NULL,'2,7','RadioButtonList',NULL,'0',NULL,'0')
,('StrictureDilatationUnitsComboBox',@PageID,NULL,'StrictureDilatationUnitsComboBox',NULL,NULL,'StrictureDilatationUnits (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('StrictureDilatorTypeComboBox',@PageID,NULL,'StrictureDilatorTypeComboBox',NULL,NULL,'StrictureDilatorType (dropdown)',NULL,NULL,'2,7','RadComboBox',NULL,'0',NULL,'0')
,('AddNewItemRadTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermyKJNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermyPulsesNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermySecsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermyWattsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('BalloonDilatedToNumber',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('BalloonTrawlDilatorSizeTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('ClipRadNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('ClipTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('EmrFluidVolNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionBatchNoTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionSizeNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('InjectionNumberNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('InjectionVolumeNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('NilByMouthHrsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('NilByProcHrsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('OesoDilNilByMouthHrsRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('OesoDilSoftDietDaysRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('OesoDilWarmFluidsHrsRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('OesoDilXRayHrsRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('OtherReasonTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('OtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('PapillotomyAcceptBalloonSizeTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('PapillotomyLengthTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('RadNumericTextBox1',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('RadNumericTextBox2',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('RadTextBox1',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('StentInsertionBatchNoTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadTextBox',NULL,'0',NULL,'0')
,('StentInsertionDiaNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('StentInsertionLengthNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('StentInsertionQtyNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('StrictureDilatedToNumericBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('YAGDilNilByMouthHrsRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagDilSoftDietDaysRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagDilWarmFluidsHrsRadNumericTextBox',@PageID,NULL,'0',NULL,NULL,'0 (radnumerictextbox)',NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagLaserKJNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagLaserPulsesNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagLaserSecsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('YagLaserWattsNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'2,7','RadNumericTextBox',NULL,'0',NULL,'0')
,('ArgonBeamDiathermyCheckBox',@PageID,NULL,'Argon beam diathermy',NULL,NULL,'Argon beam diathermy (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('AttachmentToWardCheckBox',@PageID,NULL,'All attachments for feeding returned to the ward with patient',NULL,NULL,'All attachments for feeding returned to the ward with patient (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('BalloonDilationCheckBox',@PageID,NULL,'Balloon sphincteroplasty',NULL,NULL,'Balloon sphincteroplasty (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('BalloonTrawlCheckBox',@PageID,NULL,'Balloon trawl',NULL,NULL,'Balloon trawl (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('BandLigationCheckBox',@PageID,NULL,'Band ligation',NULL,NULL,'Band ligation (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('BicapElectroCheckBox',@PageID,NULL,'Bicap electrocautery',NULL,NULL,'Bicap electrocautery (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('BotoxInjectionCheckBox',@PageID,NULL,'Botox injection',NULL,NULL,'Botox injection (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CannulationCheckBox',@PageID,NULL,'Cannulation',NULL,NULL,'Cannulation (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CheckBox1',@PageID,NULL,'Nil by mouth for',NULL,NULL,'Nil by mouth for (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CheckBox2',@PageID,NULL,'Nil by NJT for',NULL,NULL,'Nil by NJT for (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('CheckBox3',@PageID,NULL,'All attachments for feeding returned to the ward with patient',NULL,NULL,'All attachments for feeding returned to the ward with patient (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('chkNoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ClipCheckBox',@PageID,NULL,'Clip',NULL,NULL,'Clip (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('DiagnosticCholangiogramCheckBox',@PageID,NULL,'Diagnostic cholangiogram',NULL,NULL,'Diagnostic cholangiogram (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('DiagnosticPancreatogramCheckBox',@PageID,NULL,'Diagnostic pancreatogram',NULL,NULL,'Diagnostic pancreatogram (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('DiathermyCheckBox',@PageID,NULL,'Diathermy',NULL,NULL,'Diathermy (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EmrCheckBox',@PageID,NULL,'Endoscopic',NULL,NULL,'Endoscopic (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EndoloopPlacementCheckBox',@PageID,NULL,'Endoloop placement',NULL,NULL,'Endoloop placement (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('EndoscopicCystPunctureCheckBox',@PageID,NULL,'Endoscopic cyst puncture',NULL,NULL,'Endoscopic cyst puncture (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ForeignBodyCheckBox',@PageID,NULL,'Foreign body removal',NULL,NULL,'Foreign body removal (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('GastrostomyInsertionCheckBox',@PageID,NULL,'Nasojejunal tube (NJT)',NULL,NULL,'Nasojejunal tube (NJT) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('HaemostasisCheckBox',@PageID,NULL,'Haemostasis',NULL,NULL,'Haemostasis (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('HeatProbeCheckBox',@PageID,NULL,'Heater probe coagulation',NULL,NULL,'Heater probe coagulation (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('HotBiopsyCheckBox',@PageID,NULL,'Hot biopsy',NULL,NULL,'Hot biopsy (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ImpactedStonesCheckBox',@PageID,NULL,'impacted stone(s)',NULL,NULL,'impacted stone(s) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('InadequateSphincterotomyCheckBox',@PageID,NULL,'inadequate sphincterotomy',NULL,NULL,'inadequate sphincterotomy (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('InjectionTherapyCheckBox',@PageID,NULL,'Injection therapy',NULL,NULL,'Injection therapy (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('ManometryCheckBox',@PageID,NULL,'Manometry',NULL,NULL,'Manometry (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('MarkingCheckBox',@PageID,NULL,'Marking',NULL,NULL,'Marking (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('NasojejunalRemovalCheckBox',@PageID,NULL,'Nasojejunal removal (NJT)',NULL,NULL,'Nasojejunal removal (NJT) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('NasopancreaticDrainCheckBox',@PageID,NULL,'Nasobiliary drain',NULL,NULL,'Nasobiliary drain (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('NilByMouthCheckBox',@PageID,NULL,'Nil by mouth for',NULL,NULL,'Nil by mouth for (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('NilByProcCheckBox',@PageID,NULL,'Nil by PEG for',NULL,NULL,'Nil by PEG for (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('OesoDilMedicalReviewCheckBox',@PageID,NULL,'Medical review before discharge',NULL,NULL,'Medical review before discharge (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('OesoDilNilByMouthCheckBox',@PageID,NULL,'Nil by mouth for',NULL,NULL,'Nil by mouth for (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('OesoDilSoftDietCheckBox',@PageID,NULL,'Soft diet for',NULL,NULL,'Soft diet for (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('OesoDilWarmFluidsCheckBox',@PageID,NULL,'Warm fluids only',NULL,NULL,'Warm fluids only (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('OesoDilXRayCheckBox',@PageID,NULL,'Chest X-ray after',NULL,NULL,'Chest X-ray after (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('OtherReasonCheckBox',@PageID,NULL,'other',NULL,NULL,'other (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('PanOrificeSphincterotomyCheckBox',@PageID,NULL,'Pancreatic orifice sphincterotomy',NULL,NULL,'Pancreatic orifice sphincterotomy (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('PapillotomyCheckBox',@PageID,NULL,'Sphincterotomy',NULL,NULL,'Sphincterotomy (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('PyloricDilatationCheckBox',@PageID,NULL,'Pyloric/duodenal dilatation',NULL,NULL,'Pyloric/duodenal dilatation (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('QuantityOfStonesCheckBox',@PageID,NULL,'quantity of stones',NULL,NULL,'quantity of stones (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('RadioactiveWirePlacedCheckBox',@PageID,NULL,'Radiotherapeutic wire placed',NULL,NULL,'Radiotherapeutic wire placed (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('RendezvousProcedureCheckBox',@PageID,NULL,'Combined procedure (Rendez-vous)',NULL,NULL,'Combined procedure (Rendez-vous) (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('SnareExcisionCheckBox',@PageID,NULL,'Snare excision',NULL,NULL,'Snare excision (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StentInsertionCheckBox',@PageID,NULL,'Stent insertion',NULL,NULL,'Stent insertion (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StentRemovalCheckBox',@PageID,NULL,'Stent removal',NULL,NULL,'Stent removal (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StoneRemovalCheckBox',@PageID,NULL,'Stone removal',NULL,NULL,'Stone removal (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StoneSizeCheckBox',@PageID,NULL,'stone size',NULL,NULL,'stone size (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('StrictureDilatationCheckBox',@PageID,NULL,'Stricture dilatation',NULL,NULL,'Stricture dilatation (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('YagDilMedicalReviewCheckBox',@PageID,NULL,'Medical review before discharge',NULL,NULL,'Medical review before discharge (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('YAGDilNilByMouthCheckBox',@PageID,NULL,'Nil by mouth for',NULL,NULL,'Nil by mouth for (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('YagDilSoftDietCheckBox',@PageID,NULL,'Soft diet for',NULL,NULL,'Soft diet for (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('YagDilWarmFluidsCheckBox',@PageID,NULL,'Warm fluids only',NULL,NULL,'Warm fluids only (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')
,('YagLaserCheckBox',@PageID,NULL,'YAG laser',NULL,NULL,'YAG laser (checkbox)',NULL,NULL,'2,7','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_common_diverticulum_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('OtherTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,2,6,7,8','RadTextBox',NULL,'0',NULL,'0')
,('FirstPartCheckBox',@PageID,NULL,'1st part',NULL,NULL,'1st part (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('OtherCheckBox',@PageID,NULL,'Other',NULL,NULL,'Other (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('PseudodiverticulumCheckBox',@PageID,NULL,'Pseudodiverticulum',NULL,NULL,'Pseudodiverticulum (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('SecondPartCheckBox',@PageID,NULL,'2nd part',NULL,NULL,'2nd part (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_common_tumour_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('ExternalInvasionCheckBox',@PageID,NULL,'External invasion',NULL,NULL,'External invasion (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('PrimaryCheckBox',@PageID,NULL,'Primary',NULL,NULL,'Primary (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_common_duodenitis_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('Duodenitis_Bleeding_ComboBox',@PageID,NULL,'Duodenitis_Bleeding_ComboBox',NULL,NULL,'Duodenitis_Bleeding_ (dropdown)',NULL,NULL,'1,2,6,7,8','RadComboBox',NULL,'0',NULL,'0')
,('Duodenitis_Severity_ComboBox',@PageID,NULL,'Duodenitis_Severity_ComboBox',NULL,NULL,'Duodenitis_Severity_ (dropdown)',NULL,NULL,'1,2,6,7,8','RadComboBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_common_scarring_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('DeformityCheckBox',@PageID,NULL,'deformity',NULL,NULL,'deformity (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('PseudodiverticulumCheckBox',@PageID,NULL,'not entered',NULL,NULL,'not entered (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('PseudodiverticulumCheckBox',@PageID,NULL,'pseudodiverticulum',NULL,NULL,'pseudodiverticulum (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('StenosisCheckBox',@PageID,NULL,'stenosed',NULL,NULL,'stenosed (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('StenosisCheckBox',@PageID,NULL,'stenosis',NULL,NULL,'stenosis (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('UlcerScarCheckBox',@PageID,NULL,'scar',NULL,NULL,'scar (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('UlcerScarCheckBox',@PageID,NULL,'ulcer scar',NULL,NULL,'ulcer scar (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_common_atrophicduodenum_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('TypeRadioButtonList',@PageID,NULL,'TypeRadioButtonList',NULL,NULL,'Type (radio buttons)',NULL,NULL,'1,2,6,7,8','RadioButtonList',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_common_vascularlesions_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('BleedingRadioButtonList',@PageID,NULL,'BleedingRadioButtonList',NULL,NULL,'Bleeding (radio buttons)',NULL,NULL,'1,2,6,7,8','RadioButtonList',NULL,'0',NULL,'0')
,('TypeRadioButtonList',@PageID,NULL,'TypeRadioButtonList',NULL,NULL,'Type (radio buttons)',NULL,NULL,'1,2,6,7,8','RadioButtonList',NULL,'0',NULL,'0')
,('QuantityNumericTextBox',@PageID,NULL,'',NULL,NULL,NULL,NULL,NULL,'1,2,6,7,8','RadNumericTextBox',NULL,'0',NULL,'0')
,('MultipleCheckBox',@PageID,NULL,'MultipleCheckBox',NULL,NULL,'Multiple (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')
,('QuantityLabel',@PageID,NULL,'QuantityLabel',NULL,NULL,'Quantity (label)',NULL,NULL,'1,2,6,7,8','Label',NULL,'0',NULL,'0')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,2,6,7,8','CheckBox',NULL,'0',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_common_gpdetails_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('EditGPTitleTextBox',@PageID,NULL,NULL,NULL,NULL,'GP Title  (text box)',NULL,NULL,'0','RadTextBox','Title','1',NULL,'0')
,('EditGPInitialsTextBox',@PageID,NULL,NULL,NULL,NULL,'GP Initials  (text box)',NULL,NULL,'0','RadTextBox','Initials','1',NULL,'0')
,('EditGPSurnameTextBox',@PageID,NULL,NULL,NULL,NULL,'GP Surname  (text box)',NULL,NULL,'0','RadTextBox','Surname','1',NULL,'0')
,('EditGPAddressTextBox',@PageID,NULL,NULL,NULL,NULL,'GP Address  (text box)',NULL,NULL,'0','RadTExtBox','Address','1',NULL,'0')


SET @PageID = (SELECT PageID FROM ERS_Pages WHERE APPPageName = 'products_gastro_abnormalities_ogd_achalasia_aspx')


INSERT [dbo].[ERS_FieldLabels] ([LabelID], [PageID], [FormName], [LabelName], [Override], [Plural], [Hint], [Language], [Colour], [ProcedureType], [ControlType],[FieldName],[Required],[ErrorMessage],[CannotBeSuppressed]) VALUES 


('AchalasiaLeadingToPerforationRadioButton',@PageID,NULL,'AchalasiaLeadingToPerforationRadioButton',NULL,NULL,'Achalasia Leading To Perforation (radio button)',NULL,NULL,'1,6','RadioButtonList','Perforation ','0',NULL,'1')
,('NoneCheckBox',@PageID,NULL,'None',NULL,NULL,'None (checkbox)',NULL,NULL,'1,6','CheckBox','None','0',NULL,'1')



--------------------------------------------------------------------------------------------------------------------
-------------------------------------174a Create Table ERS_CountryLabels.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_CountryLabels](
	[Label] [nvarchar](50) NOT NULL,
	[LabelText_0] [nvarchar](60) NULL,
	[LabelText_1] [nvarchar](60) NULL,
	[LabelText_2] [nvarchar](60) NULL,
	[LabelText_3] [nvarchar](60) NULL,
	[LabelText_4] [nvarchar](60) NULL,
	[LabelText_5] [nvarchar](60) NULL,
	[LabelText_6] [nvarchar](60) NULL,
	[LabelText_7] [nvarchar](60) NULL,
	[LabelText_8] [nvarchar](60) NULL,
	[LabelText_9] [nvarchar](60) NULL,
	[LabelText_10] [nvarchar](60) NULL,
 CONSTRAINT [PK_ERS_CountryLabel] PRIMARY KEY CLUSTERED 
(
	[Label] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

--0 - Everywhere else including UK
--1 - Scotland  (900 To 999)
--2 - Northern Ireland  (800 To 899, 93 : Derry, 119 : Belfast)
--3 - Republic of Ireland (3000 To 3199)
--4 - Kuwait (1000 To 1999)
--5 - Australia (2000 To 2999)
--6 - Caribbean (3200 To 3299)

INSERT INTO ERS_CountryLabels (Label, LabelText_0, LabelText_1, LabelText_2, LabelText_3, LabelText_4, LabelText_5, LabelText_6) VALUES 
('Forename', 'Forenames', 'Forenames', 'Forenames', 'Forenames', 'Forenames', 'First name', 'Forenames')
,('CNN', 'Case note no.', 'Case note no.', 'Case note no.', 'MR Number', 'Case ID', 'UR number', 'HR Number')
,('CNN1', 'case note number', 'case note number', 'case note number', 'medical record number', 'case ID', 'UR number', 'hospital registration number')
,('NHSNo', 'NHS No', 'CHI No', 'H+C Number', 'COR ID', 'Civil ID No', 'Medicare No', 'BCP No')
,('DHA', 'DHA Code', 'DHA Code', 'DHA Code', '', 'Nationality', '', '')
,('District', 'District', 'District', 'District', 'District', 'Area/Province', 'State', 'District')
,('GP', 'GP', 'GP', 'GP', 'GP', 'MD', 'Referring GP', 'GP/PCP')
,('GP1', 'GP', 'GP', 'GP', 'GP', 'MD', 'GP', 'GP')
,('RefHosp', 'Referring Hospital', 'Referring Hospital', 'Referring Hospital', 'Referring Hospital', 'Referring Hospital', 'Providing Hospital', 'Referring Hospital')
,('List', 'List consultant', 'List consultant', 'List consultant', 'List consultant', 'List consultant', 'List specialist', 'List consultant')
,('Listprn', 'Lst cons', 'Lst cons', 'Lst cons', 'Lst cons', 'Lst cons', 'Lst spec', 'Lst cons')
,('Endo', 'Endoscopist', 'Endoscopist', 'Endoscopist', 'Endoscopist', 'Endoscopist', 'Proceduralist', 'Endoscopist')
,('Endoprn', 'End', 'End', 'End', 'End', 'End', 'Proc', 'End')


--------------------------------------------------------------------------------------------------------------------
-------------------------------------175 Create Table ERS_Default.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_Default](
	[DefaultId]			[int] IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_Default] PRIMARY KEY CLUSTERED,
	[UserID]			[int] NULL,
	[TableName]			[varchar] (50) NULL,
	[FieldName]			[varchar] (50) NULL,
	[PageName]			[varchar] (50) NULL,
	[Value]				[varchar] (200) NULL,
	[ListConsultant]	[int] NULL,
	[Endoscopist1]		[int] NULL,
	[Endoscopist2]		[int] NULL,
	[Assistant]			[int] NULL,
	[Nurse1]			[int] NULL,
	[Nurse2]			[int] NULL,
	[Nurse3]			[int] NULL,
	[PatientType]		[tinyint] NULL,
	[ProductType]		[tinyint] NULL,
	[ProcedureType]		[tinyint] NULL,
	[ListType]			[tinyint] NULL,
	[Endo1Role]			[tinyint] NULL,
	[Endo2Role]			[tinyint] NULL,
	[PrintReturnPage]	[tinyint] NULL,
	[Premedication]		[varchar] (500) NULL,
	[WhoUpdatedId]		[int]		NULL Default 0,
	[WhoCreatedId]		[int]		NULL Default 0,
	[WhenCreated]		[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]		[DATETIME]	NULL Default GetDate(),
) ON [PRIMARY]

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------176 Create Table ERS_Consultant.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Consultant](
	[ConsultantID] [int] IDENTITY(1,1) NOT NULL,
	[Title] [varchar](10) NULL,
	[CompleteName] [varchar] (500) NULL,
	[Forename] [varchar](100) NULL,
	[Surname] [varchar](100) NOT NULL,
	[GroupID] [int] NULL,
	[UsageCount] [int] NULL,
	[AllHospitals] [int] NULL CONSTRAINT DF_ERS_Consultant_AllHospitals DEFAULT 1,
	[IsExtCons] [smallint] NULL,
	[ExtConsHospitalID] [int] NULL,
	[ExtConsDeptID] [smallint] NULL,
	[GMCCode] [nvarchar](10) NULL,
	[Suppressed] [smallint] NULL CONSTRAINT DF_ERS_Consultant_Suppressed DEFAULT 0,
	[SortOrder] [int] NULL CONSTRAINT DF_ERS_Consultant_SortOrder DEFAULT 0,
	[WhoUpdatedId]	INT NULL Default 0,
	[WhoCreatedId]	INT NULL Default 0,
	[WhenCreated]	DATETIME NULL Default GetDate(),
	[WhenUpdated]	DATETIME NULL Default GetDate(),
	PRIMARY KEY CLUSTERED ([ConsultantID] ASC)
) ON [PRIMARY]

GO



--INSERT INTO ERS_OperatingHospitals (OperatingHospitalId, HospitalName, ContactNumber) VALUES ('1', 'Glenfield General Hospital', '0208 123 456')
--INSERT INTO ERS_OperatingHospitals (OperatingHospitalId, HospitalName, ContactNumber) VALUES ('2', 'St Georges Hospital', '0208 789 456')

GO


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------176a Create Table ERS_ConsultantGroup.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_ConsultantGroup](
	[GroupID]	[int] IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_ConsultantGroup] PRIMARY KEY CLUSTERED,
	[GroupName] [varchar](100) NOT NULL
) ON [PRIMARY]

GO



GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------176b Create Table ERS_ConsultantsHospital.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_ConsultantsHospital](
	[ConsultantsHospitalID] [int] IDENTITY(1,1) NOT NULL,
	[ConsultantID] [int] NOT NULL,
	[HospitalID] [int] NOT NULL,
	[WhoUpdatedId]	INT NULL Default 0,
	[WhoCreatedId]	INT NULL Default 0,
	[WhenCreated]	DATETIME NULL Default GetDate(),
	[WhenUpdated]	DATETIME NULL Default GetDate(),
	PRIMARY KEY CLUSTERED ([ConsultantsHospitalID] ASC)
) ON [PRIMARY]

GO

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------176c Create Table ERS_ReferralHospitals.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_ReferralHospitals](
	[HospitalID] [int] IDENTITY(1,1) NOT NULL,
	[HospitalName] [varchar](100) NOT NULL,
	[DefaultHospital] [smallint] NULL CONSTRAINT [DF_ERS_ReferralHospitals_DefaultHospital] DEFAULT 0,
	[Suppressed] [smallint] NULL CONSTRAINT [DF_ERS_ReferralHospitals_Suppressed] DEFAULT 0,
	PRIMARY KEY CLUSTERED ([HospitalID] ASC)
) ON [PRIMARY]



GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------177 Create Table ERS_PhraseLibrary.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_PhraseLibrary](
	[PhraseID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL CONSTRAINT [DF_ERS_PhraseLibrary_UserID] DEFAULT 0,
	[PhraseCategory] [varchar](50) NOT NULL,
	[Phrase] [varchar](8000) NULL,
	[UsageCount] [int] NULL CONSTRAINT [DF_ERS_PhraseLibrary_UsageCount] DEFAULT 0,
	[OperatingHospitalId] [int] NOT NULL CONSTRAINT [FK_PhraseLibrary_OperatingHospitalId] FOREIGN KEY (OperatingHospitalId) REFERENCES ERS_OperatingHospitals (OperatingHospitalId),
	[WhoUpdatedId]	INT NULL Default 0,
	[WhoCreatedId]	INT NULL Default 0,
	[WhenCreated]	DATETIME NULL Default GetDate(),
	[WhenUpdated]	DATETIME NULL Default GetDate(),
	PRIMARY KEY CLUSTERED ([PhraseID] ASC)
) ON [PRIMARY];

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------178 Create Tables Print Options.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_PrintOptionsGPReport](
	[GPReportID]			[int] IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_PrintOptionsGPReport] PRIMARY KEY CLUSTERED,
	[IncludeDiagram] [bit] NOT NULL,
	[IncludeDiagramOnlyIfSitesExist] [bit] NOT NULL,
	[IncludeListConsultant] [bit] NOT NULL,
	[IncludeNurses] [bit] NOT NULL,
	[IncludeInstrument] [bit] NOT NULL,
	[IncludeMissingCaseNote] [bit] NOT NULL,
	[IncludeIndications] [bit] NOT NULL,
	[IncludeCoMorbidities] [bit] NOT NULL,
	[IncludePlannedProcedures] [bit] NOT NULL,
	[IncludePremedication] [bit] NOT NULL,
	[IncludeProcedureNotes] [bit] NOT NULL,
	[IncludeSiteNotes] [bit] NOT NULL,
	[IncludeBowelPreparation] [bit] NOT NULL,
	[IncludeExtentOfIntubation] [bit] NOT NULL,
	[IncludePreviousGastricUlcer] [bit] NOT NULL,
	[IncludeExtentAndLimitingFactors] [bit] NOT NULL,
	[IncludeCannulation] [bit] NOT NULL,
	[IncludeExtentOfVisualisation] [bit] NOT NULL,
	[IncludeContrastMediaUsed] [bit] NOT NULL,
	[IncludePapillaryAnatomy] [bit] NOT NULL,
	[IncludeDiagnoses] [bit] NOT NULL,
	[IncludeFollowUp] [bit] NOT NULL,
	[IncludeTherapeuticProcedures] [bit] NOT NULL,
	[IncludeSpecimensTaken] [bit] NOT NULL,
	[IncludePeriOperativeComplications] [bit] NOT NULL,
	[DefaultNumberOfCopies] [int] NOT NULL CONSTRAINT DF_PrintOptionsGPReport_DefaultNumberOfCopies DEFAULT (1),
	[DefaultNumberOfPhotos] [int] NOT NULL CONSTRAINT DF_PrintOptionsGPReport_DefaultNumberOfPhotos DEFAULT (1),
	[OperatingHospitalId] [int] NOT NULL CONSTRAINT FK_PrintOptionsGPReport_OperatingHospitalId FOREIGN KEY (OperatingHospitalId) REFERENCES dbo.ERS_OperatingHospitals (OperatingHospitalId),
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_PrintOptionsLabRequestReport](
	[RequestReportID]			[int] IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_PrintOptionsLabRequestReport] PRIMARY KEY CLUSTERED,
	[OneRequestForEverySpecimen] [bit] NOT NULL,
    [GroupSpecimensByDestination] [bit] NOT NULL,
    [RequestsPerA4Page] [int] NOT NULL,
    [IncludeDiagram] [bit] NOT NULL,
    [IncludeTimeSpecimenCollected] [bit] NOT NULL,
    [IncludeHeading] [bit] NOT NULL,
    [Heading] [varchar](500) NOT NULL,
    [IncludeIndications] [bit] NOT NULL,
    [IncludeProcedureNotes] [bit] NOT NULL,
    [IncludeAbnormalities] [bit] NOT NULL,
    [IncludeSiteNotes] [bit] NOT NULL,
    [IncludeDiagnoses] [bit] NOT NULL,
	[DefaultNumberOfCopies] [int] NOT NULL CONSTRAINT DF_PrintOptionsLabRequestReport_DefaultNumberOfCopies DEFAULT (1),
	[OperatingHospitalId] [int] NOT NULL CONSTRAINT FK_PrintOptionsLabRequestReport_OperatingHospitalId FOREIGN KEY (OperatingHospitalId) REFERENCES dbo.ERS_OperatingHospitals (OperatingHospitalId),
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_PrintOptionsPatientFriendlyReport](
	[FriendlyReportID]			[int] IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_PrintOptionsPatientFriendlyReport] PRIMARY KEY CLUSTERED,
	[IncludeNoFollowup] [bit] NOT NULL,
	[IncludeUreaseText] [bit] NOT NULL,
	[UreaseText] [varchar](2000) NOT NULL,
	[IncludePolypectomyText] [bit] NOT NULL,
	[PolypectomyText] [varchar](2000) NOT NULL,
	[IncludeOtherBiopsyText] [bit] NOT NULL,
	[OtherBiopsyText] [varchar](2000) NOT NULL,
	[IncludeAnyOtherBiopsyText] [bit] NOT NULL,
	[AnyOtherBiopsyText] [varchar](2000) NOT NULL,
	[IncludeAdviceComments] [bit] NOT NULL,
	[IncludePreceedAdviceComments] [bit] NOT NULL,
	[PreceedAdviceComments] [varchar](2000) NOT NULL,
	[IncludeFinalText] [bit] NOT NULL,
	[FinalText] [varchar](2000) NOT NULL,
	[DefaultNumberOfCopies] [int] NOT NULL CONSTRAINT DF_PrintOptionsPatientFriendlyReport_DefaultNumberOfCopies DEFAULT (1),
	[OperatingHospitalId] [int] NOT NULL CONSTRAINT FK_PrintOptionsPatientFriendlyReport_OperatingHospitalId FOREIGN KEY (OperatingHospitalId) REFERENCES dbo.ERS_OperatingHospitals (OperatingHospitalId),
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
) ON [PRIMARY]
GO


CREATE TABLE [dbo].[ERS_PrintOptionsPatientFriendlyReportAdditional](
	[Id] [int] IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_PrintOptionsPatientFriendlyReportAdditional] PRIMARY KEY CLUSTERED,
	[IncludeAdditionalText] [bit] NOT NULL,
	[AdditionalText] [varchar](2000) NOT NULL,
	[OperatingHospitalId] [int] NOT NULL CONSTRAINT FK_PrintOptionsPatientFriendlyReportAdditional_OperatingHospitalId FOREIGN KEY (OperatingHospitalId) REFERENCES dbo.ERS_OperatingHospitals (OperatingHospitalId),
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
) ON [PRIMARY]
GO


INSERT INTO [ERS_PrintOptionsGPReport] 
SELECT 1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, eoh.OperatingHospitalId,0,0,GETDATE(),NULL
FROM dbo.ERS_OperatingHospitals eoh
GO

INSERT INTO [ERS_PrintOptionsLabRequestReport] 
SELECT 1,1,1,1,1,1,'Clinical Findings',1,1,1,1,1,1, eoh.OperatingHospitalId,0,0,GETDATE(),NULL
FROM dbo.ERS_OperatingHospitals eoh
GO

INSERT INTO [ERS_PrintOptionsPatientFriendlyReport] 
SELECT 0, 
0, 'You have had biopsies taken to find out if you have a bug in your stomach known as helicobactor pylori, which can cause inflammation and ulcers.  The results will be given to your GP in 2-3 working days.',
0,'Polyps have been removed.',
0, 'Biopsies have been taken.',
0,'Results will be sent to your consultant, who will let your GP know in 4-10 working days.',
0,0,'During your test the endoscopist reported the following findings.',
0,'If you have any questions please ask the nursing staff who will be happy to explain anything you are unclear about. If you have any further concerns please phone XXXXXXXX',
1, eoh.OperatingHospitalId,0,0,GETDATE(),NULL
FROM dbo.ERS_OperatingHospitals eoh
GO

INSERT INTO [ERS_PrintOptionsPatientFriendlyReportAdditional]  
SELECT  1, 'You have been given an information leaflet', eoh.OperatingHospitalId,0,0,GETDATE(),NULL FROM dbo.ERS_OperatingHospitals eoh

INSERT INTO [ERS_PrintOptionsPatientFriendlyReportAdditional]  
SELECT 1, 'You have been referred to a Clinical Nurse Specialist', eoh.OperatingHospitalId,0,0,GETDATE(),NULL FROM dbo.ERS_OperatingHospitals eoh

INSERT INTO [ERS_PrintOptionsPatientFriendlyReportAdditional]  
SELECT 1, 'You have been spoken to by the Endoscopist regarding your diagnosis', eoh.OperatingHospitalId,0,0,GETDATE(),NULL FROM dbo.ERS_OperatingHospitals eoh

INSERT INTO [ERS_PrintOptionsPatientFriendlyReportAdditional]  
SELECT 1, 'A clinical appointment with your consultant has been made for you', eoh.OperatingHospitalId,0,0,GETDATE(),NULL FROM dbo.ERS_OperatingHospitals eoh
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------179 Create Table ERS_Diagnoses.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Diagnoses](
	[DiagnosesID] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureID] [int] NOT NULL,
	[SiteId] [int] NULL,
	[MatrixCode] [varchar](50) NOT NULL,
	[Value] [varchar](MAX) NULL,
	[Region] [varchar](50) NULL,
	[IsOtherData] [bit] NULL,
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
	PRIMARY KEY CLUSTERED ([DiagnosesID] ASC)
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------179a Create Table ERS_DiagnosesMatrix.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE dbo.[ERS_DiagnosesMatrix](
	[DiagnosesMatrixID] [int] IDENTITY(1,1) NOT NULL,
	[DisplayName] [varchar](50) NULL,
	[NED_Name] [varchar](50) NULL,
	[EndoCode] [varchar](50) NULL,
	[ProcedureTypeID] [int] NOT NULL,
	[Section] [varchar](50) NULL,
	[Disabled] [bit] NULL CONSTRAINT [DF_ERS_DiagnosesMatrix_Disabled] DEFAULT 0,
	[OrderByNumber] [int] NULL CONSTRAINT [DF_ERS_DiagnosesMatrix_OrderNumber]  DEFAULT 0,
	[Code] [varchar](50) NOT NULL,
	[Visible] [bit] NULL CONSTRAINT [DF_ERS_DiagnosesMatrix_Visible] DEFAULT 0,
	CONSTRAINT [PK_ERS_DiagnosesMatrix] PRIMARY KEY CLUSTERED ([DiagnosesMatrixID])
) ON [PRIMARY]
GO


INSERT [ERS_DiagnosesMatrix] ( [DisplayName], [NED_Name], [EndoCode], [ProcedureTypeID], [Section], [Disabled], [OrderByNumber], [Code], [Visible]) VALUES 
-- OGD Oesophagus --------------------------------------------------------------
('Hiatus hernia', 'Hiatus hernia', NULL, 1, 'Oesophagus', 1, 5, 'D20P1', 0)
,('Stricture',  'Oesophageal stricture - benign',  NULL,  1,  'Oesophagus',  1,  10,  'D21P1',  0)
,('Telangiectasia',  NULL,  NULL,  1,  'Oesophagus',  1,  15,  'D22P1',  0)
,('Barrett''s mucosa',  'Barrett''s oesophagus',  NULL,  1,  'Oesophagus',  1,  1,  'D23P1',  0)
,('Mallory-Weiss tear',  'Mallory-Weiss tear',  NULL,  1,  'Oesophagus',  1,  6,  'D24P1',  0)
,('Tumour,  benign', 'Oesophageal tumour - benign', NULL, 1, 'Oesophagus', 1, 11, 'D25P1', 0)
,('Ulcer', 'Oesophageal ulcer', NULL, 1, 'Oesophagus', 1, 16, 'D26P1', 0)
,('Candida', 'Oesophageal candidiasis', NULL, 1, 'Oesophagus', 1, 2, 'D27P1', 0)
,('Motility disorder', NULL, NULL, 1, 'Oesophagus', 1, 7, 'D28P1', 0)
,('Tumour,  probably benign', 'Oesophageal tumour - benign', NULL, 1, 'Oesophagus', 1, 12, 'D29P1', 0)
,('Varices', 'Oesophageal varices', NULL, 1, 'Oesophagus', 1, 17, 'D30P1', 0)
,('Varices with bleeding', NULL, NULL, 1, 'Oesophagus', 1, 17, 'D31P1', 0)
,('Diverticulum', 'Oesophageal diverticulum', NULL, 1, 'Oesophagus', 1, 3, 'D32P1', 0)
,('Oesophagitis/other', NULL, NULL, 1, 'Oesophagus', 1, 5, 'D33P1', 0)
,('Tumour,  malignant', 'Oesophageal tumour - malignant', NULL, 1, 'Oesophagus', 1, 13, 'D34P1', 0)
,('Foreign body', 'Oesophageal foreign body', NULL, 1, 'Oesophagus', 0, 4, 'D35P1', 0)
,('Oesophagitis/reflux', 'Oesophagitis - reflux', NULL, 1, 'Oesophagus', 1, 9, 'D36P1', 0)
,('Tumour,  probably malignant', 'Oesophageal tumour - malignant', NULL, 1, 'Oesophagus', 1, 14, 'D37P1', 0)
,('Web', NULL, NULL, 1, 'Oesophagus', 1, 18, 'D38P1', 0)
,('Vascular Lesions', NULL, NULL, 1, 'Oesophagus', 1, 19, 'D62P1', 0)

,('Eosinophilia', 'Oesophagitis - eosinophilic', NULL, 1, 'Oesophagus', 1, 65, 'D65P1', 0)
,('Achalasia', 'Achalasia', NULL, 1, 'Oesophagus', 1, 66, 'D66P1', 0)
,('Extrinsic compression', 'Extrinsic compression', NULL, 1, 'Oesophagus', 1, 67, 'D67P1', 0)
,('Fistula', 'Oesophageal fistula', NULL, 1, 'Oesophagus', 1, 68, 'D68P1', 0)
,('Pharyngeal pouch', 'Pharyngeal pouch', NULL, 1, 'Oesophagus', 1, 69, 'D69P1', 0)
,('Poylp', 'Oesophageal polyp', NULL, 1, 'Oesophagus', 1, 70, 'D70P1', 0)
,('Schatzki ring', 'Schatzki ring', NULL, 1, 'Oesophagus', 1, 71, 'D71P1', 0)
,('Stricture,  benign', NULL, NULL, 1, 'Oesophagus', 1, 72, 'D72P1', 0)
,('Stricture,  malignant', NULL, NULL, 1, 'Oesophagus', 1, 73, 'D73P1', 0)

-- OGD Stomach --------------------------------------------------------------
,('Erosion', 'Gastritis - erosive', NULL, 1, 'Stomach', 1, 3, 'D39P1', 0)
,('Polyp', 'Gastric polyp(s)', NULL, 1, 'Stomach', 1, 7, 'D40P1', 0)
,('Scar', 'Scar', NULL, 1, 'Stomach', 1, 10, 'D41P1', 0)
,('Multiple ulcers', NULL, NULL, 1, 'Stomach', 1, 13, 'D42P1', 0)
,('Angioma', 'Angiodysplasia', NULL, 1, 'Stomach', 1, 1, 'D43P1', 0)
,('Foreign body', 'Gastric foreign body', NULL, 1, 'Stomach', 1, 4, 'D44P1', 0)
,('Post-surgical', 'Gastric postoperative appearance', NULL, 1, 'Stomach', 1, 8, 'D45P1', 0)
,('Telangiectasia', NULL, NULL, 1, 'Stomach', 1, 11, 'D46P1', 0)
,('Varices', 'Gastric varices', NULL, 1, 'Stomach', 1, 14, 'D47P1', 0)
,('Cancer', NULL, NULL, 1, 'Stomach', 1, 2, 'D48P1', 0)
,('Gastritis', NULL, NULL, 1, 'Stomach', 1, 6, 'D49P1', 0)
,('Pyloric stenosis', 'Pyloric stenosis', NULL, 1, 'Stomach', 1, 9, 'D50P1', 0)
,('Ulcer', 'Gastric ulcer', NULL, 1, 'Stomach', 1, 12, 'D51P1', 0)
,('Portal hypertensive gastropathy', 'Gastropathy-portal hypertensive', NULL, 1, 'Stomach', 0, 5, 'D52P1', 0)
,('Hiatus hernia', NULL, NULL, 1, 'Stomach', 1, 23, 'D61P1', 0)

,('Diefulafoy lesion', 'Dieulafoy lesion', NULL, 1, 'Stomach', 1, 80, 'D80P1', 0)
,('Diverticulum', 'Gastric diverticulum', NULL, 1, 'Stomach', 1, 81, 'D81P1', 0)
,('Fistula', 'Gastric fistula', NULL, 1, 'Stomach', 1, 82, 'D82P1', 0)
,('Gastritis,  erosive', 'Gastritis - erosive', NULL, 1, 'Stomach', 1, 83, 'D83P1', 0)
,('Gastritis,  non-erosive', 'Gastritis - non-erosive', NULL, 1, 'Stomach', 1, 84, 'D84P1', 0)
,('GAVE',  'GAVE',  NULL,  1,  'Stomach',  1,  85,  'D85P1' , 0)
,('Tumour,  benign', 'Gastric tumour - benign', NULL, 1, 'Stomach', 1, 86, 'D86P1', 0)
,('Tumour,  malignant', 'Gastric tumour - malignant', NULL, 1, 'Stomach', 1, 87, 'D87P1', 0)
,('Tumour,  submucosal', 'Gastric tumour - submucosal', NULL, 1, 'Stomach', 1, 88, 'D88P1', 0)

-- OGD Duodenum --------------------------------------------------------------
 ,('Duodenitis' ,NULL ,NULL ,1 ,'Duodenum' ,1 ,2 ,'D53P1' ,0)
 ,('Scar' ,'Scar' ,NULL ,1 ,'Duodenum' ,1 ,4 ,'D54P1' ,0)
 ,('Tumour' ,NULL ,NULL ,1 ,'Duodenum' ,1 ,6 ,'D55P1' ,0)
 ,('Multiple ulcers' ,NULL ,NULL ,1 ,'Duodenum' ,1 ,8 ,'D56P1' ,0)
 ,('Diverticulum' ,'Duodenal diverticulum' ,NULL ,1 ,'Duodenum' ,1 ,1 ,'D57P1' ,0)
 ,('Polyp' ,'Duodenal polyp' ,NULL ,1 ,'Duodenum' ,1 ,3 ,'D58P1' ,0)
 ,('Telangiectasia/angioma' ,NULL ,NULL ,1 ,'Duodenum' ,1 ,5 ,'D59P1' ,0)
 ,('Ulcer' ,'Duodenal ulcer' ,NULL ,1 ,'Duodenum' ,1 ,7 ,'D60P1' ,0)

 ,('Duodenitis , erosive' ,'Duodenitis - erosive' ,NULL ,1 ,'Duodenum' ,1 ,90 ,'D90P1' ,0)
 ,('Duodenitis , non-erosive' ,'Duodenitis - non-erosive' ,NULL ,1 ,'Duodenum' ,1 ,91 ,'D91P1' ,0)
 ,('Tumour , benign' ,'Duodenal tumour - benign' ,NULL ,1 ,'Duodenum' ,1 ,92 ,'D92P1' ,0)
 ,('Tumour , malignant' ,'Duodenal tumour - malignant' ,NULL ,1 ,'Duodenum' ,1 ,93 ,'D93P1' ,0)

--COLONOSCOPY --------------------------------------------------------------

,('Diverticulosis', 'Diverticulosis', NULL, 3, 'Colon', 1, 5, 'D1P3', 0)
,('Rectal polyp(s)', 'Polyp/s', 'Polyp/s', 3, 'Colon', 1, 15, 'D4P3', 0)
,('Diverticulitis', NULL, NULL, 3, 'Colon', 1, 6, 'D5P3', 0)
,('Benign colonic tumour', NULL, NULL, 3, 'Colon', 1, 25, 'D6P3', 0)
,('Haemorrhoids', 'Haemorrhoids', NULL, 3, 'Colon', 1, 9, 'D7P3', 0)
,('Malignant colonic tumour', NULL, NULL, 3, 'Colon', 1, 26, 'D8P3', 0)
,('Pseudo-obstruction', NULL, NULL, 3, 'Colon', 0, 19, 'D9P3', 1)
,('Benign rectal tumour', NULL, NULL, 3, 'Colon', 1, 27, 'D11P3', 0)
,('Colonic polyp(s)', 'Polyp/s', NULL, 3, 'Colon', 1, 14, 'D12P3', 0)
,('Malignant rectal tumour', NULL, NULL, 3, 'Colon', 1, 28, 'D13P3', 0)
,('Telangiectasia/angioma', NULL, NULL, 3, 'Colon', 1, 24, 'D14P3', 0)
,('Redundant anterior rectal mucosa', NULL, NULL, 3, 'Colon', 1, 20, 'D15P3', 0)
,('Angiodysplasia', 'Angiodysplasia', NULL, 3, 'Colon', 1, 2, 'D64P3', 0)
,('Stricture - inflammatory', 'Stricture - inflammatory', NULL, 3, 'Colon', 1, 21, 'D65P3', 0)
,('Stricture - malignant', 'Stricture - malignant', NULL, 3, 'Colon', 1, 22, 'D66P3', 0)
,('Stricture - postoperative', 'Stricture - postoperative', NULL, 3, 'Colon', 1, 23, 'D67P3', 0)
,('Anal Fissure', 'Anal fissure', NULL, 3, 'Colon', 1, 1, 'D68P3', 0)
,('Colorectal cancer', 'Colorectal cancer', NULL, 3, 'Colon', 1, 3, 'D69P3', 0)
,('Crohn''s - terminal ileum', 'Crohn''s - terminal ileum', NULL, 3, 'Colon', 0, 4, 'D70P3', 1)
,('Fistula', 'Fistula', NULL, 3, 'Colon', 0, 7, 'D71P3', 1)
,('Foreign body', 'Foreign body', NULL, 3, 'Colon', 0, 8, 'D72P3', 1)
,('Lipoma', 'Lipoma', NULL, 3, 'Colon', 0, 10, 'D73P3', 1)
,('Melanosis', 'Melanosis', NULL, 3, 'Colon', 0, 11, 'D74P3', 1)
,('Parasites', 'Parasites', NULL, 3, 'Colon', 0, 12, 'D75P3', 1)
,('Pneumatosis coli', 'Pneumatosis coli', 'Pneumatosis coli', 3, 'Colon', 0, 13, 'D76P3', 1)
,('Polyposis syndrome', 'Polyposis syndrome', NULL, 3, 'Colon', 0, 16, 'D77P3', 1)
,('Postoperative appearance', 'Postoperative appearance', NULL, 3, 'Colon', 0, 17, 'D78P3', 1)
--,('Proctitis', 'Proctitis', NULL, 3, 'Colon', 0, 18, 'D79P3', 1)
,('Rectal ulcer(s)', 'Rectal ulcer', 'Polyp/s', 3, 'Colon', 1, 29, 'D80P3', 0)
,('Perianal cancer', NULL, NULL, 3, 'Colon', 1, 30, 'D81P3', 0)
,('Perianal fistula', NULL, NULL, 3, 'Colon', 1, 31, 'D82P3', 0)
,('Colonic ulcer(s)', NULL, NULL, 3, 'Colon', 1, 32, 'D83P3', 0)
,('Haemorrhage', NULL, NULL, 3, 'Colon', 1, 33, 'D84P3', 0)

,('None specified', NULL, NULL, 3, 'Colitis', 0, 39, 'D85P3', 1)
,('Crohn''s Disease', 'Crohn''s Disease', NULL, 3, 'Colitis', 0, 40, 'D86P3', 1)
,('cytomegalovirus colitis', NULL, NULL, 3, 'Colitis', 0, 41, 'D87P3', 1)
,('diverticular colitis', NULL, NULL, 3, 'Colitis', 0, 42, 'D88P3', 1)
,('drug-induced colitis', NULL, NULL, 3, 'Colitis', 0, 43, 'D89P3', 1)
,('IBD unclassified', NULL, NULL, 3, 'Colitis', 0, 44, 'D90P3', 1)
,('infectious enterocolitis', NULL, NULL, 3, 'Colitis', 0, 45, 'D91P3', 1)
,('ischaemic colitis', 'Colitis - ischemic', NULL, 3, 'Colitis', 0, 46, 'D92P3', 1)
,('non-specific colitis', NULL, NULL, 3, 'Colitis', 0, 47, 'D93P3', 1)
,('pseudomembranous colitis', 'Colitis - pseudomembranous', NULL, 3, 'Colitis', 0, 48, 'D94P3', 1)
,('radiation colitis', NULL, NULL, 3, 'Colitis', 0, 49, 'D95P3', 1)
,('Ulcerative Colitis', 'Ulcerative Colitis', NULL, 3, 'Colitis', 0, 50, 'D96P3', 1)

--SIGMOIDSCOPY --------------------------------------------------------------

,('Diverticulosis', 'Diverticulosis', NULL, 4, 'Colon', 1, 5, 'S1P3', 0)
,('Rectal polyp(s)', NULL, 'Polyp/s', 4, 'Colon', 1, 15, 'S4P3', 0)
,('Diverticulitis', NULL, NULL, 4, 'Colon', 1, 6, 'S5P3', 0)
,('Benign colonic tumour', NULL, NULL, 4, 'Colon', 1, 25, 'S6P3', 0)
,('Haemorrhoids', 'Haemorrhoids', NULL, 4, 'Colon', 1, 9, 'S7P3', 0)
,('Malignant colonic tumour', NULL, NULL, 4, 'Colon', 1, 26, 'S8P3', 0)
,('Pseudo-obstruction', NULL, NULL, 4, 'Colon', 0, 19, 'S9P3', 0)
,('Benign rectal tumour', NULL, NULL, 4, 'Colon', 1, 27, 'S11P3', 0)
,('Colonic polyp(s)', 'Polyp/s', NULL, 4, 'Colon', 1, 14, 'S12P3', 0)
,('Malignant rectal tumour', NULL, NULL, 4, 'Colon', 1, 28, 'S13P3', 0)
,('Telangiectasia', NULL, NULL, 4, 'Colon', 1, 24, 'S14P3', 0)
,('Redundant anterior rectal mucosa', NULL, NULL, 4, 'Colon', 1, 20, 'S15P3', 0)
,('Angiodysplasia', NULL, NULL, 4, 'Colon', 1, 2, 'S64P3', 0)
,('Stricture (inflammatory)', NULL, NULL, 4, 'Colon', 1, 21, 'S65P3', 0)
,('Stricture (malignant)', NULL, NULL, 4, 'Colon', 1, 22, 'S66P3', 0)
,('Stricture (postoperative)', NULL, NULL, 4, 'Colon', 1, 23, 'S67P3', 0)
,('Anal Fissure', 'Anal fissure', NULL, 4, 'Colon', 1, 1, 'S68P3', 0)
,('Colorectal cancer', 'Colorectal cancer', NULL, 4, 'Colon', 1, 3, 'S69P3', 0)
,('Crohn''s - terminal ileum', 'Crohn''s - terminal ileum', NULL, 4, 'Colon', 1, 4, 'S70P3', 0)
,('Fistula', 'Fistula', NULL, 4, 'Colon', 1, 7, 'S71P3', 0)
,('Foreign body', 'Foreign body', NULL, 4, 'Colon', 1, 8, 'S72P3', 0)
,('Lipoma', 'Lipoma', NULL, 4, 'Colon', 1, 10, 'S73P3', 0)
,('Melanosis', 'Melanosis', NULL, 4, 'Colon', 1, 11, 'S74P3', 0)
,('Parasites', 'Parasites', NULL, 4, 'Colon', 1, 12, 'S75P3', 0)
,('Pneumatosis coli', NULL, 'Pneumatosis coli', 4, 'Colon', 1, 13, 'S76P3', 0)
,('Polyposis syndrome', 'Polyposis syndrome', NULL, 4, 'Colon', 1, 16, 'S77P3', 0)
,('Postoperative appearance', 'Postoperative appearance', NULL, 4, 'Colon', 1, 17, 'S78P3', 0)
--,('Proctitis', 'Proctitis', NULL, 4, 'Colon', 1, 18, 'S79P3', 0)
,('Rectal ulcer(s)', 'Rectal ulcer', 'Polyp/s', 4, 'Colon', 1, 29, 'S80P3', 0)
,('Perianal cancer', NULL, NULL, 4, 'Colon', 1, 30, 'S81P3', 0)
,('Perianal fistula', NULL, NULL, 4, 'Colon', 1, 31, 'S82P3', 0)
,('Colonic ulcer(s)', NULL, NULL, 4, 'Colon', 1, 32, 'S83P3', 0)

,('None specified', NULL, NULL, 4, 'Colitis', 0, 39, 'S85P3', 1)
,('Crohn''s Disease', NULL, NULL, 4, 'Colitis', 0, 40, 'S86P3', 1)
,('cytomegalovirus colitis', NULL, NULL, 4, 'Colitis', 0, 41, 'S87P3', 1)
,('diverticular colitis', NULL, NULL, 4, 'Colitis', 0, 42, 'S88P3', 1)
,('drug-induced colitis', NULL, NULL, 4, 'Colitis', 0, 43, 'S89P3', 1)
,('IBD unclassified', NULL, NULL, 4, 'Colitis', 0, 44, 'S90P3', 1)
,('infectious enterocolitis', NULL, NULL, 4, 'Colitis', 0, 45, 'S91P3', 1)
,('ischaemic colitis', NULL, NULL, 4, 'Colitis', 0, 46, 'S92P3', 1)
,('non-specific colitis', NULL, NULL, 4, 'Colitis', 0, 47, 'S93P3', 1)
,('pseudomembranous colitis', NULL, NULL, 4, 'Colitis', 0, 48, 'S94P3', 1)
,('radiation colitis', NULL, NULL, 4, 'Colitis', 0, 49, 'S95P3', 1)
,('Ulcerative Colitis', NULL, NULL, 4, 'Colitis', 0, 50, 'S96P3', 1)

--PROCTOSCOPY --------------------------------------------------------------
,('Diverticulosis', 'Diverticulosis', NULL, 5, 'Colon', 1, 5, 'P1P3', 0)
,('Rectal polyp(s)', NULL, 'Polyp/s', 5, 'Colon', 1, 15, 'P4P3', 0)
,('Diverticulitis', NULL, NULL, 5, 'Colon', 1, 6, 'P5P3', 0)
,('Benign colonic tumour', NULL, NULL, 5, 'Colon', 1, 25, 'P6P3', 0)
,('Haemorrhoids', 'Haemorrhoids', NULL, 5, 'Colon', 1, 9, 'P7P3', 0)
,('Malignant colonic tumour', NULL, NULL, 5, 'Colon', 1, 26, 'P8P3', 0)
,('Pseudo-obstruction', NULL, NULL, 5, 'Colon', 0, 19, 'P9P3', 1)
,('Benign rectal tumour', NULL, NULL, 5, 'Colon', 1, 27, 'P11P3', 0)
,('Colonic polyp(s)', 'Polyp/s', NULL, 5, 'Colon', 1, 14, 'P12P3', 0)
,('Malignant rectal tumour', NULL, NULL, 5, 'Colon', 1, 28, 'P13P3', 0)
,('Telangiectasia', NULL, NULL, 5, 'Colon', 1, 24, 'P14P3', 0)
,('Redundant anterior rectal mucosa', NULL, NULL, 5, 'Colon', 1, 20, 'P15P3', 0)
,('Angiodysplasia', NULL, NULL, 5, 'Colon', 1, 2, 'P64P3', 0)
,('Stricture (inflammatory)', NULL, NULL, 5, 'Colon', 1, 21, 'P65P3', 0)
,('Stricture (malignant)', NULL, NULL, 5, 'Colon', 1, 22, 'P66P3', 0)
,('Stricture (postoperative)', NULL, NULL, 5, 'Colon', 1, 23, 'P67P3', 0)
,('Anal Fissure', 'Anal fissure', NULL, 5, 'Colon', 1, 1, 'P68P3', 0)
,('Colorectal cancer', 'Colorectal cancer', NULL, 5, 'Colon', 1, 3, 'P69P3', 0)
,('Crohn''s - terminal ileum', 'Crohn''s - terminal ileum', NULL, 5, 'Colon', 0, 4, 'P70P3', 1)
,('Fistula', 'Fistula', NULL, 5, 'Colon', 0, 7, 'P71P3', 1)
,('Foreign body', 'Foreign body', NULL, 5, 'Colon', 0, 8, 'P72P3', 1)
,('Lipoma', 'Lipoma', NULL, 5, 'Colon', 0, 10, 'P73P3', 1)
,('Melanosis', 'Melanosis', NULL, 5, 'Colon', 0, 11, 'P74P3', 1)
,('Parasites', 'Parasites', NULL, 5, 'Colon', 0, 12, 'P75P3', 1)
,('Pneumatosis coli', NULL, 'Pneumatosis coli', 5, 'Colon', 0, 13, 'P76P3', 1)
,('Polyposis syndrome', 'Polyposis syndrome', NULL, 5, 'Colon', 0, 16, 'P77P3', 1)
,('Postoperative appearance', 'Postoperative appearance', NULL, 5, 'Colon', 0, 17, 'P78P3', 1)
--,('Proctitis', 'Proctitis', NULL, 5, 'Colon', 0, 18, 'P79P3', 1)
,('Rectal ulcer(s)', 'Rectal ulcer', 'Polyp/s', 5, 'Colon', 1, 29, 'P80P3', 0)
,('Perianal cancer', NULL, NULL, 5, 'Colon', 1, 30, 'P81P3', 0)
,('Perianal fistula', NULL, NULL, 5, 'Colon', 1, 31, 'P82P3', 0)
,('Colonic ulcer(s)', NULL, NULL, 5, 'Colon', 1, 32, 'P83P3', 0)
,('Haemorrhage', NULL, NULL, 5, 'Colon', 1, 33, 'P84P3', 0)

,('None specified', NULL, NULL, 5, 'Colitis', 0, 39, 'P85P3', 1)
,('Crohn''s Disease', NULL, NULL, 5, 'Colitis', 0, 40, 'P86P3', 1)
,('cytomegalovirus colitis', NULL, NULL, 5, 'Colitis', 0, 41, 'P87P3', 1)
,('diverticular colitis', NULL, NULL, 5, 'Colitis', 0, 42, 'P88P3', 1)
,('drug-induced colitis', NULL, NULL, 5, 'Colitis', 0, 43, 'P89P3', 1)
,('IBD unclassified', NULL, NULL, 5, 'Colitis', 0, 44, 'P90P3', 1)
,('infectious enterocolitis', NULL, NULL, 5, 'Colitis', 0, 45, 'P91P3', 1)
,('ischaemic colitis', NULL, NULL, 5, 'Colitis', 0, 46, 'P92P3', 1)
,('non-specific colitis', NULL, NULL, 5, 'Colitis', 0, 47, 'P93P3', 1)
,('pseudomembranous colitis', NULL, NULL, 5, 'Colitis', 0, 48, 'P94P3', 1)
,('radiation colitis', NULL, NULL, 5, 'Colitis', 0, 49, 'P95P3', 1)
,('Ulcerative Colitis', NULL, NULL, 5, 'Colitis', 0, 50, 'P96P3', 1)

--ERCP --------------------------------------------------------------
--ERCP Duodenum---------------
,('Not Entered', NULL, NULL, 2, 'Duodenum', 1, 1, 'D50P2', 0)
,('Normal', NULL, NULL, 2, 'Duodenum', 1, 2, 'D51P2', 0)
,('2nd Part Not Entered', NULL, NULL, 2, 'Duodenum', 1, 3, 'D52P2', 0)

,('Duodenitis', NULL, NULL, 2, 'Duodenum', 1, 5, 'D53P2', 0)
,('Scar', NULL, NULL, 2, 'Duodenum', 1, 10, 'D54P2', 0)
,('Tumour', NULL, NULL, 2, 'Duodenum', 1, 15, 'D55P2', 0)
,('Diverticulum', 'Duodenal diverticulum', NULL, 2, 'Duodenum', 1, 25, 'D57P2', 0)
,('Polyp', NULL, NULL, 2, 'Duodenum', 1, 27, 'D58P2', 0)
,('Telangiectasia/angioma', NULL, NULL, 2, 'Duodenum', 1, 29, 'D59P2', 0)
,('Ulcer', NULL, NULL, 2, 'Duodenum', 1, 31, 'D60P2', 0)
,('Angiodysplasia', NULL, NULL, 2, 'Duodenum', 1, 4, 'D64P2', 0)
------------------------------
,('Whole pancreatic and biliary system normal',  NULL,  NULL,  2,  'ERCP',  '0',  '32',  'D32P2',  '1')
,('Normal', NULL, NULL, 2, 'Papillae', 0, 33, 'D33P2', 1)
,('Impacted stone', NULL, NULL, 2, 'Papillae', 0, 35, 'D35P2', 1)
,('Inflamed', NULL, NULL, 2, 'Papillae', 1, 40, 'D37P2', 0)
,('Periampullary diverticula', NULL, NULL, 2, 'Papillae', 1, 45, 'D39P2', 0)
,('Stenosed', 'Papillary stenosis', NULL, 2, 'Papillae', 1, 50, 'D41P2', 0)
,('Tumour', 'Papillary tumor', NULL, 2, 'Papillae', 1, 55, 'D43P2', 0)
,('probably benign', NULL, NULL, 2, 'Papillae', 1, 60, 'D45P2', 0)
,('probably malignant', NULL, NULL, 2, 'Papillae', 1, 65, 'D65P2', 0)

,('Normal', NULL, NULL, 2, 'Pancreas', 0, 67, 'D67P2', 1)
,('Annulare', 'Pancreas annulare', NULL, 2, 'Pancreas', 1, 68, 'D68P2', 0)
,('Duct injury', 'Pancreatic duct injury', NULL, 2, 'Pancreas', 1, 69, 'D69P2', 0)
,('Fistula', 'Pancreatic duct fistula/leak', NULL, 2, 'Pancreas', 1, 70, 'D70P2', 0)
,('Pancreatic stone', 'Pancreatic stone', NULL, 2, 'Pancreas', 1, 72, 'D72P2', 0)
,('Stent occlusion', 'Pancreatic stent occlusion', NULL, 2, 'Pancreas', 1, 74, 'D74P2', 0)
,('IPMT', 'IPMT', NULL, 2, 'Pancreas', 1, 75, 'D75P2', 0)

,('Acute', 'Pancreatitis - acute', NULL, 2, 'Pancreatitis', 1, 80, 'D80P2', 0)
,('Chronic', 'Pancreatitis - chronic', NULL, 2, 'Pancreatitis', 1, 85, 'D85P2', 0)
,('Minimal change', NULL, NULL, 2, 'Pancreatitis', 1, 90, 'D90P2', 0)

,('Communicating', 'Pancreatic cyst', NULL, 2, 'Cyst', 1, 95, 'D95P2', 0)
,('Noncommunicating', 'Pancreatic cyst', NULL, 2, 'Cyst', 1, 100, 'D100P2', 0)
,('Pseudocyst', NULL, NULL, 2, 'Cyst', 1, 105, 'D105P2', 0)

,('Dilatation', NULL, NULL, 2, 'Ducts', 0, 110, 'D110P2', 1)
,('No obvious cause', NULL, NULL, 2, 'Ducts', 0, 115, 'D115P2', 1)
,('Stricture', 'Pancreatic duct stricture', NULL, 2, 'Ducts', 0, 120, 'D120P2', 1)

,('Probably malignant', NULL, NULL, 2, 'Tumour', 0, 125, 'D125P2', 1)
,('Cystadenoma', NULL, NULL, 2, 'Tumour', 0, 130, 'D130P2', 1)
,('Other', NULL, NULL, 2, 'Tumour', 0, 135, 'D135P2', 1)

,('Normal', NULL, NULL, 2, 'Biliary', 0, 138, 'D138P2', 1)
,('Anastomic stricture', 'Anastomotic stricture', NULL, 2, 'Biliary', 0, 140, 'D140P2', 1)
,('Fistula/leak', 'Biliary fistula/leak', NULL, 2, 'Biliary', 0, 145, 'D145P2', 1)
,('Occlusion', 'Biliary occlusion', NULL, 2, 'Biliary', 0, 150, 'D150P2', 1)
,('Cystic duct stones', 'Cystic duct stones', NULL, 2, 'Biliary', 0, 155, 'D155P2', 1)
,('Mirizzi syndrome', 'Mirizzi syndrome', NULL, 2, 'Biliary', 0, 160, 'D160P2', 1)
,('Common duct stone(s)', 'Biliary stone(s)', NULL, 2, 'Biliary', 0, 165, 'D165P2', 1)
,('Haemobilia', 'Hemobilia', NULL, 2, 'Biliary', 1, 170, 'D170P2', 0)
,('Calculous obstruction of cystic duct', 'Biliary stone(s)', NULL, 2, 'Biliary', 1, 175, 'D175P2', 0)
,('Gall bladder tumour', 'Gallbladder tumor', NULL, 2, 'Biliary', 1, 180, 'D180P2', 0)
,('Cholelithiasis', 'Biliary stone(s)', NULL, 2, 'Biliary', 1, 185, 'D185P2', 0)
,('Gall bladder stones', 'Gallbladder stone(s)', NULL, 2, 'Biliary', 1, 190, 'D190P2', 0)
,('Stent occlusion', 'Biliary stent occlusion', NULL, 2, 'Biliary', 1, 195, 'D195P2', 0)
,('stones in bile duct', 'Cystic duct stones', NULL, 2, 'Biliary', 1, 191, 'D191P2', 0)
,('stones in gall bladder', 'Gallbladder stone(s)', NULL, 2, 'Biliary', 1, 189, 'D189P2', 0)
,('stones in hepatic duct', NULL, NULL, 2, 'Biliary', 1, 192, 'D192P2', 0)

,('Normal ducts', NULL, NULL, 2, 'Intrahepatic', 1, 198, 'D198P2', 0)
,('Polycystic liver disease', NULL, NULL, 2, 'Intrahepatic', 1, 200, 'D200P2', 0)
,('Sclerosing cholangitis', 'Primary sclerosing cholangitis', NULL, 2, 'Intrahepatic', 1, 205, 'D205P2', 0)
,('Suppurative cholangitis', 'Suppurative cholangitis', NULL, 2, 'Intrahepatic', 1, 210, 'D210P2', 0)
,('Caroli''s disease', 'Carolis disease', NULL, 2, 'Intrahepatic', 1, 215, 'D215P2', 0)
,('Biliary leak -site', NULL, NULL, 2, 'Intrahepatic', 1, 220, 'D220P2', 0)
,('IntrahepaticLeakSiteType', NULL, NULL, 2, 'Intrahepatic', 1, 222, 'D222P2', 0)
,('Tumour', NULL, NULL, 2, 'Intrahepatic', 1, 225, 'D225P2', 0)
,('TumourType', NULL, NULL, 2, 'Intrahepatic', 1, 227, 'D227P2', 0)
,('Cirrhosis', NULL, NULL, 2, 'Intrahepatic', 1, 230, 'D230P2', 0)
,('Hydatid cyst', NULL, NULL, 2, 'Intrahepatic', 1, 235, 'D235P2', 0)
,('Liver abscess', NULL, NULL, 2, 'Intrahepatic', 1, 240, 'D240P2', 0)

,('probable', NULL, NULL, 2, 'Intrahepatic', 1, 242, 'D242P2', 0)
,('possible', NULL, NULL, 2, 'Intrahepatic', 1, 243, 'D243P2', 0)

,('cholangiocarcinoma', 'Cholangiocarcinoma', NULL, 2, 'Intrahepatic', 1, 245, 'D245P2', 0)
,('metastatic intrahepatic', NULL, NULL, 2, 'Intrahepatic', 1, 250, 'D250P2', 0)
,('external compression (metastases)', NULL, NULL, 2, 'Intrahepatic', 1, 255, 'D255P2', 0)
,('hepatocellular carcinoma', NULL, NULL, 2, 'Intrahepatic', 1, 260, 'D260P2', 0)

,('Normal ducts', NULL, NULL, 2, 'Extrahepatic', 1, 265, 'D265P2', 0)
,('Choledochal cyst', 'Choledochal cyst', NULL, 2, 'Extrahepatic', 1, 270, 'D270P2', 0)
,('Dilated duct', NULL, NULL, 2, 'Extrahepatic', 1, 275, 'D275P2', 0)
,('Biliary leak -site', NULL, NULL, 2, 'Extrahepatic', 1, 280, 'D280P2', 0)
,('ExtrahepaticLeakSiteType', NULL, NULL, 2, 'Extrahepatic', 1, 285, 'D285P2', 0)
,('Stricture', NULL, NULL, 2, 'Extrahepatic', 1, 290, 'D290P2', 0)
,('StrictureType', NULL, NULL, 2, 'Extrahepatic', 1, 295, 'D295P2', 0)
,('Post cholecystectomy', NULL, NULL, 2, 'Extrahepatic', 1, 300, 'D300P2', 0)

,('pancreatitis', NULL, NULL, 2, 'Extrahepatic', 1, 305, 'D305P2', 0)
,('a pseudocyst', NULL, NULL, 2, 'Extrahepatic', 1, 310, 'D310P2', 0)
,('previous surgery', NULL, NULL, 2, 'Extrahepatic', 1, 315, 'D315P2', 0)
,('sclerosing cholangitis', NULL, NULL, 2, 'Extrahepatic', 1, 320, 'D320P2', 0)
,('Extrahepatic probable', NULL, NULL, 2, 'Extrahepatic', 1, 325, 'D325P2', 0)
,('Benign', NULL, NULL, 2, 'Extrahepatic', 1, 330, 'D330P2', 0)
,('Malignant', NULL, NULL, 2, 'Extrahepatic', 1, 335, 'D335P2', 0)
,('Benign probable', NULL, NULL, 2, 'Extrahepatic', 1, 337, 'D337P2', 0)
,('Malignant probable', NULL, NULL, 2, 'Extrahepatic', 1, 338, 'D338P2', 0)

,('gallbladder carcinoma', NULL, NULL, 2, 'Extrahepatic', 1, 340, 'D340P2', 0)
,('metastatic carcinoma', NULL, NULL, 2, 'Extrahepatic', 1, 345, 'D345P2', 0)
,('cholangiocarcinoma', 'Cholangiocarcinoma', NULL, 2, 'Extrahepatic', 1, 350, 'D350P2', 0)
,('pancreatic carcinoma', NULL, NULL, 2, 'Extrahepatic', 1, 355, 'D355P2', 0)


GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_BRTSpecimens.sql---------------------BRONCHO-----------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_BRTSpecimens](
	[SiteID] [INT] NOT NULL CONSTRAINT UQ_BRTSpecimens_SiteId UNIQUE(SiteId),
	[None] [BIT] NULL, 
	[EBUSTB] [BIT] NULL,
	[EBUSHistology] [BIT] NULL,
	[EBUSCytology] [BIT] NULL,
	[EBUSBacteriology] [BIT] NULL,
	[EndobronchialTB] [BIT] NULL,
	[EndobronchialHistology] [BIT] NULL,
	[EndobronchialBacteriology] [BIT] NULL,
	[EndobronchialVirology] [BIT] NULL,
	[EndobronchialMycology] [BIT] NULL,
	[BrushCytology] [BIT] NULL,
	[BrushBacteriology] [BIT] NULL,
	[BrushVirology] [BIT] NULL,
	[BrushMycology] [BIT] NULL,
	[DistalBlindTB] [BIT] NULL,
	[DistalBlindHistology] [BIT] NULL,
	[DistalBlindBacteriology] [BIT] NULL,
	[DistalBlindVirology] [BIT] NULL,
	[DistalBlindMycology] [BIT] NULL,
	[TransbronchialTB] [BIT] NULL,
	[TransbronchialHistology] [BIT] NULL,
	[TransbronchialBacteriology] [BIT] NULL,
	[TransbronchialVirology] [BIT] NULL,
	[TransbronchialMycology] [BIT] NULL,
	[TranstrachealHistology] [BIT] NULL,
	[TranstrachealBacteriology] [BIT] NULL,
	[TranstrachealVirology] [BIT] NULL,
	[TranstrachealMycology] [BIT] NULL,
	[TrapPCP] [BIT] NULL,
	[TrapTB] [BIT] NULL,
	[TrapCytology] [BIT] NULL,
	[TrapBacteriology] [BIT] NULL,
	[TrapVirology] [BIT] NULL,
	[TrapMycology] [BIT] NULL,
	[BALPCP] [BIT] NULL,
	[BALTB] [BIT] NULL,
	[BALCytology] [BIT] NULL,   --[BALavage] [BIT] NULL,
	[BALBacteriology] [BIT] NULL,
	[BALVirology] [BIT] NULL,
	[BALMycology] [BIT] NULL,
	[BALVolInfused] [DECIMAL](6,2) NULL,
	[BALVolRecovered] [DECIMAL](6,2) NULL,
	[FNATB] [BIT] NULL,
	[FNACytology] [BIT] NULL,
	[FNABacteriology] [BIT] NULL,
	[FNAVirology] [BIT] NULL,
	[FNAMycology] [BIT] NULL,
	[FNAHistology] [BIT] NULL,
	[CryoHistology] [BIT] NULL,
	[Summary] [nvarchar](4000) NULL,
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate(),
CONSTRAINT [FK_BRTSpecimens_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId]), PRIMARY KEY CLUSTERED ([SiteId])
) ON [PRIMARY] 
GO

-----------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_BRTAbnoDescriptions]( 
	[AbnoDescriptionId]		[int] IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_BRTAbnoDescriptions] PRIMARY KEY CLUSTERED,
	[SiteId]				[int]		NOT NULL CONSTRAINT UQ_BRTAbnoDescriptions_SiteId UNIQUE(SiteId),
	[Normal]				[bit]		NOT NULL CONSTRAINT DF_BRTAbnoDescriptions_Normal DEFAULT 0,
	[Carinal]				[tinyint] NULL,
	[Vocal]					[tinyint] NULL,
	[Compression]			[bit] NULL,
	[CompressionGeneral]	[bit] NULL,
	[CompressionFromLeft]	[bit] NULL,
	[CompressionFromRight]	[bit] NULL,
	[CompressionFromAnterior]	[bit] NULL,
	[CompressionFromPosterior]	[bit] NULL,
	[Stenosis]				[tinyint] NULL,
	[Obstruction]			[tinyint] NULL,
	[Mucosal]				[bit] NULL,
	[MucosalOedema]			[bit] NULL,
	[MucosalErythema]		[bit] NULL,
	[MucosalPits]			[bit] NULL,
	[MucosalAnthracosis]	[bit] NULL,
	[MucosalInfiltration]	[bit] NULL,
	[MucosalIrregularity]	[tinyint] NULL,
	[ExcessiveSecretions]	[tinyint] NULL,
	[Bleeding]				[tinyint] NULL,
	[Summary]				[nvarchar](4000) NULL,
	[WhoUpdatedId]			[int]		NULL Default 0,
	[WhoCreatedId]			[int]		NULL Default 0,
	[WhenCreated]			[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]			[DATETIME]	NULL Default GetDate(),
	CONSTRAINT [FK_BRTAbnoDescriptions_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId])
) ON [PRIMARY]
GO

-----------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_EBUSAbnoDescriptions]( 
	[EBUSAbnoDescId]	[int] IDENTITY(1,1) NOT NULL CONSTRAINT [PK_ERS_EBUSAbnoDescriptions] PRIMARY KEY CLUSTERED,
	[SiteId]			[int]		NOT NULL CONSTRAINT UQ_EBUSAbnoDescriptions_SiteId UNIQUE(SiteId),
	[Size]				[tinyint] NULL,
	[SizeNum]			[real] NULL,
	[Shape]				[tinyint] NULL,
	[Margin]			[tinyint] NULL,
	[Echogenecity]		[tinyint] NULL,
	[CHS]				[tinyint] NULL,
	[CNS]				[tinyint] NULL,
	[Vascular]			[tinyint] NULL,
	[BxType]			[tinyint] NULL,
	[NoBxTaken]			[smallint] NULL,
	[BxNeedleType]		[tinyint] NULL,
	[BxNeedleSize]		[real] NULL,
	[BxNeedleSizeUnits] [tinyint] NULL,
	[Summary]			[nvarchar](4000) NULL,
	CONSTRAINT [FK_EBUSAbnoDescriptions_Sites] FOREIGN KEY ([SiteId]) REFERENCES ERS_Sites([SiteId])
) ON [PRIMARY]
GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------  181 Create Table ERS_NedFilesLog.sql   --------------------------------------
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_NedFilesLog](
	[LogId]			[int] IDENTITY(1,1) NOT NULL,
	[ProcedureID]	[int] NOT NULL,
	[xmlFile]		[xml] NULL,
	[logDate]		[datetime] NULL CONSTRAINT [DF_ERS_NedFilesLog_] DEFAULT (getdate()),
	[IsProcessed]	[bit] NULL CONSTRAINT [DF_ERS_NedFilesLog_IsProcessed] DEFAULT 0,
	[IsSchemaValid] [bit] NULL,
	[IsSent]		[bit] NULL CONSTRAINT [DF_ERS_NedFilesLog_IsSent] DEFAULT 0,
	[IsSuccess]		[bit] NULL,
	[TimesSent]		[int] NULL CONSTRAINT [DF_ERS_NedFilesLog_TimesSent] DEFAULT 0,
	[LastUserId]	[int] NULL CONSTRAINT [DF_ERS_NedFilesLog_LastUserId] DEFAULT 0,
	[NEDMessage]	[nvarchar](512) NULL,
	[xmlFileName]	[varchar](100) NULL,
 CONSTRAINT			[ERS_NedFilesLog.PK.LogId] 
 PRIMARY KEY CLUSTERED ([LogId] ASC) ON [PRIMARY]
 ) ON [PRIMARY]

GO


--################### ALL FUNCTION ojects ###########################
--------------------------------------------------------------------------------------------------------------------
-------------------------------------200 Create Functions.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'fnGetSiteTitle', 'F';
GO 

CREATE FUNCTION fnGetSiteTitle (@siteNo INT)
RETURNS
  VARCHAR(5)
AS
BEGIN
	DECLARE @site_no_ch VARCHAR(5)

	DECLARE @SiteIdentifier INT

	SELECT @SiteIdentifier = esc.SiteIdentification FROM dbo.ERS_SystemConfig esc

	IF @SiteIdentifier = 1
	BEGIN
		SET @site_no_ch = convert(varchar(5), @SiteNo)
	END
	ELSE
	BEGIN
		IF @siteNo <= 26
			SET @site_no_ch = CHAR(64+@siteNo)
		ELSE
		BEGIN
			DECLARE @div INT, @rem INT
			SET @div = @siteNo / 26
			SET @rem = @siteNo % 26
			IF @rem = 0 BEGIN SET @rem = 26 SET @div = @div - 1 END
			SET @site_no_ch = CHAR(64+@div) + CHAR(64+@rem)
		END
	END
	RETURN @site_no_ch
END



GO 

-----------------------------------
EXEC DropIfExist 'fnFirstLetterUpper', 'F';
GO 

CREATE FUNCTION fnFirstLetterUpper (@str VARCHAR(MAX))
RETURNS
  VARCHAR(MAX)
AS
BEGIN
	DECLARE @rtnValue VARCHAR(MAX)

	IF(LEN(ISNULL(@str,''))>0)
		SET @rtnValue=UPPER(LEFT(@str,1))+RIGHT(@str,DATALENGTH(@str)-1)
	ELSE
		SET @rtnValue=''
	
	RETURN @rtnValue
END

GO

-----------------------------------
EXEC DropIfExist 'fnFirstLetterLower', 'F';
GO 

CREATE FUNCTION [dbo].[fnFirstLetterLower] (@str VARCHAR(MAX))
RETURNS
  VARCHAR(MAX)
AS
BEGIN
	DECLARE @rtnValue VARCHAR(MAX)

	SET @str = LTRIM(RTRIM(@str))

	IF(LEN(ISNULL(@str,''))>0)
		SET @rtnValue=LOWER(LEFT(@str,1))+RIGHT(@str,DATALENGTH(@str)-1)
	ELSE
		SET @rtnValue=''
	
	RETURN @rtnValue
END

GO

-----------------------------------
EXEC DropIfExist 'fnCapitalise', 'F';
GO 

CREATE FUNCTION [dbo].[fnCapitalise] (@str VARCHAR(MAX))
RETURNS
  VARCHAR(MAX)
AS
BEGIN
	DECLARE @rtnValue VARCHAR(MAX)

	IF(LEN(ISNULL(@str,''))>0)
		SET @rtnValue=UPPER(LEFT(@str,1))+LOWER(RIGHT(@str,DATALENGTH(@str)-1))
	ELSE
		SET @rtnValue=''
	
	RETURN @rtnValue
END

GO
-----------------------------------
EXEC DropIfExist 'fnRemoveDecTrailingZeroes', 'F';
GO 

CREATE FUNCTION fnRemoveDecTrailingZeroes (@val VARCHAR(20))
RETURNS
  VARCHAR(20)
AS
BEGIN

	RETURN CONVERT(VARCHAR(20),CAST(CAST(@val as DECIMAL(9,6)) AS FLOAT))

END

GO

-----------------------------------
EXEC DropIfExist 'fnGetFactoredPath', 'F';
GO 

CREATE FUNCTION fnGetFactoredPath (@pathString VARCHAR(MAX), @height INT, @width INT, @originalHeight INT, @originalWidth INT)
RETURNS
  VARCHAR(MAX)
AS
BEGIN
	DECLARE @newPathString VARCHAR(MAX)

	DECLARE @coord DECIMAL(5,2)
	DECLARE @pos INT
	DECLARE @XCoord BIT

	SET @pathString = RTRIM(LTRIM(REPLACE(REPLACE(@pathString,'M',''),'z','')))
	IF RIGHT(@pathString, 1)  = ','
		SET @pathString = LEFT(@pathString, DATALENGTH(@pathString) - 1)

	SET @newPathString = 'M '
	SET @XCoord = 1

	WHILE CHARINDEX(',', @pathString) > 0
	BEGIN
		SELECT @pos  = CHARINDEX(',', @pathString)  
		SELECT @coord = convert(decimal(5,2),SUBSTRING(@pathString, 1, @pos-1))

		IF @XCoord = 1
		BEGIN
			SELECT @coord = @coord * (convert(decimal(5,2),@width)/@originalWidth)
			SET @XCoord = 0
		END
		ELSE
		BEGIN
			SELECT @coord = @coord * (convert(decimal(5,2),@height)/@originalHeight)
			SET @XCoord = 1
		END
  
		SET @newPathString = @newPathString + convert(varchar(10),@coord) + ','
		SELECT @pathString = SUBSTRING(@pathString, @pos+1, LEN(@pathString)-@pos)
	END
 
	-- last co-ordinate is always a Y
	SELECT @coord = @pathString
	SELECT @coord = @coord * (convert(decimal(5,2),@height)/@originalHeight)
  
	SET @newPathString = @newPathString + convert(varchar(10),@coord) + ','
  
	SET @newPathString = @newPathString + ' z'

	RETURN @newPathString
END

GO

----------------------------------- 
EXEC DropIfExist 'fnGetPhotoProcedureType', 'F';
GO 

CREATE FUNCTION [fnGetPhotoProcedureType] (@ProcedureType INT)
RETURNS
  INT
AS
BEGIN
	DECLARE @r INT
	SELECT @r = CASE WHEN @ProcedureType = 1 OR @ProcedureType = 5 OR @ProcedureType = 7 --1:Upper GI ; 5:EUS-OGD
								THEN 1
							WHEN @ProcedureType = 2 OR @ProcedureType = 6 --2:ERCP ; 6:EUS-HPB
								THEN 5  
							WHEN @ProcedureType = 3 OR @ProcedureType = 4 OR @ProcedureType = 12 --3:Colon ; 4:Proc ; 12:Sig
								THEN 8	
							ELSE -1 
						END 
	RETURN @r
END 

GO
----------------------------------- 

EXEC DropIfExist 'fnGetUGI_tablename', 'F';
GO 

CREATE FUNCTION fnGetUGI_tablename (@ProcedureType INT, @targetTable VARCHAR(20))
RETURNS
  VARCHAR(75)
AS
BEGIN
	DECLARE @tableName VARCHAR(75)

	IF @targetTable = 'sites'
	BEGIN
		SELECT @tableName = CASE WHEN @ProcedureType IN (1, 6)   --1:Upper GI , 6:EUS-OGD
								THEN ' [Upper GI Sites] '
							WHEN @ProcedureType IN (2, 7)--2:ERCP ; 7:EUS-HPB
								THEN ' [ERCP Sites] '  
							WHEN @ProcedureType IN (3, 4, 5, 12) --3:Colon ; 4:Sig; 5:Proc ; 12:Thoracoscopy
								THEN ' [Colon Sites] '	
							ELSE ' [Upper GI Sites] ' 
						END 
	END
	ELSE IF  @targetTable = 'procedure'
	BEGIN
		SELECT @tableName = CASE WHEN @ProcedureType = 1  --1:Upper GI 
								THEN ' [Upper GI Procedure] '
							WHEN @ProcedureType = 2  --2:ERCP 
								THEN ' [ERCP Procedure] '  
							WHEN @ProcedureType IN (3, 4, 5, 12) --3:Colon ; 4:Sig; 5:Proc ; 12:Thoracoscopy
								THEN ' [Colon Procedure] '	
							WHEN @ProcedureType IN (6,7)  --5:EUS-OGD ; 6:EUS-HPB 
								THEN ' [EUS Procedure] '
							WHEN @ProcedureType = 8  --8:Ent - Antegrade 
								THEN ' [ENTER ante procedure] '
							WHEN @ProcedureType = 9  --9:Ent - Retrograde 
								THEN ' [ENTER retro procedure] '	
							ELSE ' [Upper GI Procedure] ' 
						END 
	END 
	RETURN @tableName
END

GO

----------------------------------- 
EXEC DropIfExist 'fnBuildString', 'F';
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION fnBuildString (@XMLlist XML)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @strVal varchar(300)
	DECLARE @rtnValue VARCHAR(MAX) = ''
	DECLARE @MaxRows int 
	DECLARE @cnt int = 1
	DECLARE @noCommas BIT = 0

    IF @XMLlist IS NOT NULL
	BEGIN

	SET @XMLlist.modify('delete (/row/Val[. = ""])')

	SELECT @MaxRows=@XMLlist.value('count(/row/Val)', 'int') 

	DECLARE cur CURSOR FOR 	SELECT n.value('.[1]', 'VARCHAR(500)') AS StrValue
							FROM @XMLlist.nodes('row') AS p(n)
	OPEN cur

	FETCH NEXT FROM cur INTO @strVal

	WHILE @@FETCH_STATUS = 0 
	BEGIN
		IF @strVal = '~~NoCommas~~'
		BEGIN
			SET @noCommas = 1
			SET @strVal = ''
		END

		IF NOT @strVal IS NULL AND @strVal <> ''
		BEGIN
			SET @rtnValue = @rtnValue + CASE @cnt
										WHEN 1 THEN LTRIM(RTRIM(@strVal))
										ELSE 
											(CASE WHEN @noCommas = 1 THEN '' WHEN @cnt = @MaxRows THEN ' and ' ELSE ', ' END) + LTRIM(RTRIM(@strVal))
									END
			SET @cnt= @cnt + 1
		END
		FETCH NEXT FROM cur INTO @strVal
	END

	CLOSE cur    
	DEALLOCATE cur
	END

	RETURN @rtnValue
END

GO


---------------------------------
EXEC DropIfExist 'fnAddFullStop', 'F';
GO 

CREATE FUNCTION fnAddFullStop (@str VARCHAR(MAX))
RETURNS
  VARCHAR(MAX)
AS
BEGIN
	DECLARE @rtnValue VARCHAR(MAX)
	SET @str = RTRIM(LTRIM(@str))

	IF(LEN(ISNULL(@str,''))>0)
	BEGIN
		IF RIGHT(@str, 1)  <> '.' SET @rtnValue = @str + '.'
		ELSE SET @rtnValue = @str
	END
	ELSE
		SET @rtnValue=''
	
	RETURN @rtnValue
END

GO

-------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'fnRepOesoUlcer', 'F';
GO 

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION fnRepOesoUlcer (@SiteId INT)
RETURNS VARCHAR(MAX)
AS
BEGIN

	DECLARE
		@summary VARCHAR(200),
		@temp VARCHAR(50),
		@OesoUlcer BIT,
		@None BIT,
		@Web BIT,
		@Mallory BIT,
		@SchatzkiRing BIT,
		@FoodResidue BIT,
		@ExtrinsicCompression BIT,
		@Diverticulum BIT,
		@DivertMultiple BIT,
		@DivertQty SMALLINT,
		@Pharyngeal BIT,
		@DiffuseIntramural BIT,
		@TractionType BIT,
		@PulsionType BIT,
		@MotilityDisorder BIT,
		@ProbableAchalasia BIT,
		@ConfirmedAchalasia BIT,
		@Presbyoesophagus BIT,
		@MarkedTertiaryContractions BIT,
		@LaxLowerOesoSphincter BIT,
		@TortuousOesophagus BIT,
		@DilatedOesophagus BIT,
		@MotilityPoor BIT,
		@Ulceration BIT,
		@UlcerationType BIT,
		@UlcerationMultiple BIT,
		@UlcerationQty SMALLINT,
		@UlcerationLength SMALLINT,
		@UlcerationClotInBase BIT,
		@UlcerationReflux BIT,
		@UlcerationPostSclero BIT,
		@UlcerationPostBanding BIT,
		@Stricture BIT,
		@StrictureCompression TINYINT,
		@StrictureScopeNotPass BIT,
		@StrictureSeverity TINYINT,
		@StrictureType SMALLINT,
		@StrictureProbably BIT,
		@StrictureBenignType TINYINT,
		@StrictureBeginning SMALLINT,
		@StrictureLength SMALLINT,
		@Tumour BIT,
		@TumourType TINYINT,
		@TumourProbably BIT,
		@TumourExophytic TINYINT,
		@TumourBenignType TINYINT,
		@TumourBenignTypeOther NVARCHAR(100),
		@TumourBeginning SMALLINT,
		@TumourLength SMALLINT,
		@MiscOther NVARCHAR(150),
		@IsLAClassification BIT

	SELECT 
		@None				=	[None],
		@Web					=	Web,
		@Mallory				=	Mallory,
		@SchatzkiRing		=	SchatzkiRing,
		@FoodResidue			=	FoodResidue,
		@ExtrinsicCompression	=	ExtrinsicCompression,
		@Diverticulum		=	Diverticulum,
		@DivertMultiple		=	DivertMultiple,
		@DivertQty			=	DivertQty,
		@Pharyngeal			=	Pharyngeal,
		@DiffuseIntramural	=	DiffuseIntramural,
		@TractionType		=	TractionType,
		@PulsionType			=	PulsionType,
		@MotilityDisorder	=	MotilityDisorder,
		@ProbableAchalasia	=	ProbableAchalasia,
		@ConfirmedAchalasia	=	ConfirmedAchalasia,
		@Presbyoesophagus	=	Presbyoesophagus,
		@MarkedTertiaryContractions	=	MarkedTertiaryContractions,
		@LaxLowerOesoSphincter		=	LaxLowerOesoSphincter,
		@TortuousOesophagus		=	TortuousOesophagus,
		@DilatedOesophagus		=	DilatedOesophagus,
		@MotilityPoor			=	MotilityPoor,
		@Ulceration				=	Ulceration,
		@UlcerationType			=	UlcerationType,
		@UlcerationMultiple		=	UlcerationMultiple,
		@UlcerationQty			=	UlcerationQty,
		@UlcerationLength		=	UlcerationLength,
		@UlcerationClotInBase	=	UlcerationClotInBase,
		@UlcerationReflux		=	UlcerationReflux,
		@UlcerationPostSclero	=	UlcerationPostSclero,
		@UlcerationPostBanding	=	UlcerationPostBanding,
		@Stricture				=	Stricture,
		@StrictureCompression	=	StrictureCompression,
		@StrictureScopeNotPass	=	StrictureScopeNotPass,
		@StrictureSeverity		=	StrictureSeverity,
		@StrictureType			=	StrictureType,
		@StrictureProbably		=	StrictureProbably,
		@StrictureBenignType		=	StrictureBenignType,
		@StrictureBeginning		=	StrictureBeginning,
		@StrictureLength			=	StrictureLength,
		@Tumour					=	Tumour,
		@TumourType				=	TumourType,
		@TumourProbably			=	TumourProbably,
		@TumourExophytic			=	TumourExophytic,
		@TumourBenignType		=	TumourBenignType,
		@TumourBenignTypeOther	=	TumourBenignTypeOther,
		@TumourBeginning			=	TumourBeginning,
		@TumourLength			=	TumourLength,
		@MiscOther				=	MiscOther,
		@IsLAClassification		=	ISNULL(IsLAClassification,0)
	FROM
		ERS_UpperGIAbnoMiscellaneous
	WHERE
		SiteId = @SiteId

	SET @Summary = ''
	SET @temp = ''

	IF @None = 1
		SET @summary = '' --@summary + 'No varices'
	ELSE 
	BEGIN
		SET @OesoUlcer = ISNULL((SELECT Ulcer FROM ERS_UpperGIAbnoOesophagitis WHERE SiteId = @SiteId),0)

		DECLARE @tmpUlcer TABLE(Val VARCHAR(MAX))
		DECLARE @arMisc TABLE(Val VARCHAR(MAX))
		DECLARE @XMLlist XML

		--If it hasn't already been reported
		--IF @OesoUlcer = 0
		--BEGIN 

		IF @Ulceration = 1
		BEGIN
		--What type of ulceration
		--Is ulcer of type grade 4
			IF @UlcerationReflux = 1
			BEGIN
				--but not Oesophagitis
				IF @OesoUlcer = 0
				BEGIN
					IF @IsLAClassification = 0
						INSERT INTO @tmpUlcer (Val) VALUES('grade 4 reflux')
					ELSE
						INSERT INTO @tmpUlcer (Val) VALUES('reflux')
				END
			END
		

			IF @UlcerationPostSclero = 1 INSERT INTO @tmpUlcer (Val) VALUES('post sclerotherapy')
			IF @UlcerationPostBanding = 1 INSERT INTO @tmpUlcer (Val) VALUES('post banding')

			IF @UlcerationMultiple = 1
			BEGIN
				SET @Summary = 'multiple'
				SET @temp = 's'
			END
			ELSE IF @UlcerationQty > 0
			BEGIN
				IF @UlcerationQty = 1
				BEGIN
					SET @Summary = 'one'
					SET @temp = ''
				END
				ELSE
				BEGIN
					SET @Summary = CONVERT(VARCHAR, @UlcerationQty)
					SET @temp = 's'
				END
			END

			--Size
			DECLARE @length VARCHAR(30) = ''
			IF @UlcerationLength <> 0 SET @length = ' (length ' + CONVERT(VARCHAR,@UlcerationLength) + 'mm)'

			IF (SELECT COUNT(Val) FROM @tmpUlcer) > 0
			BEGIN
				SET @Summary = @Summary + @length
				SET @XMLlist = (SELECT Val FROM @tmpUlcer FOR XML  RAW, ELEMENTS, TYPE)
				IF LEN(@Summary) > 0 SET @Summary = @Summary + ', '
				SET @Summary = 'ulcer' + @temp + ': ' + @Summary + dbo.fnBuildString(@XMLlist) 
			END
			ELSE
			BEGIN
				IF LEN(@Summary) > 0 SET @Summary = @Summary + ' '
				SET @Summary = @Summary + 'ulcer' + @temp + @length
			END

			DELETE FROM @tmpUlcer

			--Clot present ?
			IF @UlcerationClotInBase = 1 SET @Summary = ISNULL(@Summary,'Ulcer') + ' with clot in base'


			IF LEN(LTRIM(RTRIM(@Summary))) > 0 
				INSERT INTO @tmpUlcer (Val) VALUES(@Summary)
			ELSE
				INSERT INTO @tmpUlcer (Val) VALUES('ulceration')


			IF (SELECT COUNT(Val) FROM @tmpUlcer) > 0
			BEGIN
				SET @XMLlist = (SELECT Val FROM @tmpUlcer FOR XML  RAW, ELEMENTS, TYPE)
				--SET @Summary = @Summary + dbo.fnBuildString(@XMLlist) + ' ulcer' + @temp
				SET @Summary = dbo.fnBuildString(@XMLlist) 
			END
		END 
	END

	RETURN @Summary
END

GO

--------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'fnRepOesoStricture', 'F';
GO 

CREATE FUNCTION fnRepOesoStricture (@SiteId INT)
RETURNS VARCHAR(MAX)
AS
BEGIN

	DECLARE
		@summary VARCHAR(200),
		@temp VARCHAR(50),
		@OesoStrict BIT,
		@None BIT,
		@Web BIT,
		@Mallory BIT,
		@SchatzkiRing BIT,
		@FoodResidue BIT,
		@ExtrinsicCompression BIT,
		@Diverticulum BIT,
		@DivertMultiple BIT,
		@DivertQty SMALLINT,
		@Pharyngeal BIT,
		@DiffuseIntramural BIT,
		@TractionType BIT,
		@PulsionType BIT,
		@MotilityDisorder BIT,
		@ProbableAchalasia BIT,
		@ConfirmedAchalasia BIT,
		@Presbyoesophagus BIT,
		@MarkedTertiaryContractions BIT,
		@LaxLowerOesoSphincter BIT,
		@TortuousOesophagus BIT,
		@DilatedOesophagus BIT,
		@MotilityPoor BIT,
		@Ulceration BIT,
		@UlcerationType BIT,
		@UlcerationMultiple BIT,
		@UlcerationQty SMALLINT,
		@UlcerationLength SMALLINT,
		@UlcerationClotInBase BIT,
		@UlcerationReflux BIT,
		@UlcerationPostSclero BIT,
		@UlcerationPostBanding BIT,
		@Stricture BIT,
		@StrictureCompression TINYINT,
		@StrictureScopeNotPass BIT,
		@StrictureSeverity TINYINT,
		@StrictureType SMALLINT,
		@StrictureProbably BIT,
		@StrictureBenignType TINYINT,
		@StrictureBeginning SMALLINT,
		@StrictureLength SMALLINT,
		@Tumour BIT,
		@TumourType TINYINT,
		@TumourProbably BIT,
		@TumourExophytic TINYINT,
		@TumourBenignType TINYINT,
		@TumourBenignTypeOther NVARCHAR(100),
		@TumourBeginning SMALLINT,
		@TumourLength SMALLINT,
		@MiscOther NVARCHAR(150),
		@IsLAClassification BIT

	SELECT 
		@None				=	[None],
		@Web					=	Web,
		@Mallory				=	Mallory,
		@SchatzkiRing		=	SchatzkiRing,
		@FoodResidue			=	FoodResidue,
		@ExtrinsicCompression	=	ExtrinsicCompression,
		@Diverticulum		=	Diverticulum,
		@DivertMultiple		=	DivertMultiple,
		@DivertQty			=	DivertQty,
		@Pharyngeal			=	Pharyngeal,
		@DiffuseIntramural	=	DiffuseIntramural,
		@TractionType		=	TractionType,
		@PulsionType			=	PulsionType,
		@MotilityDisorder	=	MotilityDisorder,
		@ProbableAchalasia	=	ProbableAchalasia,
		@ConfirmedAchalasia	=	ConfirmedAchalasia,
		@Presbyoesophagus	=	Presbyoesophagus,
		@MarkedTertiaryContractions	=	MarkedTertiaryContractions,
		@LaxLowerOesoSphincter		=	LaxLowerOesoSphincter,
		@TortuousOesophagus		=	TortuousOesophagus,
		@DilatedOesophagus		=	DilatedOesophagus,
		@MotilityPoor			=	MotilityPoor,
		@Ulceration				=	Ulceration,
		@UlcerationType			=	UlcerationType,
		@UlcerationMultiple		=	UlcerationMultiple,
		@UlcerationQty			=	UlcerationQty,
		@UlcerationLength		=	UlcerationLength,
		@UlcerationClotInBase	=	UlcerationClotInBase,
		@UlcerationReflux		=	UlcerationReflux,
		@UlcerationPostSclero	=	UlcerationPostSclero,
		@UlcerationPostBanding	=	UlcerationPostBanding,
		@Stricture				=	Stricture,
		@StrictureCompression	=	StrictureCompression,
		@StrictureScopeNotPass	=	StrictureScopeNotPass,
		@StrictureSeverity		=	StrictureSeverity,
		@StrictureType			=	StrictureType,
		@StrictureProbably		=	StrictureProbably,
		@StrictureBenignType		=	StrictureBenignType,
		@StrictureBeginning		=	StrictureBeginning,
		@StrictureLength			=	StrictureLength,
		@Tumour					=	Tumour,
		@TumourType				=	TumourType,
		@TumourProbably			=	TumourProbably,
		@TumourExophytic			=	TumourExophytic,
		@TumourBenignType		=	TumourBenignType,
		@TumourBenignTypeOther	=	TumourBenignTypeOther,
		@TumourBeginning			=	TumourBeginning,
		@TumourLength			=	TumourLength,
		@MiscOther				=	MiscOther,
		@IsLAClassification		=	ISNULL(IsLAClassification,0)
	FROM
		ERS_UpperGIAbnoMiscellaneous
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	--IF @None = 1
	--	SET @summary = ''
	--ELSE 
	--BEGIN
	SET @OesoStrict = ISNULL((SELECT Stricture FROM ERS_UpperGIAbnoOesophagitis WHERE SiteId = @SiteId),0)

	DECLARE @Prob VARCHAR(100) = ''
	DECLARE @StrictureText VARCHAR(200) = ''
	DECLARE @StrictType VARCHAR(200) = ''
	DECLARE @TumourText VARCHAR(500) = ''
	DECLARE @mMSM VARCHAR(100) = ''--'Modified Savary Miller '

	--If it has already been reported, then return
	IF @OesoStrict = 1 RETURN ''

	IF @Stricture = 1
	BEGIN
	--Is this a probable?
		IF @StrictureProbably = 1 SET @Prob = 'probably '

		--IF ISNULL(@Tumour,0) = 1 SET @StrictureText = ', resulting in '


		SET @StrictureText = CASE @StrictureSeverity
								WHEN 1 THEN @StrictureText + 'slight '
								WHEN 2 THEN @StrictureText + 'moderate '
								WHEN 3 THEN @StrictureText + 'tight '
								ELSE @StrictureText
							END

		IF @StrictureType = 1
		BEGIN
			SET @StrictType = CASE @StrictureBenignType
								WHEN 1 THEN 'inflammatory'
								WHEN 2 THEN 'post surgery'
								WHEN 3 THEN 'peptic'
								WHEN 4 THEN 'post radiotherapy'
								ELSE 'benign'
							END

			IF @Prob = ''	SET @StrictureText = @StrictureText + @StrictType + ' stricture'
            ELSE			SET @StrictureText = @StrictureText + ' stricture (' + @Prob + @StrictType + ')'
		END
		ELSE IF @StrictureType = 2
		BEGIN
				--TODO
                --If ISNULL(@Tumour,0) = 1 SET @StrictureText = @StrictureText + @mMSM + 'stricture'
                    If @Prob = '' 
                        SET @StrictureText = @StrictureText + 'malignant ' + @mMSM + 'stricture'
                    Else
                        SET @StrictureText = @StrictureText + @mMSM + 'stricture ' + @Prob + 'malignant'

					SET @mMSM = ''
		END
		ELSE SET @StrictureText = @StrictureText + 'stricture'

		IF ISNULL(@StrictureBeginning,0) <> 0 SET @StrictureText = @StrictureText + ' beginning ' + CONVERT(VARCHAR,@StrictureBeginning) + 'cm from incisors'
		IF ISNULL(@StrictureLength,0) <> 0	SET @StrictureText = @StrictureText + ' length ' + CONVERT(VARCHAR,@StrictureLength) + 'cm'
			
		SET @StrictureText = CASE @StrictureCompression
								WHEN 1 THEN @StrictureText + ' with luminal narrowing'
								WHEN 2 THEN @StrictureText + ' with extrinsic compression'
								ELSE @StrictureText
							END

		IF @OesoStrict = 0
		BEGIN
			IF @StrictureScopeNotPass = 1 SET @StrictureText = @StrictureText + ', scope unable to pass'
		END	
	END --of stricture existing

	--IF @TumourText <> '' SET @StrictureText = @StrictureText + IIF(@StrictureText <> '', ',','') + @TumourText

	--IF @TumourText <> '' SET @StrictureText =  @TumourText + @StrictureText

	--IF LTRIM(RTRIM(@StrictureText)) <> '' SET @StrictureText = 'Stricture: ' + @StrictureText
	
	RETURN @StrictureText
END

GO

-----------------------------------------------------------------


EXEC DropIfExist 'fnRepOesoTumour', 'F';
GO 

CREATE FUNCTION fnRepOesoTumour (@SiteId INT)
RETURNS VARCHAR(MAX)
AS
BEGIN

	DECLARE
		@summary VARCHAR(200),
		@temp VARCHAR(50),
		@OesoStrict BIT,
		@None BIT,
		@Web BIT,
		@Mallory BIT,
		@SchatzkiRing BIT,
		@FoodResidue BIT,
		@ExtrinsicCompression BIT,
		@Diverticulum BIT,
		@DivertMultiple BIT,
		@DivertQty SMALLINT,
		@Pharyngeal BIT,
		@DiffuseIntramural BIT,
		@TractionType BIT,
		@PulsionType BIT,
		@MotilityDisorder BIT,
		@ProbableAchalasia BIT,
		@ConfirmedAchalasia BIT,
		@Presbyoesophagus BIT,
		@MarkedTertiaryContractions BIT,
		@LaxLowerOesoSphincter BIT,
		@TortuousOesophagus BIT,
		@DilatedOesophagus BIT,
		@MotilityPoor BIT,
		@Ulceration BIT,
		@UlcerationType BIT,
		@UlcerationMultiple BIT,
		@UlcerationQty SMALLINT,
		@UlcerationLength SMALLINT,
		@UlcerationClotInBase BIT,
		@UlcerationReflux BIT,
		@UlcerationPostSclero BIT,
		@UlcerationPostBanding BIT,
		@Stricture BIT,
		@StrictureCompression TINYINT,
		@StrictureScopeNotPass BIT,
		@StrictureSeverity TINYINT,
		@StrictureType SMALLINT,
		@StrictureProbably BIT,
		@StrictureBenignType TINYINT,
		@StrictureBeginning SMALLINT,
		@StrictureLength SMALLINT,
		@Tumour BIT,
		@TumourType TINYINT,
		@TumourProbably BIT,
		@TumourExophytic TINYINT,
		@TumourBenignType TINYINT,
		@TumourBenignTypeOther NVARCHAR(100),
		@TumourBeginning SMALLINT,
		@TumourLength SMALLINT,
		@MiscOther NVARCHAR(150),
		@IsLAClassification BIT

	SELECT 
		@None				=	[None],
		@Web					=	Web,
		@Mallory				=	Mallory,
		@SchatzkiRing		=	SchatzkiRing,
		@FoodResidue			=	FoodResidue,
		@ExtrinsicCompression	=	ExtrinsicCompression,
		@Diverticulum		=	Diverticulum,
		@DivertMultiple		=	DivertMultiple,
		@DivertQty			=	DivertQty,
		@Pharyngeal			=	Pharyngeal,
		@DiffuseIntramural	=	DiffuseIntramural,
		@TractionType		=	TractionType,
		@PulsionType			=	PulsionType,
		@MotilityDisorder	=	MotilityDisorder,
		@ProbableAchalasia	=	ProbableAchalasia,
		@ConfirmedAchalasia	=	ConfirmedAchalasia,
		@Presbyoesophagus	=	Presbyoesophagus,
		@MarkedTertiaryContractions	=	MarkedTertiaryContractions,
		@LaxLowerOesoSphincter		=	LaxLowerOesoSphincter,
		@TortuousOesophagus		=	TortuousOesophagus,
		@DilatedOesophagus		=	DilatedOesophagus,
		@MotilityPoor			=	MotilityPoor,
		@Ulceration				=	Ulceration,
		@UlcerationType			=	UlcerationType,
		@UlcerationMultiple		=	UlcerationMultiple,
		@UlcerationQty			=	UlcerationQty,
		@UlcerationLength		=	UlcerationLength,
		@UlcerationClotInBase	=	UlcerationClotInBase,
		@UlcerationReflux		=	UlcerationReflux,
		@UlcerationPostSclero	=	UlcerationPostSclero,
		@UlcerationPostBanding	=	UlcerationPostBanding,
		@Stricture				=	Stricture,
		@StrictureCompression	=	StrictureCompression,
		@StrictureScopeNotPass	=	StrictureScopeNotPass,
		@StrictureSeverity		=	StrictureSeverity,
		@StrictureType			=	StrictureType,
		@StrictureProbably		=	StrictureProbably,
		@StrictureBenignType		=	StrictureBenignType,
		@StrictureBeginning		=	StrictureBeginning,
		@StrictureLength			=	StrictureLength,
		@Tumour					=	Tumour,
		@TumourType				=	TumourType,
		@TumourProbably			=	TumourProbably,
		@TumourExophytic			=	TumourExophytic,
		@TumourBenignType		=	TumourBenignType,
		@TumourBenignTypeOther	=	TumourBenignTypeOther,
		@TumourBeginning			=	TumourBeginning,
		@TumourLength			=	TumourLength,
		@MiscOther				=	MiscOther,
		@IsLAClassification		=	ISNULL(IsLAClassification,0)
	FROM
		ERS_UpperGIAbnoMiscellaneous
	WHERE
		SiteId = @SiteId


	DECLARE @TumourText VARCHAR(100) = ''
	DECLARE @Prob VARCHAR(100) = ''

	IF ISNULL(@Tumour,0) = 0 RETURN ''

	SET @TumourText = CASE @TumourExophytic
							WHEN 1 THEN 'indeterminate'
							WHEN 2 THEN 'submucosal'
							WHEN 3 THEN 'exophytic'
							ELSE ''
						END

	SET @TumourText = @TumourText + ' tumour'

	IF @TumourProbably = 1 SET @Prob = 'probably '

	IF @TumourType = 1
	BEGIN
		SET @TumourText = CASE @TumourBenignType
							WHEN 1 THEN @TumourText + ', ' + @Prob +  'benign (type uncertain)'
							WHEN 2 THEN @TumourText + ', ' + @Prob +  'leiomyoma'
							WHEN 3 THEN @TumourText + ', ' + @Prob +  'lipoma'
							WHEN 4 THEN @TumourText + ', ' + @Prob +  'granular cell tumour'
							WHEN 5 THEN 
								(CASE WHEN @TumourBenignTypeOther <> '' THEN @TumourText + ', ' + @Prob +  'benign (' + @TumourBenignTypeOther + ') ' ELSE '' END)
							ELSE @TumourText + ', ' + @Prob +  'benign'
						END
	END
	ELSE IF @TumourType = 2
	BEGIN
		SET @TumourText = CASE @TumourBenignType
							WHEN 1 THEN @TumourText + ', ' + @Prob +  'malignant (cell type uncertain)'
							WHEN 2 THEN @TumourText + ', ' + @Prob +  'squamous carcinoma'
							WHEN 3 THEN @TumourText + ', ' + @Prob +  'adenocarcinoma'
							WHEN 4 THEN 
								CASE WHEN @TumourBenignTypeOther <> '' THEN @TumourText + ', ' + @Prob +  'malignant (' + @TumourBenignTypeOther + ') ' ELSE '' END
							ELSE @TumourText + ', ' + @Prob +  'malignant'
						END
	END

		--Only report the beginning and/or length of the tumour if it is different from the stricture beginning and/or length.
	IF ISNULL(@TumourBeginning,0) <> 0
	BEGIN
		--IF ISNULL(@StrictureBeginning,0) <> ISNULL(@TumourBeginning,0)
				SET @TumourText = @TumourText + ' beginning ' + CONVERT(VARCHAR,@TumourBeginning) + 'cm from incisors'
	END	

	IF ISNULL(@TumourLength,0) <> 0
	BEGIN
		--IF ISNULL(@StrictureLength,0) <> ISNULL(@TumourLength,0)
				SET @TumourText = @TumourText + ' length ' + CONVERT(VARCHAR,@TumourLength) + 'cm'
	END	

	RETURN @TumourText
END

GO

-----------------------------------------------------------------

EXEC DropIfExist 'fnGetPrimeSiteId', 'F';
GO 

CREATE FUNCTION fnGetPrimeSiteId (@siteId INT)
RETURNS
  INT
AS
BEGIN
	DECLARE @SiteIdPrime INT
	
	SELECT @SiteIdPrime = a.SiteId 
	FROM ERS_Sites a 
	JOIN ERS_Sites b ON a.AreaNo = b.AreaNo AND a.ProcedureId = b.ProcedureId
	WHERE b.SiteId = @siteId
	AND a.SiteNo <> 0

	RETURN @SiteIdPrime
END

GO

-----------------------------------------------------------------
-- Description:	We will need to know in many Reports/Screen/StoredProc- whether to include OLD UGI data or not! 
--					Use the function rather than writing InLine queries all the time!
-- =============================================
EXEC DropIfExist 'fnShouldIncludeUGI', 'F';
GO 

CREATE FUNCTION dbo.fnShouldIncludeUGI
(	
)
RETURNS BIT
AS
BEGIN
	-- Declare the return variable here
	DECLARE @UnionUGI_Data AS BIT;
	select TOP 1 @UnionUGI_Data= IncludeUGI from ERS_SystemConfig;

	-- Return the result of the function
	RETURN @UnionUGI_Data;

END

GO
-----------------------------------------------------------------

EXEC DropIfExist 'fnSetAreaDescription', 'F';
GO 

CREATE FUNCTION fnSetAreaDescription (@ProcedureId INT, @AreaNo INT, @ResectedColonId INT)
RETURNS
  VARCHAR(MAX)
AS
BEGIN
	
	DECLARE @MinRegionID INT, @MaxRegionID INT, @StartRegionId INT, @SiteDesc VARCHAR(MAX)=''
	DECLARE @tmpSites TABLE (SiteId INT, SiteNo INT, RegionId INT, Region VARCHAR(500), IsAnastamosis BIT)

	--Insert site records in temp table
	INSERT INTO @tmpSites
	SELECT MIN(s.SiteId) AS SiteId, s.SiteNo, s.RegionId, 
			CASE 
				WHEN ISNULL(@ResectedColonId,0) > 0  AND
				EXISTS (SELECT 1 FROM ERS_Regions r 
							JOIN ERS_ResectedColonRegions rcr ON r.RegionId = rcr.RegionId
							WHERE r.RegionId = s.RegionId
							AND rcr.ResectedColonId = @ResectedColonId) THEN 'anastomosis'
				ELSE MIN(LOWER(r.Region))
				END AS Region, 0
	FROM ERS_Sites s 
	INNER JOIN ERS_Regions r ON s.RegionId = r.RegionId AND s.ProcedureId = @ProcedureId AND s.AreaNo = @AreaNo
	GROUP BY s.RegionId, s.SiteNo, s.RegionId
	ORDER BY SiteId

	--Get start site of the area
	SELECT TOP 1 @StartRegionId = RegionId FROM @tmpSites WHERE SiteNo > 0

	--Get minimum & maximum region id of the area to set as the 2 extremity
	SELECT @MinRegionID = MIN(RegionID), @MaxRegionID = MAX(RegionID) FROM @tmpSites 

	--Delete the rest, not to include in the description of the area
	DELETE FROM @tmpSites WHERE RegionID NOT IN (@MinRegionID, @MaxRegionID) AND SiteNo = 0
	DELETE FROM @tmpSites WHERE RegionID = @StartRegionId AND SiteNo = 0
	DELETE FROM @tmpSites WHERE Region = (SELECT TOP 1 Region FROM @tmpSites WHERE RegionID = @StartRegionId) AND SiteNo = 0 

	DECLARE @RowCnt INT = (SELECT COUNT(SiteId) FROM @tmpSites)

	IF @RowCnt = 1
		SELECT TOP 1 @SiteDesc = 'An area wholly within the '  + Region FROM @tmpSites ORDER BY SiteId
	ELSE IF @RowCnt = 2
	BEGIN
		SET @SiteDesc = 'An area extending from the ' + (SELECT TOP 1 Region FROM @tmpSites WHERE SiteNo > 0) 
							+ ' to the ' + (SELECT TOP 1 Region FROM @tmpSites WHERE SiteNo = 0)
	END
	ELSE IF @RowCnt > 2 -- more than 2 rows (max 3 rows)
	BEGIN
		SET @SiteDesc = 'An area extending from the ' + (SELECT TOP 1 Region FROM @tmpSites WHERE RegionId = @StartRegionId) 
							+ ' through the ' + (SELECT TOP 1 Region FROM @tmpSites WHERE RegionId = @MinRegionID)
							+ ' and ' + (SELECT TOP 1 Region FROM @tmpSites WHERE RegionId = @MaxRegionID)
	END

	RETURN @SiteDesc
END

GO


-----------------------------------------------------------------

EXEC DropIfExist 'tvfSCH_PointsTable', 'F';
GO 

CREATE FUNCTION tvfSCH_PointsTable (@toNumber INT)
RETURNS TABLE
RETURN (
		WITH q AS (
				SELECT 1 AS num
				UNION ALL
				SELECT num + 1
				FROM q
				WHERE num < @toNumber
				)
		SELECT * FROM q)

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------201 Create Proc usp_Procedures_SelectByPatient.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'usp_Procedures_SelectByPatient','S';
GO

CREATE PROCEDURE [dbo].[usp_Procedures_SelectByPatient]
(
	@PatientId INT,
	@IncludeOldProcs BIT = 1,
	@ActiveProceduresOnly BIT = 1 -- Only Select the Active Records-> IsActive=True!
)
AS

SET NOCOUNT ON

	-- NEW System procedures
	SELECT * INTO #procs FROM (
		SELECT 
			p.ProcedureId AS ProcedureId,
			0 AS EpisodeNo,
			p.ProcedureType AS ProcedureType,
			CONVERT(VARCHAR(50),'') AS PatientComboId,
			p.DiagramNumber AS DiagramNumber,
			CONVERT(VARCHAR(100), CONVERT(VARCHAR, p.CreatedOn, 103) + 
			' - ' + 
			CASE pt.ProcedureType 
				WHEN 'Gastroscopy' THEN 'Upper GI' 
				--WHEN 'Sigmoidoscopy' THEN 'Colonoscopy' 
				--WHEN 'Proctoscopy' THEN 'Colonoscopy' 
				ELSE pt.ProcedureType 
						END)    AS DisplayName,
			1 AS ERS,
			p.CreatedOn,
			p.ModifiedOn,
			0 AS Locked,--ISNULL(pa.Locked,0), 
			0 AS LockedBy,--ISNULL(pa.LockedBy,0), 
			NULL AS LockedOn,--pa.LockedOn,
			ISNULL(CAST(SurgicalSafetyCheckListCompleted AS VARCHAR(50)),'') AS SurgicalSafetyCheckListCompleted,
			(SELECT TOP(1) CASE s.ReportLocking WHEN 1 THEN 0
												ELSE 
							CASE WHEN  CAST(CAST(CONVERT(DATE,DATEADD(day,s.LockingDays, p.CreatedOn)) as varchar(50)) + ' ' +s.LockingTime as datetime) <= GETDATE() THEN 1 ELSE 0 END
								END  
							FROM ERS_SystemConfig s) AS isProcedureLocked, -1 AS  ColonType, CONVERT(INT,ISNULL(ProcedureCompleted,0)) AS ProcedureCompleted
			, IsNull(P.DNA,'')		AS DNA_Reason	
			, IsNull(PR.PP_DNA,'')	AS DNA_Reason_PP_Text	
			,p.BreathTestResult AS BreathTest
		FROM 
			ERS_Procedures p
		INNER JOIN 
			ERS_ProcedureTypes pt ON p.ProcedureType = pt.ProcedureTypeId
		INNER JOIN 
			ERS_VW_Patients pa ON p.PatientId = pa.PatientId
		LEFT JOIN ERS_ProceduresReporting AS PR ON p.ProcedureId=PR.ProcedureId
		WHERE 
			p.PatientId = @PatientId
			AND p.IsActive  = @ActiveProceduresOnly
	) AS temptemp



	-- OLD System procedures
	IF @IncludeOldProcs = 1
	BEGIN
	
		DECLARE @PatientComboId VARCHAR(24)
		SELECT @PatientComboId = [Combo ID] FROM Patient p INNER JOIN ERS_VW_Patients v ON p.[Patient No] = v.UGIPatientId WHERE v.PatientId =  @PatientId

       --SELECT * INTO #oldprocs FROM (
       --       SELECT [Episode No], 1 AS ProcTypeNum, -1 as ColonType ,[Episode Date] FROM  Episode
       --       WHERE [Patient No] = @PatientComboId AND @IncludeOldProcs = 1 AND [Status] IS NOT NULL       AND SUBSTRING([Status], 1, 1) = 1 
       --UNION
       --       SELECT        [Episode No], 2 AS ProcTypeNum, -1 as ColonType,[Episode Date]       FROM Episode
       --       WHERE  [Patient No] = @PatientComboId    AND @IncludeOldProcs = 1 AND [Status] IS NOT NULL AND SUBSTRING([Status], 2, 1) = 1 
       --UNION
       --       SELECT e.[Episode No],   3 AS ProcTypeNum, c.[Procedure type] as ColonType ,e.[Episode Date] FROM Episode e inner join [Colon Procedure] c on e.[Episode No]=c.[Episode No]
       --       WHERE e.[Patient No] = @PatientComboId AND @IncludeOldProcs = 1 AND e.[Status] IS NOT NULL AND SUBSTRING(e.[Status], 3, 1) = 1  AND c.[Procedure type] <> 2      
       --UNION
       --       SELECT [Episode No], 4 AS ProcTypeNum, 2 as ColonType  ,[Episode Date]      FROM Episode
       --       WHERE [Patient No] = @PatientComboId AND @IncludeOldProcs = 1 AND [Status] IS NOT NULL AND SUBSTRING([Status], 4, 1) = 1 
       --UNION 
       --       SELECT [Episode No], 5 AS ProcTypeNum     , -1 as ColonType    ,[Episode Date]      FROM Episode
       --       WHERE [Patient No] = @PatientComboId    AND @IncludeOldProcs = 1          AND [Status] IS NOT NULL AND SUBSTRING([Status], 5, 1) = 1 
       --UNION 
       --       SELECT [Episode No], 6 AS ProcTypeNum     , -1 as ColonType    ,[Episode Date]      FROM Episode
       --       WHERE [Patient No] = @PatientComboId    AND @IncludeOldProcs = 1 AND [Status] IS NOT NULL   AND SUBSTRING([Status], 6, 1) = 1 
       --UNION
       --       SELECT [Episode No], 8 AS ProcTypeNum     , -1 as ColonType    ,[Episode Date]      FROM Episode
       --       WHERE [Patient No] = @PatientComboId AND @IncludeOldProcs = 1 AND [Status] IS NOT NULL       AND SUBSTRING([Status], 7, 1) = 1 
       --UNION
       --       SELECT [Episode No], 9 AS ProcTypeNum    , -1 as ColonType    ,[Episode Date]      FROM Episode
       --       WHERE [Patient No] = @PatientComboId AND @IncludeOldProcs = 1 AND [Status] IS NOT NULL       AND SUBSTRING([Status], 8, 1) = 1 
       --UNION
       --       SELECT [Episode No], 9 AS ProcTypeNum, -1 as ColonType ,[Episode Date]      FROM Episode
       --       WHERE [Patient No] = @PatientComboId AND @IncludeOldProcs = 1 AND [Status] IS NOT NULL       AND SUBSTRING([Status], 9, 1) = 1 
       --UNION
       --       SELECT [Episode No], 10 AS ProcTypeNum   , -1 as ColonType    ,[Episode Date]      FROM Episode
       --       WHERE [Patient No] = @PatientComboId    AND @IncludeOldProcs = 1   AND [Status] IS NOT NULL      AND SUBSTRING([Status], 10, 1) = 1 
       --) AS eEpisode 
	
		SELECT * INTO #oldprocs FROM (
			SELECT [Episode No],   
				CASE WHEN CHARINDEX('1',[Status]) = 1
					THEN CASE WHEN SUBSTRING([Status], 6, 1) = 1 THEN 6 ELSE 1 END -- EUS-HPB (ProcType 7) has '1' in position 1 and 6, e.g: '1000010000'
					ELSE CHARINDEX('1',[Status]) 
				END ProcTypeNum, 
			-1 as ColonType ,[Episode Date], [Procedure time]
			FROM  Episode
			WHERE [Patient No] = @PatientComboId AND [Status] IS NOT NULL       
		) AS tempOldProc
			  
		UPDATE #oldprocs SET ColonType = 2 WHERE ProcTypeNum = '4'  -- PROCTOSCOPY, ProcTypeNum will set to 5 on the next query

		UPDATE #oldprocs SET ProcTypeNum = ProcTypeNum + 1 WHERE ProcTypeNum > 3   --Align with ERS Procedure types (FROM ERS_ProcedureTypes)

		--- SET Procedure type (ColonType) to 0 for Colonoscopy and 1 for Sigmoidscopy;   ProcTypeNum -> 3 for Col and 4 for Sig
		UPDATE o
		SET o.ColonType = c.[Procedure type] 
			--,o.ProcTypeNum = CASE WHEN c.[Procedure type] = 1 THEN 4 ELSE 3 END
		FROM #oldprocs o
		INNER JOIN [Colon Procedure] c ON o.[Episode No]=c.[Episode No] AND c.[Patient No] = @PatientComboId AND c.[Procedure type] <> 2
		WHERE ProcTypeNum = '3'  
		
		--Fill up the Procedure Type where it's blank
		IF EXISTS (SELECT 1 FROM #oldprocs WHERE ProcTypeNum = 0 OR ProcTypeNum = '')
		BEGIN
			DECLARE @episode_counter INT
			DECLARE cm CURSOR READ_ONLY FOR
			SELECT [Episode No] FROM #oldprocs WHERE ProcTypeNum = 0 OR ProcTypeNum = ''
			OPEN cm
			FETCH NEXT FROM cm INTO @episode_counter
			WHILE @@fetch_status = 0 
			BEGIN	
				IF EXISTS (SELECT 1 FROM [Upper GI Procedure] WHERE [Episode No] = @episode_counter)
					UPDATE #oldprocs SET ProcTypeNum = 1 WHERE [Episode No] = @episode_counter
				ELSE IF EXISTS (SELECT 1 FROM [ERCP Procedure] WHERE [Episode No] = @episode_counter)
					UPDATE #oldprocs SET ProcTypeNum = 2 WHERE [Episode No] = @episode_counter
				ELSE IF EXISTS (SELECT 1 FROM [Colon Procedure] WHERE [Episode No] = @episode_counter)
					UPDATE #oldprocs SET ProcTypeNum = 3 WHERE [Episode No] = @episode_counter
				FETCH NEXT FROM cm INTO @episode_counter
			END
			DEALLOCATE cm
		END 

		-- OLD System procedures
		INSERT INTO #procs
			SELECT 
				0 AS ProcedureId,
				[Episode No] AS EpisodeNo,
				ProcTypeNum AS ProcedureType,
				@PatientComboId AS PatientComboId,
				0 AS DiagramNumber,
				CONVERT(VARCHAR, [Episode date], 103) + 
				CASE ProcTypeNum
					WHEN 1 THEN ' - Upper GI' 
					WHEN 2 THEN ' - ERCP' 
					WHEN 3 THEN 
						CASE (ColonType) WHEN 0 THEN ' - Colonoscopy'
										WHEN 1 THEN ' - Sigmoidoscopy'
										ELSE ''
						END
					WHEN 5 THEN ' - Proctoscopy'      
					WHEN 6 THEN ' - EUS (OGD)' 
					WHEN 7 THEN ' - EUS (HPB)' 
					WHEN 8 THEN ' - Ent - Antegrade'
					WHEN 9 THEN ' - Ent - Retrograde'
					ELSE ''
				END    AS DisplayName,
				0 AS ERS,
				[Episode Date] AS CreatedOn, 
				[Procedure time] AS ModifiedOn,
				0 AS Locked, 0 AS LockedBy, NULL AS LockedOn,
				'' AS SurgicalSafetyCheckListCompleted,
						 0 AS isProcedureLocked, ColonType, -1 AS ProcedureCompleted
				, 0		AS DNA_Reason	--## New field... Shawkat Osman; 2017-07-10
				, ''	AS DNA_Reason_PP_Text	--## New field... Shawkat Osman; 2017-07-10
				,NULL AS BreathTest
			FROM #oldprocs a	

		DROP TABLE #oldprocs
	END

       ----To differentiate between Colonoscopy & Sigmoidoscopy (both '3' in Episode table) 
       ----FROM [colon procedure] table : When [Procedure type] is 0 then Colonoscopy     -    When [Procedure type] is 1 then Sigmoidoscopy
       --IF EXISTS (SELECT TOP 1 [Episode No] FROM #oldprocs WHERE ProcTypeNum = 3)
       --BEGIN
       --     UPDATE op
       --     SET op.ProcTypeNum = CASE WHEN cp.[Procedure type] = 1 THEN 4 ELSE 3 END
       --     FROM #oldprocs AS op
       --     INNER JOIN [colon procedure] AS cp
       --     ON op.[Episode No] = cp.[Episode No]
       --     AND [Patient No] = @PatientComboId
       --     WHERE op.ProcTypeNum = 3 ;
       --END 

	SELECT * FROM #procs ORDER BY CreatedOn DESC, ModifiedOn DESC

	DROP TABLE #procs
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------201a Create Proc startup_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'startup_select','S';
GO

CREATE PROCEDURE [dbo].[startup_select] (
	@SearchString1 VARCHAR(500)
	,@SearchString2 VARCHAR(500)
	,@SearchString3 VARCHAR(500)
	,@SearchString4 VARCHAR(500)
	,@SearchString5 VARCHAR(500)
	,@SearchString6 VARCHAR(500)
	,@SearchString7 VARCHAR(500)
	,@SearchTab INT = 0
	,@Condition VARCHAR(50) = ''
	,@SearchType VARCHAR(50)
	,@ExcludeDeceased BIT = 0
	,@UserId INT)
AS
DECLARE @Statement NVARCHAR(max)
DECLARE @SearchCriteria INT
	,@SearchCriteriaOption INT
	,@SearchCriteriaOptionPatientCount INT
	,@SearchCriteriaOptionDate DATETIME
	,@SearchCriteriaOptionMonths INT
	,@ExcludeDeadOption BIT
	,@ExcludeUGI BIT
	,@AllProcedures BIT
	,@Gastroscopy BIT
	,@ERCP BIT
	,@Colonoscopy BIT
	,@Proctoscopy BIT
	,@OutstandingCLO BIT
	,@OrderListOptions INT

IF EXISTS (SELECT 1 FROM ERS_StartupSettings WHERE ISNULL(UserId,0) = @UserId)
	SELECT TOP (1) @SearchCriteria = [SearchCriteria]
		,@SearchCriteriaOption = [SearchCriteriaOption]
		,@SearchCriteriaOptionPatientCount = [SearchCriteriaOptionPatientCount]
		,@SearchCriteriaOptionDate = [SearchCriteriaOptionDate]
		,@SearchCriteriaOptionMonths = [SearchCriteriaOptionMonths]
		,@ExcludeDeadOption = [ExcludeDeadOption]
		,@ExcludeUGI = [ExcludeUGI]
		,@AllProcedures = [AllProcedures]
		,@Gastroscopy = [Gastroscopy]
		,@ERCP = [ERCP]
		,@Colonoscopy = [Colonoscopy]
		,@Proctoscopy = [Proctoscopy]
		,@OutstandingCLO = [OutstandingCLO]
		,@OrderListOptions = [OrderListOptions]
	FROM [ERS_StartupSettings]
	WHERE UserID = @UserId
ELSE
	SELECT TOP (1) @SearchCriteria = [SearchCriteria]
	,@SearchCriteriaOption = [SearchCriteriaOption]
	,@SearchCriteriaOptionPatientCount = [SearchCriteriaOptionPatientCount]
	,@SearchCriteriaOptionDate = [SearchCriteriaOptionDate]
	,@SearchCriteriaOptionMonths = [SearchCriteriaOptionMonths]
	,@ExcludeDeadOption = [ExcludeDeadOption]
	,@ExcludeUGI = [ExcludeUGI]
	,@AllProcedures = [AllProcedures]
	,@Gastroscopy = [Gastroscopy]
	,@ERCP = [ERCP]
	,@Colonoscopy = [Colonoscopy]
	,@Proctoscopy = [Proctoscopy]
	,@OutstandingCLO = [OutstandingCLO]
	,@OrderListOptions = [OrderListOptions]
	FROM [ERS_StartupSettings]

DECLARE @col VARCHAR(50)
DECLARE @col_names VARCHAR(max) = ''

DECLARE col_cursor CURSOR FOR
SELECT NAME FROM sys.columns
WHERE object_id = OBJECT_ID('dbo.ERS_VW_Patients')	AND system_type_id <> 35

OPEN col_cursor

FETCH NEXT FROM col_cursor INTO @col

WHILE @@FETCH_STATUS = 0
BEGIN
	SET @col_names = @col_names + ', p.[' + @col + ']'

	FETCH NEXT FROM col_cursor INTO @col
END

CLOSE col_cursor

DEALLOCATE col_cursor

DECLARE @SQLString VARCHAR(max)
	,@SelectStr VARCHAR(max)
	,@FromStr VARCHAR(500)
	,@WhereStr VARCHAR(1000)
	,@OrderStr VARCHAR(1000)

SET @SelectStr = 'SELECT DISTINCT p.PatientId, p.Forename1 + '' '' + p.Surname AS PatientName, p.Address as Address, p.DateOfBirth AS DOB, UPPER(SUBSTRING(p.Gender,1,1)) as Gender, dbo.fnEthnicity(p.EthnicId) as Ethnicity, p.HospitalNumber AS CaseNoteNo, p.NHSNo, p.DateAdded AS CreatedOn, ISNULL(Deceased,0) AS Deceased (**) '
SET @FromStr = ' FROM ERS_VW_Patients p '
SET @WhereStr = ''
SET @OrderStr = ' ORDER BY p.DateAdded DESC, p.PatientId  DESC'

IF @SearchCriteria = 1 OR @SearchTab IN (1, 2) --(@SearchCriteria=2 AND @SearchTab <> 0)
BEGIN
	IF @SearchTab = 1
	BEGIN
		IF @searchString1 IS NOT NULL AND @searchString1 <> ''
		BEGIN
			SET @WhereStr = (
					SELECT CASE @Condition
							WHEN 'ALL'
								THEN ' WHERE HospitalNumber LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' OR NHSNo LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' OR Surname LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' OR Forename1 LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' '
							WHEN 'Case note no.'
								THEN ' WHERE HospitalNumber LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' '
							WHEN 'NHS No'
								THEN ' WHERE NHSNo LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' '
							WHEN 'Surname'
								THEN ' WHERE Surname LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' '
							WHEN 'Forenames'
								THEN ' WHERE Forename1 LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' '
							END
					)
		END
	END
	ELSE
	BEGIN
		IF @SearchString1 IS NOT NULL AND @SearchString1 <> ''
		BEGIN
			SET @WhereStr = @WhereStr + (
					SELECT CASE @WhereStr
							WHEN ''	THEN ' WHERE ' ELSE @Condition END
					) + ' HospitalNumber LIKE ''%'' + ISNULL(''' + @SearchString1 + ''','''') + ''%'' '
		END

		IF @SearchString2 IS NOT NULL AND @SearchString2 <> ''
		BEGIN
			SET @WhereStr = @WhereStr + (
					SELECT CASE @WhereStr
							WHEN ''	THEN ' WHERE ' ELSE @Condition END
					) + ' NHSNo LIKE ''%'' + ISNULL(''' + @SearchString2 + ''','''') + ''%'' '
		END

		IF @SearchString3 IS NOT NULL AND @SearchString3 <> ''
		BEGIN
			SET @WhereStr = @WhereStr + (
					SELECT CASE @WhereStr
							WHEN ''	THEN ' WHERE ' ELSE @Condition END
					) + ' Surname LIKE ''%'' + ISNULL(''' + @SearchString3 + ''','''') + ''%'' '
		END

		IF @SearchString4 IS NOT NULL AND @SearchString4 <> ''
		BEGIN
			SET @WhereStr = @WhereStr + (
					SELECT CASE @WhereStr
							WHEN ''	THEN ' WHERE ' ELSE @Condition END
					) + ' Forename1 LIKE ''%'' + ISNULL(''' + @SearchString4 + ''','''') + ''%'' '
		END

		IF @SearchString5 IS NOT NULL AND @SearchString5 <> ''
		BEGIN
			SET @WhereStr = @WhereStr + (
					SELECT CASE @WhereStr
							WHEN ''	THEN ' WHERE ' ELSE @Condition END
					) + ' DateOfBirth = '''' + ISNULL(''' + @SearchString5 + ''','''') + '''' '
		END

		IF @SearchString6 IS NOT NULL AND @SearchString6 <> ''
		BEGIN
			SET @WhereStr = @WhereStr + (
					SELECT CASE @WhereStr
							WHEN ''	THEN ' WHERE ' ELSE @Condition END
					) + ' Address1 LIKE ''%'' + ISNULL(''' + @SearchString6 + ''','''') + ''%'' '
		END

		IF @SearchString7 IS NOT NULL AND @SearchString7 <> ''
		BEGIN
			SET @WhereStr = @WhereStr + (
					SELECT CASE @WhereStr
							WHEN ''	THEN ' WHERE ' ELSE @Condition	END
					) + ' Postcode LIKE ''%'' + ISNULL(''' + @SearchString7 + ''','''') + ''%'' '
		END
	END

	IF @ExcludeDeceased = 1
		BEGIN
			IF @WhereStr <> ''
				SET @WhereStr = @WhereStr + ' AND ISNULL([Deceased],0) = 0'
			ELSE
				SET @WhereStr = 'WHERE ISNULL([Deceased],0) = 0'
		END

	SET @SelectStr = @SelectStr + @FromStr
END
ELSE IF @SearchCriteria = 2
BEGIN
	--IF @AllProcedures = 1
	--BEGIN
		--IF @SearchCriteriaOption =1 SET @SelectStr = 'SELECT DISTINCT p.[Patient No] AS PatientId, p.Forename + '' '' + p.Surname AS PatientName, p.[Case note no] AS CaseNoteNo, p.[NHS No] AS NHSNo, p.[Record created] AS CreatedOn,p.[Surname] ,p.[Case note no] ,p.[Product ID] ,p.[Location ID] ,p.[Patient No] ,  p.[Has Images] ,p.[Just downloaded] ,p.[Forename] ,p.[Record created] ,p.[Combo ID] ,p.[NHS No] ,p.[Date of death]  FROM Patient p'
		IF @SearchCriteriaOption = 2 AND @SearchCriteriaOptionPatientCount > 0
			SET @SelectStr = 'SELECT TOP(' + CAST(@SearchCriteriaOptionPatientCount AS VARCHAR(50)) + ')  p.PatientId, p.Forename1 + '' '' + p.Surname AS PatientName, p.Address1 as Address, p.DateOfBirth AS DOB, UPPER(SUBSTRING(p.Gender,1,1)) as Gender, dbo.fnEthnicity(p.EthnicId) as Ethnicity, p.HospitalNumber AS CaseNoteNo, p.NHSNo, p.DateAdded AS CreatedOn, ISNULL(Deceased,0) AS Deceased (**) '
		ELSE IF @SearchCriteriaOption = 3 AND @SearchCriteriaOptionDate IS NOT NULL
			SET @WhereStr = 'WHERE DateAdded >= ''' + cast(@SearchCriteriaOptionDate AS VARCHAR(50)) + ''' '
		ELSE IF @SearchCriteriaOption = 4 AND @SearchCriteriaOptionMonths > 0
			SET @WhereStr = 'WHERE DateAdded >= DATEADD(MM,-' + CAST(@SearchCriteriaOptionMonths AS VARCHAR(50)) + ', GETDATE())'

		IF @ExcludeDeceased = 1
		BEGIN
			IF @WhereStr <> ''
				SET @WhereStr = @WhereStr + ' AND ISNULL([Deceased],0) = 0'
			ELSE
				SET @WhereStr = 'WHERE ISNULL([Deceased],0) = 0'
		END

		SET @SelectStr = @SelectStr + @FromStr

END

IF @OrderListOptions = 2
	SET @OrderStr = ' ORDER BY [Surname], p.PatientId  DESC'
SET @Statement = REPLACE(@SelectStr + @WhereStr + @OrderStr, '(**)', @col_names)

SET @Statement = (
					SELECT CASE @SearchType
							WHEN 'EQUALTO'
								THEN REPLACE(REPLACE(REPLACE(@Statement,'LIKE','='),'''%'' +',''),'+ ''%''','')
							WHEN 'STARTSWITH'
								THEN REPLACE(@Statement,'''%'' +','')
							WHEN 'ENDSWITH'
								THEN REPLACE(@Statement,'+ ''%''','')
							WHEN 'CONTAINS'
								THEN @Statement	
							END
					)

EXEC sp_executesql @Statement




GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------297b Create Proc set_default_values.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'set_default_values','S';
GO

CREATE PROCEDURE [dbo].[set_default_values]
(
	@fromPage		varchar(20) = '',
	@UserID			int = NULL,
	@ListConsultant	int = NULL,
	@Endoscopist1	int = NULL,
	@Endoscopist2	int = NULL,
	@Nurse1			int = NULL,
	@Nurse2			int = NULL,
	@Nurse3			int = NULL,
	@PatientType	tinyint = NULL,
	@ProductType	tinyint = NULL,
	@ProcedureType	tinyint = NULL,
	@ListType		tinyint = NULL,
	@Endo1Role		tinyint = NULL,
	@Endo2Role		tinyint = NULL,
	@Premedication	varchar(500) = NULL
	)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM [ERS_Default] WHERE UserID = @UserID)
	BEGIN
		INSERT INTO ERS_Default (
			UserID,
			ListConsultant,
			Endoscopist1,
			Endoscopist2,
			Nurse1,
			Nurse2,
			Nurse3,
			PatientType,
			ProductType,
			ProcedureType,
			ListType,
			Endo1Role,
			Endo2Role, 
			Premedication,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@UserID,
			@ListConsultant,
			@Endoscopist1,
			@Endoscopist2,
			@Nurse1,
			@Nurse2,
			@Nurse3,
			@PatientType,
			@ProductType,
			@ProcedureType,
			@ListType,
			@Endo1Role,
			@Endo2Role,
			@Premedication,
			@UserID,
			GETDATE())
	END
	ELSE
	BEGIN
		IF @fromPage = 'Premedication'
		BEGIN
			UPDATE ERS_Default
			SET Premedication = @Premedication
			WHERE UserID = @UserID
		END
		ELSE IF @fromPage = 'CreateProcedure'
		BEGIN
			UPDATE 
				ERS_Default
			SET 
				ListConsultant = @ListConsultant,
				Endoscopist1 = @Endoscopist1,
				Endoscopist2 = @Endoscopist2,
				Nurse1 = @Nurse1,
				Nurse2 = @Nurse2,
				Nurse3 = @Nurse3,
				PatientType = @PatientType,
				ProductType = @ProductType,
				ProcedureType = @ProcedureType,
				ListType = @ListType,
				Endo1Role = @Endo1Role,
				Endo2Role = @Endo2Role,
				WhoUpdatedId = @UserID,
				WhenUpdated = GETDATE()
			WHERE 
				UserID = @UserID
		END
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------202 Create Proc usp_Procedures_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'usp_Procedures_Insert','S';
GO

CREATE PROCEDURE [dbo].[usp_Procedures_Insert]
(
	@ProcedureType		INT,
	--@PatientNo		VARCHAR(24),
	@PatientId			INT,
	@ProcedureDate		DATETIME,
	@PatientStatus		INT,
	@PatientWard		INT,
	@PatientType		INT,
	@OperatingHospitalId INT,
	@ListConsultant		INT,
	@Endoscopist1		INT,
	@Endoscopist2		INT,
	@Assistant			INT,
	@Nurse1				INT,
	@Nurse2				INT,
	@Nurse3				INT,
	@ReferralHospitalNo INT,
	@ReferralConsultantNo INT,
	@ReferralConsultantSpeciality INT,
	@PatientConsent		TINYINT,
	@DefaultCheckBox	BIT,
	@UserID				INT,
	@ProductType		TINYINT,
	@ListType			TINYINT,
	@Endo1Role			TINYINT,
	@Endo2Role			TINYINT,
	@CategoryListId	INT,
	@OnWaitingList		BIT,
	@OpenAccessProc		TINYINT,
	@EmergencyProcType	TINYINT,
	@NewProcedureId		INT OUTPUT,	-- This will return the newly created ProcedureId to the GUI! To play
	@ImagePortId		INT
)
AS

SET NOCOUNT ON

DECLARE @newProcId INT
DECLARE @ppEndos VARCHAR(2000), @GPName varchar(255), @GPAddress varchar(max), @Endo1 varchar(500)

BEGIN TRANSACTION
--sp_help 'dbo.ERS_Procedures'
	BEGIN TRY
		INSERT INTO ERS_Procedures
			(ProcedureType,
			CreatedBy,	
			CreatedOn,
			ModifiedOn,
			PatientId,
			CategoryListId,
			OnWaitingList,
			OpenAccessProc,
			EmergencyProcType,
			OperatingHospitalID,
			ListConsultant,
			Endoscopist1,
			Endoscopist2,
			Assistant,
			Nurse1,
			Nurse2,
			Nurse3,
			ReferralHospitalNo,
			ReferralConsultantNo,
			ReferralConsultantSpeciality,
			PatientStatus,
			Ward,
			PatientType,
			PatientConsent,
			ListType,
			Endo1Role,
			Endo2Role,
			ImagePortId,
			WhoCreatedId,
			WhenCreated)
		VALUES (
			@ProcedureType,
			@UserID,
			@ProcedureDate, --CASE WHEN CONVERT(DATE, GETDATE()) = @ProcedureDate THEN GETDATE() ELSE @ProcedureDate END, --Insert date and time if Procedure date is current date
			GETDATE(),
			@PatientId,
			@CategoryListId,
			@OnWaitingList,
			@OpenAccessProc,
			@EmergencyProcType,
			@OperatingHospitalID,
			@ListConsultant,
			@Endoscopist1,
			@Endoscopist2,
			@Assistant,
			@Nurse1,
			@Nurse2,
			@Nurse3,
			@ReferralHospitalNo,
			@ReferralConsultantNo,
			@ReferralConsultantSpeciality,
			@PatientStatus,
			@PatientWard,
			@PatientType,
			@PatientConsent, 
			@ListType,
			@Endo1Role,
			@Endo2Role,
			@ImagePortId,
			@UserID,
			GETDATE())

		SET @newProcId = SCOPE_IDENTITY();
	
		--## Important Work- Insert a Blank Record in the ERS_ProceduresReorting- with this Unique ID! So, you can simply Update the PP fields later..!! 
		INSERT INTO dbo.ERS_ProceduresReporting(ProcedureId)VALUES(@newProcId);

		SET @ppEndos = ''
		IF @ListConsultant > 0 SELECT @ppEndos = @ppEndos + '$$' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @ListConsultant
		IF @Endoscopist1 > 0 
		BEGIN
			SELECT @Endo1 = Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Endoscopist1
			SELECT @ppEndos = @ppEndos + '$$' + @Endo1
		END
		IF @Endoscopist2 > 0 SELECT @ppEndos = @ppEndos + '$$' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Endoscopist2
		IF @Nurse1 > 0 OR @Nurse2 > 0 OR @Nurse3 > 0 
		BEGIN
			SELECT @ppEndos = @ppEndos + '$$' + 'Nurses: '
			IF @Nurse1 > 0 SELECT @ppEndos = @ppEndos + '##' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Nurse1
			IF @Nurse2 > 0 SELECT @ppEndos = @ppEndos + '##' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Nurse2
			IF @Nurse3 > 0 SELECT @ppEndos =  @ppEndos + '##' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Nurse3
		END
		IF CHARINDEX('$$', @ppEndos) > 0 SET @ppEndos = REPLACE(STUFF(@ppEndos, charindex('$$', @ppEndos), 2, ''), '$$', '<br/>')
		IF CHARINDEX('##', @ppEndos) > 0 SET @ppEndos = REPLACE(STUFF(@ppEndos, charindex('##', @ppEndos), 2, ''), '##', '<br/>')
	
		--SELECT @GPName = p.[GP Name] , @GPAddress = p.[GP Address] FROM Patient p left join  ERS_Procedures pr ON p.[Patient No]= pr.PatientId WHERE pr.ProcedureId = @newProcId
		--SELECT @GPName = p.[GP Name] , @GPAddress = p.[GP Address] FROM ERS_Patients p WHERE p.[Patient No]= @PatientId

		--Get GP practice name and address
		SELECT 	TOP 1 
				@GPName		= p.[GPName],
				@GPAddress	= p.GPAddress
		FROM ERS_VW_PatientswithGP p 
		WHERE p.PatientId = @PatientId

		UPDATE ERS_ProceduresReporting SET PP_Endos = @ppEndos, PP_GPName = @GPName, PP_GPAddress = @GPAddress, PP_Endo1 = @Endo1 WHERE ProcedureId = @newProcId

		UPDATE ERS_Consultant SET SortOrder = ISNULL(SortOrder,0) + 1 WHERE ConsultantID = @ReferralConsultantNo

		--SELECT @newProcId AS ProcedureId
		SELECT @NewProcedureId=@newProcId;
	END TRY

	BEGIN CATCH
		DECLARE @ErrorMessage NVARCHAR(4000);
		DECLARE @ErrorSeverity INT;
		DECLARE @ErrorState INT;

		SELECT @ErrorMessage = ERROR_MESSAGE(),
			   @ErrorSeverity = ERROR_SEVERITY(),
			   @ErrorState = ERROR_STATE();
    
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
	END CATCH


	IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------203 Create Proc usp_Procedures_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'usp_Procedures_Delete','S';
GO

CREATE PROCEDURE [dbo].[usp_Procedures_Delete]
(
	@ProcedureId INT,
	@EpisodeNo INT = 0
)
AS

--## We should not delete any record from the Transactional Database.. Only Flag it as Inactive..
	UPDATE ERS_Procedures 
	   SET IsActive		= 0
	 WHERE ProcedureId  = @ProcedureId;

	RETURN -1; 
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------203a Create Proc usp_DB_Cleanup.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'usp_DB_Cleanup','S';
GO

CREATE PROCEDURE [dbo].[usp_DB_Cleanup]
(
	@ProcedureId INT,
	@EpisodeNo INT = 0
)
AS

------------------------------------------------------------------
--EpisodeNo is used for the procedures created by the old system
------------------------------------------------------------------

SET NOCOUNT ON

DECLARE @ProcedureType INT

BEGIN TRANSACTION

BEGIN TRY

	IF @ProcedureId IS NOT NULL AND @ProcedureId > 0
	BEGIN
		SELECT @ProcedureType = ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureId

		DECLARE @SiteIds TABLE (SiteId INT)
		INSERT INTO @SiteIds SELECT SiteId FROM ERS_Sites WHERE ProcedureId = @ProcedureId

		--Abnormalities
		IF @ProcedureType IN (1, 6, 8) --Gastroscopy, EUS_OGD, Enteroscopy (Antegrade)
		BEGIN
			DELETE FROM ERS_UpperGIAbnoDeformity WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoGastricUlcer WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoGastritis WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoAchalasia WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoLumen WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoMalignancy WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoPolyps WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoPostSurgery WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoVarices WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoHiatusHernia WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoOesophagitis WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoBarrett WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_UpperGIAbnoMiscellaneous WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
		END
		ELSE IF @ProcedureType IN (2, 7)   --ERCP, EUS_HPB
		BEGIN
			DELETE FROM ERS_ERCPTherapeutics WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ERCPAbnoDuct WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ERCPAbnoParenchyma WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ERCPAbnoAppearance WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ERCPAbnoDiverticulum WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ERCPAbnoTumour WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ERCPDiagnoses WHERE ProcedureId = @ProcedureId
			DELETE FROM ERS_ERCPPapillaryAnatomy WHERE ProcedureId = @ProcedureId
			DELETE FROM ERS_Visualisation WHERE ProcedureId = @ProcedureId
		END

		IF @ProcedureType IN (3,4,5,8)   --Colonoscopy, Sigmoidscopy, Proctoscopy, Enteroscopy (Antegrade)
		BEGIN
			DELETE FROM ERS_ColonAbnoMucosa WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ColonAbnoVascularity WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ColonAbnoLesions WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ColonAbnoDiverticulum WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ColonAbnoHaemorrhage WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ColonAbnoPerianalLesions WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ColonAbnoCalibre WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ColonAbnoMiscellaneous WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
			DELETE FROM ERS_ColonExtentOfIntubation WHERE ProcedureId = @ProcedureId
		END

		--Specimens & Therapeutics are common for all procedures
		DELETE FROM ERS_UpperGISpecimens WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
		DELETE FROM ERS_UpperGITherapeutics WHERE SiteId IN (SELECT SiteId FROM @SiteIds)

		--Common Abnormalities
		DELETE FROM ERS_CommonAbnoDiverticulum WHERE SiteId IN (SELECT SiteId FROM @SiteIds)	
		DELETE FROM ERS_CommonAbnoTumour WHERE SiteId IN (SELECT SiteId FROM @SiteIds)		
		DELETE FROM ERS_CommonAbnoDuodenitis WHERE SiteId IN (SELECT SiteId FROM @SiteIds)	
		DELETE FROM ERS_CommonAbnoDuodenalUlcer WHERE SiteId IN (SELECT SiteId FROM @SiteIds)	
		DELETE FROM ERS_CommonAbnoScaring WHERE SiteId IN (SELECT SiteId FROM @SiteIds)		
		DELETE FROM ERS_CommonAbnoVascularLesions WHERE SiteId IN (SELECT SiteId FROM @SiteIds)
		DELETE FROM ERS_CommonAbnoAtrophic WHERE SiteId IN (SELECT SiteId FROM @SiteIds)	


		select * from INFORMATION_SCHEMA.tables order by table_name

		--Other data
		DELETE FROM ERS_UpperGIQA WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_UpperGIPremedication WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_UpperGIPremedication_Summary WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_UpperGIDiagnoses WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_UpperGIExtentOfIntubation WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_UpperGIFollowUp WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_UpperGIPathologyResults WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_UpperGIRx WHERE ProcedureId = @ProcedureId

		DELETE FROM ERS_BRT_BronchoDrugs WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_BRT_BronchoCoding WHERE ProcedureId = @ProcedureId
		--DELETE FROM ERS_BRT_BronchoPatholoy WHERE ProcedureId = @ProcedureId

		DELETE FROM ERS_RecordCount WHERE ProcedureId = @ProcedureId --SiteId IN (SELECT SiteId FROM ERS_Sites WHERE ProcedureId = @ProcedureId)
		DELETE FROM ERS_Sites WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_Procedures WHERE ProcedureId = @ProcedureId
	END

	ELSE IF @EpisodeNo > 0
	BEGIN
		--Abnormalities	
		DELETE FROM [AColon Lesions] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AColon Other] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AColon Perianal Lesions] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AERCP Duct/Parenchyma] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AERCP Papilla] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Barrett's Epithelium] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Duodenum] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Gastric Other] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Gastric Polyps] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Gastric Polyps1] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Gastric Ulcer/Malignancy] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Gastritis] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Hiatus Hernia/Varices] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Oesophagitis] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [AUpper GI Oesophagus Other] WHERE [Episode No] = @EpisodeNo
	
		--Other Data
		DELETE FROM [18w Result] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Colon Diagnoses] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Colon Extent/Limiting Factors] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Colon Follow Up] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Colon Indications] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Colon QA] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Colon Specimens] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Colon Therapeutic] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP Diagnoses] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP Follow up] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP Indications] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP Papillary Anatomy] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP QA] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP Specimens] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP Therapeutic] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP Visualisation] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Upper GI Diagnoses] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Upper GI Follow up] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Upper GI Indications] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Upper GI QA] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Upper GI Specimens] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Upper GI Therapeutic] WHERE [Episode No] = @EpisodeNo
	
		DELETE FROM [Pathology Results] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Patient Medication] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Patient Premedication] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Patient Premedication Original] WHERE [Episode No] = @EpisodeNo
	
		DELETE FROM [Photos] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Photos2] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Post proc comp] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Print spooler] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Temp print spooler] WHERE [Episode No] = @EpisodeNo

		DELETE FROM [ShadowPMI] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ShadowPMI_backup] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [TCI] WHERE [Episode No] = @EpisodeNo

		DELETE FROM [Upper GI Procedure] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [ERCP Procedure] WHERE [Episode No] = @EpisodeNo
		DELETE FROM [Colon Procedure] WHERE [Episode No] = @EpisodeNo
		DELETE FROM Episode WHERE [Episode No] = @EpisodeNo
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------204 Create Proc sites_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sites_select','S';
GO

CREATE PROCEDURE [dbo].[sites_select]
(
	@ProcedureId INT,
	@Height INT,
	@Width INT,
	@isERS BIT,
	@OperatingHospitalID SMALLINT,
	@ProcedureType TINYINT,
    @EpisodeNo INT,
    @ColonType INT
)
AS
	SET NOCOUNT ON

--Dependency : printreport_photos_select
	
	DECLARE @SiteId INT, @SiteNo INT, @AreaNo INT, @YCoordinate INT, @Cnt TINYINT, @SiteTitle VARCHAR(3), @SiteIdentification TINYINT

	SELECT @SiteIdentification = ISNULL(SiteIdentification,0) FROM ERS_SystemConfig WHERE OperatingHospitalID = @OperatingHospitalID
	

	IF (@isERS = 1)  -- Check if procedure is from new software
	BEGIN
		SELECT 
			SiteId,
			SiteNo,
			CASE WHEN SiteNo > 0 THEN dbo.fnGetSiteTitle(SiteNo) ELSE '' END AS SiteTitle,
			AreaNo,
			r.RegionId,
			r.Region, 
			convert(decimal(5,2), (XCoordinate * (convert(decimal(5,2),@Width)/DiagramWidth))) AS XCoordinate,
			convert(decimal(5,2), (YCoordinate * (convert(decimal(5,2),@Height)/DiagramHeight))) AS YCoordinate,
			CASE AntPos WHEN 1 THEN 'Anterior' WHEN 2 THEN 'Posterior' WHEN 3 THEN 'BothOrEither' END AS AntPos,
			PositionSpecified, 
			r.is3D AS In3DRegion
		FROM
			ERS_Sites s
			JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
			JOIN ERS_Regions r ON s.RegionId = r.RegionId
		WHERE
			s.ProcedureId = @ProcedureId
		ORDER BY 
			AreaNo, 
			SiteNo DESC
	END
	
	ELSE
	BEGIN
		DECLARE @AreaNumber TINYINT, @IsArea SMALLINT, @AreaStart SMALLINT, @AreaEnd INT, @OrderBy INT, 
				@SQL NVARCHAR(MAX), @XCoor VARCHAR(10), @YCoor VARCHAR(10), @tableName VARCHAR(300), @fldSiteNo VARCHAR(50);
	

		CREATE TABLE #temp1(SiteId INT,SiteNo INT, SiteTitle VARCHAR(3), AreaNo TINYINT, Region VARCHAR(3), 
							XCoordinate INT, YCoordinate INT, ProcedureId INT, OrderBy INT,
							IsArea SMALLINT, AreaStart SMALLINT, AreaEnd SMALLINT, AntPos VARCHAR(100))
	
		IF @ProcedureType IN (1, 6) --OGD, EUS(OGD)
		BEGIN 
			SET @tableName = ' CASE AntPost WHEN 1 THEN ''Anterior'' WHEN 2 THEN ''Posterior'' WHEN 3 THEN ''BothOrEither'' END AS AntPos FROM [Upper GI Sites] '
                     SET @XCoor =  '2.033';     SET @YCoor = '1.7235'
		END
		ELSE IF @ProcedureType IN (2, 7) --ERCP, EUS (HPB)
		BEGIN 
			SET @tableName = ' CASE AntPost WHEN 1 THEN ''Anterior'' WHEN 2 THEN ''Posterior'' WHEN 3 THEN ''BothOrEither'' END AS AntPos FROM [ERCP Sites] '
                     SET @XCoor =  '1.95';      SET @YCoor = '2.43'
		END
		ELSE IF @ProcedureType IN (3, 4, 5, 9, 12) --Colonoscopy, Sigmoidscopy, Proctoscopy, Ent - Retrograde, Thoracoscopy
		BEGIN 
			SET @tableName = ' Region AS AntPos FROM [Colon Sites] '
			SET @XCoor =  '1.93'; SET @YCoor = '2.01'
		END
		ELSE
		BEGIN
			SET @tableName = ' CASE AntPost WHEN 1 THEN ''Anterior'' WHEN 2 THEN ''Posterior'' WHEN 3 THEN ''BothOrEither'' END AS AntPos FROM [Upper GI Sites] '
                     SET @XCoor =  '2.033';     SET @YCoor = '1.7235'
		END

		IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'Sorted Site No' AND Object_ID = Object_ID(N'Photos'))
			SET @fldSiteNo = ' ISNULL([Sorted Site No],[Site No]) '
		ELSE
			SET @fldSiteNo = '[Site No]'


              SET @SQL = N'SELECT ' + @fldSiteNo + ' AS SiteId, ' + @fldSiteNo + ' AS SiteNo,       SPACE(3) AS SiteTitle,     0 AS AreaNo,  '''' AS Region, 
				convert(decimal(9,2), ([Left] * ' + @XCoor + ')) AS XCoordinate,
				convert(decimal(9,2), ([Top] * ' + @YCoor + ')) AS YCoordinate,
				[Episode No] AS ProcedureId, ' + @fldSiteNo + ' * 100 AS OrderBy,
				Continuous AS IsArea, [Continuous Start] AS AreaStart, ISNULL([Continuous close],0) AS AreaEnd, '
                           + @tableName + ' WHERE [Episode No] = ' + CONVERT(VARCHAR,@EpisodeNo)  
              IF @ColonType >= 0  SET @SQL = @SQL + ' AND [Procedure Type] = '+ CONVERT(VARCHAR,@ColonType)
              SET @SQL = @SQL + ' ORDER BY 1 ' --+ @fldSiteNo
		INSERT INTO #temp1 EXECUTE (@SQL)
			
		DECLARE Site_Cursor CURSOR FOR
							
		--Get the sites and the first record of an area (start by [Continuous Start] = -1)
		SELECT SiteId, IsArea, AreaStart, AreaEnd, OrderBy
		FROM #temp1 
		ORDER BY orderBy
		OPEN Site_Cursor;
		FETCH NEXT FROM Site_Cursor INTO @SiteId, @IsArea, @AreaStart, @AreaEnd, @OrderBy;

		SET @Cnt = 1;
		SET @AreaNumber = 0;

		--loop to assign title and area no. of sites 
		WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @SiteTitle = CASE WHEN @SiteIdentification = 0 THEN dbo.fnGetSiteTitle(@Cnt) ELSE CONVERT(VARCHAR,@Cnt) END

				IF (@IsArea = 0 AND @AreaStart = 0) -- Site without area
				BEGIN 
					UPDATE #temp1 SET SiteTitle = @SiteTitle, AreaNo = 0 WHERE SiteId = @SiteId
					SET @Cnt = @Cnt + 1
				END
				ELSE IF (@IsArea = 0 AND @AreaStart = 0) OR (@IsArea = -1 AND @AreaStart = -1)  -- Starting site record for area
				BEGIN 
					SET @AreaNumber = @AreaNumber + 1
					UPDATE #temp1 SET SiteTitle = @SiteTitle, AreaNo = @AreaNumber WHERE SiteId = @SiteId
					SET @Cnt = @Cnt + 1
				END
				ELSE IF (@IsArea = -1 AND @AreaStart = 0) -- Coordinates of the area
				BEGIN
					UPDATE #temp1 SET SiteTitle = '', AreaNo = @AreaNumber WHERE SiteId = @SiteId
					IF (@IsArea = -1 AND @AreaEnd = -1) -- Last coordinate to close area
					BEGIN
                                         INSERT INTO #temp1 (SiteId, SiteNo,      SiteTitle,       AreaNo,       Region, XCoordinate, YCoordinate, AntPos, ProcedureId, orderBy, IsArea, AreaStart, AreaEnd)
                                         SELECT TOP 1 SiteId, SiteNo, '',  AreaNo,       Region, XCoordinate, YCoordinate, AntPos, ProcedureId, @OrderBy + 50 , 0, 0, 0
						FROM #temp1 WHERE SiteId < @SiteId AND AreaStart = -1 ORDER BY SiteId DESC
					END
				END
			FETCH NEXT FROM Site_Cursor INTO @SiteId, @IsArea, @AreaStart, @AreaEnd, @OrderBy;
		END;
		CLOSE Site_Cursor;
		DEALLOCATE Site_Cursor;

		DELETE  #temp1  WHERE AntPos = ''

		SELECT * FROM #temp1 ORDER BY orderBy 

		DROP TABLE #temp1

	END

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------207a Create Proc sites_reorder.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sites_reorder','S';
GO

CREATE PROCEDURE [dbo].[sites_reorder]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	-- Select all the sites into a temp table.
	SELECT 
		SiteId, 
		SiteNo, 
		[Order] * 100 AS NewSiteNo, 
		AreaNo, 
		r.Region, 
		XCoordinate, 
		YCoordinate, 
		[Order] AS RegionOrder, 
		Direction 
	INTO 
		#temp 
	FROM 
		ERS_Sites s 
	JOIN 
		ERS_Regions r ON s.RegionId = r.RegionId
	JOIN
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		s.ProcedureId = @ProcedureId 
		AND r.ProcedureType = p.ProcedureType 
	ORDER BY 
		RegionOrder


	-- Get rid of the sites of areas except the first one of each.
	DELETE FROM #temp 
	WHERE AreaNo > 0 
	AND SiteId NOT IN (SELECT min(siteid) FROM #temp GROUP BY AreaNo)

	-- Rank the sites within the region blocks (based on region's order and direction)
	SELECT 
		SiteId, 
		RANK() OVER (PARTITION BY RegionOrder ORDER BY 
												CASE Direction 
													WHEN 'YA' THEN YCoordinate 
													WHEN 'XA' THEN XCoordinate 
												END ASC, 
												CASE Direction 
													WHEN 'YD' THEN YCoordinate 
													WHEN 'XD' THEN XCoordinate 
												END DESC
					) AS MyRank 
	INTO 
		#temp2
	FROM 
		#temp 

	-- Update the sites with the ranks
	UPDATE t SET NewSiteNo = NewSiteNo + myrank FROM #temp t JOIN #temp2 t2 ON t.SiteId = t2.siteid

	-- Generate IDs into another temp table
	SELECT row_number() OVER (ORDER BY newsiteno) AS RowId, SiteId INTO #temp3 FROM #temp

	-- Finally update the sitenos in sites table
	UPDATE s SET SiteNo = RowId FROM ERS_Sites s JOIN #temp3 ON s.SiteId = #temp3.SiteId
	UPDATE ERS_Sites SET SiteNo = 0 WHERE AreaNo > 0 AND SiteId NOT IN (SELECT min(SiteId) FROM #temp GROUP BY AreaNo) AND ProcedureId = @ProcedureId

	DROP TABLE #temp
	DROP TABLE #temp2
	DROP TABLE #temp3

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------208a Create Proc procedure_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'procedure_summary_update','S';
GO

CREATE PROCEDURE [dbo].[procedure_summary_update]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

DECLARE @summaryWhole VARCHAR(MAX)=''
DECLARE @summaryWholeWithHyperLinks VARCHAR(MAX)=''
DECLARE @procType INT
DECLARE @Region VARCHAR(150)
DECLARE @ResectedColonId INT

BEGIN TRANSACTION

BEGIN TRY

	SELECT @ProcType=ProcedureType, @ResectedColonId=ResectedColonNo FROM ERS_Procedures WHERE ProcedureId = @ProcedureId

	-- 'SiteNo is set to -77 for sites By Distance (Col & Sig only)
    SELECT CASE WHEN SiteNo = -77 THEN 
						CASE WHEN YCoordinate IS NULL OR YCoordinate=0 THEN 'At ' + CONVERT(VARCHAR,XCoordinate) + ' cm from anus'
						ELSE ('Starting at ' + CONVERT(VARCHAR,XCoordinate) + ' extending to ' + CONVERT(VARCHAR,YCoordinate) + ' cm from anus' ) END  + SPACE(400)
			ELSE 'Site ' + dbo.fnGetSiteTitle(SiteNo) + ':'  + SPACE(400) END AS SiteName,

			CASE AntPos
				WHEN 1 THEN 'Anterior '
				WHEN 2 THEN 'Posterior '
				ELSE ''
			END +
			CASE 
				WHEN SiteNo = -77 THEN '' 
				WHEN AreaNo > 0 THEN dbo.fnSetAreaDescription(@ProcedureId, AreaNo, @ResectedColonId)
				WHEN ISNULL(@ResectedColonId,0) > 0  AND
						 EXISTS (SELECT 1 FROM ERS_Regions r 
								JOIN ERS_ResectedColonRegions rcr ON r.RegionId = rcr.RegionId
								WHERE r.RegionId = s.RegionId
								AND rcr.ResectedColonId = @ResectedColonId) THEN 'anastomosis'
				ELSE LOWER(ISNULL((SELECT CASE WHEN @ResectedColonId IN (7,6) AND LOWER(Region) = 'terminal ileum' THEN 'non-terminal ileum' WHEN @ResectedColonId = 9 AND LOWER(Region) = 'terminal ileum' THEN 'ileal pouch' ELSE Region END FROM ERS_Regions r WHERE r.RegionId = s.RegionId),''))
			END AS SiteDesc,

            CASE WHEN ISNULL(SiteSummary, '') <> '' THEN SiteSummary END AS FullSummaryAbnormalities,
            CASE WHEN ISNULL(SiteSummarySpecimens, '') <> '' THEN SiteSummarySpecimens END AS FullSummarySepcimens,
            CASE WHEN ISNULL(SiteSummaryTherapeutics, '') <> '' THEN SiteSummaryTherapeutics END AS FullSummaryTherapeutics,
            CASE WHEN ISNULL(SiteSummaryWithLinks, '') <> '' THEN SiteSummaryWithLinks END AS FullSummaryAbnormalitiesWithLinks,
            CASE WHEN ISNULL(SiteSummarySpecimensWithLinks, '') <> '' THEN SiteSummarySpecimensWithLinks END AS FullSummarySepcimensWithLinks,
            CASE WHEN ISNULL(SiteSummaryTherapeuticsWithLinks, '') <> '' THEN SiteSummaryTherapeuticsWithLinks END AS FullSummaryTherapeuticsWithLinks,
			CASE WHEN SiteNo = -77 THEN ISNULL(XCoordinate,0) + 5000 ELSE SiteNo END AS OrderBy
    INTO #Sites
    FROM ERS_Sites s
    WHERE ProcedureId = @ProcedureId 
    ORDER BY SiteNo
    --AND ISNULL(SiteSummary, '') <> ''

	UPDATE #Sites SET SiteName = '<b style="color:#606060;">' + RTRIM(SiteName) + ' ' + dbo.fnFirstLetterUpper(SiteDesc) +'</b> '
    --select * from #sites

    SELECT 
            CASE WHEN (FullSummaryAbnormalities is not null or FullSummarySepcimens is not null or FullSummaryTherapeutics is not null)
                    THEN SiteName + ISNULL(FullSummaryAbnormalities, '') + ISNULL(FullSummaryTherapeutics, '') + ISNULL(FullSummarySepcimens, '')
            END AS mysummary,
            CASE WHEN (FullSummaryAbnormalitiesWithLinks is not null or FullSummarySepcimensWithLinks is not null or FullSummaryTherapeuticsWithLinks is not null)
                    THEN SiteName + ISNULL(FullSummaryAbnormalitiesWithLinks, '') + ISNULL(FullSummaryTherapeuticsWithLinks, '') + ISNULL(FullSummarySepcimensWithLinks, '')
            END AS mysummaryWithLinks,
			OrderBy
    INTO #Sites2
    FROM #Sites

    --select * from #Sites2

    SELECT @summaryWhole = COALESCE (
                        --CASE WHEN @summaryWhole = '' THEN ISNULL(mysummary, '')
                        --ELSE 
                        @summaryWhole + CASE WHEN @summaryWhole <> '' THEN '<br />' END
                        --END
                    ,'') + mysummary,
                    @summaryWholeWithHyperLinks = COALESCE (
                        --CASE WHEN @@summaryWholeWithHyperLinks = '' THEN ISNULL(mysummaryWithLinks, '')
                        --ELSE 
                        @summaryWholeWithHyperLinks + CASE WHEN @summaryWholeWithHyperLinks <> '' THEN '<br />' END
                        --END
                    ,'') + mysummaryWithLinks
    FROM #Sites2
    where mysummary is not null
    order by OrderBy
    --SELECT @summaryWhole, @summaryWholeWithHyperLinks 

    --EXTENT OF INTUBATION
    IF @procType = 3 OR @procType = 4 
            BEGIN
            DECLARE @tSummary varchar(5000) = ''
            --DECLARE @lSummary varchar(5000) = ''
            --DECLARE @BowelPrepSettings bit
            --DECLARE @smry varchar(5000) = ''

            DECLARE @oBPrep varchar(4000) = ISNULL((SELECT ISNULL([Summary],'') FROM [ERS_BowelPreparation] WHERE [ProcedureID] = @ProcedureId AND [BowelPrepSettings]=0),'')
            DECLARE @oExtent  varchar(4000) = ISNULL((SELECT ISNULL([Summary], '') FROM  ERS_ColonExtentOfIntubation WHERE ProcedureId = @ProcedureId),'')
            DECLARE @oComplications varchar(4000) = ISNULL((SELECT ISNULL(ComplicationsSummary,'') FROM ERS_UpperGIQA WHERE ProcedureId = @ProcedureId),'')
              
            IF @oBPrep <> '' AND @oBPrep IS NOT NULL SET  @tSummary = @tSummary + @oBPrep + '</br>'
            IF @oExtent <> '' SET  @tSummary = @tSummary + @oExtent + '</br>'
            IF @oComplications <> '' SET  @tSummary = @tSummary + @oComplications + '</br>'

            SET @summaryWhole = @tSummary + @summaryWhole
            SET @summaryWholeWithHyperLinks = @tSummary + @summaryWholeWithHyperLinks

            --SELECT @BowelPrepSettings = [BowelPrepSettings], @smry = [Summary] FROM [ERS_BowelPreparation] WHERE [ProcedureID] = @ProcedureId
            --IF @BowelPrepSettings = 0 AND @smry IS NOT NULL AND @smry <> '' SET @tSummary = @tSummary + @smry + '<br/>'
            --SET @tSummary =@tSummary +  ISNULL((SELECT ISNULL([Summary], '') FROM  ERS_ColonExtentOfIntubation WHERE ProcedureId = @ProcedureId),'')
            --IF @tSummary <> '' 
            --BEGIN
            --   SET @summaryWhole = @tSummary + '</br>' + @summaryWhole
            --   SET @summaryWholeWithHyperLinks = @tSummary + '</br>' + @summaryWholeWithHyperLinks 
            --END
            END
    ELSE
            BEGIN
			DECLARE @iVisualisation varchar(5000) = ISNULL((SELECT ISNULL(summary,'') FROM ERS_Visualisation WHERE ProcedureId = @ProcedureId),'')
            DECLARE @iExtent  varchar(5000)= ISNULL((SELECT ISNULL(summary,'') FROM ERS_UpperGIExtentOfIntubation WHERE ProcedureId = @ProcedureId),'')
            DECLARE @iNormalDiag varchar(1000) = ISNULL((SELECT CASE WHEN EXISTS(SELECT 1 FROM ERS_Diagnoses WHERE ProcedureID=@ProcedureId AND MatrixCode='OverallNormal' AND Value='True') THEN 'The whole upper gastro-intestinal track was normal' ELSE '' END),'')
            DECLARE @iComplications varchar(4000) = ISNULL((SELECT ISNULL(ComplicationsSummary,'') FROM ERS_UpperGIQA WHERE ProcedureId = @ProcedureId),'')
			DECLARE @PapillaryAnatomySummary varchar(4000)  = ISNULL((SELECT Summary FROM ERS_ERCPPapillaryAnatomy WHERE ProcedureId = @ProcedureId),'')
            DECLARE @tSumm varchar(5000) = ''
			IF @iVisualisation IS NOT NULL AND @iVisualisation<>'' SET @tSumm = @tSumm + @iVisualisation +'</br>'
			IF @iExtent IS NOT NULL AND  @iExtent <> '' SET  @tSumm = @tSumm + @iExtent + '.</br>'
			IF @iNormalDiag IS NOT NULL AND @iNormalDiag <> '' SET  @tSumm = @tSumm + @iNormalDiag + '.</br>'
			IF @iComplications IS NOT NULL AND @iComplications <> '' SET  @tSumm = @tSumm + @iComplications + '.</br>'
			IF @PapillaryAnatomySummary <> '' SET  @tSumm = @tSumm + @PapillaryAnatomySummary + '.</br>'
            SET @summaryWhole = @tSumm +@summaryWhole
            SET @summaryWholeWithHyperLinks = @tSumm + @summaryWholeWithHyperLinks
    END

    UPDATE ERS_ProceduresReporting
    SET Summary = @summaryWhole,
            SummaryWithLinks = @summaryWholeWithHyperLinks
            --PP_MainReportBody = @summaryAbnormalities,
            --PP_SpecimenTaken = @summarySpecimens,
            --PP_Therapies = @summaryTherapeutics
    WHERE
            ProcedureId = @ProcedureId

    DROP TABLE #Sites
    DROP TABLE #Sites2
END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------205 Create Proc sites_insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sites_insert','S';
GO

CREATE PROCEDURE [dbo].[sites_insert]
(
	@ProcedureId INT, 
	@RegionId INT,
	@XCoordinate INT, 
	@YCoordinate INT, 
	@AntPos TINYINT,
	@PositionSpecified BIT,
	@AreaNo INT,
	@DiagramHeight INT,
	@DiagramWidth INT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @latest_site_no INT
DECLARE @site_no INT
DECLARE @newSiteId INT
DECLARE @newSiteInfo VARCHAR(20)

BEGIN TRANSACTION

BEGIN TRY
	--SiteNo is set to -77 for sites By Distance (Col & Sig only)
	IF @RegionId = -77
	BEGIN
		SET @site_no = -77
	END
	ELSE
	BEGIN
		SET @latest_site_no = ISNULL((SELECT TOP 1 SiteNo FROM ERS_Sites WHERE ProcedureId = @ProcedureId ORDER BY SiteNo DESC), 0)
		SET @site_no = @latest_site_no + 1
	END

	INSERT INTO ERS_Sites (
		ProcedureId,
		SiteNo,
		AreaNo,
		RegionId, 
		XCoordinate, 
		YCoordinate, 
		AntPos,
		PositionSpecified,
		DiagramHeight,
		DiagramWidth,
		WhoCreatedId,
		WhenCreated) 
	VALUES (
		@ProcedureId,
		@site_no,
		@AreaNo,
		CASE WHEN @RegionId = -77 THEN 0 ELSE @RegionId END, 
		@XCoordinate, 
		@YCoordinate, 
		@AntPos,
		@PositionSpecified,
		@DiagramHeight,
		@DiagramWidth,
		@LoggedInUserId,
		GETDATE())
	
	SET @newSiteId = SCOPE_IDENTITY()

	IF @RegionId = -77
	BEGIN
		--EXEC procedure_summary_update @ProcedureId
		SELECT CAST(@newSiteId AS VARCHAR(5))
	END
	ELSE
	BEGIN
		EXEC sites_reorder @ProcedureId
		--EXEC procedure_summary_update @ProcedureId

		SELECT @site_no = SiteNo FROM ERS_Sites WHERE SiteId = @newSiteId

		SELECT CAST(@newSiteId AS VARCHAR(5)) +  ';' + dbo.fnGetSiteTitle(@site_no)
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------298a1 Create Proc ercp_diagnoses_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'ercp_diagnoses_summary_update','S';
GO

CREATE PROCEDURE [dbo].[ercp_diagnoses_summary_update]
(
@ProcedureID int
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	SELECT ProcedureID, SiteID, MatrixCode, Region, CONVERT(VARCHAR(100),'') AS DisplayName,
			CASE WHEN LOWER(Value) IN ('true','1') THEN '1' ELSE Value END AS VALUE
	INTO #tbl_ERS_Diagnoses FROM dbo.[ERS_Diagnoses]
	WHERE ProcedureId=@ProcedureId --AND RIGHT(MatrixCode,2) = 'P2'

	DELETE #tbl_ERS_Diagnoses WHERE LOWER(Value) IN ('false','0','') AND MatrixCode<>'Summary'

	--Get the display name for the corresponding matrix code
	UPDATE D
	SET D.DisplayName = M.DisplayName
	FROM #tbl_ERS_Diagnoses AS D
	INNER JOIN ERS_DiagnosesMatrix AS M ON M.ProcedureTypeID = 2 AND M.Code = D.MatrixCode 
	WHERE RIGHT(D.MatrixCode,2) = 'P2'

	DECLARE @tmpRegionDiv TABLE(Val VARCHAR(MAX), Region VARCHAR(MAX))
    DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
	DECLARE @A varchar(MAX)=''

------ PAPILLAE ------------------------------------------------------------------------
        
	INSERT INTO @tmpDiv (Val)
    SELECT LOWER(DisplayName) FROM #tbl_ERS_Diagnoses WHERE Region = 'Papillae'

	UPDATE @tmpDiv SET Val = Val + ' tumour' WHERE Val IN ('probably benign', 'probably malignant')
	IF @@ROWCOUNT > 0 DELETE FROM @tmpDiv WHERE Val = 'tumour'

    IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
    BEGIN
		DECLARE @XMLlist XML
        SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
        SET @A = dbo.fnBuildString(@XMLlist)
    END 

    IF @A <> '' SET @A = '<b>Ampulla: </b>' + @A + '.' + '</br>'
            
------ PANCREAS ------------------------------------------------------------------------

	DELETE FROM @tmpRegionDiv                      
    DELETE FROM @tmpDiv
	
	INSERT INTO @tmpRegionDiv (Val, Region)
	SELECT DISTINCT 
		CASE WHEN LOWER(DisplayName) = 'fistula' THEN 'pancreatic fistula'
		ELSE LOWER(DisplayName) END, Region
	FROM #tbl_ERS_Diagnoses WHERE Region IN ('Pancreas', 'Pancreatitis', 'Cyst', 'Ducts', 'Tumour')

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'normal')				INSERT INTO @tmpDiv (Val) VALUES('normal') 
	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'pancreatic stone')		INSERT INTO @tmpDiv (Val) VALUES('pancreatic stone') 
	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'pancreatic fistula')	INSERT INTO @tmpDiv (Val) VALUES('pancreatic fistula') 
	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'annulare')				INSERT INTO @tmpDiv (Val) VALUES('annulare')
	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'duct injury')			INSERT INTO @tmpDiv (Val) VALUES('duct injury')
	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'stent occlusion')		INSERT INTO @tmpDiv (Val) VALUES('stent occlusion')
	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'ipmt')					INSERT INTO @tmpDiv (Val) VALUES('IPMT')

    DECLARE @B varchar(MAX)=''
	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'acute') SET @B='acute '	

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'chronic') 
    BEGIN
		IF @B<>'' SET @B = @B +'and chronic ' ELSE SET @B= @B +'chronic '
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val = 'minimal change') SET @B= @B +'(minimal change) '
    END

	IF @B <> '' INSERT INTO @tmpDiv (Val) VALUES(@B + 'pancreatitis')

    SET @B =''
    DECLARE @C varchar(MAX)=''

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('communicating', 'noncommunicating', 'pseudocyst'))
	BEGIN
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('pseudocyst'))  SET @B= 'pseudocyst ' ELSE SET @B='cyst '
	END

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('communicating')) SET @C='communicating '

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('noncommunicating'))
	BEGIN
		IF @C= ''  SET @C ='noncommunicating '
		ELSE SET @C= @C + 'and noncommunicating '
	END

    IF @C <>'' SET @C = @C + 'with the pancreatic duct'
    SET @B = @B + @C

	IF @B <> '' INSERT INTO @tmpDiv (Val) VALUES(@B)

                                  
    SET @B='' 
    SET @C= ''

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('stricture')) SET @B='stricture '

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('dilatation')) 
    BEGIN
		IF @B='' SET @B= 'dilatation ' ELSE SET @B='and dilatation '
    END

    IF @B<> ''
    BEGIN
		SET @B= 'ductal '+@B
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('no obvious cause'))  SET @B = @B + 'with no obvious cause'
    END
		
    IF @B <> '' INSERT INTO @tmpDiv (Val) VALUES(@B)
                                  
    SET @B=''
    SET @C= ''

    DECLARE @A1 varchar(50)='' , @A2 varchar(50) ='', @A3 varchar(50) ='', @Other VARCHAR(3000) = ''

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('probably malignant')) SET @A1 = 'probably malignant tumour'
	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('cystadenoma'))		SET @A2 = 'cystadenoma'

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('other'))		
	BEGIN
		SET @Other = ISNULL((SELECT LTRIM(RTRIM(Value)) FROM #tbl_ERS_Diagnoses WHERE MatrixCode IN ('TumourOtherText') AND LTRIM(RTRIM(Value)) <> ''),'')
		IF @Other <> '' SET @A3 = @Other
	END

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('other'))	AND @A3<>''
	BEGIN
		IF @A1 = '' AND @A2 = '' SET @B= 'tumour ('+ @A3+ ') '
		ELSE
		BEGIN
            IF @A1 <> '' AND @A2 = '' SET @B = @A1 + ' (' +@A3+ ') '
			ELSE
            BEGIN
				DECLARE @XMLlist1 XML                                               
				SELECT * INTO #T FROM (select Val=@A1 union select Val=@A2 union select Val=@A3) AS TA
				SET @XMLlist1 = (SELECT Val FROM #T FOR XML  RAW, ELEMENTS, TYPE)
				SET @B = dbo.fnBuildString(@XMLlist1)                                             
				DROP TABLE #T
            END
		END
	END
	ELSE
    BEGIN
		IF @A1 <> '' AND @A2 = '' SET @B=@A1
		IF @A1 =  '' AND @A2 <> '' SET @B= @A2
		IF @A1 <> '' AND @A2 <> '' SET @B = @A1 + ' and ' + @A2
	END


	IF @B <> '' INSERT INTO @tmpDiv (Val) VALUES(@B)

	SET @Other = ISNULL((SELECT TOP 1 LTRIM(RTRIM(Value)) FROM #tbl_ERS_Diagnoses WHERE MatrixCode IN ('PancreaticOther') AND LTRIM(RTRIM(Value)) <> ''),'')

    IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
    BEGIN
		DECLARE @XMLlist2 XML
		SET @XMLlist2 = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
		SET @B = dbo.fnBuildString(@XMLlist2)
		DELETE FROM @tmpDiv                                     
                                           
		--SET @B =dbo.fnFirstLetterUpper(@B)
		SET @A = @A + '<b>Pancreas: </b>' + @B +'.'
		SET @B = @Other
		IF @B <>  '' SET @A = @A + ' ' + dbo.fnFirstLetterUpper(@B) + '.'
		SET @A = @A + '<br/>'
    END  
    ELSE
    BEGIN
		SET @B = @Other
        IF @B <> '' SET @A = @A + '<b>Pancreas: </b>' + @B + '. <br/>'
    END

------ BILIARY ------------------------------------------------------------------------

	DELETE FROM @tmpRegionDiv                      
    DELETE FROM @tmpDiv
	SET @B = ''
		
	INSERT INTO @tmpRegionDiv (Val, Region)
	SELECT DISTINCT LOWER(DisplayName) , Region
	FROM #tbl_ERS_Diagnoses WHERE Region IN ('Biliary', 'Intrahepatic', 'Extrahepatic')


	DECLARE @BilStr Varchar(1000) = ''

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('normal'))	
	BEGIN
		SET @BilStr= 'Normal'
		--IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('post cholecystectomy')) SET @BilStr = @BilStr + ' (post cholecystectomy)'
	END
	ELSE 
    BEGIN

		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('anastomic stricture'))		INSERT INTO @tmpDiv (Val) VALUES('anastomic stricture')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('cystic duct stones'))		INSERT INTO @tmpDiv (Val) VALUES('cystic duct stones')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('haemobilia'))		INSERT INTO @tmpDiv (Val) VALUES('haemobilia')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('cholelithiasis'))		INSERT INTO @tmpDiv (Val) VALUES('cholelithiasis')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('fistula/leak'))		INSERT INTO @tmpDiv (Val) VALUES('fistula')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('mirizzi syndrome'))		INSERT INTO @tmpDiv (Val) VALUES('Mirizzi syndrome')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE LEFT(Val,21) IN ('calculous obstruction'))		INSERT INTO @tmpDiv (Val) VALUES('calculous obstruction of cystic duct')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('gall bladder stones'))		INSERT INTO @tmpDiv (Val) VALUES('gall bladder stone(s)')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('occlusion'))		INSERT INTO @tmpDiv (Val) VALUES('occlusion')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE LEFT(Val,11) IN ('common duct'))		INSERT INTO @tmpDiv (Val) VALUES('common duct stone(s)')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('gall bladder tumour'))		INSERT INTO @tmpDiv (Val) VALUES('gall bladder tumour')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('stent occlusion'))		INSERT INTO @tmpDiv (Val) VALUES('stent occlusion')

		--Check for stones in either gall bladder, bile duct or hepatic duct - and strung them up
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE LEFT(Val,9) IN ('stones in'))
		BEGIN
			DECLARE @XMLStones XML
			SET @XMLStones = (SELECT REPLACE(Val,'stones in ','') AS Val FROM @tmpRegionDiv
								WHERE LEFT(Val,9) IN ('stones in')
							 FOR XML  RAW, ELEMENTS, TYPE)
			SET @B = dbo.fnBuildString(@XMLStones)	
			INSERT INTO @tmpDiv (Val) VALUES('stones (in ' + @B + ')')
			SET @B = ''
		END	
	END

	IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
    BEGIN
		DECLARE @XMLlist3 XML
        SET @XMLlist3 = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
        SET @B = dbo.fnBuildString(@XMLlist3)
    END 
    DELETE FROM @tmpDiv
	IF LTRIM(RTRIM(@B)) <> '' SET @BilStr= dbo.fnFirstLetterUpper(@B) + '. ' 
		   
------- Intrahepatic -------------------------------------------------------			

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('normal ducts') AND Region = 'Intrahepatic') 
		INSERT INTO @tmpDiv (Val) VALUES(@BilStr +'Normal intrahepatic ducts. ')     
	ELSE
    BEGIN
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('cirrhosis')) INSERT INTO @tmpDiv (Val) VALUES('cirrhosis')      
        IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('hydatid cyst')) INSERT INTO @tmpDiv (Val) VALUES('hydatid cyst')     
        IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('liver abscess')) INSERT INTO @tmpDiv (Val) VALUES('liver abscess')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('suppurative cholangitis')) INSERT INTO @tmpDiv (Val) VALUES('suppurative cholangitis')
		
        IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE LEFT(Val,12) IN ('biliary leak') AND Region = 'Intrahepatic') 
        BEGIN
			SET @Other = ISNULL((SELECT TOP 1 LTRIM(RTRIM(Value)) FROM #tbl_ERS_Diagnoses WHERE MatrixCode IN ('IntrahepaticLeakSiteType') AND LTRIM(RTRIM(Value)) <> ''),'')

			IF @Other<> '' INSERT INTO @tmpDiv (Val) VALUES('biliary leak' + ' (' +(select ISNULL(ListItemText,'') from ERS_Lists where ListDescription='Intrahepatic biliary leak site' AND  ListItemNo = ISNULL(@Other,0)) + ')')
			ELSE INSERT INTO @tmpDiv (Val) VALUES('intrahepatic biliary leak')
        END    
                     
        IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('polycystic liver disease'))	INSERT INTO @tmpDiv (Val) VALUES('polycystic liver disease')     
        IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('sclerosing cholangitis') AND Region = 'Intrahepatic')		INSERT INTO @tmpDiv (Val) VALUES('sclerosing cholangitis')
        IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('caroli''s disease'))			INSERT INTO @tmpDiv (Val) VALUES('Caroli''s disease')
        IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('tumour') AND Region = 'Intrahepatic') 
        BEGIN
            DECLARE @tTable TABLE (Val varchar(500))
			DECLARE @IntrahepaticTumourType VARCHAR(2) = ''
            SET @A2=''
            SET @B=''
			--SET @IntrahepaticTumourType = ISNULL((SELECT TOP 1  LTRIM(RTRIM(Value)) FROM #tbl_ERS_Diagnoses WHERE MatrixCode IN ('TumourType') AND Region = 'Intrahepatic' AND LTRIM(RTRIM(Value)) <> ''),'')
            --IF ISNULL(@IntrahepaticTumourType,'') = '1' SET @B='probable '
            --ELSE IF ISNULL(@IntrahepaticTumourType,'') = '2' SET @B='possible '

			IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('probable')) SET @B='probable '
			ELSE IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('possible')) SET @B='possible '

            IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('cholangiocarcinoma'))				INSERT INTO @tTable (Val) VALUES('cholangiocarcinoma')
            IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('metastatic intrahepatic'))		INSERT INTO @tTable (Val) VALUES('metastatic intrahepatic')
            IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('external compression (metastases)')) INSERT INTO @tTable (Val) VALUES('external compression (metastases)')
            IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('hepatocellular carcinoma'))		INSERT INTO @tTable (Val) VALUES('hepatocellular carcinoma')	
                           
            IF (SELECT COUNT(Val) FROM @tTable) > 0 
            BEGIN
				DECLARE @XMLlist4 XML
                SET @XMLlist4 = (SELECT Val FROM @tTable FOR XML  RAW, ELEMENTS, TYPE)
                SET @B = @B +  dbo.fnBuildString(@XMLlist4)
                DELETE FROM @tTable
            END 
            ELSE SET @B= @B + 'tumour'

            INSERT INTO @tmpDiv (Val) VALUES(@B)
            DELETE FROM @tTable
        END
        IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
        BEGIN
			DECLARE @XMLlist5 XML= (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE) 
			IF RIGHT(RTRIM(@BilStr),1) <> '.' AND LEN(LTRIM(RTRIM(@BilStr))) > 2 SET @BilStr = @BilStr + '. '                                        
			SET @BilStr = @BilStr + 'Intrahepatic: ' + dbo.fnBuildString(@XMLlist5)                                                     
        END 
        DELETE FROM @tmpDiv
    END     

------- Extrahepatic -------------------------------------------------------			      
    IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('normal ducts') AND Region = 'Extrahepatic') 
    BEGIN
		SET @BilStr = @BilStr + 'Extrahepatic ducts normal'
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('post cholecystectomy')) SET @BilStr = @BilStr + ' (post cholecystectomy). '
		ELSE SET @BilStr = @BilStr + '. '
    END           
    ELSE
    BEGIN
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('post cholecystectomy'))	INSERT INTO @tmpDiv (Val) VALUES('post cholecystectomy')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('choledochal cyst'))		INSERT INTO @tmpDiv (Val) VALUES('choledochal cyst')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('dilated duct'))			INSERT INTO @tmpDiv (Val) VALUES('dilated duct')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE LEFT(Val,12) IN ('biliary leak') AND Region = 'Extrahepatic') 
		BEGIN
			SET @Other = ISNULL((SELECT TOP 1 LTRIM(RTRIM(Value)) FROM #tbl_ERS_Diagnoses WHERE MatrixCode IN ('ExtrahepaticLeakSiteType') AND LTRIM(RTRIM(Value)) <> ''),'')

			IF @Other<> '' INSERT INTO @tmpDiv (Val) VALUES('biliary leak' + ' (' +(select ISNULL(ListItemText,'') from ERS_Lists where ListDescription='Extrahepatic biliary leak site' AND  ListItemNo = ISNULL(@Other,0)) + ')')
			ELSE INSERT INTO @tmpDiv (Val) VALUES('extrahepatic biliary leak')
		END
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('Stricture') AND Region = 'Extrahepatic') 
        BEGIN
			DECLARE @iTable TABLE (Val varchar(500))
			DECLARE @ExtrahepaticStrictureType VARCHAR(2) = ''
			DECLARE @ExtrahepaticProbable BIT = 0, @BenignProbable BIT = 0, @MalignantProbable BIT = 0
            SET @B=''

			SET @ExtrahepaticProbable = ISNULL((SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('extrahepatic probable')),0)
			SET @BenignProbable = ISNULL((SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('benign probable')),0)
			SET @MalignantProbable = ISNULL((SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('malignant probable')),0)

			--SET @ExtrahepaticStrictureType = ISNULL((SELECT TOP 1 CASE WHEN MatrixCode='D330P2' THEN 1 WHEN MatrixCode='D335P2' THEN 2 END
			--		FROM #tbl_ERS_Diagnoses WHERE MatrixCode IN ('D330P2','D335P2') AND Region = 'Extrahepatic' AND LTRIM(RTRIM(Value)) <> ''),'')

            IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('benign') AND Region = 'Extrahepatic') 
            BEGIN
				IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('pancreatitis')) INSERT INTO @iTable (Val) VALUES('pancreatitis')
				IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('a pseudocyst')) INSERT INTO @iTable (Val) VALUES('a pseudocyst')
				IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('previous surgery')) INSERT INTO @iTable (Val) VALUES('previous surgery')
				IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('sclerosing cholangitis') AND Region = 'Extrahepatic') INSERT INTO @iTable (Val) VALUES('sclerosing cholangitis')
				DECLARE @istr varchar(1000), @iCount int
				SET @iCount = (SELECT COUNT(Val) FROM @iTable)
				IF @iCount > 0 
				BEGIN
					DECLARE @XMLlist6 XML= (SELECT Val FROM @iTable FOR XML  RAW, ELEMENTS, TYPE)                                     
					SET @istr = dbo.fnBuildString(@XMLlist6)                                                 
				END 
				DELETE FROM @iTable
				IF ISNULL(@ExtrahepaticProbable,0) <> 1 AND ISNULL(@BenignProbable,0) <> 1
                BEGIN
					IF @iCount >1 SET @B = 'stricture due to ' + @istr
					ELSE SET @B = 'benign stricture'
                END
                ELSE IF ISNULL(@ExtrahepaticProbable,0) = 1 AND ISNULL(@BenignProbable,0) <> 1
                BEGIN
					SET @B= 'stricture: probably benign'
					IF @iCount > 1 SET @B = @B + ', ' + @istr
                END
                ELSE IF ISNULL(@ExtrahepaticProbable,0) <> 1 AND ISNULL(@BenignProbable,0) = 1
                BEGIN
					SET @B= 'benign stricture '
					IF @iCount > 1 SET @B = @B + ', probably ' + @istr
                END
                ELSE IF ISNULL(@ExtrahepaticProbable,0) = 1 AND ISNULL(@BenignProbable,0) = 1
                BEGIN
					SET @B= 'stricture: probably benign'
					IF @iCount > 1 SET @B = @B + ', probably ' + @istr
                END
            END
            ELSE IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('malignant') AND Region = 'Extrahepatic') 
            BEGIN
				IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('gallbladder carcinoma')) INSERT INTO @iTable (Val) VALUES('gallbladder carcinoma')
				IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('metastatic carcinoma')) INSERT INTO @iTable (Val) VALUES('metastatic carcinoma')
				IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('cholangiocarcinoma')) INSERT INTO @iTable (Val) VALUES('cholangiocarcinoma')
				IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('pancreatic carcinoma')) INSERT INTO @iTable (Val) VALUES('pancreatic carcinoma')
				DECLARE @oStr varchar(1000), @oCount int
				SET @oCount = (SELECT COUNT(Val) FROM @iTable)
				IF @oCount > 0 
                BEGIN
                    DECLARE @XMLlist7 XML= (SELECT Val FROM @iTable FOR XML  RAW, ELEMENTS, TYPE)                                     
                    SET @ostr = dbo.fnBuildString(@XMLlist7)                                                 
                END 
                DELETE FROM @iTable
                IF ISNULL(@ExtrahepaticProbable,0) <> 1 AND ISNULL(@MalignantProbable,0) <> 1
                BEGIN
					IF @oCount > 1 SET @B = 'stricture due to ' + @ostr
					ELSE SET @B ='malignant stricture'
                END
                ELSE IF ISNULL(@ExtrahepaticProbable,0) = 1 AND ISNULL(@MalignantProbable,0) <> 1
                BEGIN
					SET @B= 'stricture: probably malignant'
					IF @oCount > 1 SET @B = @B + ', ' + @ostr                                   
                END
                ELSE IF ISNULL(@ExtrahepaticProbable,0) <> 1 AND ISNULL(@MalignantProbable,0) = 1
                BEGIN
					SET @B= 'stricture: malignant'
					IF @oCount > 1 SET @B = @B + ', probably ' + @ostr                                       
                END
                ELSE IF ISNULL(@ExtrahepaticProbable,0) = 1 AND ISNULL(@MalignantProbable,0) = 1
                BEGIN
					SET @B= 'stricture: probably malignant'
					IF @oCount > 1 SET @B = @B + ', probably ' + @ostr                                       
                END
            END 
            ELSE SET @B ='stricture'

            INSERT INTO @tmpDiv (Val) VALUES(@B)
        END

        IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
        BEGIN
			DECLARE @XMLlist8 XML= (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)    
			IF RIGHT(RTRIM(@BilStr),1) <> '.' AND LEN(LTRIM(RTRIM(@BilStr))) > 2 SET @BilStr = @BilStr + '. '                                     
			SET @BilStr = @BilStr + 'Extrahepatic: ' + dbo.fnBuildString(@XMLlist8)                                                    
        END 
        DELETE FROM @tmpDiv
    END         
		
	SET @Other = ISNULL((SELECT TOP 1 LTRIM(RTRIM(Value)) FROM #tbl_ERS_Diagnoses WHERE MatrixCode IN ('BiliaryOther') AND LTRIM(RTRIM(Value)) <> ''),'')
  
	IF @BilStr <>'' AND  @BilStr <>'.'
    BEGIN
		SET @A = @A + '<b>Biliary: </b>' + dbo.fnFirstLetterLower(@BilStr)
		SET @B= ISNULL(@Other,'')
		IF @B <> '' 
		BEGIN 
			SET @B = dbo.fnFirstLetterUpper(@B)
			SET @A = @A + ' ' + @B  + '.'
		END
		SET @A = @A + '<br/>'
    END
	ELSE
    BEGIN
		SET @B= ISNULL(@Other,'')
		IF @B<>''
        BEGIN
			SET @B = dbo.fnFirstLetterLower(@B)
			SET @A = @A + '<b>Biliary: </b>' + @B  + '.' + '<br/>'
        END
    END

------ DUODENUM ------------------------------------------------------------------------

	DELETE FROM @tmpRegionDiv                      
    DELETE FROM @tmpDiv
		
	INSERT INTO @tmpRegionDiv (Val, Region)
	SELECT DISTINCT LOWER(DisplayName) , Region
	FROM #tbl_ERS_Diagnoses WHERE Region IN ('Duodenum')

	IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('not entered')) INSERT INTO @tmpDiv (Val) VALUES('normal')
	ELSE IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('normal')) INSERT INTO @tmpDiv (Val) VALUES('normal')
	ELSE IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('2nd part not entered')) INSERT INTO @tmpDiv (Val) VALUES('normal')
	ELSE
	BEGIN
		--IF @DuodenumNormal = 1 INSERT INTO @tmpDiv (Val) VALUES('normal')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('angiodysplasia')) INSERT INTO @tmpDiv (Val) VALUES('angiodysplasia')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('tumour')) INSERT INTO @tmpDiv (Val) VALUES('tumour')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('diverticulum')) INSERT INTO @tmpDiv (Val) VALUES('diverticulum')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('duodenitis')) INSERT INTO @tmpDiv (Val) VALUES('duodenitis')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('polyp')) INSERT INTO @tmpDiv (Val) VALUES('polyp')
		IF EXISTS (SELECT 1 FROM @tmpRegionDiv WHERE Val IN ('ulcer')) INSERT INTO @tmpDiv (Val) VALUES('ulcer')
	END
              
	IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
	BEGIN
		DECLARE @XMLlist9 XML= (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)                                       
		SET @B =  dbo.fnBuildString(@XMLlist9)      
		SET @A = @A + '<b>Duodenum: </b>' + @B + '.'    + '<br/>'                         
	END 
	DELETE FROM @tmpDiv  

	SET @Other = ISNULL((SELECT TOP 1 LTRIM(RTRIM(Value)) FROM #tbl_ERS_Diagnoses WHERE MatrixCode IN ('WholeOther') AND LTRIM(RTRIM(Value)) <> ''),'')
	IF @Other <> ''
	BEGIN
		SET @B= LTRIM(RTRIM((select ISNULL(ListItemText,'') from ERS_Lists where ListDescription='ERCP other diagnoses' AND  ListItemNo = ISNULL(@Other,0))))
		SET @B = dbo.fnAddFullStop(dbo.fnFirstLetterUpper(@B)) + '<br/>'
		SET @A = @A +@B
	END  

	IF @A <> '' UPDATE ERS_ERCPDiagnoses SET Summary = @A
	UPDATE ERS_ProceduresReporting  SET PP_Diagnoses = @A WHERE ProcedureId = @ProcedureId
	


	IF EXISTS(SELECT 1 FROM #tbl_ERS_Diagnoses WHERE MatrixCode='Summary') 
		UPDATE [ERS_Diagnoses] SET [Value] = @A WHERE Procedureid=@ProcedureID AND MatrixCode='Summary'
	ELSE INSERT INTO [ERS_Diagnoses] (ProcedureID,MatrixCode,[Value]) VALUES (@ProcedureID,'Summary', @A)

	UPDATE ERS_ProceduresReporting SET PP_Diagnoses = @A WHERE ProcedureId = @ProcedureId

	IF ISNULL(@A,'') = '' AND NOT EXISTS (SELECT 1 FROM #tbl_ERS_Diagnoses WHERE [Value]<>0 AND ISNULL([Value],'')<>'' AND MatrixCode <>'Summary')
		DELETE FROM ERS_RecordCount	WHERE [ProcedureId] = @ProcedureId AND [Identifier] = 'Diagnoses'
	ELSE
		BEGIN
			IF NOT EXISTS (SELECT 1 FROM ERS_RecordCount WHERE [ProcedureId] = @ProcedureId AND [Identifier] = 'Diagnoses')
				INSERT INTO ERS_RecordCount ([ProcedureId], [SiteId], [Identifier], [RecordCount])
				VALUES (@ProcedureId, NULL, 'Diagnoses', 1)
		END

	DROP TABLE #tbl_ERS_Diagnoses

	--EXEC procedure_summary_update @procedureID

END TRY

BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------298a Create Proc ogd_diagnoses_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'ogd_diagnoses_summary_update','S';
GO

CREATE PROCEDURE [dbo].[ogd_diagnoses_summary_update]
(
       @ProcedureId INT
)
AS

SET NOCOUNT ON

DECLARE @ProcedureType Int = (SELECT ProcedureType FROM ERS_Procedures WHERE ProcedureId=@ProcedureId )
DECLARE @Summary varchar(MAX)=''
DECLARE @tmpSummary varchar(MAX)=''
DECLARE @XMLlist XML

IF @ProcedureType IN (2, 7)    --For ERCP & EUS_HPB, execute a different SP
BEGIN
	EXEC ercp_diagnoses_summary_update @ProcedureId
	RETURN
END

BEGIN TRANSACTION

BEGIN TRY

SELECT * INTO #tbl_ERS_Diagnoses FROM ERS_Diagnoses WHERE ProcedureId=@ProcedureId 

IF @ProcedureType=1   --Gastroscopy
BEGIN
	IF OBJECT_ID('tempdb..#Oesophagus') IS NOT NULL DROP TABLE #Oesophagus
	IF OBJECT_ID('tempdb..#Stomach') IS NOT NULL DROP TABLE #Stomach
	IF OBJECT_ID('tempdb..#Duodenum') IS NOT NULL DROP TABLE #Duodenum

    IF OBJECT_ID('tempdb..#OesophagusTemp') IS NOT NULL DROP TABLE #OesophagusTemp
                             create table #OesophagusTemp ([cx] Int null, [Text] varchar(3000) null)
    IF OBJECT_ID('tempdb..#StomachTemp') IS NOT NULL DROP TABLE #StomachTemp
                             create table #StomachTemp ([cx] Int null, [Text] varchar(3000) null)
    IF OBJECT_ID('tempdb..#DuodenumTemp') IS NOT NULL DROP TABLE #DuodenumTemp
                             create table #DuodenumTemp ([cx] Int null, [Text] varchar(3000) null)

	IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Region='Oesophagus' AND Value ='True' AND MatrixCode <>'OesophagusNormal' )
	BEGIN
		IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Value ='True' AND MatrixCode = 'OesophagusNormal') UPDATE [ERS_Diagnoses] SET Value ='False' WHERE ProcedureID = @ProcedureID AND MatrixCode = 'OesophagusNormal'
		IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Value ='True' AND MatrixCode = 'OverallNormal') UPDATE [ERS_Diagnoses] SET Value ='False' WHERE ProcedureID = @ProcedureID AND MatrixCode = 'OverallNormal'
	END

	IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Region='Stomach' AND Value ='True' AND MatrixCode <>'StomachNormal' )
	BEGIN
		IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Value ='True' AND MatrixCode = 'StomachNormal')  UPDATE [ERS_Diagnoses] SET Value ='False' WHERE ProcedureID = @ProcedureID AND MatrixCode = 'StomachNormal'
		IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Value ='True' AND MatrixCode = 'OverallNormal')  UPDATE [ERS_Diagnoses] SET Value ='False' WHERE ProcedureID = @ProcedureID AND MatrixCode = 'OverallNormal'
	END

	IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Region='Duodenum' AND Value ='True' AND MatrixCode <>'DuodenumNormal' )
	BEGIN
		IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Value ='True' AND MatrixCode = 'DuodenumNormal')  UPDATE [ERS_Diagnoses] SET Value ='False' WHERE ProcedureID = @ProcedureID AND MatrixCode = 'DuodenumNormal'
		IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Value ='True' AND MatrixCode = 'OverallNormal')   UPDATE [ERS_Diagnoses] SET Value ='False' WHERE ProcedureID = @ProcedureID AND MatrixCode = 'OverallNormal'
	END
                     
    SELECT  RowNum = ROW_NUMBER() OVER(ORDER BY [DiagnosesID]),d.*,m.DisplayName	INTO #Oesophagus	FROM #tbl_ERS_Diagnoses d	LEFT JOIN ERS_DiagnosesMatrix m ON d.matrixcode=m.Code WHERE Region='Oesophagus'	AND [Value] IS NOT NULL AND [Value]<>'False' AND [Value]<>'' AND MatrixCode <>'Summary'
    SELECT  RowNum = ROW_NUMBER() OVER(ORDER BY [DiagnosesID]),d.*, m.DisplayName	INTO #Stomach		FROM #tbl_ERS_Diagnoses d	LEFT JOIN ERS_DiagnosesMatrix m ON d.matrixcode=m.Code WHERE Region='Stomach'		AND [Value] IS NOT NULL AND [Value]<>'False' AND [Value]<>'' AND MatrixCode <>'Summary'
    SELECT  RowNum = ROW_NUMBER() OVER(ORDER BY [DiagnosesID]),d.*, m.DisplayName	INTO #Duodenum		FROM #tbl_ERS_Diagnoses d	LEFT JOIN ERS_DiagnosesMatrix m ON d.matrixcode=m.Code WHERE Region='Duodenum'		AND [Value] IS NOT NULL AND [Value]<>'False' AND [Value]<>'' AND MatrixCode <>'Summary'
	
	--Delete duplicates
	--DELETE FROM #Oesophagus WHERE RowNum NOT IN (SELECT MIN(RowNum) FROM #Oesophagus GROUP BY MatrixCode)
	--DELETE FROM #Stomach	WHERE RowNum NOT IN (SELECT MIN(RowNum) FROM #Stomach	GROUP BY MatrixCode)
	--DELETE FROM #Duodenum	WHERE RowNum NOT IN (SELECT MIN(RowNum) FROM #Duodenum	GROUP BY MatrixCode)

	--OESOPHAGUS
	INSERT INTO #OesophagusTemp ([cx],[Text]) 	--UNION to exclude duplicates for Abnormalities!
		--'Not Entered' or 'Normal' selected from the diagnoses screen
		SELECT 1, 'not entered' FROM #Oesophagus WHERE MatrixCode = 'OesophagusNotEntered'
		UNION
		SELECT 2, 'normal' FROM #Oesophagus WHERE MatrixCode = 'OesophagusNormal'
		UNION
		SELECT 3, CAST([Value] as Varchar(MAX)) FROM #Oesophagus WHERE MatrixCode = 'OesophagusOtherDiagnosis'
		UNION
		SELECT 0, (CASE WHEN CHARINDEX('barrett',DisplayName) > 0 OR CHARINDEX('mallory-weiss',DisplayName) > 0 
						THEN DisplayName ELSE LOWER(DisplayName) END) 
				FROM #Oesophagus WHERE SiteId > 0 --Abnormalities for each sites 
	
	--STOMACH          
	INSERT INTO #StomachTemp ([cx],[Text]) 	--UNION to exclude duplicates for Abnormalities!
		--'Not Entered' or 'Normal' selected from the diagnoses screen
		SELECT 1, 'not entered' FROM #Stomach WHERE MatrixCode = 'StomachNotEntered'
		UNION
		SELECT 2, 'normal' FROM #Stomach WHERE MatrixCode = 'StomachNormal'
		UNION
		SELECT 3, CAST([Value] as Varchar(MAX)) FROM #Stomach WHERE MatrixCode = 'StomachOtherDiagnosis'
		UNION
		SELECT 0, LOWER(DisplayName) FROM #Stomach WHERE SiteId > 0 --Abnormalities for each sites 


	--DUODENUM      
	INSERT INTO #DuodenumTemp ([cx],[Text]) 	--UNION to exclude duplicates for Abnormalities!
		--'Not Entered' or 'Normal' selected from the diagnoses screen
		SELECT 1, 'not entered' FROM #Duodenum WHERE MatrixCode = 'DuodenumNotEntered'
		UNION
		SELECT 2, 'normal' FROM #Duodenum WHERE MatrixCode = 'DuodenumNormal'
		UNION
		SELECT 4, '2nd part not entered' FROM #Duodenum WHERE MatrixCode = 'Duodenum2ndPartNotEntered'
		UNION
		SELECT 3, CAST([Value] as Varchar(MAX)) FROM #Duodenum WHERE MatrixCode = 'DuodenumOtherDiagnosis'
		UNION
		SELECT 0, LOWER(DisplayName) FROM #Duodenum WHERE SiteId > 0 --Abnormalities for each sites 

	--Oesophagus
    IF EXISTS(select 1 from #OesophagusTemp)
    BEGIN
		SET @XMLlist = (SELECT [text] AS Val FROM #OesophagusTemp FOR XML  RAW, ELEMENTS, TYPE)
		SET @tmpSummary = dbo.fnBuildString(@XMLlist)
		IF @tmpSummary <> '' SET @Summary = @summary + '<b>Oesophagus: </b>' + @tmpSummary + '.<br/>'
    END

	--Stomach 
    IF EXISTS(select 1 from #StomachTemp)
    BEGIN
		SET @XMLlist = (SELECT [text] AS Val FROM #StomachTemp FOR XML  RAW, ELEMENTS, TYPE)
		SET @tmpSummary = dbo.fnBuildString(@XMLlist)
		IF @tmpSummary <> '' SET @Summary = @summary + '<b>Stomach: </b>' + @tmpSummary + '.<br/>'
    END

	--Duodenum 
    IF EXISTS(select 1 from #DuodenumTemp)
    BEGIN
		SET @XMLlist = (SELECT [text] AS Val FROM #DuodenumTemp FOR XML  RAW, ELEMENTS, TYPE)
		SET @tmpSummary = dbo.fnBuildString(@XMLlist)
		IF @tmpSummary <> '' SET @Summary = @summary + '<b>Duodenum: </b>' + @tmpSummary + '.<br/>'
    END
              
	IF EXISTS(SELECT 1 FROM ERS_UpperGIBleeds WHERE ProcedureID = @ProcedureId)
	BEGIN
		SET @Summary = @summary +'<b>RISK OF REBLEED: </b>' + ISNULL((SELECT [OverallRiskAssessment] FROM ERS_UpperGIBleeds WHERE ProcedureID = @ProcedureId),'') + '. <br/> '
	END

    DROP TABLE #Oesophagus
    DROP TABLE #OesophagusTemp
    DROP TABLE #Stomach
    DROP TABLE #StomachTemp
    DROP TABLE #Duodenum
    DROP TABLE #DuodenumTemp
END
ELSE IF @ProcedureType IN (3,4,5) --Colonoscopy, Sigmoidscopy, Proctoscopy
BEGIN
	IF OBJECT_ID('tempdb..#Colon') IS NOT NULL DROP TABLE #Colon
	IF OBJECT_ID('tempdb..#ColonTemp') IS NOT NULL DROP TABLE #ColonTemp
		create table #ColonTemp ([cx] Int null,	[Text] VARCHAR(MAX) null)

	IF EXISTS(SELECT TOP(1) 1 FROM #tbl_ERS_Diagnoses WHERE Value ='True' AND MatrixCode <> 'ColonNormal' )
	BEGIN
		DELETE [ERS_Diagnoses] WHERE ProcedureID = @ProcedureID AND MatrixCode = 'ColonNormal'
		DELETE #tbl_ERS_Diagnoses WHERE MatrixCode = 'ColonNormal'
	END;

	--Select first row in each group (in case there's more than 1 record for a given MatrixCode)
	WITH colSummary AS (
    SELECT p.DiagnosesID, p.MatrixCode, p.Value, p.Region,
           ROW_NUMBER() OVER(PARTITION BY p.MatrixCode ORDER BY p.DiagnosesID DESC) AS rk
    FROM #tbl_ERS_Diagnoses p)

	SELECT d.*, m.DisplayName 
	INTO #Colon
	FROM colSummary d 
	LEFT JOIN ERS_DiagnosesMatrix m ON d.matrixcode = m.Code AND m.ProcedureTypeID = @ProcedureType
	WHERE rk = 1 -- Get the first record only
	AND Region = 'Colon'	AND [Value] IS NOT NULL	AND [Value] <> 'False'
	AND [Value] <> ''		AND [Value] <> '0'		--AND MatrixCode <> 'Summary'


	INSERT INTO #ColonTemp ([cx],[Text]) 
	SELECT 1, CONVERT(VARCHAR(MAX), 'The examination to the point of insertion was normal.') FROM #Colon WHERE MatrixCode = 'ColonNormal'
	UNION
	SELECT 2, 'The rest of the examination to the point of insertion was normal' FROM #Colon WHERE MatrixCode = 'ColonRestNormal'
	UNION
	SELECT 4, MatrixCode FROM #Colon WHERE MatrixCode = 'Colitis' OR MatrixCode = 'Ileitis' OR MatrixCode = 'Proctitis'
	UNION
	SELECT 5, (SELECT m.DisplayName FROM ERS_DiagnosesMatrix m WHERE m.code= d.Value AND m.ProcedureTypeID = @ProcedureType)  FROM #Colon d WHERE d.MatrixCode = 'ColitisType' AND VALUE NOT IN ('D85P3', 'S85P3', 'P85P3') -- '?85P3' = None specified
	UNION
	SELECT 6, (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Diagnoses Colon Extent' AND [ListItemNo] = Value) FROM #Colon WHERE MatrixCode = 'ColitisExtent'
	UNION
	SELECT 7, (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Mayo Score' AND [ListItemNo] = Value) FROM #Colon WHERE MatrixCode = 'MayoScore'
	UNION
	SELECT 8, (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Simple Endoscopic Score – Crohn''s Disease' AND [ListItemNo] = Value) FROM #Colon WHERE MatrixCode = 'SEScore'
	UNION
	SELECT 0, LOWER(DisplayName) FROM #Colon WHERE RIGHT(MatrixCode,2) = 'P3'
	UNION
	SELECT 300, Value FROM #Colon WHERE MatrixCode = 'ColonOtherDiagnosis'

	IF EXISTS(select 1 from #ColonTemp)
	BEGIN
		SET @Summary = ''

		IF EXISTS(SELECT 1 FROM #ColonTemp WHERE cx =1) -- no need to check further if "point of insertion was normal"
			SET @Summary = (SELECT TOP 1 [text] from #ColonTemp where cx=1)
		ELSE 
		BEGIN 
			IF EXISTS(SELECT 1 FROM #ColonTemp WHERE cx =4) --Colitis or Ileitis checked
			BEGIN
				DECLARE @ck varchar(1000) =''
				DECLARE @ms varchar(1000) = ''
				DECLARE @ses varchar(1000) = ''
				DECLARE @ColitisType VARCHAR(200) = ''
				IF EXISTS(SELECT 1 FROM #ColonTemp WHERE cx =6) 
					SET @ck=  (SELECT CASE @ck WHEN '' THEN (SELECT TOP 1 [text] from #ColonTemp where cx=6) ELSE @ck + ' ' + (SELECT TOP 1 [text] from #ColonTemp where cx=6) END)

				IF EXISTS(SELECT 1 FROM #ColonTemp WHERE cx =7) 
					SET @ms=  (SELECT CASE @ms WHEN '' THEN (SELECT TOP 1 [text] from #ColonTemp where cx=7) ELSE @ms + ' ' + (SELECT TOP 1 [text] from #ColonTemp where cx=7) END)

				IF EXISTS(SELECT 1 FROM #ColonTemp WHERE cx =8) 
					SET @ses=  (SELECT CASE @ses WHEN '' THEN (SELECT TOP 1 [text] from #ColonTemp where cx=8) ELSE @ses + ' ' + (SELECT TOP 1 [text] from #ColonTemp where cx=8) END)

				IF EXISTS(SELECT 1 FROM #ColonTemp WHERE cx =5) 
				BEGIN
					 SET @ColitisType = ISNULL((SELECT TOP 1 [text] from #ColonTemp where cx=5),'')
				
					IF @ColitisType = '' SET @ColitisType = ISNULL((SELECT TOP 1 [text] from #ColonTemp where cx=4),'')

					IF @ms = '' AND @ses = ''
						SET @ColitisType = @ColitisType + (SELECT CASE @ck WHEN '' THEN '' ELSE ' (' + @ck +')' END)
					ELSE
					BEGIN
						IF @ms <> ''
							SET @ColitisType = @ColitisType + LOWER((SELECT CASE @ms WHEN '' THEN '' ELSE ': ' + @ms  END) + (SELECT CASE @ck WHEN '' THEN '' ELSE ', ' + @ck  END))
						
						IF @ses <> ''
							SET @ColitisType = @ColitisType + LOWER((SELECT CASE @ses WHEN '' THEN '' ELSE ': ' + @ses  END) + (SELECT CASE @ck WHEN '' THEN '' ELSE ', ' + @ck END))
					END
				END
				ELSE SET @ColitisType = LOWER((SELECT TOP 1 [text] from #ColonTemp where cx=4))

				--Concatnate text for colitis (4,5,6,7) and insert into #ColonTemp with id 100
				INSERT INTO #ColonTemp ([cx],[Text])  SELECT 100, @ColitisType
			END

			-- 0 = diag matrix ending with 'P3'  ;  100 = colitis   ;  300 = others
			SET @XMLlist = (SELECT [Text] AS Val FROM #ColonTemp WHERE [cx] in (0,100,300) ORDER BY [cx] FOR XML  RAW, ELEMENTS, TYPE)
			SET @Summary =  dbo.fnBuildString(@XMLlist) 

			SET @Summary = ISNULL((SELECT TOP 1 [text] + '.<br/>' FROM #ColonTemp WHERE cx=2),'')  + 
					CASE WHEN  @Summary <> '' THEN dbo.fnFirstLetterUpper(@Summary) + '.<br/>' ELSE '' END
		END

	END

	DROP TABLE #Colon
	DROP TABLE #ColonTemp
END

IF EXISTS(SELECT 1 FROM #tbl_ERS_Diagnoses WHERE MatrixCode='Summary') UPDATE [ERS_Diagnoses] SET [Value] = @summary WHERE Procedureid=@ProcedureID AND MatrixCode='Summary'
ELSE INSERT INTO [ERS_Diagnoses] (ProcedureID,MatrixCode,[Value]) VALUES (@ProcedureID,'Summary', @Summary)

UPDATE ERS_ProceduresReporting SET PP_Diagnoses = @summary WHERE ProcedureId = @ProcedureId

IF ISNULL(@Summary,'') = '' AND NOT EXISTS (SELECT 1 FROM #tbl_ERS_Diagnoses WHERE [Value]<>'False' AND ISNULL([Value],'')<>'' AND MatrixCode <>'Summary')
	DELETE FROM ERS_RecordCount	WHERE [ProcedureId] = @ProcedureId AND [Identifier] = 'Diagnoses'
ELSE
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM ERS_RecordCount WHERE [ProcedureId] = @ProcedureId AND [Identifier] = 'Diagnoses')
			INSERT INTO ERS_RecordCount ([ProcedureId], [SiteId], [Identifier], [RecordCount])
			VALUES (@ProcedureId, NULL, 'Diagnoses', 1)
	END

DROP TABLE #tbl_ERS_Diagnoses

--EXEC procedure_summary_update @procedureID

END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------206 Create Proc sites_delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sites_delete','S';
GO

CREATE PROCEDURE [dbo].[sites_delete]
(
	@SiteId INT
)
AS

SET NOCOUNT ON

DECLARE @ProcedureId INT, @AreaNo INT, @SiteNo INT, @ProcedureType INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT @ProcedureId = s.ProcedureId, @AreaNo = s.AreaNo, @SiteNo = s.SiteNo, @ProcedureType = p.ProcedureType
	FROM ERS_Procedures p
	INNER JOIN ERS_Sites s ON p.ProcedureId = s.ProcedureId
	WHERE s.SiteId = @SiteId

	IF @ProcedureType IN (1, 6) --Gastroscopy, EUS_OGD
	BEGIN
		DELETE FROM ERS_UpperGIAbnoDeformity WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoAchalasia WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoGastricUlcer WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoGastritis WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoLumen WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoMalignancy WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoPolyps WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoPostSurgery WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoVarices WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoHiatusHernia WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoOesophagitis WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoBarrett WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoMiscellaneous WHERE SiteId = @SiteId
	END
	ELSE IF @ProcedureType IN (2, 7)   --ERCP, EUS_HPB
	BEGIN
		DELETE FROM ERS_ERCPAbnoDuct WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPAbnoParenchyma WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPAbnoAppearance WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPAbnoDiverticulum WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPAbnoTumour WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPTherapeutics WHERE SiteId = @SiteId
	END
	ELSE IF @ProcedureType IN (3,4,5)   --Colonoscopy, Sigmoidscopy, Proctoscopy
	BEGIN
		DELETE FROM ERS_ColonAbnoMucosa WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoVascularity WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoLesions WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoDiverticulum WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoHaemorrhage WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoPerianalLesions WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoCalibre WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoMiscellaneous WHERE SiteId = @SiteId
	END

	DELETE FROM ERS_CommonAbnoDiverticulum WHERE SiteId = @SiteId	
	DELETE FROM ERS_CommonAbnoTumour WHERE SiteId = @SiteId		
	DELETE FROM ERS_CommonAbnoDuodenitis WHERE SiteId = @SiteId	
	DELETE FROM ERS_CommonAbnoDuodenalUlcer WHERE SiteId = @SiteId
	DELETE FROM ERS_CommonAbnoScaring WHERE SiteId = @SiteId	
	DELETE FROM ERS_CommonAbnoVascularLesions WHERE SiteId = @SiteId	
	DELETE FROM ERS_CommonAbnoAtrophic WHERE SiteId = @SiteId

	DELETE FROM ERS_UpperGISpecimens WHERE SiteId = @SiteId
	DELETE FROM ERS_BRTSpecimens WHERE SiteId = @SiteId
	DELETE FROM ERS_UpperGITherapeutics WHERE SiteId = @SiteId		

	DELETE FROM ERS_Photos WHERE SiteId = @SiteId

	DELETE FROM ERS_RecordCount WHERE SiteId = @SiteId	

	IF @AreaNo > 0 AND @SiteNo > 0 --Main Site of an Area
		DELETE FROM ERS_Sites WHERE ProcedureId = @ProcedureId AND AreaNo = @AreaNo 
	ELSE
		DELETE FROM ERS_Sites WHERE SiteId = @SiteId

	IF EXISTS (SELECT 1 FROM ERS_Diagnoses WHERE ProcedureId = @ProcedureId AND SiteId = @SiteId)
	BEGIN
		DELETE FROM ERS_Diagnoses WHERE ProcedureId = @ProcedureId AND SiteId = @SiteId
		EXEC ogd_diagnoses_summary_update @ProcedureID
	END

	EXEC sites_reorder @ProcedureId
	EXEC procedure_summary_update @ProcedureId
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------207 Create Proc sites_update -- NEEDS REGULAR UPDATING.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sites_update','S';
GO

CREATE PROCEDURE [dbo].[sites_update]
(
	@SiteId INT,
	@RegionId INT, 
	@XCoordinate INT, 
	@YCoordinate INT, 
	@AntPos TINYINT,
	@PositionSpecified BIT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @PrevRegionId INT
DECLARE @ProcedureId INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT @PrevRegionId = RegionId
	FROM ERS_Sites
	WHERE SiteId = @SiteId

	UPDATE 
		ERS_Sites 
	SET
		RegionId = @RegionId, 
		XCoordinate = @XCoordinate, 
		YCoordinate = @YCoordinate, 
		AntPos = @AntPos,
		PositionSpecified = @PositionSpecified,
		WhoUpdatedId = @LoggedInUserId,
		WhenUpdated = GETDATE()
	WHERE
		SiteId = @SiteId

	IF @PrevRegionId <> @RegionId
	BEGIN
		DELETE FROM ERS_UpperGIAbnoGastritis WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoAchalasia WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoGastricUlcer	WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoLumen WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoMalignancy WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoPostSurgery WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoPolyps WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoDeformity WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoVarices WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoHiatusHernia WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoBarrett WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoOesophagitis WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGIAbnoMiscellaneous WHERE SiteId = @SiteId
		

		DELETE FROM ERS_ColonAbnoCalibre WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoMiscellaneous WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoMucosa WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoDiverticulum WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoHaemorrhage WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoVascularity WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoPerianalLesions WHERE SiteId = @SiteId
		DELETE FROM ERS_ColonAbnoLesions WHERE SiteId = @SiteId

		DELETE FROM ERS_ERCPAbnoDuct WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPAbnoParenchyma WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPAbnoAppearance WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPAbnoDiverticulum WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPAbnoTumour WHERE SiteId = @SiteId

		DELETE FROM ERS_CommonAbnoDiverticulum WHERE SiteId = @SiteId	
		DELETE FROM ERS_CommonAbnoTumour WHERE SiteId = @SiteId		
		DELETE FROM ERS_CommonAbnoDuodenitis WHERE SiteId = @SiteId	
		DELETE FROM ERS_CommonAbnoDuodenalUlcer WHERE SiteId = @SiteId
		DELETE FROM ERS_CommonAbnoScaring WHERE SiteId = @SiteId		
		DELETE FROM ERS_CommonAbnoVascularLesions WHERE SiteId = @SiteId
		DELETE FROM ERS_CommonAbnoAtrophic WHERE SiteId = @SiteId

		DELETE FROM ERS_UpperGISpecimens WHERE SiteId = @SiteId
		DELETE FROM ERS_BRTSpecimens WHERE SiteId = @SiteId
		DELETE FROM ERS_UpperGITherapeutics WHERE SiteId = @SiteId
		DELETE FROM ERS_ERCPTherapeutics WHERE SiteId = @SiteId

		DELETE FROM ERS_Photos WHERE SiteId = @SiteId

		DELETE 
		FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier IN ('Gastritis',					'Gastric Ulcer',
							'Lumen',					'Malignancy',
							'Post Surgery', 			'Polyps', 
							'Deformity', 				'Varices',
							'Hiatus Hernia',			'Barretts',
							'Vascular Lesions',			'Oesophagitis',
							'Miscellaneous',			'Diverticulum',
							'Tumour',					'Duodenitis',
							'Duodenal Ulcer',			'Scarring/Stenosis',
							'Atrophic Duodenum',		'Calibre', 
							'Mucosa',					'Diverticulum',
							'Haemorrhage',				'Vascularity',
							'PerianalLesions',			'Lesions',
							'Duct', 					'Parenchyma', 
							'Appearance', 				'Diverticulum', 
							'Specimens Taken',			'Therapeutic Procedures',
							'Jejunitis',				'Jejunal Ulcer',
							'Ileitis',					'Ileal Ulcer'
							)
	END

	SELECT @ProcedureId = ProcedureId FROM ERS_Sites WHERE SiteId = @SiteId
	EXEC sites_reorder @ProcedureId
	EXEC procedure_summary_update @ProcedureId
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------208 Create Proc sites_summary_update -- NEEDS REGULAR UPDATING.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sites_summary_update','S';
GO

CREATE PROCEDURE [dbo].[sites_summary_update]
(
	@SiteId INT
)
AS

SET NOCOUNT ON

DECLARE @summaryAbnormalities VARCHAR(MAX)
		,@summarySpecimens VARCHAR(MAX)
		,@summaryTherapeutics VARCHAR(MAX)
		,@summaryWhole VARCHAR(MAX)
		,@summaryAbnormalitiesWithHyperLinks VARCHAR(MAX)
		,@summarySpecimensWithHyperLinks VARCHAR(MAX)
		,@summaryTherapeuticsWithHyperLinks VARCHAR(MAX)
		,@procType INT
		,@procId INT
		,@none TINYINT
		,@region VARCHAR(500)
		,@htmlAnchorCode VARCHAR(500)
		,@siteIdStr VARCHAR(15)
		,@indent VARCHAR(15) 
		,@br VARCHAR(10)
		,@opDiv VARCHAR(150)
		,@clDiv VARCHAR(50)
		,@opBold VARCHAR(5)
		,@clBold VARCHAR(5)
		,@fullStop VARCHAR(1)
		,@colon VARCHAR(2)
		,@fldNone VARCHAR(15)
		,@emptyStr VARCHAR(1)
		,@abnoTheraPresent BIT = 0
		,@tmpSummaryAbno VARCHAR(MAX)
		,@tmpSummaryAbnoLinks VARCHAR(MAX)
		,@SiteNo INT
		,@regionID INT
		,@AreaNo INT

BEGIN TRANSACTION

BEGIN TRY

	SET	@summaryAbnormalities = ''
	SET	@summarySpecimens = ''
	SET	@summaryTherapeutics = ''
	SET	@summaryAbnormalitiesWithHyperLinks = ''
	SET	@summarySpecimensWithHyperLinks = ''
	SET	@summaryTherapeuticsWithHyperLinks = ''
	SET @siteIdStr = CONVERT(VARCHAR(10),@SiteId)

	SELECT @procId = p.ProcedureId,@procType = p.ProcedureType, @regionID = s.RegionId, @SiteNo = s.SiteNo, @AreaNo = ISNULL(AreaNo,0),
			@region = CASE WHEN s.SiteNo = -77 THEN						--SiteNo is set to -77 for sites By Distance (Col & Sig only)
						CONVERT(VARCHAR,XCoordinate) +  
							CASE WHEN YCoordinate IS NULL OR YCoordinate=0 THEN ' cm' 
							ELSE (' to ' + CONVERT(VARCHAR,YCoordinate) + ' cm' ) 
							END
					ELSE (SELECT r.Region FROM ERS_Regions r WHERE r.RegionId = s.RegionId)
					END
	FROM ERS_Sites s
	JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	--JOIN ERS_Regions r ON s.RegionId = r.RegionId
	WHERE SiteId = @SiteId

	--SELECT @region = Region FROM ERS_Regions WHERE RegionId = @regionID

	SET @htmlAnchorCode = '<a href="#" class="sitesummary" onclick="OpenSiteDetails(''''' + @region + ''''',' + @siteIdStr + ',''''{0}'''',''''' + CONVERT(VARCHAR,@AreaNo) + ''''');">{1}</a>'
	--{0} is the name of the menu and {1} is the summary text

	
	DECLARE @SQLString NVARCHAR(MAX)
	DECLARE @ProcedureType INT, @TableName VARCHAR(50), @AbnoNodeName VARCHAR(50), @Identifier VARCHAR(50)

	CREATE TABLE #QueryDetails (ProcType INT, TableName VARCHAR(50), AbnoNodeName VARCHAR(50), Identifier VARCHAR(50));

	--Notes to appear on the report just after the Site X heading, before the abnormalities.
	INSERT INTO #QueryDetails SELECT @procType,	'ERS_Sites',		'',		'Additional notes'

	IF @procType IN (1,6) --Gastroscopy / EUS(OGD)
	BEGIN
		INSERT INTO #QueryDetails VALUES 
		(@procType,	'ERS_CommonAbnoAtrophic',			'Atrophic duodenum','Atrophic Duodenum')
		,(@procType,	'ERS_UpperGIAbnoAchalasia',		'Achalasia',		'Achalasia')
		,(@procType,	'ERS_UpperGIAbnoBarrett',		'',					'Barretts Epithelium')
		,(@procType,	'ERS_UpperGIAbnoDeformity',		'Deformity',		'Deformity')
		,(@procType,	'ERS_CommonAbnoDiverticulum',	'Diverticulum',		'Diverticulum/Other')
		,(@procType,	'ERS_CommonAbnoDuodenalUlcer',	'',					CASE WHEN @region = 'Jejunum' THEN 'Jejunal Ulcer' WHEN @region = 'Ileum' THEN 'Ileal Ulcer' ELSE 'Duodenal Ulcer' END)
		,(@procType,	'ERS_CommonAbnoDuodenitis',		'',					CASE WHEN @region = 'Jejunum' THEN 'Jejunitis' WHEN @region = 'Ileum' THEN 'Ileitis' ELSE 'Duodenitis' END)
		,(@procType,	'ERS_UpperGIAbnoGastricUlcer',	'Gastric ulcer',	'Gastric Ulcer')
		,(@procType,	'ERS_UpperGIAbnoGastritis',		'Gastritis',		'Gastritis')
		,(@procType,	'ERS_UpperGIAbnoHiatusHernia',	'Hiatus hernia',	'Hiatus Hernia')
		,(@procType,	'ERS_UpperGIAbnoLumen',			'Lumen',			'Lumen')
		,(@procType,	'ERS_UpperGIAbnoMalignancy',	'Malignancy',		'Malignancy')
		,(@procType,	'ERS_UpperGIAbnoMiscellaneous',	'',					'Miscellaneous')
		,(@procType,	'ERS_UpperGIAbnoOesophagitis',	'Oesophagitis',		'Oesophagitis')
		,(@procType,	'ERS_UpperGIAbnoPolyps',		'Polyps',			'Polyps')
		,(@procType,	'ERS_UpperGIAbnoPostSurgery',	'Post surgery',		'Post Surgery')
		,(@procType,	'ERS_CommonAbnoScaring',		'',					'Scarring/Stenosis')
		,(@procType,	'ERS_CommonAbnoTumour',			'',					'Tumour')
		,(@procType,	'ERS_UpperGIAbnoVarices',		'Varices',			'Varices')
		,(@procType,	'ERS_CommonAbnoVascularLesions','Vascular lesions',	'Vascular Lesions')
		,(@procType,	'ERS_EUSAbnoMediastinal',		'Mediastinal',		'Mediastinal')
		,(@procType,	'ERS_UpperGITherapeutics',		'Therapeutic procedure(s)',	'Therapeutic Procedures')
		,(@procType,	'ERS_UpperGISpecimens',			'Specimens taken',	'Specimens Taken')
	END
	ELSE IF @procType IN (2,7) --ERCP / / EUS(HPB)
	BEGIN
		INSERT INTO #QueryDetails VALUES 
		(@procType,		'ERS_ERCPAbnoAppearance',		'Appearance',		'Appearance')
		,(@procType,	'ERS_CommonAbnoAtrophic',		'Atrophic duodenum','Atrophic Duodenum')
		,(@procType,	'ERS_CommonAbnoDiverticulum',	'Diverticulum',		'Diverticulum/Other')
		,(@procType,	'ERS_ERCPAbnoDiverticulum',		'Diverticulum',		'Diverticulum/Other')
		,(@procType,	'ERS_ERCPAbnoDuct',				'Duct',				'Duct')
		,(@procType,	'ERS_CommonAbnoDuodenalUlcer',	'',					CASE WHEN @region = 'Jejunum' THEN 'Jejunal Ulcer' WHEN @region = 'Ileum' THEN 'Ileal Ulcer' ELSE 'Duodenal Ulcer' END)
		,(@procType,	'ERS_CommonAbnoDuodenitis',		'',					CASE WHEN @region = 'Jejunum' THEN 'Jejunitis' WHEN @region = 'Ileum' THEN 'Ileitis' ELSE 'Duodenitis' END)
		,(@procType,	'ERS_ERCPAbnoParenchyma',		'Parenchyma',		'Parenchyma')
		,(@procType,	'ERS_CommonAbnoScaring',		'',					'Scarring/Stenosis')
		,(@procType,	'ERS_CommonAbnoTumour',			'',					'Tumour')
		,(@procType,	'ERS_ERCPAbnoTumour',			'Tumour',			'Tumour')
		,(@procType,	'ERS_CommonAbnoVascularLesions','Vascular lesions',	'Vascular Lesions')
		,(@procType,	'ERS_EUSAbnoMediastinal',		'Mediastinal',		'Mediastinal')
		,(@procType,	'ERS_ERCPTherapeutics',			'Therapeutic procedure(s)',	'Therapeutic Procedures')
		,(@procType,	'ERS_UpperGISpecimens',			'Specimens taken',	'Specimens Taken')
	END
	ELSE IF @procType IN (3,4,5) --Colon/Sigmo/Procto
	BEGIN
		INSERT INTO #QueryDetails VALUES
		(@procType,		'ERS_ColonAbnoCalibre',			'Calibre',			'Calibre')
		,(@procType,	'ERS_ColonAbnoDiverticulum',	'Diverticulum',		'Diverticulum')
		,(@procType,	'ERS_ColonAbnoHaemorrhage',		'Haemorrhage',		'Haemorrhage')
		,(@procType,	'ERS_ColonAbnoLesions',			'Lesions',			'Lesions')
		,(@procType,	'ERS_ColonAbnoMiscellaneous',	'',					'Miscellaneous')
		,(@procType,	'ERS_ColonAbnoMucosa',			'Mucosa',			'Mucosa')
		,(@procType,	'ERS_ColonAbnoperianallesions',	'Perianal lesions',	'Perianal Lesions')
		,(@procType,	'ERS_ColonAbnoVascularity',		'Vascularity',		'Vascularity')
		,(@procType,	'ERS_UpperGITherapeutics',		'Therapeutic procedure(s)',	'Therapeutic Procedures')
		,(@procType,	'ERS_UpperGISpecimens',			'Specimens taken',	'Specimens Taken')
	END
	ELSE IF @procType IN (8) --Antegrade
	BEGIN
		INSERT INTO #QueryDetails VALUES 
		(@procType,		'ERS_CommonAbnoAtrophic',		'Atrophic duodenum','Atrophic Duodenum')
		,(@procType,	'ERS_CommonAbnoDiverticulum',	'Diverticulum',		'Diverticulum/Other')
		,(@procType,	'ERS_ColonAbnoDiverticulum',	'Diverticulum',		'Diverticulum')
		,(@procType,	'ERS_CommonAbnoDuodenalUlcer',	'',					CASE WHEN @region = 'Jejunum' THEN 'Jejunal Ulcer' WHEN @region = 'Ileum' THEN 'Ileal Ulcer' ELSE 'Duodenal Ulcer' END)
		,(@procType,	'ERS_CommonAbnoDuodenitis',		'',					CASE WHEN @region = 'Jejunum' THEN 'Jejunitis' WHEN @region = 'Ileum' THEN 'Ileitis' ELSE 'Duodenitis' END)
		,(@procType,	'ERS_ColonAbnoLesions',			'Lesions',			'Lesions')
		,(@procType,	'ERS_CommonAbnoScaring',		'',					'Scarring/Stenosis')
		,(@procType,	'ERS_CommonAbnoTumour',			'',					'Tumour')
		,(@procType,	'ERS_CommonAbnoVascularLesions','Vascular lesions',	'Vascular Lesions')
		,(@procType,	'ERS_UpperGITherapeutics',		'Therapeutic procedure(s)',	'Therapeutic Procedures')
		,(@procType,	'ERS_UpperGISpecimens',			'Specimens taken',	'Specimens Taken')
	END
	ELSE IF @procType IN (9) --Retrograde
	BEGIN
		INSERT INTO #QueryDetails VALUES
		(@procType,		'ERS_ColonAbnoCalibre',			'Calibre',			'Calibre')
		,(@procType,	'ERS_ColonAbnoDiverticulum',	'Diverticulum',		'Diverticulum')
		,(@procType,	'ERS_ColonAbnoHaemorrhage',		'Haemorrhage',		'Haemorrhage')
		,(@procType,	'ERS_ColonAbnoLesions',			'Lesions',			'Lesions')
		,(@procType,	'ERS_ColonAbnoMiscellaneous',	'',					'Miscellaneous')
		,(@procType,	'ERS_ColonAbnoMucosa',			'Mucosa',			'Mucosa')
		,(@procType,	'ERS_ColonAbnoperianallesions',	'Perianal lesions',	'Perianal Lesions')
		,(@procType,	'ERS_ColonAbnoVascularity',		'Vascularity',		'Vascularity')
		,(@procType,	'ERS_ERCPTherapeutics',			'Therapeutic procedure(s)',	'Therapeutic Procedures')
		,(@procType,	'ERS_UpperGISpecimens',			'Specimens taken',	'Specimens Taken')
	END
	ELSE IF @procType IN (10, 11, 12) --Bronchoscopy, EBUS, Thoracoscopy
	BEGIN
		INSERT INTO #QueryDetails VALUES
		(@procType,	'ERS_BRTSpecimens',			'Specimens taken',			'Specimens Taken')
	END

	DECLARE qry_cursor CURSOR FOR 
	SELECT ProcType, TableName, AbnoNodeName, Identifier FROM #QueryDetails

	OPEN qry_cursor 
    FETCH NEXT FROM qry_cursor INTO @ProcType, @TableName, @AbnoNodeName, @Identifier

    WHILE @@FETCH_STATUS = 0
    BEGIN
		SET @summaryWhole = ''
		SET @none = NULL
		SET @opDiv = '''<table><tr><td style="padding-left:25px;padding-right:50px;">'' + ' 
		SET @clDiv = ' + ''</td></tr></table>'''
		SET @indent = '&nbsp;- ';		SET @br = '<br />'
		SET @opBold = '<b>';			SET @clBold = '</b>'
		SET @fullStop = '.';			SET @colon = ': '
		SET @fldNone = 'None';			SET @emptyStr = ''
		
		IF @TableName = 'ERS_UpperGIAbnoLumen' SET @fldNone = 'NoBlood'
		ELSE IF @TableName IN ('ERS_ERCPAbnoDuct', 'ERS_ERCPAbnoParenchyma', 'ERS_ERCPAbnoAppearance', 'ERS_ERCPAbnoDiverticulum') SET @fldNone = 'Normal'
		ELSE SET @fldNone = 'None'

		--Get Summary from respective table
		IF @TableName = 'ERS_Sites'
			BEGIN
				SET @SQLString = 'SELECT @summaryWhole = AdditionalNotes FROM ' + @TableName + '  
							WHERE SiteId =  ' + CONVERT(VARCHAR,@SiteId) + ' AND ISNULL(AdditionalNotes,'''') <> '''' '
				SET @fullStop = @emptyStr
			END
		ELSE
			BEGIN
				SET @SQLString = 'SELECT @summaryWhole = Summary, @none = [' + @fldNone + '] FROM ' + @TableName + '  
							WHERE SiteId =  ' + CONVERT(VARCHAR,@SiteId) + ' AND ISNULL(Summary,'''') <> '''' '
			END

		EXECUTE sp_executesql @SQLString, N'@summaryWhole VARCHAR(MAX) OUTPUT, @none TINYINT OUTPUT', @summaryWhole OUTPUT, @none OUTPUT

		IF @Identifier = 'Therapeutic Procedures' 
		BEGIN
			IF ISNULL(@none,0) = 0 AND LEN(@summaryWhole) > 0
			BEGIN
				SET @fullStop = @emptyStr
				SET @abnoTheraPresent = 1
		END
		ELSE 
		BEGIN
				SET @opDiv = @emptyStr;		SET @clDiv = @emptyStr
				SET @opBold = @emptyStr;	SET @clBold = @emptyStr
		END
		END
		ELSE 
		BEGIN
			IF @Identifier = 'Specimens Taken' 
			BEGIN
				--IF therapeutics present, remove line before specimens
				IF @abnoTheraPresent = 1 SET @br = @emptyStr
			END
			ELSE 
			BEGIN
				SET @opBold = @emptyStr;	SET @clBold = @emptyStr
			END
			SET @opDiv = @emptyStr ;		SET @clDiv = @emptyStr
		END

		IF ISNULL(@summaryWhole,'') <> ''
		BEGIN
			SET @summaryWhole = REPLACE(@summaryWhole,'''','''''')

			--If None is clicked, prefix not required (e.g "Oesophagitis : No Oesophagitis." should be "No Oesophagitis.")
			--Prefix (@AbnoNodeName) is required for Lumen even if None (Blood free) is selected
			IF (ISNULL(@none,0) = 1 OR @AbnoNodeName = '') AND @TableName <> 'ERS_UpperGIAbnoLumen'
			BEGIN	
				SET @AbnoNodeName = '';		SET @colon = ''
			END
			ELSE
			BEGIN
				SET @colon = ': '
			END
		
			SET @tmpSummaryAbno = ' CASE WHEN ''' + @summaryWhole + ''' IN ('''', ''' + @AbnoNodeName + ''') THEN ''' +  @indent + @AbnoNodeName + '' + @fullStop + '''' +
									' ELSE  ''' + @indent + @opBold + @AbnoNodeName + @clBold + @colon + ''' + ' + @opDiv + '''' + @summaryWhole + @fullStop + '''' + @clDiv +
								' END'

			SET @tmpSummaryAbnoLinks = 'CASE WHEN ''' + @summaryWhole + ''' IN ('''', ''' + @AbnoNodeName + ''') THEN ''' +  @indent + @AbnoNodeName + ''' + REPLACE(REPLACE(''' + @htmlAnchorCode + ''',''{0}'',''' + @Identifier + '''),''{1}'',''' + @AbnoNodeName + ''') + ''' + @fullStop + '''' +
										' ELSE  ''' +  @indent + @opBold + @AbnoNodeName + @clBold + @colon + ''' + REPLACE(REPLACE(''' + @htmlAnchorCode + ''',''{0}'',''' + @Identifier + '''),''{1}'',' +  @opDiv + '''' + @summaryWhole + @fullStop + '''' +	 @clDiv +')  ' +
									' END'

		SET @SQLString = 'SELECT ' +
							CASE WHEN @Identifier = 'Specimens Taken'			THEN '@summarySpecimens = @summarySpecimens '
								 WHEN @Identifier = 'Therapeutic Procedures'	THEN '@summaryTherapeutics = @summaryTherapeutics '
								 ELSE '@summaryAbnormalities = @summaryAbnormalities ' END +
										' + ''' + @br  + ''' + '  + @tmpSummaryAbno + ', ' +

							CASE WHEN @Identifier = 'Specimens Taken'			THEN '@summarySpecimensWithHyperLinks = @summarySpecimensWithHyperLinks '
								 WHEN @Identifier = 'Therapeutic Procedures'	THEN '@summaryTherapeuticsWithHyperLinks = @summaryTherapeuticsWithHyperLinks '
								 ELSE '@summaryAbnormalitiesWithHyperLinks = @summaryAbnormalitiesWithHyperLinks ' END +
											' + ''' + @br  + ''' + '  + @tmpSummaryAbnoLinks 						

		IF @Identifier = 'Specimens Taken'
			EXECUTE sp_executesql @SQLString, N'@summarySpecimens VARCHAR(MAX) OUTPUT,@summarySpecimensWithHyperLinks VARCHAR(MAX) OUTPUT', 
						@summarySpecimens = @summarySpecimens OUTPUT, @summarySpecimensWithHyperLinks=@summarySpecimensWithHyperLinks OUTPUT
		ELSE IF @Identifier = 'Therapeutic Procedures'
			EXECUTE sp_executesql @SQLString, N'@summaryTherapeutics VARCHAR(MAX) OUTPUT,@summaryTherapeuticsWithHyperLinks VARCHAR(MAX) OUTPUT', 
						@summaryTherapeutics = @summaryTherapeutics OUTPUT, @summaryTherapeuticsWithHyperLinks=@summaryTherapeuticsWithHyperLinks OUTPUT
		ELSE
			EXECUTE sp_executesql @SQLString, N'@summaryAbnormalities VARCHAR(MAX) OUTPUT,@summaryAbnormalitiesWithHyperLinks VARCHAR(MAX) OUTPUT', 
						@summaryAbnormalities = @summaryAbnormalities OUTPUT, @summaryAbnormalitiesWithHyperLinks=@summaryAbnormalitiesWithHyperLinks OUTPUT
		END

		FETCH NEXT FROM qry_cursor INTO @ProcType, @TableName, @AbnoNodeName, @Identifier
	END

	CLOSE qry_cursor
    DEALLOCATE qry_cursor

	DROP TABLE #QueryDetails


	-- Update the current site's summary
	UPDATE ERS_Sites 
	SET	
		SiteSummary = @summaryAbnormalities,
		SiteSummarySpecimens = @summarySpecimens,
		SiteSummaryTherapeutics = @summaryTherapeutics,
		SiteSummaryWithLinks = @summaryAbnormalitiesWithHyperLinks,
		SiteSummarySpecimensWithLinks = @summarySpecimensWithHyperLinks,
		SiteSummaryTherapeuticsWithLinks = @summaryTherapeuticsWithHyperLinks
	WHERE 
		SiteId = @siteId

	-- Update the summary of the procedure (all the sites)
	EXEC procedure_summary_update @procId
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------209 Create Proc site_details_menu_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'site_details_menu_select','S';
GO

CREATE PROCEDURE [dbo].[site_details_menu_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

DECLARE	@ProcedureType INT
DECLARE @Region VARCHAR (500)
DECLARE	@Area VARCHAR (50)
DECLARE	@ProcedureId INT

CREATE TABLE #Menus (
	[SiteId] INT,
	[ProcedureType] INT,
	[Region] VARCHAR(500),	
	[ParentMenu] VARCHAR (500),
	[Menu] VARCHAR (500),
	[NavigateUrl] VARCHAR (4000),
	[SortOrder] TINYINT
)

DECLARE @SiteNo INT = NULL

SELECT @SiteNo = SiteNo FROM ERS_Sites WHERE SiteId = @SiteId

IF @SiteNo = 0
	SET @SiteId = dbo.fnGetPrimeSiteId(@SiteId)
ELSE IF @SiteNo = -77   --'SiteNo is set to -77 for sites By Distance (Col & Sig only)
	SELECT @ProcedureType = 3, @Region = 'Anus'
ELSE
	SELECT @ProcedureType = p.ProcedureType, @Region = r.Region, @ProcedureId = p.ProcedureId
	FROM ERS_Sites s
	JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	JOIN ERS_Regions r ON s.RegionId = r.RegionId
	WHERE SiteId = @SiteId

IF @ProcedureType IN (1,6) --Gastroscopy / EUS(OGD)
BEGIN

	SELECT TOP 1 @Area = [Area] 
	FROM ERS_AbnormalitiesMatrixUpperGI
	WHERE [ProcedureType] = @ProcedureType 
	AND [Region] = @Region

	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu])
	SELECT 
		@SiteId,
		[ProcedureType], 
		[Region], 
		'Abnormalities' AS [ParentMenu], 
		[Menu]
	FROM 
	(
		SELECT * 
		FROM [ERS_AbnormalitiesMatrixUpperGI] 
		WHERE [ProcedureType] = @ProcedureType 
		AND [Region] = @Region
	) a
	UNPIVOT
	(
		[Display] 
		FOR [Menu] IN ([Gastritis], [Gastric Ulcer], [Lumen], [Malignancy], [Post Surgery], 
						[Deformity], [Polyps], [Varices], [Hiatus Hernia], [Achalasia], 
						[Oesophagitis], [Barretts], [Miscellaneous], [Diverticulum/Other], [Tumour], 
						[Duodenitis], [Pyloric Ulcer], [Duodenal Ulcer], [Scarring/Stenosis], [Vascular Lesions],
						[Atrophic Duodenum], [Mediastinal])
	) b
	WHERE [Display] = 1

	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu], [NavigateUrl], [SortOrder])
	SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/OGDTherapeuticProcedures.aspx', 1
	--SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/Abnormalities/OGD/Lumen.aspx'
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Specimens/OGDSpecimensTaken.aspx', 2
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Additional notes', '', '~/Products/Gastro/Notes/Notes.aspx', 3
	--SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Abnormalities/OGD/Lumen.aspx'
END

ELSE IF @ProcedureType IN (2,7) --ERCP / EUS(HPB)
BEGIN
	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu])
	SELECT 
		@SiteId,
		[ProcedureType], 
		[Region], 
		'Abnormalities' AS [ParentMenu], 
		[Menu]
	FROM 
	(
		SELECT * 
		FROM [ERS_AbnormalitiesMatrixERCP] 
		WHERE [ProcedureType] = @ProcedureType 
		AND [Region] = @Region
	) a
	UNPIVOT
	(
		[Display] 
		FOR [Menu] IN ([Gall Bladder], [Duct], [Parenchyma], [Appearance], [Diverticulum], [Tumour], [Diverticulum/Other], 
						[TumourCommon],[Duodenitis],[Duodenal Ulcer],[Scarring/Stenosis],[Vascular Lesions],[Atrophic Duodenum], [Site])
	) b
	WHERE [Display] = 1

	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu], [NavigateUrl], [SortOrder])
	--SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/ERCPTherapeuticProcedures.aspx'
	--SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/Abnormalities/OGD/Lumen.aspx'
	SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/ERCPTherapeuticProcedures.aspx', 1
	UNION ALL
	--SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Specimens/ERCPSpecimensTaken.aspx'
	--SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Abnormalities/OGD/Lumen.aspx'
	SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Specimens/OGDSpecimensTaken.aspx', 2
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Diagnoses', '', '~/Products/Gastro/Abnormalities/Common/Diagnoses.aspx', 3
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Additional notes', '', '~/Products/Gastro/Notes/Notes.aspx', 4
	
END

ELSE IF @ProcedureType IN (3,4,5) --Colonoscopy / Proctoscopy / Sigmoidoscopy
BEGIN
	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu])
	SELECT 
		@SiteId,
		[ProcedureType], 
		[Region], 
		'Abnormalities' AS [ParentMenu], 
		[Menu]
	FROM 
	(
		SELECT * 
		FROM [ERS_AbnormalitiesMatrixColon] 
		WHERE [ProcedureType] = @ProcedureType 
		AND [Region] = @Region
	) a
	UNPIVOT
	(
		[Display] 
		FOR [Menu] IN ([Calibre],[Mucosa], [Diverticulum], [Lesions], [Vascularity], [Haemorrhage], [Miscellaneous], [Perianal Lesions])
	) b
	WHERE [Display] = 1

	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu], [NavigateUrl], [SortOrder])
	--SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/ColonTherapeuticProcedures.aspx'
	--SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/Abnormalities/OGD/Lumen.aspx'
	SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/OGDTherapeuticProcedures.aspx', 1
	UNION ALL
	--SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Specimens/ColonSpecimensTaken.aspx'
	--SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Abnormalities/OGD/Lumen.aspx'
	SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Specimens/OGDSpecimensTaken.aspx', 2
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Additional notes', '', '~/Products/Gastro/Notes/Notes.aspx', 3
END

ELSE IF @ProcedureType IN (8) --Antegrade
BEGIN
	SELECT TOP 1 @Area = [Area] 
	FROM [ERS_AbnormalitiesMatrixAntegrade]
	WHERE [ProcedureType] = @ProcedureType 
	AND [Region] = @Region

	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu])
	SELECT 
		@SiteId,
		[ProcedureType], 
		[Region], 
		'Abnormalities' AS [ParentMenu], 
		CASE WHEN region = 'Jejunum' AND [Menu] = 'Diverticulum/Other' THEN 'Diverticulum' ELSE [Menu] END AS Menu
	FROM 
	(
		SELECT * 
		FROM [ERS_AbnormalitiesMatrixAntegrade] 
		WHERE [ProcedureType] = @ProcedureType 
		AND [Region] = @Region
	) a
	UNPIVOT
	(
		[Display] 
		FOR [Menu] IN ([Gastritis], [Gastric Ulcer], [Lumen], [Malignancy], [Post Surgery], 
						[Deformity], [Polyps], [Varices], [Hiatus Hernia], [Achalasia], 
						[Oesophagitis], [Barretts], [Miscellaneous], [Diverticulum/Other], [Tumour], 
						[Duodenitis], [Pyloric Ulcer], [Duodenal Ulcer], 
						[Lesions],[Jejunitis],[Jejunal Ulcer],[Ileitis],[Ileal Ulcer],
						[Scarring/Stenosis], [Vascular Lesions],
						[Atrophic Duodenum])
	) b
	WHERE [Display] = 1

	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu], [NavigateUrl], [SortOrder])
	SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/OGDTherapeuticProcedures.aspx', 1
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Specimens/OGDSpecimensTaken.aspx', 2
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Additional notes', '', '~/Products/Gastro/Notes/Notes.aspx', 3
END

ELSE IF @ProcedureType IN (9) --Retrograde
BEGIN
	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu])
	SELECT 
		@SiteId,
		[ProcedureType], 
		[Region], 
		'Abnormalities' AS [ParentMenu], 
		[Menu]
	FROM 
	(
		SELECT * 
		FROM [ERS_AbnormalitiesMatrixRetrograde] 
		WHERE [ProcedureType] = @ProcedureType 
		AND [Region] = @Region
	) a
	UNPIVOT
	(
		[Display] 
		FOR [Menu] IN ([Calibre],[Mucosa], [Diverticulum], [Lesions], [Vascularity], [Haemorrhage])
	) b
	WHERE [Display] = 1

	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu], [NavigateUrl], [SortOrder])
	--SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/ColonTherapeuticProcedures.aspx'
	--SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/Abnormalities/OGD/Lumen.aspx'
	SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/OGDTherapeuticProcedures.aspx', 1
	UNION ALL
	--SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Specimens/ColonSpecimensTaken.aspx'
	--SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Abnormalities/OGD/Lumen.aspx'
	SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Gastro/Specimens/OGDSpecimensTaken.aspx', 2
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Additional notes', '', '~/Products/Gastro/Notes/Notes.aspx', 3
END

ELSE IF @ProcedureType IN (10,11) -- Bronchoscopy / EBUS
BEGIN
	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu])
	SELECT 
		@SiteId,
		[ProcedureType], 
		[Region], 
		'Abnormalities' AS [ParentMenu], 
		[Menu]
	FROM 
	(
		SELECT * 
		FROM [ERS_AbnormalitiesMatrixBRT] 
		WHERE [ProcedureType] = @ProcedureType 
		--AND [Region] = @Region      -- Abnormality is the same for all BRT regions 
	) a
	UNPIVOT
	(
		[Display] 
		FOR [Menu] IN ([Abnormality Descriptions], [EBUS Abnormality Descriptions])
	) b
	WHERE [Display] = 1

	INSERT INTO #Menus ([SiteId], [ProcedureType], [Region], [ParentMenu], [Menu], [NavigateUrl], [SortOrder])
	SELECT @SiteId, @ProcedureType, @Region, 'Therapeutic Procedures', '', '~/Products/Gastro/TherapeuticProcedures/OGDTherapeuticProcedures.aspx', 1
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Specimens Taken', '', '~/Products/Broncho/Specimens/BronchoSpecimens.aspx', 2
	UNION ALL
	SELECT @SiteId, @ProcedureType, @Region, 'Additional notes', '', '~/Products/Gastro/Notes/Notes.aspx', 3
END

UPDATE a
SET NavigateUrl = b.NavigateUrl
FROM #Menus a
LEFT JOIN ERS_SiteDetailsMenuUrls b ON a.Menu = b.Menu
WHERE b.ProcedureType = @ProcedureType

UPDATE #Menus SET Menu = 'Tumour' WHERE Menu = 'TumourCommon'

SELECT 
	m.ProcedureType,
	m.Region,
	m.ParentMenu, 
	m.Menu,
	m.NavigateUrl, 
	CASE WHEN r.RecordCountId IS NULL THEN 0 ELSE 1 END AS RecordExists,
	ISNULL(@Area,ISNULL(@Region,'')) AS Area
FROM 
	#Menus m
LEFT OUTER JOIN
	ERS_RecordCount r ON 
		(m.SiteId = r.SiteId OR
			(@ProcedureType IN (2,7) AND r.ProcedureId = @ProcedureId AND r.Identifier = 'Diagnoses')) --These conditions for Diagnoses only (for the whole procedure unlike the other items which are per site)
		AND (m.Menu = r.Identifier OR m.ParentMenu = r.Identifier)
				--OR LEFT(m.Menu,12) = 'Diverticulum') -- embolden 'Diverticulum/Other' when its attributes have been set.
ORDER BY m.SortOrder, m.Menu

DROP TABLE #Menus

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------209a Create Proc ogd_previous_gastric_ulcer.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_previous_gastric_ulcer','S';
GO

CREATE PROCEDURE [dbo].[ogd_previous_gastric_ulcer]
(
	@ProcedureId INT,
	@DisplayAlertOnly BIT,
	@OperatingHospitalId INT
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	DECLARE	@PatientId INT = 0
			,@returnValue VARCHAR(500) = ''
			,@procDate DATETIME
			,@FollowUp BIT = 0

	SELECT @PatientId=PatientId, @procDate=CreatedOn FROM ERS_Procedures WHERE ProcedureId = @ProcedureId


	--Check for this procedure if Ulcer or Healing Ulcer has been entered
	IF EXISTS(SELECT 1
					FROM [ERS_UpperGIAbnoGastricUlcer] g
					JOIN ERS_Sites s ON s.SiteId = g.SiteId
					JOIN ERS_Procedures p ON p.ProcedureId = s.ProcedureId AND p.ProcedureId = @ProcedureId AND p.PatientId = @PatientId
					WHERE HealingUlcer=1 OR NotHealed=1 OR HealedUlcer=1)
		SET @FollowUp = 1

	--If follow-up (Not Healed, Healing or Healed) = 1 -> has already been recorded, no need to display alert again
	--but patient had previous Ulcer

	IF @DisplayAlertOnly = 1 AND @FollowUp = 1 
		SELECT '' --Return empty string not to display alert 
	ELSE
	BEGIN
		CREATE TABLE #previousProc (regionName VARCHAR(100), procDate VARCHAR(25));

		--Check if patient had gastric ulcer previously
		INSERT INTO #previousProc
		SELECT  r.Region, CONVERT(VARCHAR(11),p.CreatedOn,106 )
		FROM ERS_UpperGIAbnoGastricUlcer g
		JOIN ERS_Sites s ON g.SiteId = s.SiteId
		JOIN ERS_Regions r ON s.RegionID = r.RegionId 
		JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId 
						AND p.PatientId = @PatientId AND p.ProcedureId <> @ProcedureId AND p.CreatedOn <= @procDate 
		WHERE g.Ulcer = 1
		ORDER BY p.CreatedOn DESC

		IF (SELECT IncludeUGI FROM ERS_SystemConfig WHERE OperatingHospitalId=@OperatingHospitalId) = 1 
			DECLARE @sql nvarchar = '
			INSERT INTO #previousProc
			SELECT s.Region, CONVERT(VARCHAR(11),e.[Episode date],106 ) 
			FROM [AUpper GI Gastric Ulcer/Malignancy] a 
			JOIN Episode e ON a.[Episode No] = e.[Episode No] 
			JOIN [Upper GI Sites] s ON s.[Episode No] = e.[Episode No] 
			WHERE a.[Patient No] = (SELECT [Combo ID] FROM Patient WHERE [Patient No] = @PatientId)
			AND a.Ulcer = -1
			ORDER BY e.[Episode date] DESC'
			EXEC sp_executesql @sql

		IF (SELECT COUNT(*) FROM #previousProc) > 0
		BEGIN
			SELECT @returnValue = COALESCE(@returnValue + ', ', '') + ISNULL(LOWER(regionName),'') + ' on ' + procDate
			FROM #previousProc
			WHERE procDate IS NOT NULL
		END

		SET @returnValue = LTRIM(RTRIM(@returnValue))
		IF LEFT(@returnValue,2) = ', ' SET @returnValue = RIGHT(@returnValue, LEN(@returnValue) - 2)

		DROP TABLE #previousProc

		SELECT @returnValue
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------210 Create Proc abnormalities_gastritis_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_gastritis_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_gastritis_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	[SiteId],
	[None],
	[Erythematous],
	[ErythematousSeverity],
	[ErythematousBleeding],
	[FlatErosive],
	[FlatErosiveSeverity],
	[FlatErosiveBleeding],
	[RaisedErosive],
	[RaisedErosiveSeverity],
	[RaisedErosiveBleeding],
	[Atrophic],
	[AtrophicSeverity],
	[AtrophicBleeding],
	[Haemorrhagic],
	[HaemorrhagicSeverity],
	[HaemorrhagicBleeding],
	[Reflux],
	[RefluxSeverity],
	[RefluxBleeding],
	[RugalHyperplastic],
	[RugalHyperplasticSeverity] ,
	[RugalHyperplasticBleeding] ,
	[Vomiting],
	[VomitingSeverity],
	[VomitingBleeding],
	[PromAreaeGastricae],
	[PromAreaeGastricaeSeverity],
	[EUSproctype],
	[Summary]
FROM
	[ERS_UpperGIAbnoGastritis]
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------211 Create Proc abnormalities_gastritis_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_gastritis_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_gastritis_save]
(
	@SiteId INT,
	@None BIT,
	@Erythematous BIT,
	@ErythematousSeverity SMALLINT,
	@ErythematousBleeding SMALLINT,
	@FlatErosive BIT,
	@FlatErosiveSeverity SMALLINT,
	@FlatErosiveBleeding SMALLINT,
	@RaisedErosive BIT,
	@RaisedErosiveSeverity SMALLINT,
	@RaisedErosiveBleeding SMALLINT,
	@Atrophic BIT,
	@AtrophicSeverity SMALLINT,
	@AtrophicBleeding SMALLINT,
	@Haemorrhagic BIT,
	@HaemorrhagicSeverity SMALLINT,
	@HaemorrhagicBleeding SMALLINT,
	@Reflux BIT,
	@RefluxSeverity SMALLINT,
	@RefluxBleeding SMALLINT,
	@RugalHyperplastic BIT,
	@RugalHyperplasticSeverity SMALLINT,
	@RugalHyperplasticBleeding SMALLINT,
	@Vomiting BIT,
	@VomitingSeverity SMALLINT,
	@VomitingBleeding SMALLINT,
	@PromAreaeGastricae BIT,
	@PromAreaeGastricaeSeverity SMALLINT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoGastritis WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoGastritis (
			SiteId,
			[None],
			Erythematous,
			ErythematousSeverity,
			ErythematousBleeding,
			FlatErosive,
			FlatErosiveSeverity,
			FlatErosiveBleeding,
			RaisedErosive,
			RaisedErosiveSeverity,
			RaisedErosiveBleeding,
			Atrophic,
			AtrophicSeverity,
			AtrophicBleeding,
			Haemorrhagic,
			HaemorrhagicSeverity,
			HaemorrhagicBleeding,
			Reflux,
			RefluxSeverity,
			RefluxBleeding,
			RugalHyperplastic,
			RugalHyperplasticSeverity,
			RugalHyperplasticBleeding,
			Vomiting,
			VomitingSeverity,
			VomitingBleeding,
			PromAreaeGastricae,
			PromAreaeGastricaeSeverity,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Erythematous,
			@ErythematousSeverity,
			@ErythematousBleeding,
			@FlatErosive,
			@FlatErosiveSeverity,
			@FlatErosiveBleeding,
			@RaisedErosive,
			@RaisedErosiveSeverity,
			@RaisedErosiveBleeding,
			@Atrophic,
			@AtrophicSeverity,
			@AtrophicBleeding,
			@Haemorrhagic,
			@HaemorrhagicSeverity,
			@HaemorrhagicBleeding,
			@Reflux,
			@RefluxSeverity,
			@RefluxBleeding,
			@RugalHyperplastic,
			@RugalHyperplasticSeverity,
			@RugalHyperplasticBleeding,
			@Vomiting,
			@VomitingSeverity,
			@VomitingBleeding,
			@PromAreaeGastricae,
			@PromAreaeGastricaeSeverity,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Gastritis',
			1)
	END

	ELSE IF (@None = 0 AND @Erythematous = 0 AND @FlatErosive = 0 AND @RaisedErosive = 0 AND @Atrophic = 0 
			AND @Haemorrhagic = 0 AND @Reflux = 0 AND @RugalHyperplastic = 0 AND @Vomiting = 0 AND @PromAreaeGastricae = 0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoGastritis 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Gastritis'
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoGastritis
		SET 
			[None] = @None,
			Erythematous = @Erythematous,
			ErythematousSeverity = @ErythematousSeverity,
			ErythematousBleeding = @ErythematousBleeding,
			FlatErosive = @FlatErosive,
			FlatErosiveSeverity = @FlatErosiveSeverity,
			FlatErosiveBleeding = @FlatErosiveBleeding,
			RaisedErosive = @RaisedErosive,
			RaisedErosiveSeverity = @RaisedErosiveSeverity,
			RaisedErosiveBleeding = @RaisedErosiveBleeding,
			Atrophic = @Atrophic,
			AtrophicSeverity = @AtrophicSeverity,
			AtrophicBleeding = @AtrophicBleeding,
			Haemorrhagic = @Haemorrhagic,
			HaemorrhagicSeverity = @HaemorrhagicSeverity,
			HaemorrhagicBleeding = @HaemorrhagicBleeding,
			Reflux = @Reflux,
			RefluxSeverity = @RefluxSeverity,
			RefluxBleeding = @RefluxBleeding,
			RugalHyperplastic = @RugalHyperplastic,
			RugalHyperplasticSeverity = @RugalHyperplasticSeverity,
			RugalHyperplasticBleeding = @RugalHyperplasticBleeding,
			Vomiting = @Vomiting,
			VomitingSeverity = @VomitingSeverity,
			VomitingBleeding = @VomitingBleeding,
			PromAreaeGastricae = @PromAreaeGastricae,
			PromAreaeGastricaeSeverity = @PromAreaeGastricaeSeverity,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------212 Create Proc abnormalities_gastritis_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_gastritis_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_gastritis_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
	DECLARE @summary VARCHAR (8000)
	SET @summary=''

	SELECT * INTO #gastritis
	FROM ERS_UpperGIAbnoGastritis 
	WHERE SiteId = @SiteId

	SELECT 
		GastritisItem,
		CASE GastritisItem 
			WHEN 'FlatErosive' THEN 'flat erosive' 
			WHEN 'RaisedErosive' THEN 'raised erosive' 
			WHEN 'RugalHyperplastic' THEN 'rugal hyperplastic' 
			WHEN 'PromAreaeGastricae' THEN 'prom areae gastricae' 
			ELSE LOWER(GastritisItem)
		END AS GastritisItemDesc, 
		Selected
		INTO #main
	FROM 
	(
		SELECT * FROM #gastritis
	) a
	UNPIVOT
	(
		Selected 
		FOR GastritisItem IN ([None],Erythematous,FlatErosive,RaisedErosive,Atrophic,Haemorrhagic,Reflux,
								RugalHyperplastic,Vomiting,PromAreaeGastricae)
	) b
	WHERE Selected = 1

	SELECT 
		GastritisSeverity, GastritisSeveritySelected
		INTO #sev
	FROM 
	(
		SELECT * FROM #gastritis
	) a
	UNPIVOT
	(
		GastritisSeveritySelected 
		FOR GastritisSeverity IN (ErythematousSeverity,FlatErosiveSeverity, RaisedErosiveSeverity,AtrophicSeverity,HaemorrhagicSeverity,
									RefluxSeverity,RugalHyperplasticSeverity,VomitingSeverity,PromAreaeGastricaeSeverity)
	) c
	WHERE ISNULL(GastritisSeveritySelected,0) <> 0
	
	SELECT 
		GastritisBleeding, GastritisBleedingSelected
		INTO #bld
	FROM 
	(
		SELECT * FROM #gastritis
	) a
	UNPIVOT
	(
		GastritisBleedingSelected 
		FOR GastritisBleeding IN (ErythematousBleeding,FlatErosiveBleeding,RaisedErosiveBleeding,AtrophicBleeding,HaemorrhagicBleeding,
									RefluxBleeding,RugalHyperplasticBleeding,VomitingBleeding)
	) c
	WHERE ISNULL(GastritisBleedingSelected,0) <> 0
	
	--SELECT * from #main
	--SELECT * from #sev
	--SELECT * from #bld

	SELECT 
		GastritisItem, 
		c.codekey as GastritisSeverity, 
		c2.codekey as GastritisBleeding, 
		ISNULL(c.codekey,'') + ' ' + GastritisItemDesc +  ISNULL(' with ' + CASE c2.codekey WHEN 'None' THEN 'no' ELSE LOWER(c2.codekey) END + ' bleeding','') AS summary
	INTO #final
	FROM #main a 
	LEFT JOIN #sev b on a.GastritisItem + 'Severity' = b.GastritisSeverity
	LEFT JOIN #bld b2 on a.GastritisItem + 'Bleeding' = b2.GastritisBleeding
	LEFT JOIN ERS_Codes c on b.GastritisSeveritySelected = c.codevalue AND c.code='GastritisSeverity'
	LEFT JOIN ERS_Codes c2 on b2.GastritisBleedingSelected = c2.codevalue AND c2.code='GastritisBleeding'

	--select * from #final

	IF (SELECT COUNT(*) FROM #final) > 1
	BEGIN
		-- Get the concatenated string separated by a delimiter, say $$
		SELECT @summary = COALESCE (
							CASE WHEN @summary = '' THEN summary
							ELSE @summary + '$$' + summary
							END
						,'')
		FROM #final

		-- Set the last occurence of $$ to "and"
		SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and ')

		-- Replace all other occurences of $$ with commas
		SET @summary = REPLACE(@summary, '$$', ', ')
	END

	ELSE
	BEGIN
		SELECT @summary = summary FROM #final
	END

	SET @summary = LOWER(LTRIM(RTRIM(@summary)))
	--SET @summary = LEFT(UPPER(@summary), 1) + RIGHT(LOWER(@summary), LEN(@summary)-1)
	--select @summary
	
	-- Finally, update the summary in gastritis table
	UPDATE ERS_UpperGIAbnoGastritis 
	SET Summary=@summary 
	WHERE SiteId = @SiteId

	DROP TABLE #gastritis
	DROP TABLE #main
	DROP TABLE #sev
	DROP TABLE #bld
	DROP TABLE #final

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------213 Create Proc abnormalities_gastric_ulcer_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_gastric_ulcer_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_gastric_ulcer_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT 
	SiteId,
	[None],
	Ulcer,
	UlcerType,
	UlcerNumber,
	UlcerLargestDiameter,
	UlcerActiveBleeding,
	UlcerActiveBleedingtype,
	UlcerClotInBase,
	UlcerVisibleVessel,
	UlcerVisibleVesselType,
	UlcerOldBlood,
	UlcerMalignantAppearance,
	UlcerPerforation,
	HealingUlcer,
	HealingUlcerType,
	NotHealed,
	HealedUlcer,
	NotHealedText,
	EUSProcType,
	Summary
FROM 
	ERS_UpperGIAbnoGastricUlcer 
WHERE 
	SiteId = @SiteId
	
GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------214 Create Proc abnormalities_gastric_ulcer_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_gastric_ulcer_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_gastric_ulcer_save]
(
	@SiteId INT,
	@None BIT,
	@Ulcer BIT,
	@HealingUlcer BIT,
	@UlcerType SMALLINT,
	@UlcerNumber INT,
	@UlcerLargestDiameter DECIMAL(6,2),
	@UlcerActiveBleeding BIT,
	@UlcerActiveBleedingType SMALLINT,
	@UlcerClotInBase BIT,
	@UlcerVisibleVessel BIT,
	@UlcerVisibleVesselType SMALLINT,
	@UlcerOldBlood BIT,
	@UlcerMalignantApp BIT,
	@UlcerPerforation BIT,
	@HealingUlcerType SMALLINT,
	@NotHealed BIT,
	@NotHealedText VARCHAR(1000),
	@HealedUlcer BIT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		s.SiteId = @SiteId
	
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoGastricUlcer WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoGastricUlcer (
			SiteId,
			[None],
			Ulcer,
			UlcerType,
			UlcerNumber,
			UlcerLargestDiameter,
			UlcerActiveBleeding,
			UlcerActiveBleedingtype,
			UlcerClotInBase,
			UlcerVisibleVessel,
			UlcerVisibleVesselType,
			UlcerOldBlood,
			UlcerMalignantAppearance,
			UlcerPerforation,
			HealingUlcer,
			HealingUlcerType,
			NotHealed,
			NotHealedText,
			HealedUlcer,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Ulcer,
			@UlcerType,
			@UlcerNumber,
			@UlcerLargestDiameter,
			@UlcerActiveBleeding,
			@UlcerActiveBleedingtype,
			@UlcerClotInBase,
			@UlcerVisibleVessel,
			@UlcerVisibleVesselType,
			@UlcerOldBlood,
			@UlcerMalignantApp,
			@UlcerPerforation,
			@HealingUlcer,
			@HealingUlcerType,
			@NotHealed,
			@NotHealedText,
			@HealedUlcer,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Gastric Ulcer',
			1
		)

	END

	ELSE IF (@None = 0 AND @Ulcer = 0 AND @HealingUlcer = 0 AND @NotHealed = 0 AND @HealedUlcer = 0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoGastricUlcer 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Gastric Ulcer'
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoGastricUlcer
		SET 
			[None] = @None,
			Ulcer = @Ulcer,
			UlcerType = @UlcerType,
			UlcerNumber = @UlcerNumber,
			UlcerLargestDiameter = @UlcerLargestDiameter,
			UlcerActiveBleeding = @UlcerActiveBleeding,
			UlcerActiveBleedingtype = @UlcerActiveBleedingtype,
			UlcerClotInBase = @UlcerClotInBase,
			UlcerVisibleVessel = @UlcerVisibleVessel,
			UlcerVisibleVesselType = @UlcerVisibleVesselType,
			UlcerOldBlood = @UlcerOldBlood,
			UlcerMalignantAppearance = @UlcerMalignantApp,
			UlcerPerforation = @UlcerPerforation,
			HealingUlcer = @HealingUlcer,
			HealingUlcerType = @HealingUlcerType,
			NotHealed = @NotHealed,
			NotHealedText = @NotHealedText,
			HealedUlcer = @HealedUlcer,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()

		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------214a Create Proc abnormalities_gastric_ulcer_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_gastric_ulcer_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_gastric_ulcer_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	DECLARE
		@SummaryItems TABLE (SummaryItem VARCHAR(300))
	DECLARE
		@mysummaryitem VARCHAR(300),
		@Summary VARCHAR(4000),
		@proc_date DATETIME,
		@patiend_id INT,
		@patient_combo_id VARCHAR(30),
		@None BIT,
		@Ulcer BIT,
		@UlcerType TINYINT,
		@UlcerNumber INT,
		@UlcerLargestDiameter DECIMAL(6,2),
		@UlcerActiveBleeding BIT,
		@UlcerActiveBleedingType TINYINT,
		@UlcerClotInBase BIT,
		@UlcerVisibleVessel BIT,
		@UlcerVisibleVesselType TINYINT,
		@UlcerOldBlood BIT,
		@UlcerMalignantApp BIT,
		@UlcerPerforation BIT,
		@HealingUlcer BIT,
		@HealingUlcerType TINYINT,
		@NotHealed BIT,
		@NotHealedText VARCHAR(1000),
		@HealedUlcer BIT,
		@PreviousUlcers VARCHAR(2000) = ''

	SELECT 
		@None=[None],
		@Ulcer=Ulcer,
		@UlcerType=UlcerType,
		@UlcerNumber=UlcerNumber,
		@UlcerLargestDiameter=UlcerLargestDiameter,
		@UlcerActiveBleeding=UlcerActiveBleeding,
		@UlcerActiveBleedingtype=UlcerActiveBleedingtype,
		@UlcerClotInBase=UlcerClotInBase,
		@UlcerVisibleVessel=UlcerVisibleVessel,
		@UlcerVisibleVesselType=UlcerVisibleVesselType,
		@UlcerOldBlood=UlcerOldBlood,
		@UlcerMalignantApp=UlcerMalignantAppearance,
		@UlcerPerforation=UlcerPerforation,
		@HealingUlcer=HealingUlcer,
		@HealingUlcerType=HealingUlcerType,
		@NotHealed = NotHealed,
		@NotHealedText = NotHealedText,
		@HealedUlcer = HealedUlcer 
	FROM
		ERS_UpperGIAbnoGastricUlcer
	WHERE
		SiteId = @SiteId

	SET @mysummaryitem = ''
	SET @Summary = ''

	DECLARE @tmpPreviousGastricUlcer TABLE (retVal VARCHAR(2000))
	DECLARE @ProcedureID INT, @OperatingHospitalId INT

	SELECT @ProcedureID=ProcedureID FROM ERS_Sites WHERE SiteId = @SiteId
	SELECT  @OperatingHospitalId = OperatingHospitalID FROM ERS_Procedures WHERE ProcedureId = @ProcedureID

	INSERT INTO @tmpPreviousGastricUlcer EXEC ogd_previous_gastric_ulcer @ProcedureID, 0, @OperatingHospitalId
	SELECT @PreviousUlcers = retVal from @tmpPreviousGastricUlcer

	IF @PreviousUlcers <> ''
		SET @Summary = 'recorded previously in the ' + @PreviousUlcers + '. '
	
	--Build the current Gastric Ulcer summary
	IF @HealedUlcer = 1
	BEGIN
		IF @Summary <> ''
			SET @Summary = @Summary + 'Now healed'
		ELSE
			SET @Summary = @Summary + 'now healed'
	END

	ELSE IF @NotHealed = 1
	BEGIN
		IF @Summary <> ''
			SET @Summary = @Summary + 'Not healing'
		ELSE
			SET @Summary = @Summary + 'not healing'
		IF @NotHealedText <> '' SET @Summary = @Summary + '. ' + dbo.fnFirstLetterUpper(@NotHealedText)
	END

	ELSE IF @HealingUlcer = 1 
	BEGIN
		IF @Summary <> ''
			SET @Summary = @Summary + 'Now healing'
		ELSE
			SET @Summary = @Summary + 'now healing'

		IF @HealingUlcerType = 1
			SET @Summary = @Summary + ': early healing (regenerative mucosa evident)'
		ELSE IF @HealingUlcerType = 2
			SET @Summary = @Summary + ': advanced healing (almost complete re-epithelialisation)'
		ELSE IF @HealingUlcerType = 3
			SET @Summary = @Summary + ': "red scar" stage'
		ELSE IF @HealingUlcerType = 4
			SET @Summary = @Summary + ': ulcer scar deformity'
		ELSE IF @HealingUlcerType = 5
			SET @Summary = @Summary + ': atypical? early gastric cancer'
	END
	
	ELSE IF @None = 1
		SET @Summary = @Summary + 'No gastric ulcer'
	
	ELSE IF @Ulcer = 1 
	BEGIN
		IF @UlcerNumber > 0
			SET @mysummaryitem = @mysummaryitem + CONVERT(VARCHAR(20), @UlcerNumber) + ' '

		IF @UlcerType = 1
			SET @mysummaryitem = @mysummaryitem + 'acute'
		ELSE IF @UlcerType = 2
			SET @mysummaryitem = @mysummaryitem + 'chronic'

		IF @UlcerLargestDiameter > 0
		BEGIN
			IF @UlcerNumber > 1
				SET @mysummaryitem = @mysummaryitem + ' (largest diameter ' + CONVERT(VARCHAR(20), @UlcerLargestDiameter) + ' cm)'
			ELSE
				SET @mysummaryitem = @mysummaryitem + ' (diameter ' + CONVERT(VARCHAR(20), @UlcerLargestDiameter) + ' cm)'
		END

		IF @mysummaryitem <> '' INSERT INTO @SummaryItems VALUES (@mysummaryitem)
		ELSE INSERT INTO @SummaryItems VALUES ('ulcer found')   --('gastric ulcer')

		IF @UlcerActiveBleeding = 1
		BEGIN
			IF @UlcerActiveBleedingType = 1
				INSERT INTO @SummaryItems VALUES ('associated with active bleeding (spurting)')
			ELSE IF @UlcerActiveBleedingType = 2
				INSERT INTO @SummaryItems VALUES ('associated with active bleeding (oozing)')
			ELSE
				INSERT INTO @SummaryItems VALUES ('associated with active bleeding')
		END

		IF @UlcerClotInBase = 1
			INSERT INTO @SummaryItems VALUES ('associated with fresh clot in base')
		
		IF @UlcerVisibleVessel = 1
		BEGIN
			IF @UlcerVisibleVesselType = 1
				INSERT INTO @SummaryItems VALUES ('associated with visible vessel with adherent clot in base')
			ELSE IF @UlcerVisibleVesselType = 2
				INSERT INTO @SummaryItems VALUES ('associated with visible vessel with pigmented base')
			ELSE
				INSERT INTO @SummaryItems VALUES ('associated with visible vessel')
		END

		IF @UlcerOldBlood = 1
			INSERT INTO @SummaryItems VALUES ('associated with overlying old blood')

		IF @UlcerMalignantApp = 1
			INSERT INTO @SummaryItems VALUES ('associated with malignant appearance')

		IF @UlcerPerforation = 1
			INSERT INTO @SummaryItems VALUES ('associated with perforation')

		IF (SELECT COUNT(*) FROM @SummaryItems) > 1
		BEGIN
			-- Get the concatenated string separated by a delimiter, say $$
			SELECT @Summary = 
				COALESCE (
					CASE WHEN @Summary = '' THEN summaryitem
					ELSE @Summary + '$$' + summaryitem
					END
				,'')
			FROM @SummaryItems

			--TODO: Insert comma instead of and, between the items from first column and second column

			-- Set the last occurence of $$ to "and"
			SET @Summary = STUFF(@Summary, len(@Summary) - charindex('$$', reverse(@Summary)), 2, ' and ')

			-- Replace all other occurences of $$ with commas
			SET @Summary = REPLACE(@Summary, '$$', ', ')
		END
		ELSE
		BEGIN
			-- Get the only summary string
			SELECT @Summary = summaryitem
			FROM @SummaryItems
		END
	END
	
	-- Finally update the summary in abnormalities table	
	UPDATE ERS_UpperGIAbnoGastricUlcer 
	SET Summary = RTRIM(@Summary)
	WHERE SiteId = @siteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------215a Create Proc usp_Report_Summary_Select_Hyperlinks.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'usp_Report_Summary_Select_Hyperlinks','S';
GO

CREATE PROCEDURE [dbo].[usp_Report_Summary_Select_Hyperlinks]
(
	@ProcedureId INT,
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE @NPSATable_op VARCHAR(250) = '<table style=""border: 1px solid red;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;width:95%;""><tr><td style=""padding:10px;color:red;"">'
	DECLARE @NPSATable_cl VARCHAR(250) = '</td><td style=""width:5%;padding:5px;""><img src=""/Images/icons/alert.png"" style=""vertical-align:middle; padding:0px 2px 0px 2px;"" /></td></tr></table>'

	IF @SiteId > 0 --Return text for site only
BEGIN
		SELECT ISNULL(s.SiteSummaryWithLinks,'') + ISNULL(s.SiteSummaryTherapeuticsWithLinks,'') + 
				ISNULL(s.SiteSummarySpecimensWithLinks,'') +
				CASE WHEN ISNULL(CONVERT(VARCHAR,PR.PP_NPSAalert),'') <> '' THEN  @NPSATable_op + CONVERT(NVARCHAR(MAX),PR.PP_NPSAalert) +  @NPSATable_cl 
                ELSE '' END + 
				CASE WHEN ISNULL(CONVERT(VARCHAR, PR.PP_InstForCare),'') <> '' THEN  '<br />&nbsp;- ' + CONVERT(NVARCHAR(MAX), PR.PP_InstForCareHeading) + ': ' +
					'<a href="#" class="sitesummary" onclick="OpenSiteDetails(''' + ISNULL((SELECT r.Region FROM ERS_Regions r WHERE s.RegionId = r.RegionId),'') + ''', ' +
					CONVERT(VARCHAR(15),@SiteId) + ',''Therapeutic Procedures'' ' + CONVERT(VARCHAR(15),ISNULL(s.AreaNo,0)) + '  );">' +  CONVERT(NVARCHAR(MAX), PR.PP_InstForCare) + '</a>' 
                ELSE '' END
		FROM ERS_Sites s
		JOIN ERS_Procedures p ON p.ProcedureId = s.ProcedureId
		LEFT JOIN ERS_ProceduresReporting AS PR ON p.ProcedureId=PR.ProcedureId
		WHERE SiteId = @SiteId
	END
	ELSE --Return text for the whole procedure
	BEGIN
		SELECT ISNULL(PR.SummaryWithLinks,'') + 
                CASE WHEN ISNULL(CONVERT(VARCHAR, PR.PP_NPSAalert),'') <> '' THEN  @NPSATable_op + CONVERT(NVARCHAR(MAX), PR.PP_NPSAalert) +  @NPSATable_cl 
                ELSE '' END 
		FROM dbo.ERS_Procedures AS P
		LEFT JOIN dbo.ERS_ProceduresReporting AS PR ON P.ProcedureId = PR.ProcedureId
		WHERE P.ProcedureId = @ProcedureId
	END

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------216 Create Proc required_fields_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'required_fields_select','S';
GO

CREATE PROCEDURE [dbo].[required_fields_select]
(
	@ProcedureType INT,
	@PageName VARCHAR(500),
	@ClassName VARCHAR(500),
	@Required BIT,
	@CommonFields BIT = NULL
)
AS

SET NOCOUNT ON

	SELECT 
		RequiredFieldId,
		--ISNULL(CONVERT(varchar(50), l.[ListItemText]), 'Common') AS ProcedureType,
		'Common' AS ProcedureType,
		PageName,
		ClassName,
		FieldName,
		ValidatorControlId,
		[Required],
		CannotBeSuppressed
	FROM 
		ERS_RequiredFields rf
	--LEFT OUTER JOIN 
	--	ERS_lists l ON rf.ProcedureType = l.[ListItemNo] AND l.[ListDescription] = 'ProcedureType'
	WHERE 
		--((@ProcedureType IS NULL OR ProcedureType = @ProcedureType) OR ProcedureType IS NULL)
		--AND 
		(@PageName IS NULL OR PageName = @PageName)
		AND (@ClassName IS NULL OR ClassName = @ClassName)
		AND (@Required IS NULL OR [Required] = @Required)
		AND (CommonField = CASE WHEN @CommonFields IS NULL THEN CommonField ELSE @CommonFields END)

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------216a Create Proc common_requiredfields.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'common_requiredfields','S';
GO

CREATE Procedure [dbo].[common_requiredfields]
(
       @ProcedureId INT
)
AS
BEGIN

	DECLARE @TextMessage varchar(1000), @PageURL varchar(500), @Required bit, @ProcedureType int

	SET @ProcedureType = (SELECT Proceduretype FROM ERS_Procedures WHERE ProcedureID = @ProcedureID)

	--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='Indications' AND FieldName='Indications' AND [Required]=1)
 --   BEGIN
	SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='Indications' AND FieldName='Indications' AND [Required]=1
	IF @@ROWCOUNT > 0
	BEGIN
		DECLARE @Proced int
		SELECT top 1 @Proced=ProcedureId  FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId

		IF @Proced IS NULL 
		BEGIN
			SELECT @TextMessage + '|' + @PageURL
			RETURN
		END
	END

	--exclude some procedures that don't use this
	--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='PreMed' AND FieldName='Drugs administered' AND [Required]=1)
 --   BEGIN
	SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='PreMed' AND FieldName='Drugs administered' AND [Required]=1
	IF @@ROWCOUNT > 0
	BEGIN
		DECLARE @drugCount tinyint
		SET @drugCount = (SELECT COUNT(DrugNo) FROM ERS_UpperGIPremedication WHERE ProcedureId=@ProcedureId)

		IF @drugCount IS NULL OR @drugCount < 1
		BEGIN
			SELECT @TextMessage + '|' + @PageURL
			RETURN
		END
    END

	--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='QA' AND FieldName='Patient Sedation' AND [Required]=1)
 --   BEGIN
	SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='QA' AND FieldName='Patient Sedation' AND [Required]=1
	IF @@ROWCOUNT > 0
	BEGIN
		DECLARE @PatSedation tinyint, @PatSedationAsleepResponseState tinyint
		SELECT   @PatSedation=PatSedation, @PatSedationAsleepResponseState= PatSedationAsleepResponseState  FROM ERS_UpperGIQA WHERE      ProcedureId = @ProcedureId

		IF (@PatSedation IS NULL OR @PatSedation = 0) OR (@PatSedation = 4 AND (@PatSedationAsleepResponseState is null OR @PatSedationAsleepResponseState =0))
		BEGIN
			SELECT @TextMessage + '|' + @PageURL
			RETURN
		END
    END

	--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='QA' AND FieldName='Patient Discomfort' AND [Required]=1)
 --   BEGIN
	SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='QA' AND FieldName='Patient Discomfort' AND [Required]=1
	IF @@ROWCOUNT > 0
	BEGIN
		DECLARE @PatDiscomfortNurse tinyint
		SELECT   @PatDiscomfortNurse=PatDiscomfortNurse  FROM ERS_UpperGIQA WHERE      ProcedureId = @ProcedureId

		IF @PatDiscomfortNurse IS NULL OR @PatDiscomfortNurse =0
		BEGIN
			SELECT @TextMessage + '|' + @PageURL
			RETURN
		END
    END

	--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='QA' AND FieldName='Complications' AND [Required]=1)
 --   BEGIN
	SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='QA' AND FieldName='Complications' AND [Required]=1
	IF @@ROWCOUNT > 0
	BEGIN
		DECLARE @ComplicationsNone BIT,@PoorlyTolerated BIT,@PatientDiscomfort BIT,@PatientDistress BIT,@InjuryToMouth BIT,@FailedIntubation BIT,@DifficultIntubation BIT,@DamageToScope BIT,@GastricContentsAspiration BIT,@ShockHypotension BIT,@Haemorrhage BIT,@SignificantHaemorrhage BIT,@Hypoxia BIT,@RespiratoryDepression BIT,@RespiratoryArrest BIT,@CardiacArrest BIT,@CardiacArrythmia BIT,@Death BIT,@TechnicalFailure NVARCHAR(1000),@Perforation BIT,@ComplicationsOther BIT
		SELECT  @ComplicationsNone = ComplicationsNone  ,          @PoorlyTolerated =        PoorlyTolerated ,                 @PatientDiscomfort = PatientDiscomfort  ,              @PatientDistress = PatientDistress  ,                  @InjuryToMouth = InjuryToMouth  ,
						@FailedIntubation = FailedIntubation ,                 @DifficultIntubation = DifficultIntubation  ,                   @DamageToScope = DamageToScope ,         @GastricContentsAspiration=GastricContentsAspiration  ,
						@ShockHypotension=ShockHypotension ,                   @Haemorrhage=Haemorrhage ,                    @SignificantHaemorrhage=SignificantHaemorrhage ,                     @Hypoxia=Hypoxia ,                @RespiratoryDepression=RespiratoryDepression ,
						@RespiratoryArrest=RespiratoryArrest ,                 @CardiacArrest=CardiacArrest  ,          @CardiacArrythmia=CardiacArrythmia ,                   @Death=Death  ,                   @TechnicalFailure=TechnicalFailure ,
						@Perforation=Perforation ,               @ComplicationsOther=ComplicationsOther FROM ERS_UpperGIQA WHERE ProcedureId=@ProcedureId

		IF (@ComplicationsNone IS NULL OR @ComplicationsNone = 0) AND        (@PoorlyTolerated IS NULL OR @PoorlyTolerated=0) AND (@PatientDiscomfort is null OR @PatientDiscomfort=0)          AND (@PatientDistress is null OR @PatientDistress=0) 
						AND (@InjuryToMouth is null OR @InjuryToMouth=0) AND (@FailedIntubation is null OR @FailedIntubation=0) AND (@DifficultIntubation is null OR @DifficultIntubation=0)                   AND (@DamageToScope is null OR @DamageToScope =0) AND (@GastricContentsAspiration is null OR @GastricContentsAspiration=0) AND (@ShockHypotension is null OR @ShockHypotension=0)
						AND (@Haemorrhage is null OR @Haemorrhage =0) AND (@SignificantHaemorrhage is null OR @SignificantHaemorrhage=0) AND (@Hypoxia is null OR @Hypoxia=0) AND (@RespiratoryDepression is null OR @RespiratoryDepression=0)
						AND (@RespiratoryArrest is null OR @RespiratoryArrest=0) AND (@CardiacArrest is null OR @CardiacArrest=0) AND (@CardiacArrythmia is null OR @CardiacArrythmia=0) AND (@Death is null OR @Death=0)               AND (@TechnicalFailure is null OR @TechnicalFailure='') AND (@Perforation is null OR @Perforation=0) AND (@ComplicationsOther is null Or @ComplicationsOther=0)
		BEGIN
			SELECT @TextMessage + '|' + @PageURL
			RETURN
		END
    END

	--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='PatientProcedure' AND FieldName='Instruments' AND [Required]=1)
 --   BEGIN
    SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='PatientProcedure' AND FieldName='Instruments' AND [Required]=1
	IF @@ROWCOUNT > 0
	BEGIN
       DECLARE @Instr1 tinyint, @Instr2 tinyint
       SELECT   @Instr1 = [Instrument1], @Instr2 = [Instrument2] FROM ERS_Procedures WHERE       ProcedureId = @ProcedureId
       IF (@Instr1 IS NULL AND @Instr2 IS NULL) OR (@Instr1=0 AND @Instr2=0)
        BEGIN
			SELECT @TextMessage + '|' + @PageURL
			RETURN
        END
    END

	--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='Diagnoses' AND FieldName='Diagnoses' AND [Required]=1)
 --   BEGIN
    SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='Diagnoses' AND FieldName='Diagnoses' AND [Required]=1
	IF @@ROWCOUNT > 0
	BEGIN   
	   DECLARE @DiagnosesID int
	  -- IF @ProcedureType IN (2, 7)
		--SELECT TOP 1 @DiagnosesID=ID  FROM ERS_ERCPDiagnoses WHERE ProcedureId = @ProcedureId
	  -- ELSE
		SELECT top 1 @DiagnosesID=DiagnosesID  FROM [ERS_Diagnoses] WHERE ProcedureId = @ProcedureId AND [VALUE] <> 'False' AND [VALUE] <> '0' AND MatrixCode <> 'Summary' 

       IF @DiagnosesID IS NULL 
        BEGIN
			SELECT @TextMessage + '|' + @PageURL
			RETURN
        END
    END


	IF @ProcedureType= 3 OR @ProcedureType= 4 --only applies to colon
    BEGIN
		--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='PreMed' AND FieldName='Bowel preparation' AND [Required]=1) 
  --      BEGIN
		SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='PreMed' AND FieldName='Bowel preparation' AND [Required]=1
		IF @@ROWCOUNT > 0
		BEGIN 
			DECLARE @BostonBowelPrepScale bit
			SELECT TOP(1) @BostonBowelPrepScale = BostonBowelPrepScale FROM ERS_SystemConfig

			IF @BostonBowelPrepScale = 1
            BEGIN
				Declare @OnNoBowelPrep bit, @OnFormulation varchar(500), @OnRight int, @OnTransverse int, @OnLeft int
				SELECT @OnNoBowelPrep = [OnNoBowelPrep], @OnFormulation=[OnFormulation],  @OnRight=[OnRight], @OnTransverse=[OnTransverse], @OnLeft=[OnLeft] FROM [ERS_BowelPreparation] WHERE ProcedureID=@ProcedureID

				IF (@OnNoBowelPrep IS NULL OR @OnNoBowelPrep = 0) AND (@OnFormulation is null OR @OnFormulation=0) AND (@OnRight is null OR @OnTransverse is null OR @OnLeft is null)
				BEGIN
					SELECT @TextMessage + '|' + @PageURL
					RETURN
				END
            END
            ELSE
            BEGIN
				DECLARE @OffNoBowelPrep bit, @OffFormulation varchar(50), @BowelPrepQuality tinyint
                SELECT @OffNoBowelPrep=[OffNoBowelPrep]  ,@OffFormulation =[OffFormulation] , @BowelPrepQuality = [BowelPrepQuality] FROM [ERS_BowelPreparation] WHERE ProcedureID=@ProcedureID
                
				IF (@OffNoBowelPrep IS NULL OR @OffNoBowelPrep=0) AND (@OffFormulation is null OR @OffFormulation=0) 
                BEGIN
					SELECT @TextMessage + '|' + @PageURL
                    RETURN
                END
			END    
		END


		--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Rectal exam (PR)' AND [Required]=1)
		--BEGIN
		SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Rectal exam (PR)' AND [Required]=1
		IF @@ROWCOUNT > 0
		BEGIN 
			DECLARE @RectalExam bit
			SELECT @RectalExam = [RectalExam] FROM [dbo].[ERS_ColonExtentOfIntubation] WHERE ProcedureId=@ProcedureId

			IF @RectalExam IS NULL 
            BEGIN
				SELECT @TextMessage + '|' + @PageURL
				RETURN
            END
		END

		--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Retroflexion in rectum' AND [Required]=1)
		--BEGIN
		--	SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Retroflexion in rectum'
		--	DECLARE @Retroflexion bit
		--	SELECT @Retroflexion = [Retroflexion] FROM [dbo].[ERS_ColonExtentOfIntubation] WHERE ProcedureId=@ProcedureId

		--	IF @Retroflexion IS NULL 
		--	BEGIN
		--		SELECT @TextMessage + '|' + @PageURL
		--		RETURN
		--	END
		--END

		--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Insertion via' AND [Required]=1)
		--BEGIN
		SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Insertion via' AND [Required]=1
		IF @@ROWCOUNT > 0
		BEGIN 
			DECLARE @InsertionVia tinyint
			SELECT @InsertionVia = [InsertionVia] FROM [dbo].[ERS_ColonExtentOfIntubation] WHERE ProcedureId=@ProcedureId
		   
			IF @InsertionVia IS NULL OR @InsertionVia=0
			BEGIN
				SELECT @TextMessage + '|' + @PageURL
				RETURN
			END
		END

		--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Insertion to' AND [Required]=1)
		--BEGIN
		--	SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Insertion to'
		--	DECLARE @InsertionTo tinyint
		--	SELECT @InsertionTo = [InsertionTo] FROM [dbo].[ERS_ColonExtentOfIntubation] WHERE ProcedureId=@ProcedureId
			
		--	IF @InsertionTo IS NULL OR @InsertionTo=0
		--	BEGIN
		--		SELECT @TextMessage + '|' + @PageURL
		--		RETURN
		--	END
		--END

		--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Insertion limited by' AND [Required]=1)
		--BEGIN
		--	SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='ExtentLim' AND FieldName='Insertion limited by'
		--	DECLARE @InsertionLimitedBy int, @ExtInsertionTo int
		--	SELECT @InsertionLimitedBy = InsertionLimitedBy, @ExtInsertionTo = InsertionTo FROM [dbo].[ERS_ColonExtentOfIntubation] WHERE ProcedureId=@ProcedureId		
																		
		--	IF ISNULL(@InsertionLimitedBy,0) = 0 AND @ExtInsertionTo > 2 AND @ExtInsertionTo NOT IN (5,9,13)
		--	BEGIN
		--		SELECT @TextMessage + '|' + @PageURL
		--		RETURN
		--	END
		--END
	END


	IF @ProcedureType =1 Or @ProcedureType = 6 --only applies to upper GI
    BEGIN
		--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='ExtentOfIntubation' AND FieldName='ExtentOfIntubation' AND [Required]=1)
		--BEGIN
		SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='ExtentOfIntubation' AND FieldName='ExtentOfIntubation' AND [Required]=1
		IF @@ROWCOUNT > 0
		BEGIN 
			DECLARE @CompletionStatus TINYINT
			SELECT @CompletionStatus = CASE WHEN ISNULL(TrainerCompletionStatus,0) = 0 THEN CompletionStatus
										ELSE TrainerCompletionStatus END FROM ERS_UpperGIExtentOfIntubation WHERE ProcedureId = @ProcedureId

			IF @CompletionStatus IS NULL OR @CompletionStatus=0 
			BEGIN
				SELECT @TextMessage + '|' + @PageURL
				RETURN
			END
		END
	END

	IF @ProcedureType = 2 --only applies to ERCP
    BEGIN
		--IF EXISTS(SELECT 1 FROM ERS_RequiredFields WHERE PageName='ExtentOfIntubation' AND FieldName='ExtentOfIntubation' AND [Required]=1)
		--BEGIN
		SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='PapillaryAnatomy' AND FieldName='PapillaryAnatomy' AND [Required]=1
		IF @@ROWCOUNT > 0
		BEGIN 
			DECLARE @FirstERCP BIT
			SELECT @FirstERCP=FirstERCP FROM ERS_Procedures WHERE ProcedureId = @ProcedureId

			IF @FirstERCP IS NULL 
			BEGIN
				SELECT @TextMessage + '|' + @PageURL
				RETURN
			END
		END

		SELECT @TextMessage = TextMessage, @PageURL = PageURL, @Required = [Required] FROM ERS_RequiredFields WHERE PageName='Visualisation' AND FieldName='Duct intended for cannulation' AND [Required]=1
		IF @@ROWCOUNT > 0
		BEGIN 
			DECLARE @IntendedBileDuct tinyint
			SELECT @IntendedBileDuct = CASE WHEN ISNULL(IntendedBileDuct,0)=0 AND
											ISNULL(IntendedPancreaticDuct,0)=0 AND
											ISNULL(IntendedBileDuct_ER,0)=0 AND
											ISNULL(IntendedPancreaticDuct_ER,0)=0 THEN 0
										ELSE 1 END
		    FROM ERS_Visualisation WHERE ProcedureId=@ProcedureId

			IF @IntendedBileDuct IS NULL OR @IntendedBileDuct=0
			BEGIN
				SELECT @TextMessage + '|' + @PageURL
				RETURN
			END
		END
	END

	--All required fields entered, update flag ProcedureCompleted
	IF (SELECT ISNULL(ProcedureCompleted,0) FROM ERS_Procedures WHERE ProcedureId = @ProcedureId)  = 0
	BEGIN
		UPDATE ERS_Procedures SET ProcedureCompleted = 1 WHERE ProcedureId = @ProcedureId
	END

END

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------Create Proc common_select_menu.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_select_menu','S';
GO

CREATE Procedure [dbo].[common_select_menu]
(
	@UserID int,
	@isViewer bit,
	@isDemoVersion bit,
	@MenuCategory varchar(50)
)
AS 

DECLARE @RoleID VARCHAR(70) 
SELECT @RoleID=RoleID FROM ERS_Users where UserID = @UserID

SELECT [item] INTO #tmpRole FROM dbo.fnSplitString(@RoleID,',') 

SELECT [MapID],[ParentID],[NodeName],[MenuCategory],ISNULL([MenuUrl],'') AS MenuUrl ,[isViewer],[isDemoVersion],ISNULL([MenuIcon],'') AS MenuIcon, ISNULL([MenuTooltip],'') AS MenuTooltip , Suppressed
INTO #Menu
FROM [ERS_MenuMap] m LEFT JOIN ERS_Pages ep ON m.PageID = ep.PageID
WHERE MenuCategory = @MenuCategory AND (isViewer = @isViewer OR isViewer=1) AND (isDemoVersion = @isDemoVersion OR isDemoVersion=0) 
AND (m.PageID=0 
	OR 0 <> CASE @UserID   --AccessLevel should be 1(Read-Only) or 9(Full Access) for user to have access. 0 is No Access.
				WHEN -9999 THEN --User Unisoft
					ISNULL((SELECT MAX(AccessLevel) 
							FROM ERS_PagesByRole pr 
							INNER JOIN ERS_Pages p ON p.PageId = pr.PageId 
							WHERE  p.PageId = m.PageID  
							AND pr.RoleID = (SELECT TOP 1 RoleId FROM ERS_Roles WHERE RoleName = 'Unisoft') ),0)
				ELSE
					ISNULL((SELECT MAX(AccessLevel) 
							FROM ERS_PagesByRole pr 
							INNER JOIN  ERS_Users u ON pr.RoleId IN (SELECT [item] FROM #tmpRole)
								AND u.UserId =@UserID  
							INNER JOIN ERS_Pages p ON p.PageId = pr.PageId 
							WHERE  p.PageId = m.PageID) ,0)
			END)

DELETE FROM #Menu WHERE Suppressed=1 OR MenuUrl =''

SELECT [MapID],[ParentID],[NodeName],[MenuCategory],ISNULL([MenuUrl],'') AS MenuUrl ,[isViewer],[isDemoVersion],ISNULL([MenuIcon],'') AS MenuIcon, ISNULL([MenuTooltip],'') AS MenuTooltip, Suppressed
INTO #Menus
FROM [ERS_MenuMap] m
WHERE m.MapID IN (SELECT DISTINCT ParentID FROM #Menu WHERE ParentID IS NOT NULL) 
UNION 
SELECT * FROM  #Menu

SELECT * from #Menus 

DROP TABLE #Menu
DROP TABLE #Menus

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------216c Create Proc common_pagebyrole_select.sql----------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'common_pagebyrole_select', 'S';
GO

CREATE Procedure [dbo].[common_pagebyrole_select]
(
	@RoleID int,
	@GroupID int
)
AS
IF @GroupID =1 
       BEGIN
       SELECT p.*, ISNULL(AccessLevel,0) as AccessLevel FROM ERS_Pages p LEFT JOIN ERS_PagesByRole pr ON pr.PageId = p.PageId AND pr.RoleId = @RoleId ORDER BY p.PageName
       END
ELSE
       BEGIN
       SELECT p.*, ISNULL(AccessLevel,0) as AccessLevel FROM ERS_Pages p LEFT JOIN ERS_PagesByRole pr ON pr.PageId = p.PageId AND pr.RoleId = @RoleId WHERE p.GroupID =@GroupID ORDER BY p.PageName
       END

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------217 Create Proc specimens_ogd_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'specimens_ogd_select', 'S';
GO

CREATE PROCEDURE [dbo].[specimens_ogd_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

DECLARE @SessileNumToLabs INT = 0
    ,@PedunculatedNumToLabs INT = 0
    ,@SubmucosalNumToLabs INT = 0
	,@AbnoPolypsNumToLabs VARCHAR(80) = ''

SELECT
	@SessileNumToLabs = SessileNumToLabs
    ,@PedunculatedNumToLabs = PedunculatedNumToLabs
    ,@SubmucosalNumToLabs = SubmucosalNumToLabs
FROM 
	ERS_UpperGIAbnoPolyps
WHERE 
	SiteId = @SiteId

SELECT
	@SessileNumToLabs = SessileNumToLabs
    ,@PedunculatedNumToLabs = PedunculatedNumToLabs
    ,@SubmucosalNumToLabs = SubmucosalNumToLabs
FROM 
	ERS_UpperGIAbnoPolyps
WHERE 
	SiteId = @SiteId

IF ISNULL(@SessileNumToLabs,0) > 0 OR ISNULL(@PedunculatedNumToLabs,0) > 0 OR ISNULL(@SubmucosalNumToLabs,0) > 0 
BEGIN 
	DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
	DECLARE @XMLlist XML

	IF ISNULL(@SessileNumToLabs,0) > 0		INSERT INTO @tmpDiv (Val) VALUES(CONVERT(VARCHAR,@SessileNumToLabs) + ' sessile')
	IF ISNULL(@PedunculatedNumToLabs,0) > 0 INSERT INTO @tmpDiv (Val) VALUES(CONVERT(VARCHAR,@PedunculatedNumToLabs) + ' pedunculated')
	IF ISNULL(@SubmucosalNumToLabs,0) > 0	INSERT INTO @tmpDiv (Val) VALUES(CONVERT(VARCHAR,@SubmucosalNumToLabs) + ' submucosal')

	SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
	SET @AbnoPolypsNumToLabs = dbo.fnBuildString(@XMLlist)
END

SELECT 
	sp.SiteId,
	[None],
	BrushCytology,
	Biopsy,
	BiopsyQtyHistology,
	BiopsyQtyMicrobiology,
	BiopsyQtyVirology,
	ISNULL(p.ForcepType,0) AS ForcepType,
	p.ForcepSerialNo,
	Urease,
	UreaseResult,
	Polypectomy,
	PolypectomyQty,
	@AbnoPolypsNumToLabs AS AbnoPolyps,
	HotBiopsy,
	NeedleAspirate,
	NeedleAspirateHistology,
	NeedleAspirateMicrobiology,
	NeedleAspirateVirology,
	GastricWashing,
	Bile_PanJuice,
    Bile_PanJuiceCytology,
    Bile_PanJuiceBacteriology,
    Bile_PanJuiceAnalysis,

	BrushBiopsy,
	TumourMarkers,
	AmylaseLipase,
	CytologyHistology,
	EUSFNANumberOfPasses,
	EUSFNANeedleGauge,
	FNB,
	EUSFNBNumberOfPasses,
	EUSFNBNeedleGauge,

	--columns not used on the front end at the time of writing
	PolypsSetByUser,
	BiopsyDistance,
	HotBiopsyDistance,
	PolypectomyDistance,
	BiopsiesTakenAtRandom,
	EUSProcType
FROM 
	[ERS_UpperGISpecimens] sp
JOIN
	ERS_Sites s ON sp.SiteId = s.SiteId
JOIN
	ERS_Procedures p ON s.ProcedureId = p.ProcedureId
WHERE 
	sp.SiteId = @SiteId
	
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------218 Create Proc specimens_ogd_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'specimens_ogd_save', 'S';
GO

CREATE PROCEDURE [dbo].[specimens_ogd_save]
(
	@SiteId INT,
	@None BIT,
	@BrushCytology BIT,
	@Biopsy BIT,
	@biopsiesTakenAtRandom BIT,
	@BiopsyQtyHistology INT,
	@BiopsyQtyMicrobiology INT,
	@BiopsyQtyVirology INT,
	@BiopsyDistance DECIMAL(6,2) = NULL,
	@ForcepType INT,
	@ForcepSerialNo NVARCHAR(50),
	@Urease BIT,
	@UreaseResult TINYINT, --1=Positive/2=Negative
	@Polypectomy BIT,
	@PolypectomyQty INT,
	@HotBiopsy BIT,
	@NeedleAspirate BIT,	
	@NeedleAspirateHistology BIT,
	@NeedleAspirateMicrobiology BIT, 
	@NeedleAspirateVirology BIT,
	@GastricWashing BIT,
	@Bile_PanJuice BIT,
    @Bile_PanJuiceCytology BIT,
    @Bile_PanJuiceBacteriology BIT,
    @Bile_PanJuiceAnalysis BIT,
	@EUSFNANumberOfPasses INT,
	@EUSFNANeedleGauge INT,
	@FNB BIT,
	@EUSFNBNumberOfPasses INT,
	@EUSFNBNeedleGauge INT,
	@BrushBiopsy BIT,
	@TumourMarkers BIT,
	@AmylaseLipase BIT,
	@CytologyHistology BIT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId

	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGISpecimens WHERE SiteId = @SiteId)
	BEGIN
		UPDATE ERS_Procedures
		SET ForcepType = @ForcepType, ForcepSerialNo = @ForcepSerialNo
		WHERE ProcedureId = @proc_id

		INSERT INTO ERS_UpperGISpecimens (
			SiteId,
			[None],
			BrushCytology,
			Biopsy,
			BiopsiesTakenAtRandom,
			BiopsyQtyHistology,
			BiopsyQtyMicrobiology,
			BiopsyQtyVirology,
			BiopsyDistance,
			Urease,
			UreaseResult,
			Polypectomy,
			PolypectomyQty,
			HotBiopsy,
			NeedleAspirate,
			NeedleAspirateHistology,
			NeedleAspirateMicrobiology,
			NeedleAspirateVirology,
			GastricWashing,
			Bile_PanJuice,
			Bile_PanJuiceCytology,
			Bile_PanJuiceBacteriology,
			Bile_PanJuiceAnalysis,
			EUSFNANumberOfPasses,
			EUSFNANeedleGauge,
			FNB,
			EUSFNBNumberOfPasses,
			EUSFNBNeedleGauge,
			BrushBiopsy,
			TumourMarkers,
			AmylaseLipase,
			CytologyHistology,
			WhoCreatedId,
			WhenCreated)
		VALUES (
			@SiteId,
			@None,
			@BrushCytology,
			@Biopsy,
			@BiopsiesTakenAtRandom,
			@BiopsyQtyHistology,
			@BiopsyQtyMicrobiology,
			@BiopsyQtyVirology,
			@BiopsyDistance,
			@Urease,
			@UreaseResult,
			@Polypectomy,
			@PolypectomyQty,
			@HotBiopsy,
			@NeedleAspirate,
			@NeedleAspirateHistology,
			@NeedleAspirateMicrobiology,
			@NeedleAspirateVirology,
			@GastricWashing,
			@Bile_PanJuice,
			@Bile_PanJuiceCytology,
			@Bile_PanJuiceBacteriology,
			@Bile_PanJuiceAnalysis,
			@EUSFNANumberOfPasses,
			@EUSFNANeedleGauge,
			@FNB,
			@EUSFNBNumberOfPasses,
			@EUSFNBNeedleGauge,
			@BrushBiopsy,
			@TumourMarkers,
			@AmylaseLipase,
			@CytologyHistology,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Specimens Taken',
			1)
	END

	ELSE IF (@None = 0 AND @BrushCytology = 0 AND @Biopsy = 0 AND @Urease = 0 AND @Polypectomy = 0 AND @HotBiopsy = 0 
			AND @NeedleAspirate = 0 AND @NeedleAspirateHistology = 0 AND @NeedleAspirateMicrobiology = 0 AND @NeedleAspirateVirology = 0 AND @GastricWashing = 0 
			AND @Bile_PanJuice = 0 AND @FNB = 0 AND @BrushBiopsy = 0 AND @TumourMarkers = 0 AND @AmylaseLipase = 0 AND @CytologyHistology = 0)
	BEGIN
		UPDATE ERS_Procedures
		SET ForcepType = NULL, ForcepSerialNo = NULL
		WHERE ProcedureId = @proc_id

		DELETE FROM ERS_UpperGISpecimens
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Specimens Taken'
	END
	
	ELSE
	BEGIN
		UPDATE ERS_Procedures
		SET ForcepType = @ForcepType, ForcepSerialNo = @ForcepSerialNo
		WHERE ProcedureId = @proc_id

		UPDATE 
			ERS_UpperGISpecimens
		SET 
			[None] = @None,
			BrushCytology = @BrushCytology,
			Biopsy = @Biopsy,
			BiopsiesTakenAtRandom = @BiopsiesTakenAtRandom,
			BiopsyQtyHistology = @BiopsyQtyHistology,
			BiopsyQtyMicrobiology = @BiopsyQtyMicrobiology,
			BiopsyQtyVirology = @BiopsyQtyVirology,
			BiopsyDistance = @BiopsyDistance,
			Urease = @Urease,
			UreaseResult = @UreaseResult,
			Polypectomy = @Polypectomy,
			PolypectomyQty = @PolypectomyQty,
			HotBiopsy = @HotBiopsy,
			NeedleAspirate = @NeedleAspirate,
			NeedleAspirateHistology = @NeedleAspirateHistology,
			NeedleAspirateMicrobiology = @NeedleAspirateMicrobiology,
			NeedleAspirateVirology = @NeedleAspirateVirology,
			GastricWashing = @GastricWashing,
			Bile_PanJuice = @Bile_PanJuice,
			Bile_PanJuiceCytology = @Bile_PanJuiceCytology,
			Bile_PanJuiceBacteriology = @Bile_PanJuiceBacteriology,
			Bile_PanJuiceAnalysis = @Bile_PanJuiceAnalysis,
			EUSFNANumberOfPasses = @EUSFNANumberOfPasses,
			EUSFNANeedleGauge = @EUSFNANeedleGauge,
			FNB = @FNB,
			EUSFNBNumberOfPasses = @EUSFNBNumberOfPasses,
			EUSFNBNeedleGauge = @EUSFNBNeedleGauge,
			BrushBiopsy = @BrushBiopsy,
			TumourMarkers = @TumourMarkers,
			AmylaseLipase = @AmylaseLipase,
			CytologyHistology = @CytologyHistology,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END

	--Awaiting pathology results want to be automatically checked if any specimens have been taken EXCEPT Urease.
	IF (@BrushCytology = 1 OR @Biopsy = 1 OR @Polypectomy = 1 OR @HotBiopsy = 1 
			OR @NeedleAspirate = 1 OR @NeedleAspirateHistology = 1 OR @NeedleAspirateMicrobiology = 1 OR @NeedleAspirateVirology = 1 OR @GastricWashing = 1 
			OR @Bile_PanJuice = 1 OR @FNB = 1 OR @BrushBiopsy = 1 OR @TumourMarkers = 1 OR @AmylaseLipase = 1 OR @CytologyHistology = 1)
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIFollowUp WHERE ProcedureId = @proc_id)
		BEGIN
			INSERT INTO ERS_UpperGIFollowUp (ProcedureId, AwaitingPathologyResults) 
			VALUES (@proc_id, 1)

			INSERT INTO ERS_RecordCount ([ProcedureId], [SiteId], [Identifier],[RecordCount])
			VALUES (@proc_id,NULL,'Follow Up', 1)
		END
		ELSE
		BEGIN
			UPDATE ERS_UpperGIFollowUp
			SET AwaitingPathologyResults = 1
			WHERE ProcedureId = @proc_id
		END
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------219 Create Proc specimens_ogd_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'specimens_ogd_summary_update', 'S';
GO

CREATE PROCEDURE [dbo].[specimens_ogd_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE 
		@summary VARCHAR (8000),
		@tempsummary VARCHAR(1000),
		@RegionId INT,
		@None BIT,
		@BrushCytology BIT,
		@Biopsy BIT,
		@BiopsiesTakenAtRandom BIT,
		@BiopsyQtyHistology INT,
		@BiopsyQtyMicrobiology INT,
		@BiopsyQtyVirology INT,
		@ForcepType SMALLINT,
		@ForcepSerialNo NVARCHAR(50),
		--@ForcepSerialNoDesc VARCHAR(100),
		@Urease BIT,
		@UreaseResult TINYINT,
		@Polypectomy BIT,
		@PolypectomyQty INT,
		@HotBiopsy BIT,
		@NeedleAspirate BIT,	
		@NeedleAspirateHistology BIT,
		@NeedleAspirateMicrobiology BIT, 
		@NeedleAspirateVirology BIT,
		@GastricWashing BIT,
		@Bile_PanJuice BIT,
		@Bile_PanJuiceCytology BIT,
		@Bile_PanJuiceBacteriology BIT,
		@Bile_PanJuiceAnalysis BIT,
		@EUSFNANumberOfPasses INT,
		@EUSFNANeedleGauge INT,
		@FNB BIT,
		@EUSFNBNumberOfPasses INT,
		@EUSFNBNeedleGauge INT,
		@BrushBiopsy BIT,
		@TumourMarkers BIT,
		@AmylaseLipase BIT,
		@CytologyHistology BIT,
		@FullStop VARCHAR(5) = '. '
	
	SELECT 
		@summary = '',
		@RegionId = s.RegionId,
		@None=[None],
		@BrushCytology=BrushCytology,
		@Biopsy=Biopsy,
		@BiopsiesTakenAtRandom=BiopsiesTakenAtRandom,
		@BiopsyQtyHistology=BiopsyQtyHistology,
		@BiopsyQtyMicrobiology=BiopsyQtyMicrobiology,
		@BiopsyQtyVirology=BiopsyQtyVirology,
		@ForcepType = p.ForcepType,
		@ForcepSerialNo = p.ForcepSerialNo,
		--@ForcepSerialNoDesc = l.[ListItemText],
		@Urease=Urease,
		@UreaseResult=UreaseResult,
		@Polypectomy=Polypectomy,
		@PolypectomyQty=PolypectomyQty,
		@HotBiopsy=HotBiopsy,
		@NeedleAspirate=NeedleAspirate,
		@NeedleAspirateHistology=NeedleAspirateHistology,
		@NeedleAspirateMicrobiology=NeedleAspirateMicrobiology,
		@NeedleAspirateVirology=NeedleAspirateVirology,
		@GastricWashing=GastricWashing,
		@Bile_PanJuice = Bile_PanJuice,

		@EUSFNANumberOfPasses = EUSFNANumberOfPasses,
		@EUSFNANeedleGauge = EUSFNANeedleGauge,
		@FNB = FNB,
		@EUSFNBNumberOfPasses = EUSFNBNumberOfPasses,
		@EUSFNBNeedleGauge = EUSFNBNeedleGauge,
		@BrushBiopsy = BrushBiopsy,
		@TumourMarkers = TumourMarkers,
		@AmylaseLipase = AmylaseLipase,
		@CytologyHistology = CytologyHistology
		--@Bile_PanJuiceCytology = Bile_PanJuiceCytology,
		--@Bile_PanJuiceBacteriology = Bile_PanJuiceBacteriology,
		--@Bile_PanJuiceAnalysis = Bile_PanJuiceAnalysis
	FROM
		ERS_UpperGISpecimens sp
	JOIN
		ERS_Sites s ON sp.SiteId = s.SiteId
	JOIN
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	--LEFT OUTER JOIN
	--	ERS_Lists l ON p.ForcepSerialNo = l.[ListItemNo] AND l.[ListDescription] = 'Forcep Serial Numbers'
	WHERE 
		sp.SiteId = @SiteId

	IF @None = 1
		SET @summary = @summary + 'No specimens taken'
	ELSE
	BEGIN

		IF @AmylaseLipase = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Amylase and lipase'
		END

		IF @Bile_PanJuice = 1
		BEGIN
			DECLARE @BileTxt VARCHAR(30) = 'Bile'

			IF (SELECT 1 FROM ERS_Regions WHERE RegionId = @RegionId AND 
				Region IN ('Uncinate Process', 'Head', 'Neck', 'Body', 'Tail', 'Accessory Pancreatic Duct', 'Main Pancreatic Duct') ) = 1
					SET @BileTxt = 'Pancreatic juice'
		
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + @BileTxt
		END

		IF @Biopsy = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Biopsy'

			IF @BiopsyQtyHistology > 0 OR @BiopsyQtyMicrobiology > 0 OR @BiopsyQtyVirology > 0
			BEGIN
				SET @tempsummary = ''
				IF @BiopsiesTakenAtRandom = 1
				BEGIN
					SET @tempsummary = CONVERT(VARCHAR, ISNULL(@BiopsyQtyHistology,0) + ISNULL(@BiopsyQtyMicrobiology,0) + ISNULL(@BiopsyQtyVirology,0) )
										+ ' x random'
				END
				ELSE
				BEGIN
					IF @BiopsyQtyHistology > 0 SET @tempsummary = CONVERT(VARCHAR(10), @BiopsyQtyHistology) + ' to histology'
					IF @BiopsyQtyMicrobiology > 0
					BEGIN
						IF @tempsummary <> '' SET @tempsummary = @tempsummary + ', ' + CONVERT(VARCHAR(10), @BiopsyQtyMicrobiology) + ' to microbiology'
						ELSE SET @tempsummary = CONVERT(VARCHAR(10), @BiopsyQtyMicrobiology) + ' to microbiology'
					END
					IF @BiopsyQtyVirology > 0
					BEGIN
						IF @tempsummary <> '' SET @tempsummary = @tempsummary + ', ' + CONVERT(VARCHAR(10), @BiopsyQtyVirology) + ' to virology'
						ELSE SET @tempsummary = CONVERT(VARCHAR(10), @BiopsyQtyVirology) + ' to virology'
					END
				END
				SET @summary = @summary + ' ('
				SET @summary = @summary + @tempsummary
				SET @summary = @summary + ')'
			END
			IF @ForcepType > 0 OR ISNULL(@ForcepSerialNo,'') <> ''
			BEGIN
				IF @ForcepType = 1 
				BEGIN
					SET @summary = @summary + ' with disposable forceps'
					IF ISNULL(@ForcepSerialNo,'') <> '' SET @summary = @summary + ' (serial number: ' + @ForcepSerialNo + ')'
				END
				--ELSE IF @ForcepType = 2 
				--BEGIN
				--	SET @summary = @summary + ' (Forceps - Reusable'
				--	IF @ForcepSerialNo > 0 SET @summary = @summary + ', Serial No: ' + @ForcepSerialNoDesc
				--	SET @summary = @summary + ')'
				--END
			END

			IF @BrushCytology = 1 
			BEGIN
				IF @summary <> '' SET @summary = @summary + @FullStop
				SET @summary = @summary + 'Brush cytology'
			END
		END
		
		IF @BrushBiopsy = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Brush biopsy'
		END

		IF @CytologyHistology = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Cytology and histology'
		END

		--FNA
		IF @NeedleAspirate = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Fine needle aspirate'
			
			IF @NeedleAspirateHistology = 1 OR @NeedleAspirateMicrobiology = 1 OR @NeedleAspirateVirology = 1
			BEGIN
				IF @NeedleAspirateHistology = 1 OR @NeedleAspirateMicrobiology = 1 OR @NeedleAspirateVirology = 1
				BEGIN
					SET @tempsummary = ''
					IF @NeedleAspirateHistology = 1 
						SET @tempsummary = @tempsummary + 'cytology'
					IF @NeedleAspirateMicrobiology = 1 
						IF @tempsummary = '' SET @tempsummary = @tempsummary + 'microbiology'
						ELSE SET @tempsummary = @tempsummary + ', microbiology'
					IF @NeedleAspirateVirology = 1 
						IF @tempsummary = '' SET @tempsummary = @tempsummary + 'virology'
						ELSE SET @tempsummary = @tempsummary + ', virology'
					SET @summary = @summary + ' (' + @tempsummary + ')'
				END
			END

			IF @EUSFNANumberOfPasses > 0 SET @summary = @summary + ' (' + CONVERT(VARCHAR(10), @EUSFNANumberOfPasses) + CASE WHEN @EUSFNANumberOfPasses > 1 THEN ' passes' ELSE ' pass' END
			IF @EUSFNANeedleGauge > 0 
			BEGIN
				IF @EUSFNANumberOfPasses > 0 SET @summary = @summary + ' with ' ELSE SET @summary = @summary + ' (with '
				SET @summary = @summary + CONVERT(VARCHAR(10), @EUSFNANeedleGauge) + ' needle gauge)'
			END
			ELSE
				IF @EUSFNANumberOfPasses > 0 SET @summary = @summary + ')'
		END

		--FNB
		IF @FNB = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Fine needle biopsy'

			IF @EUSFNBNumberOfPasses > 0 SET @summary = @summary + ' (' + CONVERT(VARCHAR(10), @EUSFNBNumberOfPasses) + CASE WHEN @EUSFNBNumberOfPasses > 1 THEN ' passes' ELSE ' pass' END
			IF @EUSFNBNeedleGauge > 0 
			BEGIN
				IF @EUSFNBNumberOfPasses > 0 SET @summary = @summary + ' with ' ELSE SET @summary = @summary + ' (with '
				SET @summary = @summary + CONVERT(VARCHAR(10), @EUSFNBNeedleGauge) + ' needle gauge)'
			END
			ELSE
				IF @EUSFNBNumberOfPasses > 0 SET @summary = @summary + ')'
		END

		IF @GastricWashing = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Gastric Washing'
		END

		IF @HotBiopsy = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Hot biopsy'
		END
		
		IF @Polypectomy = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Polypectomy'
			
			IF @PolypectomyQty > 0 SET @summary = @summary + ' (' + CONVERT(VARCHAR(10), @PolypectomyQty) + CASE WHEN @PolypectomyQty > 1 THEN ' biopsies)' ELSE ' biopsy)' END
		END
		
		IF @TumourMarkers = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop
			SET @summary = @summary + 'Tumour markers'
		END

		IF @Urease = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + @FullStop

			IF @UreaseResult = 1 SET @summary = @summary + 'Positive urease test for H. pylori'
			ELSE IF @UreaseResult = 2 SET @summary = @summary + 'Urease test for H. pylori proved negative'
			ELSE  SET @summary = @summary + 'Urease test'
		END
	END 
		
	-- Finally, update the summary in specimens table
	UPDATE ERS_UpperGISpecimens 
	SET Summary=@summary 
	WHERE SiteId = @SiteId

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc specimens_brt_select -----------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'specimens_brt_select', 'S';
GO

CREATE PROCEDURE [dbo].[specimens_brt_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT 
	sp.SiteID,
	[None],
	EBUSTB,
	EBUSHistology,
	EBUSCytology,
	EBUSBacteriology,
	EndobronchialTB,
	EndobronchialHistology,
	EndobronchialBacteriology,
	EndobronchialVirology,
	EndobronchialMycology,
	BrushCytology,
	BrushBacteriology,
	BrushVirology,
	BrushMycology,
	DistalBlindTB,
	DistalBlindHistology,
	DistalBlindBacteriology,
	DistalBlindVirology,
	DistalBlindMycology,
	TransbronchialTB,
	TransbronchialHistology,
	TransbronchialBacteriology,
	TransbronchialVirology,
	TransbronchialMycology,
	TranstrachealHistology,
	TranstrachealBacteriology,
	TranstrachealVirology,
	TranstrachealMycology,
	TrapPCP,
	TrapTB,
	TrapCytology,
	TrapBacteriology,
	TrapVirology,
	TrapMycology,
	BALPCP,
	BALTB,
	BALCytology,
	BALBacteriology,
	BALVirology,
	BALMycology,
	BALVolInfused,
	BALVolRecovered,
	FNATB,
	FNACytology,
	FNABacteriology,
	FNAVirology,
	FNAMycology,
	FNAHistology,
	CryoHistology
FROM 
	[ERS_BRTSpecimens] sp
JOIN
	ERS_Sites s ON sp.SiteId = s.SiteId
JOIN
	ERS_Procedures p ON s.ProcedureId = p.ProcedureId
WHERE 
	sp.SiteId = @SiteId
	
GO




--------------------------------------------------------------------------------------------------------------------
---------------------------------------- Create Proc specimens_brt_save --------------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'specimens_brt_save', 'S';
GO

CREATE PROCEDURE [dbo].[specimens_brt_save]
(
	@SiteID INT,
	@None BIT,
	@EBUSTB BIT,
	@EBUSHistology BIT,
	@EBUSCytology BIT,
	@EBUSBacteriology BIT,
	@EndobronchialTB BIT,
	@EndobronchialHistology BIT,
	@EndobronchialBacteriology BIT,
	@EndobronchialVirology BIT,
	@EndobronchialMycology BIT,
	@BrushCytology BIT,
	@BrushBacteriology BIT,
	@BrushVirology BIT,
	@BrushMycology BIT,
	@DistalBlindTB BIT,
	@DistalBlindHistology BIT,
	@DistalBlindBacteriology BIT,
	@DistalBlindVirology BIT,
	@DistalBlindMycology BIT,
	@TransbronchialTB BIT,
	@TransbronchialHistology BIT,
	@TransbronchialBacteriology BIT,
	@TransbronchialVirology BIT,
	@TransbronchialMycology BIT,
	@TranstrachealHistology BIT,
	@TranstrachealBacteriology BIT,
	@TranstrachealVirology BIT,
	@TranstrachealMycology BIT,
	@TrapPCP BIT,
	@TrapTB BIT,
	@TrapCytology BIT,
	@TrapBacteriology BIT,
	@TrapVirology BIT,
	@TrapMycology BIT,
	@BALPCP BIT,
	@BALTB BIT,
	@BALCytology BIT,
	@BALBacteriology BIT,
	@BALVirology BIT,
	@BALMycology BIT,
	@BALVolInfused DECIMAL(6,2),
	@BALVolRecovered DECIMAL(6,2),
	@FNATB BIT,
	@FNACytology BIT,
	@FNABacteriology BIT,
	@FNAVirology BIT,
	@FNAMycology BIT,
	@FNAHistology BIT,
	@CryoHistology BIT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId

	IF NOT EXISTS (SELECT 1 FROM ERS_BRTSpecimens WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_BRTSpecimens (
			SiteID,
			[None],
			EBUSTB,
			EBUSHistology,
			EBUSCytology,
			EBUSBacteriology,
			EndobronchialTB,
			EndobronchialHistology,
			EndobronchialBacteriology,
			EndobronchialVirology,
			EndobronchialMycology,
			BrushCytology,
			BrushBacteriology,
			BrushVirology,
			BrushMycology,
			DistalBlindTB,
			DistalBlindHistology,
			DistalBlindBacteriology,
			DistalBlindVirology,
			DistalBlindMycology,
			TransbronchialTB,
			TransbronchialHistology,
			TransbronchialBacteriology,
			TransbronchialVirology,
			TransbronchialMycology,
			TranstrachealHistology,
			TranstrachealBacteriology,
			TranstrachealVirology,
			TranstrachealMycology,
			TrapPCP,
			TrapTB,
			TrapCytology,
			TrapBacteriology,
			TrapVirology,
			TrapMycology,
			BALPCP,
			BALTB,
			BALCytology,
			BALBacteriology,
			BALVirology,
			BALMycology,
			BALVolInfused,
			BALVolRecovered,
			FNATB,
			FNACytology,
			FNABacteriology,
			FNAVirology,
			FNAMycology,
			FNAHistology,
			CryoHistology,
			WhoCreatedId,
			WhenCreated)
		VALUES (
			@SiteID,
			@None,
			@EBUSTB,
			@EBUSHistology,
			@EBUSCytology,
			@EBUSBacteriology,
			@EndobronchialTB,
			@EndobronchialHistology,
			@EndobronchialBacteriology,
			@EndobronchialVirology,
			@EndobronchialMycology,
			@BrushCytology,
			@BrushBacteriology,
			@BrushVirology,
			@BrushMycology,
			@DistalBlindTB,
			@DistalBlindHistology,
			@DistalBlindBacteriology,
			@DistalBlindVirology,
			@DistalBlindMycology,
			@TransbronchialTB,
			@TransbronchialHistology,
			@TransbronchialBacteriology,
			@TransbronchialVirology,
			@TransbronchialMycology,
			@TranstrachealHistology,
			@TranstrachealBacteriology,
			@TranstrachealVirology,
			@TranstrachealMycology,
			@TrapPCP,
			@TrapTB,
			@TrapCytology,
			@TrapBacteriology,
			@TrapVirology,
			@TrapMycology,
			@BALPCP,
			@BALTB,
			@BALCytology,
			@BALBacteriology,
			@BALVirology,
			@BALMycology,
			@BALVolInfused,
			@BALVolRecovered,
			@FNATB,
			@FNACytology,
			@FNABacteriology,
			@FNAVirology,
			@FNAMycology,
			@FNAHistology,
			@CryoHistology,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Specimens Taken',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_BRTSpecimens
		SET 
			[None] = @None,
			EBUSTB = @EBUSTB,
			EBUSHistology = @EBUSHistology,
			EBUSCytology = @EBUSCytology,
			EBUSBacteriology = @EBUSBacteriology,
			EndobronchialTB = @EndobronchialTB,
			EndobronchialHistology = @EndobronchialHistology,
			EndobronchialBacteriology = @EndobronchialBacteriology,
			EndobronchialVirology = @EndobronchialVirology,
			EndobronchialMycology = @EndobronchialMycology,
			BrushCytology = @BrushCytology,
			BrushBacteriology = @BrushBacteriology,
			BrushVirology = @BrushVirology,
			BrushMycology = @BrushMycology,
			DistalBlindTB = @DistalBlindTB,
			DistalBlindHistology = @DistalBlindHistology,
			DistalBlindBacteriology = @DistalBlindBacteriology,
			DistalBlindVirology = @DistalBlindVirology,
			DistalBlindMycology = @DistalBlindMycology,
			TransbronchialTB = @TransbronchialTB,
			TransbronchialHistology = @TransbronchialHistology,
			TransbronchialBacteriology = @TransbronchialBacteriology,
			TransbronchialVirology = @TransbronchialVirology,
			TransbronchialMycology = @TransbronchialMycology,
			TranstrachealHistology = @TranstrachealHistology,
			TranstrachealBacteriology = @TranstrachealBacteriology,
			TranstrachealVirology = @TranstrachealVirology,
			TranstrachealMycology = @TranstrachealMycology,
			TrapPCP = @TrapPCP,
			TrapTB = @TrapTB,
			TrapCytology = @TrapCytology,
			TrapBacteriology = @TrapBacteriology,
			TrapVirology = @TrapVirology,
			TrapMycology = @TrapMycology,
			BALPCP = @BALPCP,
			BALTB = @BALTB,
			BALCytology = @BALCytology,
			BALBacteriology = @BALBacteriology,
			BALVirology = @BALVirology,
			BALMycology = @BALMycology,
			BALVolInfused = @BALVolInfused,
			BALVolRecovered = @BALVolRecovered,
			FNATB = @FNATB,
			FNACytology = @FNACytology,
			FNABacteriology = @FNABacteriology,
			FNAVirology = @FNAVirology,
			FNAMycology = @FNAMycology,
			FNAHistology = @FNAHistology,
			CryoHistology = @CryoHistology,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
---------------------------------------- Create Proc specimens_brt_summary_update ----------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'specimens_brt_summary_update', 'S';
GO

CREATE PROCEDURE [dbo].[specimens_brt_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE 
		@summary VARCHAR (8000),
		@RegionId INT,
		@None BIT,
		@EBUSTB BIT,
		@EBUSHistology BIT,
		@EBUSCytology BIT,
		@EBUSBacteriology BIT,
		@EndobronchialTB BIT,
		@EndobronchialHistology BIT,
		@EndobronchialBacteriology BIT,
		@EndobronchialVirology BIT,
		@EndobronchialMycology BIT,
		@BrushCytology BIT,
		@BrushBacteriology BIT,
		@BrushVirology BIT,
		@BrushMycology BIT,
		@DistalBlindTB BIT,
		@DistalBlindHistology BIT,
		@DistalBlindBacteriology BIT,
		@DistalBlindVirology BIT,
		@DistalBlindMycology BIT,
		@TransbronchialTB BIT,
		@TransbronchialHistology BIT,
		@TransbronchialBacteriology BIT,
		@TransbronchialVirology BIT,
		@TransbronchialMycology BIT,
		@TranstrachealHistology BIT,
		@TranstrachealBacteriology BIT,
		@TranstrachealVirology BIT,
		@TranstrachealMycology BIT,
		@TrapPCP BIT,
		@TrapTB BIT,
		@TrapCytology BIT,
		@TrapBacteriology BIT,
		@TrapVirology BIT,
		@TrapMycology BIT,
		@BALPCP BIT,
		@BALTB BIT,
		@BALCytology BIT,
		@BALBacteriology BIT,
		@BALVirology BIT,
		@BALMycology BIT,
		@BALVolInfused DECIMAL(6,2),
		@BALVolRecovered DECIMAL(6,2),
		@FNATB BIT,
		@FNACytology BIT,
		@FNABacteriology BIT,
		@FNAVirology BIT,
		@FNAMycology BIT,
		@FNAHistology BIT,
		@CryoHistology BIT
	
	DECLARE @tmpSummary TABLE(Val VARCHAR(MAX))
	DECLARE @XMLlist XML

	SELECT 
		@summary = '',
		@RegionId = s.RegionId,
		@None=[None],
		@EBUSTB=EBUSTB,
		@EBUSHistology=EBUSHistology,
		@EBUSCytology=EBUSCytology,
		@EBUSBacteriology=EBUSBacteriology,
		@EndobronchialTB=EndobronchialTB,
		@EndobronchialHistology=EndobronchialHistology,
		@EndobronchialBacteriology=EndobronchialBacteriology,
		@EndobronchialVirology=EndobronchialVirology,
		@EndobronchialMycology=EndobronchialMycology,
		@BrushCytology=BrushCytology,
		@BrushBacteriology=BrushBacteriology,
		@BrushVirology=BrushVirology,
		@BrushMycology=BrushMycology,
		@DistalBlindTB=DistalBlindTB,
		@DistalBlindHistology=DistalBlindHistology,
		@DistalBlindBacteriology=DistalBlindBacteriology,
		@DistalBlindVirology=DistalBlindVirology,
		@DistalBlindMycology=DistalBlindMycology,
		@TransbronchialTB=TransbronchialTB,
		@TransbronchialHistology=TransbronchialHistology,
		@TransbronchialBacteriology=TransbronchialBacteriology,
		@TransbronchialVirology=TransbronchialVirology,
		@TransbronchialMycology=TransbronchialMycology,
		@TranstrachealHistology=TranstrachealHistology,
		@TranstrachealBacteriology=TranstrachealBacteriology,
		@TranstrachealVirology=TranstrachealVirology,
		@TranstrachealMycology=TranstrachealMycology,
		@TrapPCP=TrapPCP,
		@TrapTB=TrapTB,
		@TrapCytology=TrapCytology,
		@TrapBacteriology=TrapBacteriology,
		@TrapVirology=TrapVirology,
		@TrapMycology=TrapMycology,
		@BALPCP=BALPCP,
		@BALTB=BALTB,
		@BALCytology=BALCytology,
		@BALBacteriology=BALBacteriology,
		@BALVirology=BALVirology,
		@BALMycology=BALMycology,
		@BALVolInfused=BALVolInfused,
		@BALVolRecovered=BALVolRecovered,
		@FNATB=FNATB,
		@FNACytology=FNACytology,
		@FNABacteriology=FNABacteriology,
		@FNAVirology=FNAVirology,
		@FNAMycology=FNAMycology,
		@FNAHistology=FNAHistology,
		@CryoHistology=CryoHistology
	FROM
		ERS_BRTSpecimens sp
	JOIN
		ERS_Sites s ON sp.SiteId = s.SiteId
	JOIN
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		sp.SiteId = @SiteId

	IF @None = 1
		SET @summary = @summary + 'No specimens taken'
	ELSE
	BEGIN
		IF @EBUSTB = 1 OR @EBUSHistology = 1 OR @EBUSCytology = 1 OR @EBUSBacteriology= 1
		BEGIN
			IF @EBUSTB = 1 INSERT INTO @tmpSummary (Val) VALUES('TB bacteriology')
			IF @EBUSHistology = 1 INSERT INTO @tmpSummary (Val) VALUES('histology')
			IF @EBUSCytology = 1 INSERT INTO @tmpSummary (Val) VALUES('cytology')
			IF @EBUSBacteriology = 1 INSERT INTO @tmpSummary (Val) VALUES('bacteriology')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = 'EBUS specimen: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @EndobronchialTB = 1 OR @EndobronchialHistology = 1 OR @EndobronchialBacteriology = 1 OR @EndobronchialVirology = 1 OR @EndobronchialMycology = 1
		BEGIN
			DELETE FROM @tmpSummary
			IF @summary <> '' SET @summary = @summary + '<br/>'
			IF @EndobronchialTB = 1 INSERT INTO @tmpSummary (Val) VALUES('TB bacteriology')
			IF @EndobronchialHistology = 1 INSERT INTO @tmpSummary (Val) VALUES('histology')
			IF @EndobronchialBacteriology = 1 INSERT INTO @tmpSummary (Val) VALUES('bacteriology')
			IF @EndobronchialVirology = 1 INSERT INTO @tmpSummary (Val) VALUES('virology')
			IF @EndobronchialMycology = 1 INSERT INTO @tmpSummary (Val) VALUES('mycology')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + 'Endobronchial biopsy: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @BrushCytology = 1 OR @BrushBacteriology = 1 OR @BrushVirology = 1 OR @BrushMycology = 1
		BEGIN
			DELETE FROM @tmpSummary
			IF @summary <> '' SET @summary = @summary + '<br/>'
			IF @BrushCytology = 1  INSERT INTO @tmpSummary (Val) VALUES('cytology')
			IF @BrushBacteriology = 1  INSERT INTO @tmpSummary (Val) VALUES('bacteriology')
			IF @BrushVirology = 1 INSERT INTO @tmpSummary (Val) VALUES('virology')
			IF @BrushMycology = 1 INSERT INTO @tmpSummary (Val) VALUES('mycology')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + 'Brush biopsy: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @DistalBlindTB = 1 OR @DistalBlindHistology = 1 OR @DistalBlindBacteriology = 1 OR @DistalBlindVirology = 1 OR @DistalBlindMycology = 1
		BEGIN
			DELETE FROM @tmpSummary
			IF @summary <> '' SET @summary = @summary + '<br/>'
			IF @DistalBlindTB = 1  INSERT INTO @tmpSummary (Val) VALUES('TB bacteriology')
			IF @DistalBlindHistology = 1 INSERT INTO @tmpSummary (Val) VALUES('histology')
			IF @DistalBlindBacteriology = 1 INSERT INTO @tmpSummary (Val) VALUES('bacteriology')
			IF @DistalBlindVirology = 1 INSERT INTO @tmpSummary (Val) VALUES('virology')
			IF @DistalBlindMycology = 1 INSERT INTO @tmpSummary (Val) VALUES('mycology')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + 'Distal blind biopsy: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @TransbronchialTB = 1 OR @TransbronchialHistology = 1 OR @TransbronchialBacteriology = 1 OR @TransbronchialVirology = 1 OR @TransbronchialMycology = 1
		BEGIN
			DELETE FROM @tmpSummary
			IF @summary <> '' SET @summary = @summary + '<br/>'
			IF @TransbronchialTB = 1  INSERT INTO @tmpSummary (Val) VALUES('TB bacteriology')
			IF @TransbronchialHistology = 1 INSERT INTO @tmpSummary (Val) VALUES('histology')
			IF @TransbronchialBacteriology = 1 INSERT INTO @tmpSummary (Val) VALUES('bacteriology')
			IF @TransbronchialVirology = 1 INSERT INTO @tmpSummary (Val) VALUES('virology')
			IF @TransbronchialMycology = 1 INSERT INTO @tmpSummary (Val) VALUES('mycology')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + 'Transbronchial biopsy: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @TranstrachealHistology = 1 OR @TranstrachealBacteriology = 1 OR @TranstrachealVirology = 1 OR @TranstrachealMycology = 1
		BEGIN
			DELETE FROM @tmpSummary
			IF @summary <> '' SET @summary = @summary + '<br/>'
			IF @TranstrachealHistology = 1  INSERT INTO @tmpSummary (Val) VALUES('histology')
			IF @TranstrachealBacteriology = 1 INSERT INTO @tmpSummary (Val) VALUES('bacteriology')
			IF @TranstrachealVirology = 1 INSERT INTO @tmpSummary (Val) VALUES('virology')
			IF @TranstrachealMycology = 1 INSERT INTO @tmpSummary (Val) VALUES('mycology')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + 'Transtracheal biopsy: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @TrapPCP = 1 OR @TrapTB = 1 OR @TrapCytology = 1 OR @TrapBacteriology = 1 OR @TrapVirology = 1 OR @TrapMycology = 1
		BEGIN
			DELETE FROM @tmpSummary
			IF @summary <> '' SET @summary = @summary + '<br/>'
			IF @TrapPCP = 1  INSERT INTO @tmpSummary (Val) VALUES('PCP mycology')
			IF @TrapTB = 1  INSERT INTO @tmpSummary (Val) VALUES('TB bacteriology')
			IF @TrapCytology = 1 INSERT INTO @tmpSummary (Val) VALUES('cytology')
			IF @TrapBacteriology = 1 INSERT INTO @tmpSummary (Val) VALUES('bacteriology')
			IF @TrapVirology = 1 INSERT INTO @tmpSummary (Val) VALUES('virology')
			IF @TrapMycology = 1 INSERT INTO @tmpSummary (Val) VALUES('mycology')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + 'Trap: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @BALPCP = 1 OR @BALTB = 1 OR @BALCytology = 1 OR @BALBacteriology = 1 OR @BALVirology = 1 OR @BALMycology = 1 OR @BALVolInfused > 0 OR @BALVolRecovered > 0
		BEGIN
			DELETE FROM @tmpSummary
			IF @summary <> '' SET @summary = @summary + '<br/>'
			IF @BALPCP = 1  INSERT INTO @tmpSummary (Val) VALUES('PCP mycology')
			IF @BALTB = 1  INSERT INTO @tmpSummary (Val) VALUES('TB bacteriology')
			IF @BALCytology = 1 INSERT INTO @tmpSummary (Val) VALUES('cytology')
			IF @BALBacteriology = 1 INSERT INTO @tmpSummary (Val) VALUES('bacteriology')
			IF @BALVirology = 1 INSERT INTO @tmpSummary (Val) VALUES('virology')
			IF @BALMycology = 1 INSERT INTO @tmpSummary (Val) VALUES('mycology')
			IF @BALVolInfused > 0 INSERT INTO @tmpSummary (Val) VALUES('Volume infused (' + dbo.fnRemoveDecTrailingZeroes(@BALVolInfused) + ' mls)')
			IF @BALVolRecovered > 0 INSERT INTO @tmpSummary (Val) VALUES('Volume recovered (' + dbo.fnRemoveDecTrailingZeroes(@BALVolRecovered) + ' mls)')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + 'Bronchoalveolar Lavage: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @FNATB = 1 OR @FNACytology = 1 OR @FNABacteriology = 1 OR @FNAVirology = 1 OR @FNAMycology = 1 OR @FNAHistology = 1
		BEGIN
			DELETE FROM @tmpSummary
			IF @summary <> '' SET @summary = @summary + '<br/>'
			IF @FNATB = 1  INSERT INTO @tmpSummary (Val) VALUES('TB bacteriology')
			IF @FNACytology = 1 INSERT INTO @tmpSummary (Val) VALUES('cytology')
			IF @FNABacteriology = 1 INSERT INTO @tmpSummary (Val) VALUES('bacteriology')
			IF @FNAVirology = 1 INSERT INTO @tmpSummary (Val) VALUES('virology')
			IF @FNAMycology = 1 INSERT INTO @tmpSummary (Val) VALUES('mycology')
			IF @FNAHistology = 1 INSERT INTO @tmpSummary (Val) VALUES('TB bacteriology')

			SET @XMLlist = (SELECT Val FROM @tmpSummary FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + 'Fine needle aspirate: ' + dbo.fnBuildString(@XMLlist)
		END

		IF @CryoHistology = 1
		BEGIN
			IF @summary <> '' SET @summary = @summary + '<br/>'
			SET @summary = @summary + 'Cryobiopsy: histology'
		END
	END 
		
	-- Finally, update the summary in specimens table
	UPDATE ERS_BRTSpecimens 
	SET Summary=@summary 
	WHERE SiteId = @SiteId

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_BRTSpecimens_Insert -------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_BRTSpecimens_Insert', 'TR';
GO

CREATE TRIGGER TR_BRTSpecimens_Insert
ON ERS_BRTSpecimens
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM INSERTED

	EXEC specimens_brt_summary_update @site_id
	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_BRTSpecimens_Delete -------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_BRTSpecimens_Delete', 'TR';
GO

CREATE TRIGGER TR_BRTSpecimens_Delete
ON ERS_BRTSpecimens
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc usp_TherapeuticRecordDelete  -------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'usp_TherapeuticRecordDelete', 'S';
GO
CREATE PROCEDURE dbo.usp_TherapeuticRecordDelete
(
	  @TherapType AS VARCHAR(20)
	, @RecordId AS INTEGER
	, @SiteId	AS INTEGER
)
AS
-- =============================================
-- Description:	This will Delete Therapeutc Record. Applicable for ERCP and UGI.
--				This also DELETEs record from the dbo.ERS_RecordCount Table- if applicable.
-- =============================================
BEGIN TRY
	BEGIN TRANSACTION
		
	--### ERCP Record
	IF LOWER(@TherapType) = 'ercp'
	BEGIN
		--## First Delete from the Therapeutic Table
		DELETE FROM dbo.ERS_ERCPTherapeutics WHERE id=@RecordId;

		--## Now check whether anymore Therapeutic Record left after this DELETE? If NO then DELETE the 'counter record' in dbo.ERS_RecordCount
		IF NOT EXISTS(SELECT 1 FROM dbo.ERS_ERCPTherapeutics WHERE SiteId=@SiteId)
			DELETE FROM dbo.ERS_RecordCount WHERE SiteId=@SiteId AND Identifier='Therapeutic Procedures';
	END
	--### OGD Record	
	IF LOWER(@TherapType) = 'ogd'		
	BEGIN
		DELETE FROM dbo.ERS_UpperGITherapeutics WHERE id= @RecordId;			
		IF NOT EXISTS(SELECT 1 FROM dbo.ERS_UpperGITherapeutics WHERE SiteId=@SiteId)
			DELETE FROM dbo.ERS_RecordCount WHERE SiteId=@SiteId AND Identifier='Therapeutic Procedures';
	END

	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK
END CATCH

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------222 Create Proc therapeutics_ogd_summary_update - INCOMPLETE.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'therapeutics_ogd_summary_update', 'S';
GO

CREATE PROCEDURE [dbo].[therapeutics_ogd_summary_update]
(
	@TherapeuticId AS INT,
	@SiteId INT
)
AS
	SET NOCOUNT ON
	DECLARE   @msg varchar(1000)
			, @Details varchar(1000)
			, @Summary varchar(4000)=''
			, @Area varchar(500)=''
			, @br VARCHAR(6) = '<br />';

	DECLARE 
		@None bit,
		@YAGLaser bit,
		@YAGLaserWatts int,
		@YAGLaserPulses int,
		@YAGLaserSecs decimal(8,2),
		@YAGLaserKJ decimal(8,2),
		@ArgonBeamDiathermy bit,
		@ArgonBeamDiathermyWatts int,
		@ArgonBeamDiathermyPulses int,
		@ArgonBeamDiathermySecs decimal(8,2),
		@ArgonBeamDiathermyKJ decimal(8,2),
		@BalloonDilation bit,
		@BandLigation bit,
		@BotoxInjection bit,
		@EndoloopPlacement bit,
		@HeatProbe bit,
		@BicapElectro bit,
		@Diathermy bit,
		@ForeignBody bit,
		@HotBiopsy bit,
		@Injection bit,
		@InjectionType int,
		@InjectionVolume int,
		@InjectionNumber int,
		@OesophagealDilatation bit,
		@DilatedTo int,
		@DilatationUnits tinyint,
		@DilatorType tinyint,
		@DilatorScopePass bit,
		@OesoDilNilByMouth bit,
		@OesoDilNilByMouthHrs int,
		@OesoDilXRay bit,
		@OesoDilXRayHrs int,
		@OesoDilSoftDiet bit,
		@OesoDilSoftDietDays int,
		@OesoDilWarmFluids bit,
		@OesoDilWarmFluidsHrs int,
		@OesoDilMedicalReview bit,
		@OesoYAGNilByMouth bit,
		@OesoYAGNilByMouthHrs int,
		@OesoYAGWarmFluids bit,
		@OesoYAGWarmFluidsHrs int,
		@OesoYAGSoftDiet bit,
		@OesoYAGSoftDietDays int,
		@OesoYAGMedicalReview bit,
		@Polypectomy bit,
		@PolypectomyRemoval tinyint,
		@PolypectomyRemovalType tinyint,
		@BandingPiles bit,
		@BandingNum int,
		@GastrostomyInsertion bit,
		@GastrostomyInsertionSize int,
		@GastrostomyInsertionUnits tinyint,
		@GastrostomyInsertionType tinyint,
		@GastrostomyInsertionBatchNo varchar(100),
		@CorrectPEGPlacement tinyint,
		@PEGPlacementFailureReason varchar(500),
		@NilByMouth bit,
		@NilByMouthHrs int,
		@NilByProc bit,
		@NilByProcHrs int,
		@FlangePosition int,
		@AttachmentToWard bit,
		@GastrostomyRemoval bit,
		@PyloricDilatation bit,
		@VaricealSclerotherapy bit,
		@VaricealSclerotherapyInjectionType smallint,
		@VaricealSclerotherapyInjectionVol int,
		@VaricealSclerotherapyInjectionNum int,
		@VaricealBanding bit,
		@VaricealBandingNum int,
		@VaricealClip bit,
		@StentInsertion bit,
		@StentInsertionQty int,
		@StentInsertionType smallint,
		@StentInsertionLength int,
		@StentInsertionDiameter int,
		@StentInsertionDiameterUnits tinyint,
		@StentInsertionBatchNo varchar(100),
		@CorrectStentPlacement tinyint,
		@StentPlacementFailureReason varchar(500),
		@StentRemoval bit,
		@StentRemovalTechnique int,
		@EMR bit,
		@EMRType tinyint,
		@EMRFluid int,
		@EMRFluidVolume int,
		@RFA bit,
		@RFAType tinyint,
		@RFATreatmentFrom int,
		@RFATreatmentTo int,
		@RFAEnergyDel int,
		@RFANumSegTreated int,
		@RFANumTimesSegTreated int,
		@pHProbeInsert bit,
		@pHProbeInsertAt int,
		@pHProbeInsertChk bit,
		@pHProbeInsertChkTopTo int,
		@Haemospray bit,
		@Sigmoidopexy bit,
		@SigmoidopexyQty smallint,
		@SigmoidopexyMake smallint,
		@SigmoidopexyFluidsDays smallint,
		@SigmoidopexyAntibioticsDays smallint,
		@Marking bit,
		@MarkingType int,
		@Clip bit,
		@ClipNum int,
		@Other varchar(1000),
		@EUSProcType smallint;

	SELECT * INTO #tmp_UpperGITherapeutics 
	FROM dbo.[ERS_UpperGITherapeutics] 
	WHERE (Id = @TherapeuticId OR SiteID = @SiteId)

--## 1) If 'CarriedOutRole=2 (EE)' record is found for a SiteId in [ERS_UpperGITherapeutics] means it has both EE/ER Entries...
	--IF EXISTS(SELECT 'ER' FROM dbo.[ERS_UpperGITherapeutics] WHERE SiteId=@SiteId AND CarriedOutRole=2)
	--	BEGIN
			--PRINT '[ERS_UpperGITherapeutics] has both EE/ER Entries...';
			;WITH eeRecord AS(
				SELECT * FROM #tmp_UpperGITherapeutics WHERE CarriedOutRole = (SELECT MAX(CarriedOutRole) FROM #tmp_UpperGITherapeutics) --## 2 is EE
				--WHERE SiteId=@SiteId AND CarriedOutRole=2
			)
			SELECT
				@None							= (CASE WHEN IsNull(ER.[None], 0) = 0 THEN EE.[None] ELSE ER.[None] END),
				@YAGLaser						= (CASE WHEN IsNull(ER.[YAGLaser], 0) = 0 THEN EE.[YAGLaser] ELSE ER.[YAGLaser] END),
				@YAGLaserWatts					= (CASE WHEN IsNull(ER.[YAGLaserWatts], 0) = 0 THEN EE.[YAGLaserWatts] ELSE ER.[YAGLaserWatts] END),
				@YAGLaserPulses					= (CASE WHEN IsNull(ER.[YAGLaserPulses], 0) = 0 THEN EE.[YAGLaserPulses] ELSE ER.[YAGLaserPulses] END),
				@YAGLaserSecs					= (CASE WHEN IsNull(ER.[YAGLaserSecs], 0) = 0 THEN EE.[YAGLaserSecs] ELSE ER.[YAGLaserSecs] END),
				@YAGLaserKJ						= (CASE WHEN IsNull(ER.[YAGLaserKJ], 0) = 0 THEN EE.[YAGLaserKJ] ELSE ER.[YAGLaserKJ] END),
				@ArgonBeamDiathermy				= (CASE WHEN IsNull(ER.[ArgonBeamDiathermy], 0) = 0 THEN EE.[ArgonBeamDiathermy] ELSE ER.[ArgonBeamDiathermy] END),
				@ArgonBeamDiathermyWatts		= (CASE WHEN IsNull(ER.[ArgonBeamDiathermyWatts], 0) = 0 THEN EE.[ArgonBeamDiathermyWatts] ELSE ER.[ArgonBeamDiathermyWatts] END),
				@ArgonBeamDiathermyPulses		= (CASE WHEN IsNull(ER.[ArgonBeamDiathermyPulses], 0) = 0 THEN EE.[ArgonBeamDiathermyPulses] ELSE ER.[ArgonBeamDiathermyPulses] END),
				@ArgonBeamDiathermySecs			= (CASE WHEN IsNull(ER.[ArgonBeamDiathermySecs], 0) = 0 THEN EE.[ArgonBeamDiathermySecs] ELSE ER.[ArgonBeamDiathermySecs] END),
				@ArgonBeamDiathermyKJ			= (CASE WHEN IsNull(ER.[ArgonBeamDiathermyKJ], 0) = 0 THEN EE.[ArgonBeamDiathermyKJ] ELSE ER.[ArgonBeamDiathermyKJ] END),
				@BalloonDilation				= (CASE WHEN IsNull(ER.[BalloonDilation], 0) = 0 THEN EE.[BalloonDilation] ELSE ER.[BalloonDilation] END),
				@BandLigation					= (CASE WHEN IsNull(ER.[BandLigation], 0) = 0 THEN EE.[BandLigation] ELSE ER.[BandLigation] END),
				@BotoxInjection					= (CASE WHEN IsNull(ER.[BotoxInjection], 0) = 0 THEN EE.[BotoxInjection] ELSE ER.[BotoxInjection] END),
				@EndoloopPlacement				= (CASE WHEN IsNull(ER.[EndoloopPlacement], 0) = 0 THEN EE.[EndoloopPlacement] ELSE ER.[EndoloopPlacement] END),
				@HeatProbe						= (CASE WHEN IsNull(ER.[HeatProbe], 0) = 0 THEN EE.[HeatProbe] ELSE ER.[HeatProbe] END),
				@BicapElectro					= (CASE WHEN IsNull(ER.[BicapElectro], 0) = 0 THEN EE.[BicapElectro] ELSE ER.[BicapElectro] END),
				@Diathermy						= (CASE WHEN IsNull(ER.[Diathermy], 0) = 0 THEN EE.[Diathermy] ELSE ER.[Diathermy] END),
				@ForeignBody					= (CASE WHEN IsNull(ER.[ForeignBody], 0) = 0 THEN EE.[ForeignBody] ELSE ER.[ForeignBody] END),
				@HotBiopsy						= (CASE WHEN IsNull(ER.[HotBiopsy], 0) = 0 THEN EE.[HotBiopsy] ELSE ER.[HotBiopsy] END),
				@Injection						= (CASE WHEN IsNull(ER.[Injection], 0) = 0 THEN EE.[Injection] ELSE ER.[Injection] END),
				@InjectionType					= (CASE WHEN IsNull(ER.[InjectionType], 0) = 0 THEN EE.[InjectionType] ELSE ER.[InjectionType] END),
				@InjectionVolume				= (CASE WHEN IsNull(ER.[InjectionVolume], 0) = 0 THEN EE.[InjectionVolume] ELSE ER.[InjectionVolume] END),
				@InjectionNumber				= (CASE WHEN IsNull(ER.[InjectionNumber], 0) = 0 THEN EE.[InjectionNumber] ELSE ER.[InjectionNumber] END),
				@OesophagealDilatation			= (CASE WHEN IsNull(ER.[OesophagealDilatation], 0) = 0 THEN EE.[OesophagealDilatation] ELSE ER.[OesophagealDilatation] END),
				@DilatedTo						= (CASE WHEN IsNull(ER.[DilatedTo], 0) = 0 THEN EE.[DilatedTo] ELSE ER.[DilatedTo] END),
				@DilatationUnits				= (CASE WHEN IsNull(ER.[DilatationUnits], 0) = 0 THEN EE.[DilatationUnits] ELSE ER.[DilatationUnits] END),
				@DilatorType					= (CASE WHEN IsNull(ER.[DilatorType], 0) = 0 THEN EE.[DilatorType] ELSE ER.[DilatorType] END),
				@DilatorScopePass				= (CASE WHEN IsNull(ER.[DilatorScopePass], 0) = 0 THEN EE.[DilatorScopePass] ELSE ER.[DilatorScopePass] END),
				@OesoDilNilByMouth				= (CASE WHEN IsNull(ER.[OesoDilNilByMouth], 0) = 0 THEN EE.[OesoDilNilByMouth] ELSE ER.[OesoDilNilByMouth] END),
				@OesoDilNilByMouthHrs			= (CASE WHEN IsNull(ER.[OesoDilNilByMouthHrs], 0) = 0 THEN EE.[OesoDilNilByMouthHrs] ELSE ER.[OesoDilNilByMouthHrs] END),
				@OesoDilXRay					= (CASE WHEN IsNull(ER.[OesoDilXRay], 0) = 0 THEN EE.[OesoDilXRay] ELSE ER.[OesoDilXRay] END),
				@OesoDilXRayHrs					= (CASE WHEN IsNull(ER.[OesoDilXRayHrs], 0) = 0 THEN EE.[OesoDilXRayHrs] ELSE ER.[OesoDilXRayHrs] END),
				@OesoDilSoftDiet				= (CASE WHEN IsNull(ER.[OesoDilSoftDiet], 0) = 0 THEN EE.[OesoDilSoftDiet] ELSE ER.[OesoDilSoftDiet] END),
				@OesoDilSoftDietDays			= (CASE WHEN IsNull(ER.[OesoDilSoftDietDays], 0) = 0 THEN EE.[OesoDilSoftDietDays] ELSE ER.[OesoDilSoftDietDays] END),
				@OesoDilWarmFluids				= (CASE WHEN IsNull(ER.[OesoDilWarmFluids], 0) = 0 THEN EE.[OesoDilWarmFluids] ELSE ER.[OesoDilWarmFluids] END),
				@OesoDilWarmFluidsHrs			= (CASE WHEN IsNull(ER.[OesoDilWarmFluidsHrs], 0) = 0 THEN EE.[OesoDilWarmFluidsHrs] ELSE ER.[OesoDilWarmFluidsHrs] END),
				@OesoDilMedicalReview			= (CASE WHEN IsNull(ER.[OesoDilMedicalReview], 0) = 0 THEN EE.[OesoDilMedicalReview] ELSE ER.[OesoDilMedicalReview] END),
				@OesoYAGNilByMouth				= (CASE WHEN IsNull(ER.[OesoYAGNilByMouth], 0) = 0 THEN EE.[OesoYAGNilByMouth] ELSE ER.[OesoYAGNilByMouth] END),
				@OesoYAGNilByMouthHrs			= (CASE WHEN IsNull(ER.[OesoYAGNilByMouthHrs], 0) = 0 THEN EE.[OesoYAGNilByMouthHrs] ELSE ER.[OesoYAGNilByMouthHrs] END),
				@OesoYAGWarmFluids				= (CASE WHEN IsNull(ER.[OesoYAGWarmFluids], 0) = 0 THEN EE.[OesoYAGWarmFluids] ELSE ER.[OesoYAGWarmFluids] END),
				@OesoYAGWarmFluidsHrs			= (CASE WHEN IsNull(ER.[OesoYAGWarmFluidsHrs], 0) = 0 THEN EE.[OesoYAGWarmFluidsHrs] ELSE ER.[OesoYAGWarmFluidsHrs] END),
				@OesoYAGSoftDiet				= (CASE WHEN IsNull(ER.[OesoYAGSoftDiet], 0) = 0 THEN EE.[OesoYAGSoftDiet] ELSE ER.[OesoYAGSoftDiet] END),
				@OesoYAGSoftDietDays			= (CASE WHEN IsNull(ER.[OesoYAGSoftDietDays], 0) = 0 THEN EE.[OesoYAGSoftDietDays] ELSE ER.[OesoYAGSoftDietDays] END),
				@OesoYAGMedicalReview			= (CASE WHEN IsNull(ER.[OesoYAGMedicalReview], 0) = 0 THEN EE.[OesoYAGMedicalReview] ELSE ER.[OesoYAGMedicalReview] END),
				@Polypectomy					= (CASE WHEN IsNull(ER.[Polypectomy], 0) = 0 THEN EE.[Polypectomy] ELSE ER.[Polypectomy] END),
				@PolypectomyRemoval				= (CASE WHEN IsNull(ER.[PolypectomyRemoval], 0) = 0 THEN EE.[PolypectomyRemoval] ELSE ER.[PolypectomyRemoval] END),
				@PolypectomyRemovalType			= (CASE WHEN IsNull(ER.[PolypectomyRemovalType], 0) = 0 THEN EE.[PolypectomyRemovalType] ELSE ER.[PolypectomyRemovalType] END),
				@BandingPiles					= (CASE WHEN IsNull(ER.BandingPiles, 0) = 0 THEN EE.BandingPiles ELSE ER.BandingPiles END),
				@BandingNum						= (CASE WHEN IsNull(ER.BandingNum, 0) = 0 THEN EE.BandingNum ELSE ER.BandingNum END),
				@GastrostomyInsertion			= (CASE WHEN IsNull(ER.[GastrostomyInsertion], 0) = 0 THEN EE.[GastrostomyInsertion] ELSE ER.[GastrostomyInsertion] END),
				@GastrostomyInsertionSize		= (CASE WHEN IsNull(ER.[GastrostomyInsertionSize], 0) = 0 THEN EE.[GastrostomyInsertionSize] ELSE ER.[GastrostomyInsertionSize] END),
				@GastrostomyInsertionUnits		= (CASE WHEN IsNull(ER.[GastrostomyInsertionUnits], 0) = 0 THEN EE.[GastrostomyInsertionUnits] ELSE ER.[GastrostomyInsertionUnits] END),
				@GastrostomyInsertionType		= (CASE WHEN IsNull(ER.[GastrostomyInsertionType], 0) = 0 THEN EE.[GastrostomyInsertionType] ELSE ER.[GastrostomyInsertionType] END),
				@GastrostomyInsertionBatchNo	= (CASE WHEN IsNull(ER.[GastrostomyInsertionBatchNo], '') = '' THEN EE.[GastrostomyInsertionBatchNo] ELSE ER.[GastrostomyInsertionBatchNo] END),
				@CorrectPEGPlacement			= (CASE WHEN IsNull(ER.[CorrectPEGPlacement], 0) = 0 THEN EE.[CorrectPEGPlacement] ELSE ER.[CorrectPEGPlacement] END),
				@PEGPlacementFailureReason		= (CASE WHEN IsNull(ER.[PEGPlacementFailureReason], '') = '' THEN EE.[PEGPlacementFailureReason] ELSE ER.[PEGPlacementFailureReason] END),
				@NilByMouth						= (CASE WHEN IsNull(ER.[NilByMouth], 0) = 0 THEN EE.[NilByMouth] ELSE ER.[NilByMouth] END),
				@NilByMouthHrs					= (CASE WHEN IsNull(ER.[NilByMouthHrs], 0) = 0 THEN EE.[NilByMouthHrs] ELSE ER.[NilByMouthHrs] END),
				@NilByProc						= (CASE WHEN IsNull(ER.[NilByProc], 0) = 0 THEN EE.[NilByProc] ELSE ER.[NilByProc] END),
				@NilByProcHrs					= (CASE WHEN IsNull(ER.[NilByProcHrs], 0) = 0 THEN EE.[NilByProcHrs] ELSE ER.[NilByProcHrs] END),
				@FlangePosition					= (CASE WHEN IsNull(ER.[FlangePosition], 0) = 0 THEN EE.[FlangePosition] ELSE ER.[FlangePosition] END),
				@AttachmentToWard				= (CASE WHEN IsNull(ER.[AttachmentToWard], 0) = 0 THEN EE.[AttachmentToWard] ELSE ER.[AttachmentToWard] END),
				@GastrostomyRemoval				= (CASE WHEN IsNull(ER.[GastrostomyRemoval], 0) = 0 THEN EE.[GastrostomyRemoval] ELSE ER.[GastrostomyRemoval] END),
				@PyloricDilatation				= (CASE WHEN IsNull(ER.[PyloricDilatation], 0) = 0 THEN EE.[PyloricDilatation] ELSE ER.[PyloricDilatation] END),
				@VaricealSclerotherapy			= (CASE WHEN IsNull(ER.[VaricealSclerotherapy], 0) = 0 THEN EE.[VaricealSclerotherapy] ELSE ER.[VaricealSclerotherapy] END),
				@VaricealSclerotherapyInjectionType = (CASE WHEN IsNull(ER.[VaricealSclerotherapyInjectionType], 0) = 0 THEN EE.[VaricealSclerotherapyInjectionType] ELSE ER.[VaricealSclerotherapyInjectionType] END),
				@VaricealSclerotherapyInjectionVol  = (CASE WHEN IsNull(ER.[VaricealSclerotherapyInjectionVol], 0) = 0 THEN EE.[VaricealSclerotherapyInjectionVol] ELSE ER.[VaricealSclerotherapyInjectionVol] END),
				@VaricealSclerotherapyInjectionNum  = (CASE WHEN IsNull(ER.[VaricealSclerotherapyInjectionNum], 0) = 0 THEN EE.[VaricealSclerotherapyInjectionNum] ELSE ER.[VaricealSclerotherapyInjectionNum] END),
				@VaricealBanding				= (CASE WHEN IsNull(ER.[VaricealBanding], 0) = 0 THEN EE.[VaricealBanding] ELSE ER.[VaricealBanding] END),
				@VaricealBandingNum				= (CASE WHEN IsNull(ER.[VaricealBandingNum], 0) = 0 THEN EE.[VaricealBandingNum] ELSE ER.[VaricealBandingNum] END),
				@VaricealClip					= (CASE WHEN IsNull(ER.[VaricealClip], 0) = 0 THEN EE.[VaricealClip] ELSE ER.[VaricealClip] END),
				@StentInsertion					= (CASE WHEN IsNull(ER.[StentInsertion], 0) = 0 THEN EE.[StentInsertion] ELSE ER.[StentInsertion] END),
				@StentInsertionQty				= (CASE WHEN IsNull(ER.[StentInsertionQty], 0) = 0 THEN EE.[StentInsertionQty] ELSE ER.[StentInsertionQty] END),
				@StentInsertionType				= (CASE WHEN IsNull(ER.[StentInsertionType], 0) = 0 THEN EE.[StentInsertionType] ELSE ER.[StentInsertionType] END),
				@StentInsertionLength			= (CASE WHEN IsNull(ER.[StentInsertionLength], 0) = 0 THEN EE.[StentInsertionLength] ELSE ER.[StentInsertionLength] END),
				@StentInsertionDiameter			= (CASE WHEN IsNull(ER.[StentInsertionDiameter], 0) = 0 THEN EE.[StentInsertionDiameter] ELSE ER.[StentInsertionDiameter] END),
				@StentInsertionDiameterUnits	= (CASE WHEN IsNull(ER.[StentInsertionDiameterUnits], 0) = 0 THEN EE.[StentInsertionDiameterUnits] ELSE ER.[StentInsertionDiameterUnits] END),
				@StentInsertionBatchNo			= (CASE WHEN IsNull(ER.[StentInsertionBatchNo], '') = '' THEN EE.[StentInsertionBatchNo] ELSE ER.[StentInsertionBatchNo] END),
				@CorrectStentPlacement			= (CASE WHEN IsNull(ER.[CorrectStentPlacement], 0) = 0 THEN EE.[CorrectStentPlacement] ELSE ER.[CorrectStentPlacement] END),
				@StentPlacementFailureReason	= (CASE WHEN IsNull(ER.[StentPlacementFailureReason], '') = '' THEN EE.[StentPlacementFailureReason] ELSE ER.[StentPlacementFailureReason] END),
				@StentRemoval					= (CASE WHEN IsNull(ER.[StentRemoval], 0) = 0 THEN EE.[StentRemoval] ELSE ER.[StentRemoval] END),
				@StentRemovalTechnique			= (CASE WHEN IsNull(ER.[StentRemovalTechnique], 0) = 0 THEN EE.[StentRemovalTechnique] ELSE ER.[StentRemovalTechnique] END),
				@EMR							= (CASE WHEN IsNull(ER.[EMR], 0) = 0 THEN EE.[EMR] ELSE ER.[EMR] END),
				@EMRType						= (CASE WHEN IsNull(ER.[EMRType], 0) = 0 THEN EE.[EMRType] ELSE ER.[EMRType] END),
				@EMRFluid						= (CASE WHEN IsNull(ER.[EMRFluid], 0) = 0 THEN EE.[EMRFluid] ELSE ER.[EMRFluid] END),
				@EMRFluidVolume					= (CASE WHEN IsNull(ER.[EMRFluidVolume], 0) = 0 THEN EE.[EMRFluidVolume] ELSE ER.[EMRFluidVolume] END),
				@RFA							= (CASE WHEN IsNull(ER.[RFA], 0) = 0 THEN EE.[RFA] ELSE ER.[RFA] END),
				@RFAType						= (CASE WHEN IsNull(ER.[RFAType], 0) = 0 THEN EE.[RFAType] ELSE ER.[RFAType] END),
				@RFATreatmentFrom				= (CASE WHEN IsNull(ER.[RFATreatmentFrom], 0) = 0 THEN EE.[RFATreatmentFrom] ELSE ER.[RFATreatmentFrom] END),				
				@RFATreatmentTo					= (CASE WHEN IsNull(ER.[RFATreatmentTo], 0) = 0 THEN EE.[RFATreatmentTo] ELSE ER.[RFATreatmentTo] END),				
				@RFAEnergyDel					= (CASE WHEN IsNull(ER.[RFAEnergyDel], 0) = 0 THEN EE.[RFAEnergyDel] ELSE ER.[RFAEnergyDel] END),
				@RFANumSegTreated				= (CASE WHEN IsNull(ER.[RFANumSegTreated], 0) = 0 THEN EE.[RFANumSegTreated] ELSE ER.[RFANumSegTreated] END),
				@RFANumTimesSegTreated			= (CASE WHEN IsNull(ER.[RFANumTimesSegTreated], 0) = 0 THEN EE.[RFANumTimesSegTreated] ELSE ER.[RFANumTimesSegTreated] END),
				@pHProbeInsert					= (CASE WHEN IsNull(ER.[pHProbeInsert], 0) = 0 THEN EE.[pHProbeInsert] ELSE ER.[pHProbeInsert] END),
				@pHProbeInsertAt				= (CASE WHEN IsNull(ER.[pHProbeInsertAt], 0) = 0 THEN EE.[pHProbeInsertAt] ELSE ER.[pHProbeInsertAt] END),
				@pHProbeInsertChk				= (CASE WHEN IsNull(ER.[pHProbeInsertChk], 0) = 0 THEN EE.[pHProbeInsertChk] ELSE ER.[pHProbeInsertChk] END),
				@pHProbeInsertChkTopTo			= (CASE WHEN IsNull(ER.[pHProbeInsertChkTopTo], 0) = 0 THEN EE.[pHProbeInsertChkTopTo] ELSE ER.[pHProbeInsertChkTopTo] END),
				@Haemospray						= (CASE WHEN IsNull(ER.[Haemospray], 0) = 0 THEN EE.[Haemospray] ELSE ER.[Haemospray] END),
				@Sigmoidopexy					= (CASE WHEN IsNull(ER.[Sigmoidopexy], 0) = 0 THEN EE.[Sigmoidopexy] ELSE ER.[Sigmoidopexy] END),
				@SigmoidopexyQty				= (CASE WHEN IsNull(ER.[SigmoidopexyQty], 0) = 0 THEN EE.[SigmoidopexyQty] ELSE ER.[SigmoidopexyQty] END),
				@SigmoidopexyMake				= (CASE WHEN IsNull(ER.[SigmoidopexyMake], 0) = 0 THEN EE.[SigmoidopexyMake] ELSE ER.[SigmoidopexyMake] END),
				@SigmoidopexyFluidsDays			= (CASE WHEN IsNull(ER.[SigmoidopexyFluidsDays], 0) = 0 THEN EE.[SigmoidopexyFluidsDays] ELSE ER.[SigmoidopexyFluidsDays] END),
				@SigmoidopexyAntibioticsDays	= (CASE WHEN IsNull(ER.[SigmoidopexyAntibioticsDays], 0) = 0 THEN EE.[SigmoidopexyAntibioticsDays] ELSE ER.[SigmoidopexyAntibioticsDays] END),
				@Marking						= (CASE WHEN IsNull(ER.[Marking], 0) = 0 THEN EE.[Marking] ELSE ER.[Marking] END),
				@MarkingType					= (CASE WHEN IsNull(ER.[MarkingType], 0) = 0 THEN EE.[MarkingType] ELSE ER.[MarkingType] END),
				@Clip							= (CASE WHEN IsNull(ER.[Clip], 0) = 0 THEN EE.[Clip] ELSE ER.[Clip] END),
				@ClipNum						= (CASE WHEN IsNull(ER.[ClipNum], 0) = 0 THEN EE.[ClipNum] ELSE ER.[ClipNum] END),
				@Other							= (CASE WHEN IsNull(ER.[Other], '') = '' THEN EE.[Other] ELSE ER.[Other] END),
				@EUSProcType					= (CASE WHEN IsNull(ER.[EUSProcType], 0) = 0 THEN EE.[EUSProcType] ELSE ER.[EUSProcType] END) 
			FROM eeRecord AS EE
	  INNER JOIN #tmp_UpperGITherapeutics AS ER ON EE.SiteId = ER.SiteId
			WHERE ER.CarriedOutRole = 1; --## 1 is ER
		--END	--## Selecting from Combine

	--ELSE
	--	--## 2) ELSE - THere is only ER present.. So- no need to Combine them...
	--	BEGIN
	--		--PRINT 'ONLY ER Exist- at ERS_UpperGITherapeutics';
	--		SELECT  		
	--			@None = [None],
	--			@YAGLaser = [YAGLaser],
	--			@YAGLaserWatts =[YAGLaserWatts] ,
	--			@YAGLaserPulses  = [YAGLaserPulses],
	--			@YAGLaserSecs = [YAGLaserSecs],
	--			@YAGLaserKJ = [YAGLaserKJ],
	--			@ArgonBeamDiathermy = [ArgonBeamDiathermy],
	--			@ArgonBeamDiathermyWatts  = [ArgonBeamDiathermyWatts],
	--			@ArgonBeamDiathermyPulses = [ArgonBeamDiathermyPulses],
	--			@ArgonBeamDiathermySecs= [ArgonBeamDiathermySecs],
	--			@ArgonBeamDiathermyKJ = [ArgonBeamDiathermyKJ],
	--			@BandLigation = [BandLigation],
	--			@BotoxInjection = [BotoxInjection],
	--			@EndoloopPlacement = [EndoloopPlacement],
	--			@HeatProbe = [HeatProbe],
	--			@BicapElectro = [BicapElectro],
	--			@Diathermy = [Diathermy],
	--			@ForeignBody = [ForeignBody],
	--			@HotBiopsy = [HotBiopsy],
	--			@Injection  = [Injection],
	--			@InjectionType = [InjectionType],
	--			@InjectionVolume = [InjectionVolume],
	--			@InjectionNumber = [InjectionNumber],
	--			@OesophagealDilatation = [OesophagealDilatation],
	--			@DilatedTo = [DilatedTo],
	--			@DilatationUnits = [DilatationUnits],
	--			@DilatorType = [DilatorType],
	--			@DilatorScopePass = [DilatorScopePass],
	--			@OesoDilNilByMouth = [OesoDilNilByMouth],
	--			@OesoDilNilByMouthHrs = [OesoDilNilByMouthHrs],
	--			@OesoDilXRay = [OesoDilXRay],
	--			@OesoDilXRayHrs = [OesoDilXRayHrs],
	--			@OesoDilSoftDiet = [OesoDilSoftDiet],
	--			@OesoDilSoftDietDays =[OesoDilSoftDietDays] ,
	--			@OesoDilWarmFluids = [OesoDilWarmFluids],
	--			@OesoDilWarmFluidsHrs = [OesoDilWarmFluidsHrs],
	--			@OesoDilMedicalReview = [OesoDilMedicalReview],
	--			@OesoYAGNilByMouth = [OesoYAGNilByMouth],
	--			@OesoYAGNilByMouthHrs = [OesoYAGNilByMouthHrs],
	--			@OesoYAGWarmFluids = [OesoYAGWarmFluids],
	--			@OesoYAGWarmFluidsHrs = [OesoYAGWarmFluidsHrs],
	--			@OesoYAGSoftDiet = [OesoYAGSoftDiet],
	--			@OesoYAGSoftDietDays  = [OesoYAGSoftDietDays],
	--			@OesoYAGMedicalReview  = [OesoYAGMedicalReview],
	--			@Polypectomy = [Polypectomy],
	--			@PolypectomyRemoval = [PolypectomyRemoval],
	--			@PolypectomyRemovalType = [PolypectomyRemovalType],
	--			@BandingPiles = BandingPiles,
	--			@BandingNum = BandingNum,
	--			@GastrostomyInsertion = [GastrostomyInsertion],
	--			@GastrostomyInsertionSize = [GastrostomyInsertionSize],
	--			@GastrostomyInsertionUnits = [GastrostomyInsertionUnits],
	--			@GastrostomyInsertionType = [GastrostomyInsertionType],
	--			@GastrostomyInsertionBatchNo = [GastrostomyInsertionBatchNo],
	--			@CorrectPEGPlacement = [CorrectPEGPlacement],
	--			@PEGPlacementFailureReason = [PEGPlacementFailureReason],
	--			@NilByMouth = [NilByMouth],
	--			@NilByMouthHrs = [NilByMouthHrs],
	--			@NilByProc = [NilByProc],
	--			@NilByProcHrs = [NilByProcHrs],
	--			@FlangePosition = [FlangePosition],
	--			@AttachmentToWard = [AttachmentToWard],
	--			@GastrostomyRemoval = [GastrostomyRemoval],
	--			@PyloricDilatation = [PyloricDilatation],
	--			@VaricealSclerotherapy = [VaricealSclerotherapy],
	--			@VaricealSclerotherapyInjectionType = [VaricealSclerotherapyInjectionType],
	--			@VaricealSclerotherapyInjectionVol  = [VaricealSclerotherapyInjectionVol],
	--			@VaricealSclerotherapyInjectionNum  = [VaricealSclerotherapyInjectionNum],
	--			@VaricealBanding  = [VaricealBanding],
	--			@VaricealBandingNum = [VaricealBandingNum],
	--			@VaricealClip = [VaricealClip],
	--			@StentInsertion  = [StentInsertion],
	--			@StentInsertionQty = [StentInsertionQty],
	--			@StentInsertionType = [StentInsertionType],
	--			@StentInsertionLength  = [StentInsertionLength],
	--			@StentInsertionDiameter = [StentInsertionDiameter],
	--			@StentInsertionDiameterUnits = [StentInsertionDiameterUnits],
	--			@StentInsertionBatchNo  = ISNULL([StentInsertionBatchNo],''),
	--			@CorrectStentPlacement  = [CorrectStentPlacement],
	--			@StentPlacementFailureReason = [StentPlacementFailureReason],
	--			@StentRemoval  = [StentRemoval],
	--			@StentRemovalTechnique = [StentRemovalTechnique],
	--			@EMR  = [EMR],
	--			@EMRType = [EMRType],
	--			@EMRFluid = [EMRFluid],
	--			@EMRFluidVolume = [EMRFluidVolume],
	--			@RFA = [RFA],
	--			@RFAType = [RFAType],
	--			@RFATreatmentFrom =[RFATreatmentFrom] ,
	--			@RFATreatmentTo = [RFATreatmentTo],
	--			@RFAEnergyDel = [RFAEnergyDel],
	--			@RFANumSegTreated = [RFANumSegTreated],
	--			@RFANumTimesSegTreated = [RFANumTimesSegTreated],
	--			@pHProbeInsert = [pHProbeInsert],
	--			@pHProbeInsertAt  = [pHProbeInsertAt],
	--			@pHProbeInsertChk = [pHProbeInsertChk],
	--			@pHProbeInsertChkTopTo = [pHProbeInsertChkTopTo],
	--			@Haemospray = [Haemospray],
	--			@Marking = [Marking],
	--			@MarkingType = [MarkingType],
	--			@Clip = [Clip],
	--			@ClipNum = [ClipNum],
	--			@Other = [Other],
	--			@EUSProcType =[EUSProcType] 
	--		FROM dbo.[ERS_UpperGITherapeutics]
	--		WHERE Id = @TherapeuticId;
	--	END --## Selecting from OGD Therap- Only ER Row...

	SELECT @Area = m.Area FROM ERS_AbnormalitiesMatrixUpperGI m LEFT JOIN ERS_Regions r ON m.Region = r.Region LEFT JOIN ERS_Sites s ON r.RegionId  = s.RegionID  WHERE s.siteId = @SiteId;
	
	IF @None = 1
		SET @summary = @summary + 'No therapeutic procedures'
	ELSE
	BEGIN
		IF @YAGLaser = 1
			BEGIN
			SET @msg =' YAG Laser'
			SET @Details = ''
			IF @YAGLaserWatts > 0 SET @Details = @Details + ' ' + CAST(@YAGLaserWatts as varchar(50)) + 'W'
			IF @YAGLaserSecs > 0 SET @Details = @Details + ' for ' + cast(CAST(@YAGLaserSecs AS FLOAT) as varchar(50)) + CASE WHEN @YAGLaserSecs <= 1 THEN ' second' else ' seconds' END
			IF @YAGLaserPulses > 0 SET @Details = @Details + ' in ' + cast(@YAGLaserPulses as varchar(50)) + CASE WHEN @YAGLaserPulses <= 1 THEN ' pulse' else ' pulses' END
			IF @YAGLaserKJ > 0 SET @Details = @Details + ' ('+ cast(CAST(@YAGLaserKJ AS FLOAT) as varchar(50)) + 'kJ)'
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + @br
			END
		
		IF @ArgonBeamDiathermy= 1
			BEGIN
			SET @msg ='  Argon beam diathermy'
			SET @Details = ''
			IF @ArgonBeamDiathermyWatts > 0 SET @Details = @Details + ' ' + cast(@ArgonBeamDiathermyWatts as varchar(50)) + 'W'
			IF @ArgonBeamDiathermySecs > 0 SET @Details = @Details + ' for ' + cast(CAST(@ArgonBeamDiathermySecs AS FLOAT) as varchar(50)) + CASE WHEN @ArgonBeamDiathermySecs <= 1 THEN ' second' else ' seconds' END
			IF @ArgonBeamDiathermyPulses > 0 SET @Details = @Details + ' in ' + cast(@ArgonBeamDiathermyPulses as varchar(50)) + CASE WHEN @ArgonBeamDiathermyPulses <= 1 THEN ' pulse' else ' pulses' END
			IF @ArgonBeamDiathermyKJ > 0 SET @Details = @Details + ' ('+ cast(CAST(@ArgonBeamDiathermyKJ AS FLOAT) as varchar(50)) + 'kJ)'
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
			END

			
		IF @Injection= 1
			BEGIN
			SET @msg =' Injection therapy'
			SET @Details = ''
			IF @InjectionVolume > 0 SET @Details = @Details + '  ' + cast(@InjectionVolume as varchar(50)) + 'ml'
			IF @InjectionVolume > 0  AND @InjectionType > 0 SET @Details = @Details + ' of'
			IF @InjectionType > 0 SET @Details = @Details + ' ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Agent Upper GI' AND [ListItemNo] = @InjectionType)
			IF @InjectionVolume> 0  AND @InjectionNumber > 0 SET @Details = @Details + ' via'
			IF @InjectionNumber >0 SET @Details = @Details + ' ' + CASE WHEN @InjectionNumber > 1 THEN cast(@InjectionNumber as varchar(50)) + ' injections' ELSE cast(@InjectionNumber as varchar(50)) + ' injection' END
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END
		
	
	
		IF @Polypectomy= 1  
			BEGIN
			SET @msg =' Polypectomy'
			SET @Details = ''
			DECLARE @Se bit, @SeExcised int, @Pe bit, @PeExcised int, @Su bit, @SuExcised int, @countExcised int = 0
			SELECT @Se = [Sessile],@SeExcised =[SessileNumExcised], @Pe = [Pedunculated], @PeExcised= [PedunculatedNumExcised], @Su =[Submucosal], @SuExcised = [SubmucosalNumExcised] FROM [ERS_UpperGIAbnoPolyps] WHERE SiteId =@SiteId
			IF @Se =1 AND @SeExcised <> null SET @countExcised= @countExcised + @SeExcised 
			IF  @Pe = 1 AND @PeExcised <> null SET @countExcised= @countExcised + @peExcised
			IF  @Su = 1 AND @suExcised <> null SET @countExcised= @countExcised + @suExcised

			IF @countExcised > 0 SET @Details = @Details + cast(@countExcised as varchar(50)) +' excised '

			IF @PolypectomyRemoval <> 0 OR @PolypectomyRemovalType <> 0
			BEGIN
			SET @Details = @Details + '('
            IF @PolypectomyRemoval = 1 SET @Details = @Details + 'removed entirely ' ELSE IF @PolypectomyRemoval = 2 SET @Details = @Details + 'removed piecemeal '
			IF @PolypectomyRemovalType = 1 SET @Details = @Details + ' using partial snare'
			ELSE IF  @PolypectomyRemovalType = 2 SET @Details = @Details + 'using cold snare'
			ELSE IF  @PolypectomyRemovalType = 3 SET @Details = @Details + 'using hot snare cauterisation'
			ELSE IF  @PolypectomyRemovalType = 4 SET @Details = @Details + 'using hot biopsy'
			ELSE IF  @PolypectomyRemovalType = 5 SET @Details = @Details + 'using cold biopsy'
			ELSE IF  @PolypectomyRemovalType = 6 SET @Details = @Details + 'using hot snare EMR'
			ELSE IF  @PolypectomyRemovalType = 7 SET @Details = @Details + 'using hot snare ESD'
			SET @Details = @Details + ')'
			END

			If @Details<>'' SET @msg = @msg + ': ' + @Details
				--Add full stop 
				SET @msg = RTrim(LTRIM(@msg))
				IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
				--------------
				SET @summary = @summary + @msg + @br
			
		END

		IF @BandingPiles= 1
		BEGIN 
			SET @msg = CASE WHEN @BandingNum > 1 THEN ': ' + CAST(@BandingNum as varchar(5)) + ' bands'
							WHEN @BandingNum = 1 THEN ': ' + CAST(@BandingNum as varchar(5)) + ' band'
							ELSE ''
						END
			--Add full stop 
			SET @msg = 'Banding of piles' + RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

	
		IF @Diathermy = 1
		BEGIN
			SET @msg = ' Diathermy'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @BicapElectro = 1
		BEGIN
			SET @msg = ' Bicap electrocautery'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @HeatProbe = 1
		BEGIN
			SET @msg = ' Heater probe coagulation'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		--IF @BallDil = 1
		--	BEGIN
		--	SET @msg = ' Balloon dilatation'
		--	--Add full stop 
		--	SET @msg = RTrim(LTRIM(@msg))
		--	IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
		--	--------------
		--	SET @summary = @summary + @msg + @br
		--END
		
		IF @HotBiopsy = 1
		BEGIN
			SET @msg = ' Hot biopsy'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @BandLigation = 1
		BEGIN
			SET @msg = ' Band ligation'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

			IF @BalloonDilation = 1
		BEGIN
			SET @msg = ' Balloon Dilation'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @BotoxInjection = 1
		BEGIN
			SET @msg = ' Botox injection'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @EndoloopPlacement = 1
		BEGIN
			SET @msg = ' Endoloop placement'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @ForeignBody = 1
		BEGIN
			SET @msg = ' Foreign body removal'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @StentInsertion= 1
			BEGIN
			SET @msg =' Stent insertion'
			SET @Details = ''
			IF @StentInsertionQty > 0 SET @Details = @Details + '  ' + cast(@StentInsertionQty as varchar(50))
			IF @StentInsertionType > 0 
				BEGIN
				IF @Area = 'Oesophagus'	 SET @Details = @Details + ' ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Therapeutic Stent Insertion Types' AND [ListItemNo] = @StentInsertionType)
				ELSE SET @Details = @Details + ' ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Therapeutic Stomach Stent Insertion Types' AND [ListItemNo] = @StentInsertionType)
				END	
			IF @StentInsertionLength > 0 AND @StentInsertionDiameter > 0 
				BEGIN
				SET @Details = @Details + ' (' 
				IF @StentInsertionLength > 0 SET @Details = @Details + ' length ' + cast(@StentInsertionLength as varchar(50)) + 'cm'
				IF @StentInsertionDiameter > 0 SET @Details = @Details + ', ' 
				SET @Details = @Details + ' diameter ' + cast(@StentInsertionDiameter as varchar(50))
				IF @StentInsertionDiameterUnits >= 0 SET @Details = @Details+ ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Oesophageal dilatation units' AND [ListItemNo] = @StentInsertionDiameterUnits)
				SET @Details = @Details + ')' 
				END
			IF @StentInsertionBatchNo <> ''  SET @Details = @Details + ' batch ' + LTRIM(RTRIM(@StentInsertionBatchNo))
			
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @StentRemoval= 1
			BEGIN
			SET @msg =' Stent removal'
			SET @Details = ''
			IF @StentRemovalTechnique > 0  SET @Details = @Details + 'using ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Therapeutic Stent Removal Technique' AND [ListItemNo] = @StentRemovalTechnique)
			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @EMR= 1
			BEGIN
			IF @EMRType = 2
				SET @msg =' Endoscopic submucosal dissection'
			ELSE
				SET @msg =' Endoscopic mucosal resection'
			SET @Details = ''
			IF @EMRFluid > 0  SET @Details = @Details + 'using ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Therapeutic EMR Fluid' AND [ListItemNo] = @EMRFluid)
			IF @EMRFluidVolume >0 
				BEGIN
				IF @EMRFluid >0 SET  @Details = @Details + ', '
				SET  @Details = @Details + 'total volume ' + cast(@emrfluidvolume AS varchar(50)) + 'ml'
				END
			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		
		IF @OesophagealDilatation= 1
			BEGIN
			SET @msg =' Oesophageal dilatation'
			SET @Details = ''
			IF @DilatedTo > 0  SET @Details = @Details + ' dilated to ' + cast(@dilatedto as varchar(50)) +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Oesophageal dilatation units' AND [ListItemNo] = @DilatationUnits)
			IF @DilatorType > 0
				BEGIN
				DECLARE @DilatorStr varchar(500) = (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Oesophageal dilator' AND [ListItemNo] = @DilatorType)
				IF @DilatorStr like 'with%' OR @DilatorStr like 'by%'  SET @Details = @Details + ' ' +  @DilatorStr
				ELSE SET @Details = @Details + ' with ' +  @DilatorStr
				END
			IF @DilatorScopePass = 1 SET  @Details = @Details + '(scope could pass)'
			
			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @VaricealSclerotherapy= 1
			BEGIN
			SET @msg =' Oesophagus variceal sclerotherapy'
			SET @Details = ''
			IF @VaricealSclerotherapyInjectionVol > 0  SET @Details = @Details + ' ' + cast(@VaricealSclerotherapyInjectionVol as varchar(50)) + 'ml' 
			IF @VaricealSclerotherapyInjectionVol > 0 AND  @VaricealSclerotherapyInjectiontype > 0  SET @Details = @Details + ' of'
			IF @VaricealSclerotherapyInjectiontype > 0 SET @Details = @Details + ' ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Agent Upper GI' AND [ListItemNo] = @VaricealSclerotherapyInjectiontype)
			IF @VaricealSclerotherapyInjectionVol > 0 AND  @VaricealSclerotherapyInjectionNum > 0  SET @Details = @Details + ' via'
			IF @VaricealSclerotherapyInjectionNum > 0 SET @Details = @Details + ' ' + CASE WHEN @VaricealSclerotherapyInjectionNum >1 THEN CAST(@VaricealSclerotherapyInjectionNum as varchar(50))+' injections' ELSE  CAST(@VaricealSclerotherapyInjectionNum as varchar(50))+' injection' END
			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @VaricealBanding= 1
			BEGIN
			IF @Area ='Oesophagus' SET @msg =' Oesophagus variceal banding' ELSE SET @msg =' Gastric variceal banding'
			SET @Details = ''
			IF @VaricealBandingNum > 0 SET @Details = @Details + ' ' + CASE WHEN @VaricealBandingNum >1 THEN CAST(@VaricealBandingNum as varchar(50))+' bands' ELSE  CAST(@VaricealBandingNum as varchar(50)) + ' band' END
			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @RFA = 1
			BEGIN
			SET @msg =' Radio Frequency Ablation'
			SET @Details = ''
			IF @RFAType = 1	SET @Details = @Details + ' circumferential'
			ELSE IF @RFAType = 2 SET @Details = @Details + ' focal'
			IF ISNULL(@RFAEnergyDel,0) <> 0 SET @Details = @Details + ', ' + cast(@RFAEnergyDel as varchar(50)) + ' joules'
			IF ISNULL(@RFANumSegTreated,0) <> 0
				BEGIN
				SET @Details = @Details + ' delivered to ' + cast(@RFANumSegTreated as varchar(50))
				IF @RFAType =1 SET @Details = @Details + ' x 3cm'
				SET @Details = @Details + ' segment'
				IF @RFANumSegTreated > 1 SET @Details = @Details + 's'
				END
			IF ISNULL(@RFANumTimesSegTreated,0)<>0
				BEGIN
				SET @Details = @Details + ', treated '
				If @RFANumTimesSegTreated = 1 SET @Details = @Details + 'once'
				ELSE SET @Details = @Details + cast(@RFANumTimesSegTreated as varchar(50)) + ' times'
				END
			IF ISNULL(@RFATreatmentFrom,0) <>0 OR ISNULL(@RFATreatmentTo,0) <>0
				BEGIN
				IF ISNULL(@RFATreatmentFrom,0) <> 0  SET @Details = @Details + ', starting at ' + cast(@RFATreatmentFrom as varchar(50)) +' cm'
				IF ISNULL(@RFATreatmentTo,0) <> 0 
				BEGIN
				IF ISNULL(@RFATreatmentFrom,0) <> 0 SET @Details = @Details + ' and ending at ' + cast(@RFATreatmentTo as varchar(50)) +' cm'
				ELSE  SET @Details = @Details + ' ending at ' + cast(@RFATreatmentTo as varchar(50)) +' cm'
				END
				SET @Details = @Details + ' from the incisors'
				END				

			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @GastrostomyInsertion =1
			BEGIN
			DECLARE @G bit, @J bit, @N bit
			SELECT @j = i.[JejunostomyInsertion], @G =i.[GastrostomyInsertion],@N = i.[NasoDuodenalTube] FROM [ERS_UpperGIIndications] i LEFT JOIN [ERS_Sites] s ON i.ProcedureId = s.ProcedureId WHERE s.SiteId = @SiteID
			IF @N = 1 SET @msg =' Nasojejunal tube (NJT)' ELSE IF @J= 1 SET @msg =' Jejunostomy insertion (PEJ)' ELSE SET @msg =' Gastrostomy insertion (PEG)'
			SET @Details = ''

			IF @GastrostomyInsertionType > 0
				BEGIN
				IF @GastrostomyInsertionSize>0
					BEGIN
					SET @Details = @Details + cast(@GastrostomyInsertionSize as varchar(50))
					IF @J=1 SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG units' AND [ListItemNo] = @GastrostomyInsertionUnits)
					ELSE IF @N =1 SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG units' AND [ListItemNo] = @GastrostomyInsertionUnits)
					ELSE SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG units' AND [ListItemNo] = @GastrostomyInsertionUnits)
					END
				END
				IF @GastrostomyInsertionType>0
						BEGIN
						IF @J=1 SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG type' AND [ListItemNo] = @GastrostomyInsertiontype)
						ELSE IF @N =1 SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG type' AND [ListItemNo] = @GastrostomyInsertiontype)
						ELSE SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG type' AND [ListItemNo] = @GastrostomyInsertiontype)
						END
				IF @GastrostomyInsertionBatchNo <> null AND @GastrostomyInsertionBatchNo <> ''  SET @Details = @Details + ' batch ' + @GastrostomyInsertionBatchNo
				
				IF @Details<>'' SET @msg = @msg + ': ' + @Details
				--Add full stop 
				SET @msg = RTrim(LTRIM(@msg))
				IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
				--------------
				SET @summary = @summary + @msg + @br
				END

		IF @PyloricDilatation= 1
		BEGIN
			SET @msg =' Pyloric dilatation'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @pHProbeInsert= 1
			BEGIN
			SET @msg =' pH probe insertion'
			SET @Details = ''
			IF @pHProbeInsertAt > 0 SET @Details = @Details + ' inserted at ' + CAST(@pHProbeInsertAt as varchar(50))+' cm'
			IF ISNULL(@pHProbeInsertChkTopTo,0) <> 0 
			BEGIN
				IF @Details <> '' SET @Details = @Details + ', '
				SET @Details = @Details + 'endoscopic check performed, top of probe at ' + CAST(@pHProbeInsertChkTopTo as varchar(50))+' cm'
			END
			--ELSE  SET @Details = @Details + ', insertion checked endoscopically'

			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @Haemospray= 1
		BEGIN
			SET @msg =' Haemospray'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @Sigmoidopexy= 1
		BEGIN
			
			SET @msg =' Sigmoidopexy'
			SET @Details = ''
			IF @SigmoidopexyQty > 0 SET @Details = @Details + CONVERT(VARCHAR, @SigmoidopexyQty)
			IF @SigmoidopexyMake > 0 SET @Details = @Details + ' ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Sigmoidopexy make' AND [ListItemNo] = @SigmoidopexyMake)

			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @Marking= 1
		BEGIN
			SET @msg =' Abnormality marked'
			SET @Details = ''
			IF @MarkingType > 0 SET @Details = @Details + ' by ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Abno marking' AND [ListItemNo] = @MarkingType)

			IF @Details<>'' SET @msg = @msg + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @Clip= 1
		BEGIN 
			SET @msg = CASE WHEN @ClipNum > 1 THEN  CAST(@ClipNum as varchar(5)) + ' clips'
							WHEN @ClipNum = 1 THEN  CAST(@ClipNum as varchar(5)) + ' clip'
							ELSE 'Clip'
						END
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF LTRIM(RTRIM(@other)) <> ''
			BEGIN
			SET @msg =' ' + LTRIM(RTRIM(@other))
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary =  @summary + @msg  +@br
		END

		--Remove last <br />
		IF RIGHT(RTRIM(@summary),6) = '<br />'
		BEGIN
			SET @summary = RTRIM(@summary)
			SET @summary = LEFT(@summary, LEN(@summary) - 6)
END

END

	-- Finally, update the summary in Therapeutics  table
	UPDATE dbo.ERS_UpperGITherapeutics 
	SET Summary=@summary 
	WHERE SiteId = @SiteId AND CarriedOutRole=1;	--### Summary text is Applicable only for TrainER....
	--WHERE Id = @TherapeuticId

	DECLARE @region VARCHAR(100)
	DECLARE @AreaNo INT
	DECLARE @insertionType VARCHAR(100)
	DECLARE @htmlAnchorCode VARCHAR(500)
	DECLARE @SummaryWithLinks VARCHAR(MAX)

	SELECT @region = CASE WHEN s.SiteNo = -77 THEN						--SiteNo is set to -77 for sites By Distance (Col & Sig only)
						CONVERT(VARCHAR,XCoordinate) +  
							CASE WHEN YCoordinate IS NULL OR YCoordinate=0 THEN ' cm' 
							ELSE (' to ' + CONVERT(VARCHAR,YCoordinate) + ' cm' ) 
							END
					ELSE (SELECT r.Region FROM ERS_Regions r WHERE r.RegionId = s.RegionId)
					END, 
			@AreaNo = ISNULL(AreaNo,0)
	FROM ERS_Sites s
	JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE SiteId = @SiteId

	SET @htmlAnchorCode = '<a href="#" class="sitesummary" onclick="OpenSiteDetails(''' + @region + ''',' + CONVERT(VARCHAR(10),@SiteId) + ',''Therapeutic Procedures'', ''{0}'' , '''+ CONVERT(VARCHAR,@AreaNo) +  ''');">{1}</a>'

	SET @Summary = ''
	SET @SummaryWithLinks = ''
	DECLARE @SummaryHeading VARCHAR(200) = 'Post procedure patient care'
	
	IF @GastrostomyInsertion = 1
	BEGIN
		SET @insertionType = 'PEG'
		SET @SummaryHeading = 'Instructions for PEG care'
		IF @FlangePosition > 0 SET @Summary = 'Flange at ' + CONVERT(varchar, @FlangePosition) + ' cm.'
		IF @NilByMouth = 1
		BEGIN
			IF @Summary <> '' SET @Summary = @Summary + ' Nil by mouth' ELSE SET @Summary = 'Nil by mouth'
			IF @NilByMouthHrs > 0
			BEGIN
				SET @Summary = @Summary + ' for ' + CONVERT(varchar, @NilByMouthHrs)
				IF @NilByMouthHrs = 1
					SET @Summary = @Summary + ' hour'
				ELSE
					SET @Summary = @Summary + ' hours'
			END
		END
		IF @NilByProc = 1
		BEGIN
			IF @Summary <> '' SET @Summary = @Summary + ', nil by PEG' ELSE SET @Summary = 'Nil by PEG'
			IF @NilByProcHrs > 0
			BEGIN
				SET @Summary = @Summary + ' for ' + CONVERT(varchar, @NilByProcHrs)
				IF @NilByProcHrs = 1
					SET @Summary = @Summary + ' hour'
				ELSE
					SET @Summary = @Summary + ' hours'
			END
		END
		IF @Summary <> '' SET @Summary = @Summary + '.'
		IF @AttachmentToWard = 1
		BEGIN
			IF @Summary <> '' SET @Summary = @Summary + ' All attachments for feeding returned to the ward with patient.' ELSE SET @Summary = 'All attachments for feeding returned to the ward with patient.'
		END
	END

	ELSE
	BEGIN
		IF @YAGLaser = 1
		BEGIN
			SET @insertionType = 'YAG'
			IF @OesoYAGNilByMouth = 1
			BEGIN
				SET @Summary = 'Nil by mouth'
				IF @OesoYAGNilByMouthHrs > 0
				BEGIN
					SET @Summary = @Summary + ' for ' + CONVERT(varchar, @OesoYAGNilByMouthHrs)
					IF @OesoYAGNilByMouthHrs = 1
						SET @Summary = @Summary + ' hour'
					ELSE
						SET @Summary = @Summary + ' hours'
				END
			END

			IF @OesoYAGWarmFluids = 1
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ', warm fluids' ELSE SET @Summary = 'Warm fluids'
				IF @OesoYAGWarmFluidsHrs > 0
				BEGIN
					SET @Summary = @Summary + ' for ' + CONVERT(varchar, @OesoYAGWarmFluidsHrs)
					IF @OesoYAGWarmFluidsHrs = 1
						SET @Summary = @Summary + ' hour'
					ELSE
						SET @Summary = @Summary + ' hours'
				END
			END

			IF @OesoYAGSoftDiet = 1
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ', soft diet' ELSE SET @Summary = 'Soft diet'
				IF @OesoYAGSoftDietDays > 0
				BEGIN
					SET @Summary = @Summary + ' for ' + CONVERT(varchar, @OesoYAGSoftDietDays)
					IF @OesoYAGSoftDietDays = 1
						SET @Summary = @Summary + ' day'
					ELSE
						SET @Summary = @Summary + ' days'
				END
			END

			IF @Summary <> '' SET @Summary = @Summary + '.'

			IF @OesoYAGMedicalReview = 1
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ' Medical review before discharge.' ELSE SET @Summary = 'Medical review before discharge.'
			END
		END

	
		IF @OesophagealDilatation = 1 OR @StentInsertion = 1
		BEGIN
			SET @insertionType = 'STENT'
			IF @OesoDilNilByMouth = 1
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ' Nil by mouth' ELSE SET @Summary = 'Nil by mouth'
				IF @OesoDilNilByMouthHrs > 0
				BEGIN
					SET @Summary = @Summary + ' for ' + CONVERT(varchar, @OesoDilNilByMouthHrs)
					IF @OesoDilNilByMouthHrs = 1
						SET @Summary = @Summary + ' hour'
					ELSE
						SET @Summary = @Summary + ' hours'
				END
			END

			IF @OesoDilWarmFluids = 1
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ', warm fluids' ELSE SET @Summary = 'Warm fluids'
				IF @OesoDilWarmFluidsHrs > 0
				BEGIN
					SET @Summary = @Summary + ' for ' + CONVERT(varchar, @OesoDilWarmFluidsHrs)
					IF @OesoDilWarmFluidsHrs = 1
						SET @Summary = @Summary + ' hour'
					ELSE
						SET @Summary = @Summary + ' hours'
				END
			END

			IF @OesoDilSoftDiet = 1
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ', soft diet' ELSE SET @Summary = 'Soft diet'
				IF @OesoDilSoftDietDays > 0
				BEGIN
					SET @Summary = @Summary + ' for ' + CONVERT(varchar, @OesoDilSoftDietDays)
					IF @OesoDilSoftDietDays = 1
						SET @Summary = @Summary + ' day'
					ELSE
						SET @Summary = @Summary + ' days'
				END
			END

			IF @OesoDilXRay = 1
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ', chest X-ray' ELSE SET @Summary = 'Chest X-ray'
				IF @OesoDilXRayHrs > 0
				BEGIN
					SET @Summary = @Summary + ' for ' + CONVERT(varchar, @OesoDilXRayHrs)
					IF @OesoDilXRayHrs = 1
						SET @Summary = @Summary + ' hour'
					ELSE
						SET @Summary = @Summary + ' hours'
				END
			END

			IF @Summary <> '' SET @Summary = @Summary + '.'

			IF @OesoDilMedicalReview = 1
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ' Medical review before discharge.' ELSE SET @Summary = 'Medical review before discharge.'
			END
		END

		IF @Sigmoidopexy= 1
		BEGIN
			SET @SummaryHeading = 'Ward instructions'
			IF ISNULL(@SigmoidopexyFluidsDays,0) > 0
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ' '
				SET @Summary = @Summary + 'Clear fluids for ' + CONVERT(varchar, @SigmoidopexyFluidsDays) 
								+ CASE WHEN @SigmoidopexyFluidsDays > 1 THEN ' days.' else ' day.' END
			END
			IF ISNULL(@SigmoidopexyAntibioticsDays,0) > 0
			BEGIN
				IF @Summary <> '' SET @Summary = @Summary + ' '
				SET @Summary = @Summary + 'Antibiotics for ' + CONVERT(varchar, @SigmoidopexyAntibioticsDays) 
								+ CASE WHEN @SigmoidopexyAntibioticsDays > 1 THEN ' days.' ELSE ' day.' END
			END
		END
	END


	-- Finally, update the summary in PP_InstForCare  table
	UPDATE p
	SET PP_InstForCare = @Summary
		, PP_InstForCareHeading = @SummaryHeading
		, PP_InstForCareWithLinks = REPLACE(REPLACE(@htmlAnchorCode, '{0}', @insertionType), '{1}', @Summary)
	FROM ERS_ProceduresReporting p
	INNER JOIN ERS_Sites s ON p.ProcedureId = s.ProcedureId
	WHERE s.SiteId = @SiteId;

	DROP TABLE #tmp_UpperGITherapeutics;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------222a Create Proc therapeutics_ercp_summary_update -----------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'therapeutics_ercp_summary_update', 'S';
GO

CREATE PROCEDURE [dbo].[therapeutics_ercp_summary_update]
(
	@TherapeuticId AS INT,
	@SiteId INT
)
AS
	SET NOCOUNT ON
	DECLARE	  @msg		VARCHAR(1000)
			, @Details	VARCHAR(1000)
			, @Summary	VARCHAR(4000)=''
			, @Area		VARCHAR(500)=''
			, @br VARCHAR(6) = '<br />';

	DECLARE
	@None BIT,
	@YAGLaser BIT,
	@YAGLaserWatts INT,
	@YAGLaserPulses INT,
	@YAGLaserSecs decimal(8,2),
	@YAGLaserKJ decimal(8,2),
	@ArgonBeamDiathermy BIT,
	@ArgonBeamDiathermyWatts INT,
	@ArgonBeamDiathermyPulses INT,
	@ArgonBeamDiathermySecs decimal(8,2),
	@ArgonBeamDiathermyKJ decimal(8,2),		
	@HeatProbe BIT,					
	@BicapElectro BIT,				
	@Diathermy BIT,						
	@HotBiopsy BIT,
	@BandLigation BIT,
    @BotoxInjection BIT,
    @EndoloopPlacement BIT,
    @ForeignBody BIT,
	@Injection BIT,
	@InjectionType INT,
	@InjectionVolume INT,
	@InjectionNumber INT,
	@GastrostomyInsertion BIT,
	@GastrostomyInsertionSize INT,
	@GastrostomyInsertionUnits TINYINT,
	@GastrostomyInsertionType TINYINT,
	@GastrostomyInsertionBatchNo VARCHAR(100),
	@NilByMouth BIT,
	@NilByMouthHrs INT,
	@NilByProc BIT,
	@NilByProcHrs INT,
	@AttachmentToWard BIT,
	@PyloricDilatation BIT,	
	@StentInsertion BIT,
	@StentInsertionQty INT,
	@StentInsertionType SMALLINT,
	@StentInsertionLength INT,
	@StentInsertionDiameter INT,
	@StentInsertionDiameterUnits TINYINT,
	@RadioactiveWirePlaced BIT,	
	@StentInsertionBatchNo VARCHAR(100),
	@StentRemoval BIT,
	@StentRemovalTechnique INT,
	@EMR BIT,
	@EMRType TINYINT,
	@EMRFluid INT,
	@EMRFluidVolume INT,
	@Marking BIT,
	@MarkingType INT,
	@Clip BIT,						
	@ClipNum INT,
	@Papillotomy BIT,
	@Sphincterotome TINYINT,
	@PapillotomyLength REAL,
	@PapillotomyAcceptBalloonSize REAL,
	@ReasonForPapillotomy TINYINT,
	@PapillotomyBleeding TINYINT,
	@SphincterDecompressed TINYINT,
	@PanOrificeSphincterotomy BIT,
	@StoneRemoval BIT,
	@RemovalUsing TINYINT,
	@ExtractionOutcome TINYINT,
	@InadequateSphincterotomy BIT,
	@StoneSize BIT,
	@QuantityOfStones BIT,
	@ImpactedStones BIT,
	@OtherReason BIT,
	@OtherReasonText VARCHAR(200),
	@StoneDecompressed TINYINT,
	@StrictureDilatation BIT,
	@DilatedTo REAL,
	@DilatationUnits TINYINT,
	@DilatorType TINYINT,
	@EndoscopicCystPuncture BIT,
	@CystPunctureDevice TINYINT,
	@CystPunctureVia TINYINT,
	@Cannulation BIT,
	@Manometry BIT,
	@Haemostasis BIT,
	@NasopancreaticDrain BIT,
	@RendezvousProcedure BIT,
	@SnareExcision SMALLINT,
	@BalloonDilation BIT,
	@BalloonDilatedTo REAL,
	@BalloonDilatationUnits SMALLINT,
	@BalloonDilatorType SMALLINT,
	@BalloonTrawl BIT,
	@BalloonTrawlDilatorType SMALLINT,
	@BalloonTrawlDilatorSize REAL,
	@BalloonTrawlDilatorUnits SMALLINT,
	@BalloonDecompressed TINYINT,
	@DiagCholangiogram SMALLINT,
	@DiagPancreatogram SMALLINT,
	@EndoscopistRole SMALLINT,
	@Other VARCHAR(1000),
		@EUSProcType SMALLINT;

--BEGIN TRY

	SELECT * INTO #tmp_ERCPTherapeutics 
	FROM dbo.ERS_ERCPTherapeutics 
	WHERE (Id = @TherapeuticId OR SiteID = @SiteId)

--## 1) If 'CarriedOutRole=2 (EE)' record is found for a SiteId in [ERS_ERCPTherapeutics] means it has both EE/ER Entries...
	--IF EXISTS(SELECT 'ER' FROM dbo.ERS_ERCPTherapeutics WHERE SiteId=@SiteId AND CarriedOutRole=2)
		BEGIN
			--PRINT '[ERS_ERCPTherapeutics] has both EE/ER Entries...';
			;WITH eeRecord AS(
				SELECT * FROM #tmp_ERCPTherapeutics WHERE CarriedOutRole = (SELECT MAX(CarriedOutRole) FROM #tmp_ERCPTherapeutics) --## 2 is EE
			)
			SELECT
				@None				= (CASE WHEN IsNull(ER.[None], 0) = 0 THEN EE.[None] ELSE ER.[None] END),
				@YAGLaser			= (CASE WHEN IsNull(ER.YAGLaser, 0) = 0 THEN EE.YAGLaser ELSE ER.YAGLaser END),
				@YAGLaserWatts		= (CASE WHEN IsNull(ER.YAGLaserWatts, 0) = 0 THEN EE.YAGLaserWatts ELSE ER.YAGLaserWatts END),
				@YAGLaserPulses		= (CASE WHEN IsNull(ER.YAGLaserPulses, 0) = 0 THEN EE.YAGLaserPulses ELSE ER.YAGLaserPulses END),
				@YAGLaserSecs		= (CASE WHEN IsNull(ER.YAGLaserSecs, 0) = 0 THEN EE.YAGLaserSecs ELSE ER.YAGLaserSecs END),
				@YAGLaserKJ			= (CASE WHEN IsNull(ER.YAGLaserKJ, 0) = 0 THEN EE.YAGLaserKJ ELSE ER.YAGLaserKJ END),
				@ArgonBeamDiathermy	= (CASE WHEN IsNull(ER.ArgonBeamDiathermy, 0) = 0 THEN EE.ArgonBeamDiathermy ELSE ER.ArgonBeamDiathermy END),
				@ArgonBeamDiathermyWatts		= (CASE WHEN IsNull(ER.ArgonBeamDiathermyWatts, 0) = 0 THEN EE.ArgonBeamDiathermyWatts ELSE ER.ArgonBeamDiathermyWatts END),
				@ArgonBeamDiathermyPulses		= (CASE WHEN IsNull(ER.ArgonBeamDiathermyPulses, 0) = 0 THEN EE.ArgonBeamDiathermyPulses ELSE ER.ArgonBeamDiathermyPulses END),
				@ArgonBeamDiathermySecs			= (CASE WHEN IsNull(ER.ArgonBeamDiathermySecs, 0) = 0 THEN EE.ArgonBeamDiathermySecs ELSE ER.ArgonBeamDiathermySecs END),
				@ArgonBeamDiathermyKJ			= (CASE WHEN IsNull(ER.ArgonBeamDiathermyKJ, 0) = 0 THEN EE.ArgonBeamDiathermyKJ ELSE ER.ArgonBeamDiathermyKJ END),
				@HeatProbe			= (CASE WHEN IsNull(ER.HeatProbe, 0) = 0 THEN EE.HeatProbe ELSE ER.HeatProbe END),
				@BicapElectro		= (CASE WHEN IsNull(ER.BicapElectro, 0) = 0 THEN EE.BicapElectro ELSE ER.BicapElectro END),
				@Diathermy			= (CASE WHEN IsNull(ER.Diathermy, 0) = 0 THEN EE.Diathermy ELSE ER.Diathermy END),
				@HotBiopsy			= (CASE WHEN IsNull(ER.HotBiopsy, 0) = 0 THEN EE.HotBiopsy ELSE ER.HotBiopsy END),
				@BandLigation= (CASE WHEN IsNull(ER.BandLigation, 0) = 0 THEN EE.BandLigation ELSE ER.BandLigation END),
				@BotoxInjection = (CASE WHEN IsNull(ER.BotoxInjection, 0) = 0 THEN EE.BotoxInjection ELSE ER.BotoxInjection END),
				@EndoloopPlacement = (CASE WHEN IsNull(ER.EndoloopPlacement, 0) = 0 THEN EE.EndoloopPlacement ELSE ER.EndoloopPlacement END),
				@ForeignBody= (CASE WHEN IsNull(ER.ForeignBody, 0) = 0 THEN EE.ForeignBody ELSE ER.ForeignBody END),
				@Injection			= (CASE WHEN IsNull(ER.Injection, 0) = 0 THEN EE.Injection ELSE ER.Injection END),
				@InjectionType		= (CASE WHEN IsNull(ER.InjectionType, 0) = 0 THEN EE.InjectionType ELSE ER.InjectionType END),
				@InjectionVolume	= (CASE WHEN IsNull(ER.InjectionVolume, 0) = 0 THEN EE.InjectionVolume ELSE ER.InjectionVolume END),
				@InjectionNumber	= (CASE WHEN IsNull(ER.InjectionNumber, 0) = 0 THEN EE.InjectionNumber ELSE ER.InjectionNumber END),
				@GastrostomyInsertion			= (CASE WHEN IsNull(ER.GastrostomyInsertion, 0) = 0 THEN EE.GastrostomyInsertion ELSE ER.GastrostomyInsertion END),
				@GastrostomyInsertionSize		= (CASE WHEN IsNull(ER.GastrostomyInsertionSize, 0) = 0 THEN EE.GastrostomyInsertionSize ELSE ER.GastrostomyInsertionSize END),
				@GastrostomyInsertionUnits		= (CASE WHEN ER.GastrostomyInsertionUnits IS NULL THEN EE.GastrostomyInsertionUnits ELSE ER.GastrostomyInsertionUnits END),
				@GastrostomyInsertionType		= (CASE WHEN IsNull(ER.GastrostomyInsertionType, 0) = 0 THEN EE.GastrostomyInsertionType ELSE ER.GastrostomyInsertionType END),
				@GastrostomyInsertionBatchNo	= (CASE WHEN IsNull(ER.GastrostomyInsertionBatchNo, '') = '' THEN EE.GastrostomyInsertionBatchNo ELSE ER.GastrostomyInsertionBatchNo END),
				@NilByMouth			= (CASE WHEN IsNull(ER.NilByMouth, 0) = 0 THEN EE.NilByMouth ELSE ER.NilByMouth END),
				@NilByMouthHrs		= (CASE WHEN IsNull(ER.NilByMouthHrs, 0) = 0 THEN EE.NilByMouthHrs ELSE ER.NilByMouthHrs END),
				@NilByProc			= (CASE WHEN IsNull(ER.NilByProc, 0) = 0 THEN EE.NilByProc ELSE ER.NilByProc END),
				@NilByProcHrs		= (CASE WHEN IsNull(ER.NilByProcHrs, 0) = 0 THEN EE.NilByProcHrs ELSE ER.NilByProcHrs END),
				@AttachmentToWard	= (CASE WHEN IsNull(ER.AttachmentToWard, 0) = 0 THEN EE.AttachmentToWard ELSE ER.AttachmentToWard END),
				@PyloricDilatation	= (CASE WHEN IsNull(ER.PyloricDilatation, 0) = 0 THEN EE.PyloricDilatation ELSE ER.PyloricDilatation END),
				@StentInsertion		= (CASE WHEN IsNull(ER.StentInsertion, 0) = 0 THEN EE.StentInsertion ELSE ER.StentInsertion END),
				@StentInsertionQty	= (CASE WHEN IsNull(ER.StentInsertionQty, 0) = 0 THEN EE.StentInsertionQty ELSE ER.StentInsertionQty END),
				@StentInsertionType	= (CASE WHEN IsNull(ER.StentInsertionType, 0) = 0 THEN EE.StentInsertionType ELSE ER.StentInsertionType END),
				@StentInsertionLength			= (CASE WHEN IsNull(ER.StentInsertionLength, 0) = 0 THEN EE.StentInsertionLength ELSE ER.StentInsertionLength END),
				@StentInsertionDiameter			= (CASE WHEN IsNull(ER.StentInsertionDiameter, 0) = 0 THEN EE.StentInsertionDiameter ELSE ER.StentInsertionDiameter END),
				@StentInsertionDiameterUnits	= (CASE WHEN ER.StentInsertionDiameterUnits IS NULL THEN EE.StentInsertionDiameterUnits ELSE ER.StentInsertionDiameterUnits END),
				@RadioactiveWirePlaced			= (CASE WHEN IsNull(ER.RadioactiveWirePlaced, 0) = 0 THEN EE.RadioactiveWirePlaced ELSE ER.RadioactiveWirePlaced END),
				@StentInsertionBatchNo			= (CASE WHEN IsNull(ER.StentInsertionBatchNo,'')= '' THEN EE.StentInsertionBatchNo ELSE ER.StentInsertionBatchNo END),
				@StentRemoval					= (CASE WHEN IsNull(ER.StentRemoval, 0) = 0 THEN EE.StentRemoval ELSE ER.StentRemoval END),
				@StentRemovalTechnique			= (CASE WHEN IsNull(ER.StentRemovalTechnique, 0) = 0 THEN EE.StentRemovalTechnique ELSE ER.StentRemovalTechnique END),
				@EMR				= (CASE WHEN IsNull(ER.EMR, 0) = 0 THEN EE.EMR ELSE ER.EMR END),
				@EMRType			= (CASE WHEN IsNull(ER.EMRType, 0) = 0 THEN EE.EMRType ELSE ER.EMRType END),
				@EMRFluid			= (CASE WHEN IsNull(ER.EMRFluid, 0) = 0 THEN EE.EMRFluid ELSE ER.EMRFluid END),
				@EMRFluidVolume		= (CASE WHEN IsNull(ER.EMRFluidVolume, 0) = 0 THEN EE.EMRFluidVolume ELSE ER.EMRFluidVolume END),
				@Marking			= (CASE WHEN IsNull(ER.Marking, 0) = 0 THEN EE.Marking ELSE ER.Marking END),
				@MarkingType		= (CASE WHEN IsNull(ER.MarkingType, 0) = 0 THEN EE.MarkingType ELSE ER.MarkingType END),
				@Clip				= (CASE WHEN IsNull(ER.Clip, 0) = 0 THEN EE.Clip ELSE ER.Clip END),
				@ClipNum			= (CASE WHEN IsNull(ER.ClipNum, 0) = 0 THEN EE.ClipNum ELSE ER.ClipNum END),
				@Papillotomy		= (CASE WHEN IsNull(ER.Papillotomy, 0) = 0 THEN EE.Papillotomy ELSE ER.Papillotomy END),
				@Sphincterotome		= (CASE WHEN IsNull(ER.Sphincterotome, 0) = 0 THEN EE.Sphincterotome ELSE ER.Sphincterotome END),
				@PapillotomyLength	= (CASE WHEN IsNull(ER.PapillotomyLength, 0) = 0 THEN EE.PapillotomyLength ELSE ER.PapillotomyLength END),
				@PapillotomyAcceptBalloonSize	= (CASE WHEN IsNull(ER.PapillotomyAcceptBalloonSize, 0) = 0 THEN EE.PapillotomyAcceptBalloonSize ELSE ER.PapillotomyAcceptBalloonSize END),
				@ReasonForPapillotomy		= (CASE WHEN IsNull(ER.ReasonForPapillotomy, 0) = 0 THEN EE.ReasonForPapillotomy ELSE ER.ReasonForPapillotomy END),
				@PapillotomyBleeding		= (CASE WHEN IsNull(ER.PapillotomyBleeding, 0) = 0 THEN EE.PapillotomyBleeding ELSE ER.PapillotomyBleeding END),
				@SphincterDecompressed		= (CASE WHEN IsNull(ER.SphincterDecompressed, 0) = 0 THEN EE.SphincterDecompressed ELSE ER.SphincterDecompressed END),
				@PanOrificeSphincterotomy	= (CASE WHEN IsNull(ER.PanOrificeSphincterotomy, 0) = 0 THEN EE.PanOrificeSphincterotomy ELSE ER.PanOrificeSphincterotomy END),
				@StoneRemoval				= (CASE WHEN IsNull(ER.StoneRemoval, 0) = 0 THEN EE.StoneRemoval ELSE ER.StoneRemoval END),
				@RemovalUsing				= (CASE WHEN IsNull(ER.RemovalUsing, 0) = 0 THEN EE.RemovalUsing ELSE ER.RemovalUsing END),
				@ExtractionOutcome			= (CASE WHEN IsNull(ER.ExtractionOutcome, 0) = 0 THEN EE.ExtractionOutcome ELSE ER.ExtractionOutcome END),
				@InadequateSphincterotomy	= (CASE WHEN IsNull(ER.InadequateSphincterotomy, 0) = 0 THEN EE.InadequateSphincterotomy ELSE ER.InadequateSphincterotomy END),
				@StoneSize			= (CASE WHEN IsNull(ER.StoneSize, 0) = 0 THEN EE.StoneSize ELSE ER.StoneSize END),
				@QuantityOfStones	= (CASE WHEN IsNull(ER.QuantityOfStones, 0) = 0 THEN EE.QuantityOfStones ELSE ER.QuantityOfStones END),
				@ImpactedStones		= (CASE WHEN IsNull(ER.ImpactedStones, 0) = 0 THEN EE.ImpactedStones ELSE ER.ImpactedStones END),
				@OtherReason		= (CASE WHEN IsNull(ER.OtherReason, 0) = 0 THEN EE.OtherReason ELSE ER.OtherReason END),
				@OtherReasonText	= (CASE WHEN IsNull(ER.OtherReasonText, '') = '' THEN EE.OtherReasonText ELSE ER.OtherReasonText END),
				@StoneDecompressed	= (CASE WHEN IsNull(ER.StoneDecompressed, 0) = 0 THEN EE.StoneDecompressed ELSE ER.StoneDecompressed END),
				@StrictureDilatation= (CASE WHEN IsNull(ER.StrictureDilatation, 0) = 0 THEN EE.StrictureDilatation ELSE ER.StrictureDilatation END),
				@DilatedTo			= (CASE WHEN IsNull(ER.DilatedTo, 0) = 0 THEN EE.DilatedTo ELSE ER.DilatedTo END),
				@DilatationUnits	= (CASE WHEN ER.DilatationUnits IS NULL THEN EE.DilatationUnits ELSE ER.DilatationUnits END),
				@DilatorType		= (CASE WHEN IsNull(ER.DilatorType, 0) = 0 THEN EE.DilatorType ELSE ER.DilatorType END),
				@EndoscopicCystPuncture	= (CASE WHEN IsNull(ER.EndoscopicCystPuncture, 0) = 0 THEN EE.EndoscopicCystPuncture ELSE ER.EndoscopicCystPuncture END),
				@CystPunctureDevice		= (CASE WHEN IsNull(ER.CystPunctureDevice, 0) = 0 THEN EE.CystPunctureDevice ELSE ER.CystPunctureDevice END),
				@CystPunctureVia		= (CASE WHEN IsNull(ER.CystPunctureVia, 0) = 0 THEN EE.CystPunctureVia ELSE ER.CystPunctureVia END),
				@Cannulation			= (CASE WHEN IsNull(ER.Cannulation, 0) = 0 THEN EE.Cannulation ELSE ER.Cannulation END),
				@Manometry				= (CASE WHEN IsNull(ER.Manometry, 0) = 0 THEN EE.Manometry ELSE ER.Manometry END),
				@Haemostasis			= (CASE WHEN IsNull(ER.Haemostasis, 0) = 0 THEN EE.Haemostasis ELSE ER.Haemostasis END),
				@NasopancreaticDrain	= (CASE WHEN IsNull(ER.NasopancreaticDrain, 0) = 0 THEN EE.NasopancreaticDrain ELSE ER.NasopancreaticDrain END),
				@RendezvousProcedure	= (CASE WHEN IsNull(ER.RendezvousProcedure, 0) = 0 THEN EE.RendezvousProcedure ELSE ER.RendezvousProcedure END),
				@SnareExcision			= (CASE WHEN IsNull(ER.SnareExcision, 0) = 0 THEN EE.SnareExcision ELSE ER.SnareExcision END),
				@BalloonDilation		= (CASE WHEN IsNull(ER.BalloonDilation, 0) = 0 THEN EE.BalloonDilation ELSE ER.BalloonDilation END),
				@BalloonDilatedTo		= (CASE WHEN IsNull(ER.BalloonDilatedTo, 0) = 0 THEN EE.BalloonDilatedTo ELSE ER.BalloonDilatedTo END),
				@BalloonDilatationUnits	= (CASE WHEN IsNull(ER.BalloonDilatationUnits, 0) = 0 THEN EE.BalloonDilatationUnits ELSE ER.BalloonDilatationUnits END),
				@BalloonDilatorType		= (CASE WHEN IsNull(ER.BalloonDilatorType, 0) = 0 THEN EE.BalloonDilatorType ELSE ER.BalloonDilatorType END),
				@BalloonTrawl			= (CASE WHEN IsNull(ER.BalloonTrawl, 0) = 0 THEN EE.BalloonTrawl ELSE ER.BalloonTrawl END),
				@BalloonTrawlDilatorType	= (CASE WHEN IsNull(ER.BalloonTrawlDilatorType, 0) = 0 THEN EE.BalloonTrawlDilatorType ELSE ER.BalloonTrawlDilatorType END),
				@BalloonTrawlDilatorSize	= (CASE WHEN IsNull(ER.BalloonTrawlDilatorSize, 0) = 0 THEN EE.BalloonTrawlDilatorSize ELSE ER.BalloonTrawlDilatorSize END),
				@BalloonTrawlDilatorUnits	= (CASE WHEN IsNull(ER.BalloonTrawlDilatorUnits, 0) = 0 THEN EE.BalloonTrawlDilatorUnits ELSE ER.BalloonTrawlDilatorUnits END),
				@BalloonDecompressed		= (CASE WHEN IsNull(ER.BalloonDecompressed, 0) = 0 THEN EE.BalloonDecompressed ELSE ER.BalloonDecompressed END),
				@DiagCholangiogram			= (CASE WHEN IsNull(ER.DiagCholangiogram, 0) = 0 THEN EE.DiagCholangiogram ELSE ER.DiagCholangiogram END),
				@DiagPancreatogram			= (CASE WHEN IsNull(ER.DiagPancreatogram, 0) = 0 THEN EE.DiagPancreatogram ELSE ER.DiagPancreatogram END),
				@EndoscopistRole			= (CASE WHEN IsNull(ER.CarriedOutRole, 0) = 0 THEN EE.CarriedOutRole ELSE ER.CarriedOutRole END),
				@Other						= (CASE WHEN IsNull(ER.Other, '') ='' THEN EE.Other ELSE ER.Other END),
				@EUSProcType				= (CASE WHEN IsNull(ER.EUSProcType, 0) = 0 THEN EE.EUSProcType ELSE ER.EUSProcType END)
			FROM eeRecord AS EE
	  INNER JOIN #tmp_ERCPTherapeutics AS ER ON EE.SiteId = ER.SiteId
		   WHERE ER.CarriedOutRole = 1; --## 1 is ER
		END	--## Selecting from Combine
	--ELSE
	--	--## 2) ELSE - THere is only ER present.. So- no need to Combine them...
	--	BEGIN
	--		--PRINT 'ONLY ER Exist- at ERS_UpperGITherapeutics';
	--		SELECT
	--			@None				=	[None],	
	--			@YAGLaser			=	YAGLaser,	
	--			@YAGLaserWatts		=	YAGLaserWatts,	
	--			@YAGLaserPulses		=	YAGLaserPulses,	
	--			@YAGLaserSecs		=	YAGLaserSecs,	
	--			@YAGLaserKJ			=	YAGLaserKJ,	
	--			@ArgonBeamDiathermy	=	ArgonBeamDiathermy,	
	--			@ArgonBeamDiathermyWatts		=	ArgonBeamDiathermyWatts,	
	--			@ArgonBeamDiathermyPulses		=	ArgonBeamDiathermyPulses,	
	--			@ArgonBeamDiathermySecs			=	ArgonBeamDiathermySecs,	
	--			@ArgonBeamDiathermyKJ			=	ArgonBeamDiathermyKJ,	
	--			@HeatProbe			=	HeatProbe,	
	--			@BicapElectro		=	BicapElectro,	
	--			@Diathermy			=	Diathermy,	
	--			@HotBiopsy			=	HotBiopsy,	
	--			@Injection			=	Injection,	
	--			@InjectionType		=	InjectionType,	
	--			@InjectionVolume	=	InjectionVolume,	
	--			@InjectionNumber	=	InjectionNumber,	
	--			@GastrostomyInsertion			=	GastrostomyInsertion,	
	--			@GastrostomyInsertionSize		=	GastrostomyInsertionSize,	
	--			@GastrostomyInsertionUnits		=	GastrostomyInsertionUnits,	
	--			@GastrostomyInsertionType		=	GastrostomyInsertionType,	
	--			@GastrostomyInsertionBatchNo	=	ISNULL(GastrostomyInsertionBatchNo,''),	
	--			@NilByMouth			=	NilByMouth,	
	--			@NilByMouthHrs		=	NilByMouthHrs,	
	--			@NilByProc			=	NilByProc,	
	--			@NilByProcHrs		=	NilByProcHrs,	
	--			@AttachmentToWard	=	AttachmentToWard,	
	--			@PyloricDilatation	=	PyloricDilatation,	
	--			@StentInsertion		=	StentInsertion,	
	--			@StentInsertionQty	=	StentInsertionQty,	
	--			@StentInsertionType	=	StentInsertionType,	
	--			@StentInsertionLength			=	StentInsertionLength,	
	--			@StentInsertionDiameter			=	StentInsertionDiameter,	
	--			@StentInsertionDiameterUnits	=	StentInsertionDiameterUnits,	
	--			@RadioactiveWirePlaced			=	RadioactiveWirePlaced,	
	--			@StentInsertionBatchNo			=	ISNULL(StentInsertionBatchNo,''),
	--			@StentRemoval					=	StentRemoval,	
	--			@StentRemovalTechnique			=	StentRemovalTechnique,	
	--			@EMR				=	EMR,	
	--			@EMRType			=	EMRType,	
	--			@EMRFluid			=	EMRFluid,	
	--			@EMRFluidVolume		=	EMRFluidVolume,	
	--			@Marking			=	Marking,	
	--			@MarkingType		=	MarkingType,	
	--			@Clip				=	Clip,	
	--			@ClipNum			=	ClipNum,	
	--			@Papillotomy		=	Papillotomy,	
	--			@Sphincterotome		=	Sphincterotome,	
	--			@PapillotomyLength	=	PapillotomyLength,	
	--			@PapillotomyAcceptBalloonSize	=	PapillotomyAcceptBalloonSize,	
	--			@ReasonForPapillotomy		=	ReasonForPapillotomy,	
	--			@PapillotomyBleeding		=	PapillotomyBleeding,	
	--			@SphincterDecompressed		=	SphincterDecompressed,	
	--			@PanOrificeSphincterotomy	=	PanOrificeSphincterotomy,	
	--			@StoneRemoval				=	StoneRemoval,	
	--			@RemovalUsing				=	RemovalUsing,	
	--			@ExtractionOutcome			=	ExtractionOutcome,	
	--			@InadequateSphincterotomy	=	InadequateSphincterotomy,	
	--			@StoneSize			=	StoneSize,	
	--			@QuantityOfStones	=	QuantityOfStones,	
	--			@ImpactedStones		=	ImpactedStones,	
	--			@OtherReason		=	OtherReason,	
	--			@OtherReasonText	=	OtherReasonText,	
	--			@StoneDecompressed	=	StoneDecompressed,	
	--			@StrictureDilatation=	StrictureDilatation,	
	--			@DilatedTo			=	DilatedTo,	
	--			@DilatationUnits	=	DilatationUnits,	
	--			@DilatorType		=	DilatorType,	
	--			@EndoscopicCystPuncture	=	EndoscopicCystPuncture,	
	--			@CystPunctureDevice		=	CystPunctureDevice,	
	--			@CystPunctureVia		=	CystPunctureVia,	
	--			@Cannulation			=	Cannulation,	
	--			@Manometry				=	Manometry,	
	--			@Haemostasis			=	Haemostasis,	
	--			@NasopancreaticDrain	=	NasopancreaticDrain,	
	--			@RendezvousProcedure	=	RendezvousProcedure,	
	--			@SnareExcision			=	SnareExcision,	
	--			@BalloonDilation		=	BalloonDilation,	
	--			@BalloonDilatedTo		=	BalloonDilatedTo,	
	--			@BalloonDilatationUnits	=	BalloonDilatationUnits,	
	--			@BalloonDilatorType		=	BalloonDilatorType,	
	--			@BalloonTrawl			=	BalloonTrawl,	
	--			@BalloonTrawlDilatorType	=	BalloonTrawlDilatorType,	
	--			@BalloonTrawlDilatorSize	=	BalloonTrawlDilatorSize,	
	--			@BalloonTrawlDilatorUnits	=	BalloonTrawlDilatorUnits,	
	--			@BalloonDecompressed		=	BalloonDecompressed,	
	--			@DiagCholangiogram			=	DiagCholangiogram,	
	--			@DiagPancreatogram			=	DiagPancreatogram,	
	--			@EndoscopistRole			=	CarriedOutRole,	
	--			@Other						=	Other,	
	--			@EUSProcType				=	EUSProcType
	--		FROM dbo.[ERS_ERCPTherapeutics]
 -- 		   WHERE Id= @TherapeuticId
	--	END --## Selecting from ERCP Therap- Only ER Row...						
	
	IF @None = 1
		SET @summary = @summary + 'No specimens taken'
	ELSE
	BEGIN
		----------------------
        -- Sphincterotomy
        ----------------------
		IF @Papillotomy = 1
		BEGIN
			SET @msg =' Sphincterotomy'
			SET @Details = ''
			IF @ReasonForPapillotomy > 0 
			BEGIN
				SET @Details = @Details + ' ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'ERCP papillotomy reason' AND [ListItemNo] = @ReasonForPapillotomy)

				--Place the word 'for' in front of the reason for the papillotomy if required.
				IF LEFT(UPPER(LTRIM(@Details)),4) <> 'FOR ' SET @Details = ' for ' + @Details
				SET @msg = @msg + ' (' + @Details + ')'
				SET @Details = ''
			END
			IF @PapillotomyLength > 0 SET @Details = @Details + ' ' + CAST(@PapillotomyLength as varchar(50)) + 'mm'
			IF @Sphincterotome > 0 SET @Details = @Details + ' using ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Therapeutic ERCP sphincterotomes' AND [ListItemNo] = @Sphincterotome)
			IF @PapillotomyBleeding > 0 
			BEGIN
				If LEN(RTRIM(LTRIM(@Details))) > 0 SET @Details = @Details + ','
				SET @Details = @Details + CASE @PapillotomyBleeding
											WHEN 1 THEN ' with no bleeding'   
											WHEN 2 THEN ' with minor bleeding'  
											WHEN 3 THEN ' with major bleeding'
											ELSE '' 
										END   
			END
			IF @PapillotomyAcceptBalloonSize > 0 
			BEGIN
				If LEN(RTRIM(LTRIM(@Details))) > 0 SET @Details = @Details + ','
				SET @Details = @Details + ' incision accepted ' + cast(@PapillotomyAcceptBalloonSize as varchar(50)) + 'ml balloon'
			END
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END
		
		----------------------
        -- Pancreatic orifice sphincterotomy
        ----------------------
		IF @PanOrificeSphincterotomy = 1
		BEGIN
			SET @msg =' Pancreatic orifice sphincterotomy'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		----------------------
        -- Stone removal
        ----------------------
		IF @StoneRemoval = 1
		BEGIN
			SET @msg =' Stone removal'
			SET @Details = ''

			IF @ExtractionOutcome > 0 
			BEGIN
				SET @Details = @Details + CASE @ExtractionOutcome
											WHEN 1 THEN ' complete extraction'   
											WHEN 2 THEN ' fragmented'  
											WHEN 3 THEN ' partial extraction'
											WHEN 4 THEN ' unable to extract'
											ELSE '' 
										END   
				DECLARE @cnt bit = 0
				IF @ExtractionOutcome BETWEEN 3 AND 4
				BEGIN
					DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
					DECLARE @XMLlist XML

					IF @InadequateSphincterotomy > 0
					BEGIN
						INSERT INTO @tmpDiv (Val) VALUES('inadequate sphincterotomy')
					END

					IF @StoneSize > 0
					BEGIN
						INSERT INTO @tmpDiv (Val) VALUES('stone size')
					END

					IF @QuantityOfStones > 0
					BEGIN
						INSERT INTO @tmpDiv (Val) VALUES('quantity of stones')
					END

					IF @ImpactedStones > 0
					BEGIN
						INSERT INTO @tmpDiv (Val) VALUES('impacted stone(s)')
					END

					IF @OtherReason > 0
					BEGIN
						IF LTRIM(RTRIM(ISNULL(@OtherReasonText,''))) <> ''
						BEGIN
							INSERT INTO @tmpDiv (Val) VALUES(@OtherReasonText)
						END
					END

					IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
					BEGIN
						SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
						SET @Details = @Details + ' due to ' + dbo.fnBuildString(@XMLlist)
					END
				END
			END

			IF @RemovalUsing > 0 SET @Details = @Details + ' using ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'ERCP stone removal method' AND [ListItemNo] = @RemovalUsing)


			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		----------------------
        -- Stricture dilatation
        ----------------------
		IF @StrictureDilatation= 1
			BEGIN
			SET @msg =' Stricture dilatation'
			SET @Details = ''

			IF @DilatedTo > 0 
			BEGIN
				SET @Details = @Details + ' dilated to ' + cast(@DilatedTo as varchar(50)) + ' ' + 
									ISNULL((SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Oesophageal dilatation units' AND [ListItemNo] = @DilatationUnits),'')
			END

			--Dilator type
			IF @DilatorType > 0 
			BEGIN
				DECLARE @tmpDilatorType VARCHAR(100) = (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Oesophageal dilator' AND [ListItemNo] = @DilatorType)
				IF UPPER(LEFT(LTRIM(@tmpDilatorType),5)) = 'WITH ' OR UPPER(LEFT(LTRIM(@tmpDilatorType),3)) = 'BY ' 
					SET @Details = @Details + ' ' + @tmpDilatorType
				ELSE
					SET @Details = @Details + ' with ' + @tmpDilatorType
			END	
			
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		----------------------
        -- Endoscopic cyst puncture
        ----------------------
		IF @EndoscopicCystPuncture = 1
		BEGIN
			SET @msg =' Endoscopic cyst puncture'
			SET @Details = ''
			IF @CystPunctureDevice > 0 SET @Details = @Details + ' using ' + 
															(SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'ERCP cyst punct device' AND [ListItemNo] = @CystPunctureDevice)

			SET @Details = @Details + CASE @CystPunctureVia
							WHEN 1 THEN ' via papilla'   
							WHEN 2 THEN ' via medial wall of duodenum (cyst-duodenostomy)'  
							WHEN 3 THEN ' via stomach (cyst-gastrostomy)'
							ELSE '' 
						END   

			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		-------------------------------
        -- Nasobiliary/pancreatic drain
        -------------------------------
		IF @NasopancreaticDrain = 1
		BEGIN
			IF EXISTS ( SELECT r.Region FROM ERS_AbnormalitiesMatrixERCP m 
							LEFT JOIN ERS_Regions r ON m.Region = r.Region 
									AND r.Region IN ('Uncinate Process', 'Head', 'Neck', 'Body', 'Tail', 'Accessory Pancreatic Duct', 'Main Pancreatic Duct')
							LEFT JOIN ERS_Sites s ON r.RegionId  = s.RegionID  
							WHERE s.siteId = @SiteId)
				SET @msg =' Nasopancreatic drain'
			ELSE
				SET @msg =' Nasobiliary drain'


			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		-------------------------------
        -- Combined procedure
        -------------------------------
		IF @RendezvousProcedure = 1
		BEGIN
			SET @msg =' Combined procedure (rendezvous)'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		-------------------------------
        -- Snare excision
        -------------------------------
		IF @SnareExcision = 1
		BEGIN
			SET @msg =' Snare excision'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		----------------------
        -- Balloon sphincteroplasty
        ----------------------
		IF @BalloonDilation= 1
			BEGIN
			SET @msg =' Balloon sphincteroplasty'
			SET @Details = ''

			IF @DilatedTo > 0 
			BEGIN
				SET @Details = @Details + ' dilated to ' + cast(@DilatedTo as varchar(50)) + ' ' + 
									(SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Oesophageal dilatation units' AND [ListItemNo] = @BalloonDilatationUnits)
			END

			--Balloon Dilator type
			IF @BalloonDilatorType > 0 
			BEGIN
				DECLARE @tmpBalloonDilatorType VARCHAR(100) = (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'ERCP balloon dilator' AND [ListItemNo] = @BalloonDilatorType)
				IF UPPER(LEFT(LTRIM(@tmpBalloonDilatorType),5)) = 'WITH ' OR UPPER(LEFT(LTRIM(@tmpBalloonDilatorType),3)) = 'BY ' 
					SET @Details = @Details + ' ' + @tmpBalloonDilatorType
				ELSE
					SET @Details = @Details + ' with ' + @tmpBalloonDilatorType
			END	
			
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END


		----------------------
        -- Balloon trawl
        ----------------------
		IF @BalloonTrawl = 1
			BEGIN
			SET @msg =' Balloon trawl'
			SET @Details = ''

			IF @BalloonTrawlDilatorType > 0 
			BEGIN
				DECLARE @DilType VARCHAR(100) = (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'ERCP Balloon dilator' AND [ListItemNo] = @BalloonTrawlDilatorType)
				IF LTRIM(RTRIM(@DilType)) <> ''
				BEGIN
					
					IF UPPER(LEFT(@DilType,1)) in ('A','E','I','O','U') 
						SET @Details = @Details + ' using an' 
					ELSE
						SET @Details = @Details + ' using a'

					SET @Details = @Details + ' ' + @DilType
				END
			END

			IF @BalloonTrawlDilatorUnits >= 0 
			BEGIN
				IF @BalloonTrawlDilatorSize > 0 
				BEGIN
					SET @Details = @Details + ' dilated to ' + cast(@BalloonTrawlDilatorSize as varchar(50)) + ' ' + 
									(SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Oesophageal dilatation units' AND [ListItemNo] = @BalloonTrawlDilatorUnits)
				END
			END
			
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		-------------------------------
        -- Cannulation
        -------------------------------
		IF @Cannulation = 1
		BEGIN
			SET @msg =' Cannulation'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		-------------------------------
        -- Manometry
        -------------------------------
		IF @Manometry = 1
		BEGIN
			SET @msg =' Manometry'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		-------------------------------
        -- Haemostasis
        -------------------------------
		IF @Haemostasis = 1
		BEGIN
			SET @msg =' Haemostasis'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		-------------------------------
        -- Diagnostic cholangiogram
        -------------------------------
		IF @DiagCholangiogram = 1
		BEGIN
			SET @msg =' Diagnostic cholangiogram'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		-------------------------------
        -- Diagnostic pancreatogram
        -------------------------------
		IF @DiagPancreatogram = 1
		BEGIN
			SET @msg =' Diagnostic pancreatogram'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

	-- DUODENUM -----
		IF @YAGLaser = 1
			BEGIN
				SET @msg =' YAG Laser'
				SET @Details = ''
				IF @YAGLaserWatts > 0 SET @Details = @Details + ' ' + CAST(@YAGLaserWatts as varchar(50)) + 'W'
				IF @YAGLaserSecs > 0 SET @Details = @Details + ' for ' + cast(CAST(@YAGLaserSecs AS FLOAT) as varchar(50)) + CASE WHEN @YAGLaserSecs <= 1 THEN ' second' else ' seconds' END
				IF @YAGLaserPulses > 0 SET @Details = @Details + ' in ' + cast(@YAGLaserPulses as varchar(50)) + CASE WHEN @YAGLaserPulses <= 1 THEN ' pulse' else ' pulses' END
				IF @YAGLaserKJ > 0 SET @Details = @Details + ' ('+ cast(CAST(@YAGLaserKJ AS FLOAT) as varchar(50)) + 'kJ)'
				If @Details<>'' SET @msg = @msg + ': ' + @Details
				--Add full stop 
				SET @msg = RTrim(LTRIM(@msg))
				IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg= @msg+'.'
				--------------
				SET @summary = @summary + @msg + '<br/>'
			END
		
		IF @ArgonBeamDiathermy= 1
			BEGIN
			SET @msg ='  Argon beam diathermy'
			SET @Details = ''
			IF @ArgonBeamDiathermyWatts > 0 SET @Details = @Details + ' ' + cast(@ArgonBeamDiathermyWatts as varchar(50)) + 'W'
			IF @ArgonBeamDiathermySecs > 0 SET @Details = @Details + ' for ' + cast(CAST(@ArgonBeamDiathermySecs AS FLOAT) as varchar(50)) + CASE WHEN @ArgonBeamDiathermySecs <= 1 THEN ' second' else ' seconds' END
			IF @ArgonBeamDiathermyPulses > 0 SET @Details = @Details + ' in ' + cast(@ArgonBeamDiathermyPulses as varchar(50)) + CASE WHEN @ArgonBeamDiathermyPulses <= 1 THEN ' pulse' else ' pulses' END
			IF @ArgonBeamDiathermyKJ > 0 SET @Details = @Details + ' ('+ cast(CAST(@ArgonBeamDiathermyKJ AS FLOAT) as varchar(50)) + 'kJ)'
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
			END

			
		IF @Injection= 1
			BEGIN
			SET @msg =' Injection'
			SET @Details = ''
			IF @InjectionVolume > 0 SET @Details = @Details + '  ' + cast(@InjectionVolume as varchar(50)) + 'ml'
			IF @InjectionVolume > 0  AND @InjectionType > 0 SET @Details = @Details + ' of'
			IF @InjectionType > 0 SET @Details = @Details + ' ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Agent Upper GI' AND [ListItemNo] = @InjectionType)
			IF @InjectionVolume> 0  AND @InjectionNumber > 0 SET @Details = @Details + ' via'
			IF @InjectionNumber >0 SET @Details = @Details + ' ' + CASE WHEN @InjectionNumber > 1 THEN cast(@InjectionNumber as varchar(50)) + ' injections' ELSE cast(@InjectionNumber as varchar(50)) + ' injection' END
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END
	
		IF @Diathermy = 1
			BEGIN
			SET @msg = ' Diathermy'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		IF @BicapElectro = 1
			BEGIN
			SET @msg = ' Bicap electrocautery'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		IF @HeatProbe = 1
			BEGIN
			SET @msg = ' Heater probe coagulation'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END
		
		IF @HotBiopsy = 1
			BEGIN
			SET @msg = ' Hot biopsy'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		IF @BandLigation = 1
			BEGIN
			SET @msg = ' Band ligation'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		IF @BotoxInjection = 1
			BEGIN
			SET @msg = ' Botox injection'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		IF @EndoloopPlacement = 1
			BEGIN
			SET @msg = ' Endoloop placement'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		IF @ForeignBody = 1
			BEGIN
			SET @msg = ' Foreign body removal'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		----------------------
        -- Stent insertion
        ----------------------
		IF @StentInsertion= 1
			BEGIN
			SET @msg =' Stent insertion'
			SET @Details = ''

			--Qty of stents used
			IF @StentInsertionQty > 0 SET @Details = @Details + '  ' + cast(@StentInsertionQty as varchar(50))

			--Stent type
			IF @StentInsertionType > 0 
			BEGIN
				SET @Details = @Details + ' ' +   ISNULL((SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Therapeutic Stomach Stent Insertion Types' AND [ListItemNo] = @StentInsertionType),'')
			END	

			--Recorded length & diameter of stent(s) used
			IF @StentInsertionLength > 0 OR @StentInsertionDiameter > 0 
			BEGIN
				SET @Details = @Details + ' (' 
				IF @StentInsertionLength > 0 SET @Details = @Details + 'length ' + cast(@StentInsertionLength as varchar(50)) + 'cm'
				IF @StentInsertionDiameter > 0 AND @StentInsertionLength > 0 SET @Details = @Details + ', ' 
				IF @StentInsertionDiameter > 0 SET @Details = @Details + 'diameter ' + cast(@StentInsertionDiameter as varchar(50))
				----What units were used?
				IF @StentInsertionDiameter > 0 AND @StentInsertionDiameterUnits >= 0 
						SET @Details = @Details+ ' ' + ISNULL((SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Oesophageal dilatation units' AND [ListItemNo] = @StentInsertionDiameterUnits),'')
				SET @Details = LTRIM(@Details) + ')' 
			END
			IF @RadioactiveWirePlaced > 0  SET @Details = @Details + ', radiotherapeutic wire placed' 
			IF ISNULL(@StentInsertionBatchNo,'') <> ''  SET @Details = @Details + ', batch ' + LTRIM(RTRIM(@StentInsertionBatchNo))
			
			If @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		----------------------
        -- Stent removal
        ----------------------
		IF @StentRemoval= 1
			BEGIN
			SET @msg =' Stent removal'
			SET @Details = ''
			IF @StentRemovalTechnique > 0  SET @Details = @Details + 'using ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Therapeutic Stent Removal Technique' AND [ListItemNo] = @StentRemovalTechnique)
			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		IF @EMR= 1
			BEGIN
			IF @EMRType = 2
				SET @msg =' Endoscopic submucosal dissection'
			ELSE
				SET @msg =' Endoscopic mucosal resection'
			SET @Details = ''
			IF @EMRFluid > 0  SET @Details = @Details + 'using ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Therapeutic EMR Fluid' AND [ListItemNo] = @EMRFluid)
			IF @EMRFluidVolume >0 
				BEGIN
				IF @EMRFluid >0 SET  @Details = @Details + ', '
				SET  @Details = @Details + 'total volume ' + cast(@emrfluidvolume AS varchar(50)) + 'ml'
				END
			IF @Details<>'' SET @msg = @msg + ': ' + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + '<br/>'
		END

		IF @GastrostomyInsertion =1
			BEGIN
			DECLARE @G bit, @J bit, @N bit
			--SELECT @j = i.[JejunostomyInsertion], @G =i.[GastrostomyInsertion],@N = i.[NasoDuodenalTube] FROM [ERS_UpperGIIndications] i LEFT JOIN [ERS_Sites] s ON i.ProcedureId = s.ProcedureId WHERE s.SiteId = @SiteID
			--IF @N = 1 SET @msg =' Nasojejunal tube (NJT)' ELSE IF @J= 1 SET @msg =' Jejunostomy insertion (PEJ)' ELSE SET @msg =' Gastrostomy insertion (PEG)'
			SET @msg =' Nasojejunal tube (NJT)' -- For ERCP, it is Nasojejunal
			SET @Details = ''

			IF @GastrostomyInsertionType > 0
				BEGIN
				IF @GastrostomyInsertionSize>0
					BEGIN
					SET @Details = @Details + cast(@GastrostomyInsertionSize as varchar(50))
					--IF @J=1 
					SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG units' AND [ListItemNo] = @GastrostomyInsertionUnits)
					--ELSE IF @N =1 SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG units' AND [ListItemNo] = @GastrostomyInsertionUnits)
					--ELSE SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG units' AND [ListItemNo] = @GastrostomyInsertionUnits)
					END
				END
				IF @GastrostomyInsertionType>0
						BEGIN
						IF @J=1 SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG type' AND [ListItemNo] = @GastrostomyInsertiontype)
						ELSE IF @N =1 SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG type' AND [ListItemNo] = @GastrostomyInsertiontype)
						ELSE SET @Details = @Details + ' ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Gastrostomy PEG type' AND [ListItemNo] = @GastrostomyInsertiontype)
						END
				IF @GastrostomyInsertionBatchNo <> null AND @GastrostomyInsertionBatchNo <> ''  SET @Details = @Details + ' batch ' + @GastrostomyInsertionBatchNo
				
				IF @Details<>'' SET @msg = @msg + ': ' + @Details
				--Add full stop 
				SET @msg = RTrim(LTRIM(@msg))
				IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
				--------------
				SET @summary = @summary + @msg + '<br/>'
				END

		IF @Marking= 1
		BEGIN
			SET @msg =' Abnormality marked'
			SET @Details = ''
			IF @MarkingType > 0 SET @Details = @Details + ' by ' +   (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Abno marking' AND [ListItemNo] = @MarkingType)

			IF @Details<>'' SET @msg = @msg + @Details
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF @Clip= 1
		BEGIN 
			SET @msg = CASE WHEN @ClipNum > 1 THEN  CAST(@ClipNum as varchar(5)) + ' clips'
							WHEN @ClipNum = 1 THEN  CAST(@ClipNum as varchar(5)) + ' clip'
							ELSE 'Clip'
						END
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		-------------------------------
        -- Pyloric/duodenal dilatation
        -------------------------------
		IF @PyloricDilatation= 1
		BEGIN
			SET @msg =' Pyloric dilatation'
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary = @summary + @msg + @br
		END

		IF LTRIM(RTRIM(@other)) <> ''
			BEGIN
			SET @msg =' ' + LTRIM(RTRIM(@other))
			--Add full stop 
			SET @msg = RTrim(LTRIM(@msg))
			IF @msg <> ''  AND (@msg NOT LIKE '%.')  SET @msg = @msg + '.'
			--------------
			SET @summary =  @summary + @msg  +'<br/>'
		END

	END;

	UPDATE dbo.ERS_ERCPTherapeutics 
	SET Summary=@summary 
	WHERE SiteID = @SiteId AND CarriedOutRole=1; --Id = @TherapeuticId

	DROP TABLE #tmp_ERCPTherapeutics;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------223 Create Proc abnormalities_lumen_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_lumen_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_lumen_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	NoBlood,
	FreshBlood,
	FreshBloodAmount,
	FreshBloodOrigin,
	AlteredBlood,
	AlteredBloodAmount,
	AlteredBloodOrigin,
	Food,
	FoodAmount,
	Bile,
	BileAmount,
	EUSProcType
FROM
	ERS_UpperGIAbnoLumen
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------224 Create Proc abnormalities_lumen_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_lumen_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_lumen_save]
(
	@SiteId INT,
	@NoBlood BIT,
	@FreshBlood BIT,
	@FreshBloodAmount TINYINT,
	@FreshBloodOrigin TINYINT,
	@AlteredBlood BIT,
	@AlteredBloodAmount TINYINT,
	@AlteredBloodOrigin TINYINT,
	@Food BIT,
	@FoodAmount TINYINT,
	@Bile BIT,
	@BileAmount TINYINT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoLumen WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoLumen (
			SiteId,
			NoBlood,
			FreshBlood,
			FreshBloodAmount,
			FreshBloodOrigin,
			AlteredBlood,
			AlteredBloodAmount,
			AlteredBloodOrigin,
			Food,
			FoodAmount,
			Bile,
			BileAmount,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@NoBlood,
			@FreshBlood,
			@FreshBloodAmount,
			@FreshBloodOrigin,
			@AlteredBlood,
			@AlteredBloodAmount,
			@AlteredBloodOrigin,
			@Food,
			@FoodAmount,
			@Bile,
			@BileAmount,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Lumen',
			1)
	END

	ELSE IF (@NoBlood=0 AND @FreshBlood=0 AND @AlteredBlood=0 AND @Food=0 AND @Bile=0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoLumen 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Lumen'
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoLumen
		SET 
			NoBlood = @NoBlood,
			FreshBlood = @FreshBlood,
			FreshBloodAmount = @FreshBloodAmount,
			FreshBloodOrigin = @FreshBloodOrigin,
			AlteredBlood = @AlteredBlood,
			AlteredBloodAmount = @AlteredBloodAmount,
			AlteredBloodOrigin = @AlteredBloodOrigin,
			Food = @Food,
			FoodAmount = @FoodAmount,
			Bile = @Bile,
			BileAmount = @BileAmount,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------225 Create Proc abnormalities_lumen_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_lumen_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_lumen_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
	DECLARE @summary VARCHAR (8000)
	SET @summary=''

	SELECT * INTO #lumen
	FROM ERS_UpperGIAbnoLumen 
	WHERE SiteId = @SiteId

	SELECT 
		GastritisItem,
		CASE GastritisItem 
			WHEN 'FreshBlood' THEN 'fresh blood' 
			WHEN 'AlteredBlood' THEN 'altered blood' 
			WHEN 'Food' THEN 'food residue' 
			WHEN 'Bile' THEN 'bile' 
			WHEN 'NoBlood' THEN 'free of blood' 
			ELSE GastritisItem 
		END AS GastritisItemDesc, 
		Selected
		INTO #main
	FROM 
	(
		SELECT * FROM #lumen
	) a
	UNPIVOT
	(
		Selected 
		FOR GastritisItem IN (NoBlood,FreshBlood,AlteredBlood,Food,Bile)
	) b
	WHERE Selected = 1

	SELECT 
		LumenAmount, LumenAmountSelected
		INTO #amt
	FROM 
	(
		SELECT * FROM #lumen
	) a
	UNPIVOT
	(
		LumenAmountSelected 
		FOR LumenAmount IN (FreshBloodAmount,AlteredBloodAmount,FoodAmount,BileAmount)
	) c
	WHERE ISNULL(LumenAmountSelected,0) <> 0
	
	SELECT 
		LumenOrigin, LumenOriginSelected
		INTO #org
	FROM 
	(
		SELECT * FROM #lumen
	) a
	UNPIVOT
	(
		LumenOriginSelected 
		FOR LumenOrigin IN (FreshBloodOrigin,AlteredBloodOrigin)
	) c
	WHERE ISNULL(LumenOriginSelected,0) <> 0
	
	--SELECT * from #main
	--SELECT * from #amt
	--SELECT * from #org

	SELECT 
		GastritisItem, 
		c.codekey as LumenAmount, 
		c2.codekey as LumenOrigin, 
		ISNULL('a ' + LOWER(c.codekey) + ' amount of ','') + ISNULL(LOWER(c2.codekey) + ' ','')  + GastritisItemDesc AS summary
	INTO #final
	FROM #main a 
	LEFT JOIN #amt b on a.GastritisItem + 'Amount' = b.LumenAmount
	LEFT JOIN #org b2 on a.GastritisItem + 'Origin' = b2.LumenOrigin
	LEFT JOIN ERS_Codes c on b.LumenAmountSelected = c.codevalue AND c.code='LumenAmount'
	LEFT JOIN ERS_Codes c2 on b2.LumenOriginSelected = c2.codevalue AND c2.code='LumenOrigin'

	--select * from #final

	IF (SELECT COUNT(*) FROM #final) > 1
	BEGIN
		-- Get the concatenated string separated by a delimiter, say $$
		SELECT @summary = COALESCE (
							CASE WHEN @summary = '' THEN summary
							ELSE @summary + '$$' + summary
							END
						,'')
		FROM #final

		-- Set the last occurence of $$ to "and"
		SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and ')

		-- Replace all other occurences of $$ with commas
		SET @summary = REPLACE(@summary, '$$', ', ')

		SET @summary = @summary + ' found' 
		--SET @summary = STUFF(@summary, 1, 1, 'a')
	END

	ELSE
	BEGIN
		SELECT @summary = summary FROM #final
	END

	--select @summary
	
	-- Finally, update the summary in gastritis table
	UPDATE ERS_UpperGIAbnoLumen 
	SET Summary=@summary 
	WHERE SiteId = @SiteId

	DROP TABLE #lumen
	DROP TABLE #main
	DROP TABLE #amt
	DROP TABLE #org
	DROP TABLE #final

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------226 Create Proc abnormalities_malignancy_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_malignancy_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_malignancy_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	[None],
	EarlyCarcinoma,
	EarlycarcinomaLesion,
	EarlyCarcinomaStart,
	EarlyCarcinomaEnd,
	EarlyCarcinomaLargest,
	EarlycarCinomaBleeding,
	AdvCarcinoma,
	AdvcarcinomaLesion,
	AdvCarcinomaStart,
	AdvCarcinomaEnd,
	AdvCarcinomaLargest,
	AdvcarCinomaBleeding,
	Lymphoma,
	LymphomaLesion,
	LymphomaStart,
	LymphomaEnd,
	LymphomaLargest,
	LymphomaBleeding,
	EUSProcType
FROM
	ERS_UpperGIAbnoMalignancy
WHERE 
	SiteId = @SiteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------227 Create Proc abnormalities_malignancy_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_malignancy_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_malignancy_save]
(
	@SiteId INT,
	@None BIT,
	@EarlyCarcinoma BIT,
	@EarlycarcinomaLesion TINYINT,
	@EarlyCarcinomaStart INT,
	@EarlyCarcinomaEnd INT,
	@EarlyCarcinomaLargest DECIMAL(6,2),
	@EarlycarCinomaBleeding TINYINT,
	@AdvCarcinoma BIT,
	@AdvcarcinomaLesion TINYINT,
	@AdvCarcinomaStart INT,
	@AdvCarcinomaEnd INT,
	@AdvCarcinomaLargest DECIMAL(6,2),
	@AdvcarCinomaBleeding TINYINT,
	@Lymphoma BIT,
	@LymphomaLesion TINYINT,
	@LymphomaStart INT,
	@LymphomaEnd INT,
	@LymphomaLargest DECIMAL(6,2),
	@LymphomaBleeding TINYINT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoMalignancy WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoMalignancy (
			SiteId,
			[None],
			EarlyCarcinoma,
			EarlycarcinomaLesion,
			EarlyCarcinomaStart,
			EarlyCarcinomaEnd,
			EarlyCarcinomaLargest,
			EarlycarCinomaBleeding,
			AdvCarcinoma,
			AdvcarcinomaLesion,
			AdvCarcinomaStart,
			AdvCarcinomaEnd,
			AdvCarcinomaLargest,
			AdvcarCinomaBleeding,
			Lymphoma,
			LymphomaLesion,
			LymphomaStart,
			LymphomaEnd,
			LymphomaLargest,
			LymphomaBleeding) 
		VALUES (
			@SiteId,
			@None,
			@EarlyCarcinoma,
			@EarlycarcinomaLesion,
			@EarlyCarcinomaStart,
			@EarlyCarcinomaEnd,
			@EarlyCarcinomaLargest,
			@EarlycarCinomaBleeding,
			@AdvCarcinoma,
			@AdvcarcinomaLesion,
			@AdvCarcinomaStart,
			@AdvCarcinomaEnd,
			@AdvCarcinomaLargest,
			@AdvcarCinomaBleeding,
			@Lymphoma,
			@LymphomaLesion,
			@LymphomaStart,
			@LymphomaEnd,
			@LymphomaLargest,
			@LymphomaBleeding)

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Malignancy',
			1)
	END

	ELSE IF (@None=0 AND @EarlyCarcinoma=0 AND @AdvCarcinoma=0 AND @Lymphoma=0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoMalignancy 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Malignancy'
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoMalignancy
		SET 
			[None] = @None,
			EarlyCarcinoma = @EarlyCarcinoma,
			EarlycarcinomaLesion = @EarlycarcinomaLesion,
			EarlyCarcinomaStart = @EarlyCarcinomaStart,
			EarlyCarcinomaEnd = @EarlyCarcinomaEnd,
			EarlyCarcinomaLargest = @EarlyCarcinomaLargest,
			EarlycarCinomaBleeding = @EarlycarCinomaBleeding,
			AdvCarcinoma = @AdvCarcinoma,
			AdvcarcinomaLesion = @AdvcarcinomaLesion,
			AdvCarcinomaStart = @AdvCarcinomaStart,
			AdvCarcinomaEnd = @AdvCarcinomaEnd,
			AdvCarcinomaLargest = @AdvCarcinomaLargest,
			AdvcarCinomaBleeding = @AdvcarCinomaBleeding,
			Lymphoma = @Lymphoma,
			LymphomaLesion = @LymphomaLesion,
			LymphomaStart = @LymphomaStart,
			LymphomaEnd = @LymphomaEnd,
			LymphomaLargest = @LymphomaLargest,
			LymphomaBleeding = @LymphomaBleeding
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------228 Create Proc abnormalities_malignancy_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_malignancy_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_malignancy_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@none BIT,
		@earlyCarcinoma BIT,
		@earlycarcinomaLesion TINYINT,
		@earlyCarcinomaStart INT,
		@earlyCarcinomaEnd INT,
		@earlyCarcinomaLargest DECIMAL(6,2),
		@earlycarCinomaBleeding TINYINT,
		@advCarcinoma BIT,
		@advcarcinomaLesion TINYINT,
		@advCarcinomaStart INT,
		@advCarcinomaEnd INT,
		@advCarcinomaLargest DECIMAL(6,2),
		@advcarCinomaBleeding TINYINT,
		@lymphoma BIT,
		@lymphomaLesion TINYINT,
		@lymphomaStart INT,
		@lymphomaEnd INT,
		@lymphomaLargest DECIMAL(6,2),
		@lymphomaBleeding TINYINT

	SELECT 
		@none=[None],
		@earlyCarcinoma=EarlyCarcinoma,
		@earlycarcinomaLesion=EarlycarcinomaLesion,
		@earlyCarcinomaStart=EarlyCarcinomaStart,
		@earlyCarcinomaEnd=EarlyCarcinomaEnd,
		@earlyCarcinomaLargest=EarlyCarcinomaLargest,
		@earlycarCinomaBleeding=EarlycarCinomaBleeding,
		@advCarcinoma=AdvCarcinoma,
		@advcarcinomaLesion=AdvcarcinomaLesion,
		@advCarcinomaStart=AdvCarcinomaStart,
		@advCarcinomaEnd=AdvCarcinomaEnd,
		@advCarcinomaLargest=AdvCarcinomaLargest,
		@advcarCinomaBleeding=AdvcarCinomaBleeding,
		@lymphoma=Lymphoma,
		@lymphomaLesion=LymphomaLesion,
		@lymphomaStart=LymphomaStart,
		@lymphomaEnd=LymphomaEnd,
		@lymphomaLargest=LymphomaLargest,
		@lymphomaBleeding=LymphomaBleeding		
	FROM
		ERS_UpperGIAbnoMalignancy
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @none = 1
		SET @summary = @summary + 'No malignancy'
	
	ELSE 
	BEGIN
		IF @earlyCarcinoma = 1 
		BEGIN
			SET @summary = @summary + 'early gastric carcinoma'	
			IF @earlycarcinomaLesion > 0
			BEGIN
				SET @summary = @summary + ' - '
				IF @earlycarcinomaLesion = 1
					SET @summary = @summary + 'small polypoidal mass'
				ELSE IF @EarlycarcinomaLesion = 2
					SET @summary = @summary + 'focal discolouration'
				ELSE IF @EarlycarcinomaLesion = 3
					SET @summary = @summary + 'gastric ulcer with focal discouloration'
			END
		
			IF (@earlyCarcinomaStart > 0 OR @earlyCarcinomaEnd > 0)
			BEGIN
				IF @earlyCarcinomaStart > 0
					SET @summary = @summary + ' starting at ' + CONVERT(VARCHAR(20), @EarlyCarcinomaStart) + ' cm'
				IF @earlyCarcinomaEnd > 0
					SET @summary = @summary + ' ending at ' + CONVERT(VARCHAR(20), @EarlyCarcinomaEnd) + ' cm'
				SET @summary = @summary + ' from incissors'
			END

			IF @earlyCarcinomaLargest > 0
				SET @summary = @summary + ' (' + dbo.fnRemoveDecTrailingZeroes(CONVERT(VARCHAR(20), @EarlyCarcinomaLargest)) + ' cm in greatest diameter)'

			IF @earlycarCinomaBleeding > 0
				IF @earlycarCinomaBleeding = 1
					SET @summary = @summary + ' with recent bleeding'
				ELSE IF @earlycarCinomaBleeding = 2
					SET @summary = @summary + ' with active bleeding'
			
		END

		IF @advCarcinoma = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + '. Established gastric carcinoma'
			ELSE SET @summary = 'established gastric carcinoma'

			IF @advcarcinomaLesion > 0
			BEGIN
				SET @summary = @summary + ' - '
				IF @advcarcinomaLesion = 1
					SET @summary = @summary + 'polypoidal'
				ELSE IF @advcarcinomaLesion = 2
					SET @summary = @summary + 'polypoid with central ulceration'
				ELSE IF @advcarcinomaLesion = 3
					SET @summary = @summary + 'infiltrating'
				ELSE IF @advcarcinomaLesion = 4
					SET @summary = @summary + 'infiltrating with central ulceration'
				ELSE IF @advcarcinomaLesion = 5
					SET @summary = @summary + 'linitis plastica (probable)'
			END
		
			IF (@advCarcinomaStart > 0 OR @advCarcinomaEnd > 0)
			BEGIN
				IF @advCarcinomaStart > 0
					SET @summary = @summary + ' starting at ' + CONVERT(VARCHAR(20), @advCarcinomaStart) + ' cm'
				IF @advCarcinomaEnd > 0
					SET @summary = @summary + ' ending at ' + CONVERT(VARCHAR(20), @advCarcinomaEnd) + ' cm'
				SET @summary = @summary + ' from incissors'
			END

			IF @advCarcinomaLargest > 0
				SET @summary = @summary + ' (' + dbo.fnRemoveDecTrailingZeroes(CONVERT(VARCHAR(20), @advCarcinomaLargest)) + ' cm in greatest diameter)'

			IF @advcarCinomaBleeding > 0
				IF @advcarCinomaBleeding = 1
					SET @summary = @summary + ' with recent bleeding'
				ELSE IF @advcarCinomaBleeding = 2
					SET @summary = @summary + ' with active bleeding'
			
		END

		IF @lymphoma = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + '. Gastric lymphoma'
			ELSE SET @summary = 'gastric lymphoma'

			IF @lymphomaLesion > 0
			BEGIN
				SET @summary = @summary + ' - '
				IF @lymphomaLesion = 1
					SET @summary = @summary + 'single polypoidal mass'
				ELSE IF @lymphomaLesion = 2
					SET @summary = @summary + 'multiple polypoid discrete masses'
				ELSE IF @lymphomaLesion = 3
					SET @summary = @summary + 'diffusely infiltrating'
				ELSE IF @lymphomaLesion = 4
					SET @summary = @summary + 'diffusely infiltrating with ulceration'
			END
		
			IF (@lymphomaStart > 0 OR @lymphomaEnd > 0)
			BEGIN
				IF @lymphomaStart > 0
					SET @summary = @summary + ' starting at ' + CONVERT(VARCHAR(20), @lymphomaStart) + ' cm'
				IF @lymphomaEnd > 0
					SET @summary = @summary + ' ending at ' + CONVERT(VARCHAR(20), @lymphomaEnd) + ' cm'
				SET @summary = @summary + ' from incissors'
			END

			IF @lymphomaLargest > 0
				SET @summary = @summary + ' (' + dbo.fnRemoveDecTrailingZeroes(CONVERT(VARCHAR(20), @lymphomaLargest)) + ' cm in greatest diameter)'

			IF @lymphomaBleeding > 0
				IF @lymphomaBleeding = 1
					SET @summary = @summary + ' with recent bleeding'
				ELSE IF @lymphomaBleeding = 2
					SET @summary = @summary + ' with active bleeding'
			
		END
	END

	-- Finally update the summary in abnormalities table	
	UPDATE ERS_UpperGIAbnoMalignancy
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------229 Create Proc abnormalities_postsurgery_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_postsurgery_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_postsurgery_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	[None],
	PreviousSurgery,
	SurgicalProcedure,
	SurgicalProcedureFindings,
	DuodenumPresent,
	JejunumState,
	JejunumAbnormalText
FROM
	ERS_UpperGIAbnoPostSurgery
WHERE 
	SiteId = @SiteId

GO
GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------230 Create Proc abnormalities_postsurgery_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_postsurgery_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_postsurgery_save]
(
	@SiteId INT,
	@None BIT,
	@PreviousSurgery BIT,
	@SurgicalProcedure SMALLINT,
	@SurgicalProcedureFindings VARCHAR(1000),
	@DuodenumPresent BIT,
	@JejunumState TINYINT,
	@JejunumAbnormalText VARCHAR(500),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	
	
	IF (@None=0 AND @PreviousSurgery=0 AND @DuodenumPresent=0 AND @JejunumState=0 )
	BEGIN
		DELETE FROM ERS_UpperGIAbnoPostSurgery 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Post Surgery'
	END		

	ELSE IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoPostSurgery WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoPostSurgery (
			SiteId,
			[None],
			PreviousSurgery,
			SurgicalProcedure,
			SurgicalProcedureFindings,
			DuodenumPresent,
			JejunumState,
			JejunumAbnormalText,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@PreviousSurgery,
			@SurgicalProcedure,
			@SurgicalProcedureFindings,
			@DuodenumPresent,
			@JejunumState,
			@JejunumAbnormalText,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Post Surgery',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoPostSurgery
		SET 
			[None] = @None,
			SurgicalProcedure = @SurgicalProcedure,
			PreviousSurgery = @PreviousSurgery,
			SurgicalProcedureFindings = @SurgicalProcedureFindings,
			DuodenumPresent = @DuodenumPresent,
			JejunumState = @JejunumState,
			JejunumAbnormalText = @JejunumAbnormalText,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------231 Create Proc abnormalities_postsurgery_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_postsurgery_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_postsurgery_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@none BIT,
		@previousSurgery BIT,
		@surgicalProcedure SMALLINT,
		@surgicalProcedureFindings VARCHAR(1000),
		@duodenumPresent BIT,
		@jejunum BIT,
		@jejunumState TINYINT,
		@jejunumAbnormalText VARCHAR(500)

	SELECT 
		@none=[None],
		@surgicalProcedure=SurgicalProcedure,
		@surgicalProcedureFindings=SurgicalProcedureFindings,
		@duodenumPresent=DuodenumPresent,
		@jejunumState=JejunumState,
		@jejunumAbnormalText=JejunumAbnormalText
	FROM
		ERS_UpperGIAbnoPostSurgery
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @none = 1
		SET @summary = @summary + 'No evidence of previous surgery'
	
	ELSE 
	BEGIN
		IF @surgicalProcedure > 0
		BEGIN
			--SET @summary = @summary + 'surgical procedure - '

			SELECT @summary = @summary + [ListItemText]
			FROM ERS_Lists 
			WHERE [ListDescription] = 'Surgical procedures' 
			AND [ListItemNo] = @surgicalProcedure
		END

		IF ISNULL(@surgicalProcedureFindings, '') <> '' SET @summary = @summary + ' ' + @surgicalProcedureFindings

		IF @summary <> '' SET @summary = @summary + ', '

		IF @duodenumPresent = 1  SET @summary = @summary + 'duodenum removed'

		IF @jejunumState > 0
		BEGIN
			IF @summary <> '' SET @summary = @summary + ', '
			ELSE SET @summary = @summary + 'jejunum '

			IF @jejunumState = 1 SET @summary = @summary + 'normal'
			ELSE IF @jejunumState = 2 
			BEGIN
				SET @summary = @summary + 'abnormal'
				IF @jejunumAbnormalText <> '' SET @summary = @summary + ' - ' + @jejunumAbnormalText
			END
			
		END
	END

	SET @Summary = LTRIM(RTRIM(@Summary))
	IF RIGHT(@Summary,1) = ',' SET @Summary = LEFT(@Summary, LEN(@Summary) - 1)
	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_UpperGIAbnoPostSurgery
	SET Summary = @Summary 
	WHERE SiteId = @siteId
GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------232 Create Proc abnormalities_polyps_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_polyps_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_polyps_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

DECLARE @Polypectomy BIT = 0
    ,@PolypectomyRemoval TINYINT = 0
    ,@PolypectomyRemovalType TINYINT = 0

SELECT
	@Polypectomy = Polypectomy
    ,@PolypectomyRemoval = PolypectomyRemoval
    ,@PolypectomyRemovalType = PolypectomyRemovalType
FROM 
	ERS_UpperGITherapeutics
WHERE 
	SiteId = @SiteId

SELECT
	SiteId,
	[None],
	Sessile,
	SessileType,
	SessileBenignType,
	SessileQty,
	SessileMultiple,
	SessileLargest,
	SessileNumExcised,
	SessileNumRetrieved,
	SessileNumToLabs,
	SessileEroded,
	SessileUlcerated,
	SessileOverlyingClot,
	SessileActiveBleeding,
	SessileOverlyingOldBlood,
	Pedunculated,
	PedunculatedType,
	PedunculatedBenignType,
	PedunculatedQty,
	PedunculatedMultiple,
	PedunculatedLargest,
	PedunculatedNumExcised,
	PedunculatedNumRetrieved,
	PedunculatedNumToLabs,
	PedunculatedEroded,
	PedunculatedUlcerated,
	PedunculatedOverlyingClot,
	PedunculatedActiveBleeding,
	PedunculatedOverlyingOldBlood,
	Submucosal,
	SubmucosalType,
	SubmucosalBenignType,
	SubmucosalQty,
	SubmucosalMultiple,
	SubmucosalLargest,
	SubmucosalNumExcised,
	SubmucosalNumRetrieved,
	SubmucosalNumToLabs,
	SubmucosalEroded,
	SubmucosalUlcerated,
	SubmucosalOverlyingClot,
	SubmucosalActiveBleeding,
	SubmucosalOverlyingOldBlood,
	@Polypectomy AS Polypectomy,
    @PolypectomyRemoval AS PolypectomyRemoval,
    @PolypectomyRemovalType AS PolypectomyRemovalType
FROM
	ERS_UpperGIAbnoPolyps
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------233 Create Proc abnormalities_polyps_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_polyps_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_polyps_save]
(
	@SiteId INT,
	@None BIT,
	@Sessile BIT,
	@SessileType TINYINT,
	@SessileBenignType TINYINT,
	@SessileQty INT,
	@SessileMultiple BIT,
	@SessileLargest DECIMAL(6,2),
	@SessileNumExcised INT,
	@SessileNumRetrieved INT,
	@SessileNumToLabs INT,
	@SessileEroded BIT,
	@SessileUlcerated BIT,
	@SessileOverlyingClot BIT,
	@SessileActiveBleeding BIT,
	@SessileOverlyingOldBlood BIT,
	@Pedunculated BIT,
	@PedunculatedType TINYINT,
	@PedunculatedBenignType TINYINT,
	@PedunculatedQty INT,
	@PedunculatedMultiple BIT,
	@PedunculatedLargest DECIMAL(6,2),
	@PedunculatedNumExcised INT,
	@PedunculatedNumRetrieved INT,
	@PedunculatedNumToLabs INT,
	@PedunculatedEroded BIT,
	@PedunculatedUlcerated BIT,
	@PedunculatedOverlyingClot BIT,
	@PedunculatedActiveBleeding BIT,
	@PedunculatedOverlyingOldBlood BIT,
	@Submucosal BIT,
	@SubmucosalType TINYINT,
	@SubmucosalBenignType TINYINT,
	@SubmucosalQty INT,
	@SubmucosalMultiple BIT,
	@SubmucosalLargest DECIMAL(6,2),
	@SubmucosalNumExcised INT,
	@SubmucosalNumRetrieved INT,
	@SubmucosalNumToLabs INT,
	@SubmucosalEroded BIT,
	@SubmucosalUlcerated BIT,
	@SubmucosalOverlyingClot BIT,
	@SubmucosalActiveBleeding BIT,
	@SubmucosalOverlyingOldBlood BIT,
	@PolypectomyRemoval TINYINT,
	@PolypectomyRemovalType TINYINT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoPolyps WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoPolyps (
			SiteId,
			[None],
			Sessile,
			SessileType,
			SessileBenignType,
			SessileQty,
			SessileMultiple,
			SessileLargest,
			SessileNumExcised,
			SessileNumRetrieved,
			SessileNumToLabs,
			SessileEroded,
			SessileUlcerated,
			SessileOverlyingClot,
			SessileActiveBleeding,
			SessileOverlyingOldBlood,
			Pedunculated,
			PedunculatedType,
			PedunculatedBenignType,
			PedunculatedQty,
			PedunculatedMultiple,
			PedunculatedLargest,
			PedunculatedNumExcised,
			PedunculatedNumRetrieved,
			PedunculatedNumToLabs,
			PedunculatedEroded,
			PedunculatedUlcerated,
			PedunculatedOverlyingClot,
			PedunculatedActiveBleeding,
			PedunculatedOverlyingOldBlood,
			Submucosal,
			SubmucosalType,
			SubmucosalBenignType,
			SubmucosalQty,
			SubmucosalMultiple,
			SubmucosalLargest,
			SubmucosalNumExcised,
			SubmucosalNumRetrieved,
			SubmucosalNumToLabs,
			SubmucosalEroded,
			SubmucosalUlcerated,
			SubmucosalOverlyingClot,
			SubmucosalActiveBleeding,
			SubmucosalOverlyingOldBlood,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Sessile,
			@SessileType,
			@SessileBenignType,
			@SessileQty,
			@SessileMultiple,
			@SessileLargest,
			@SessileNumExcised,
			@SessileNumRetrieved,
			@SessileNumToLabs,
			@SessileEroded,
			@SessileUlcerated,
			@SessileOverlyingClot,
			@SessileActiveBleeding,
			@SessileOverlyingOldBlood,
			@Pedunculated,
			@PedunculatedType,
			@PedunculatedBenignType,
			@PedunculatedQty,
			@PedunculatedMultiple,
			@PedunculatedLargest,
			@PedunculatedNumExcised,
			@PedunculatedNumRetrieved,
			@PedunculatedNumToLabs,
			@PedunculatedEroded,
			@PedunculatedUlcerated,
			@PedunculatedOverlyingClot,
			@PedunculatedActiveBleeding,
			@PedunculatedOverlyingOldBlood,
			@Submucosal,
			@SubmucosalType,
			@SubmucosalBenignType,
			@SubmucosalQty,
			@SubmucosalMultiple,
			@SubmucosalLargest,
			@SubmucosalNumExcised,
			@SubmucosalNumRetrieved,
			@SubmucosalNumToLabs,
			@SubmucosalEroded,
			@SubmucosalUlcerated,
			@SubmucosalOverlyingClot,
			@SubmucosalActiveBleeding,
			@SubmucosalOverlyingOldBlood,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Polyps',
			1)
	END
	
	ELSE IF (@None=0 AND @Sessile=0 AND @Pedunculated=0 AND @Submucosal=0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoPolyps 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Polyps'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoPolyps
		SET 
			[None] = @None,
			Sessile = @Sessile,
			SessileType = @SessileType,
			SessileBenignType = @SessileBenignType,
			SessileQty = @SessileQty,
			SessileMultiple = @SessileMultiple,
			SessileLargest = @SessileLargest,
			SessileNumExcised = @SessileNumExcised,
			SessileNumRetrieved = @SessileNumRetrieved,
			SessileNumToLabs = @SessileNumToLabs,
			SessileEroded = @SessileEroded,
			SessileUlcerated = @SessileUlcerated,
			SessileOverlyingClot = @SessileOverlyingClot,
			SessileActiveBleeding = @SessileActiveBleeding,
			SessileOverlyingOldBlood = @SessileOverlyingOldBlood,
			Pedunculated = @Pedunculated,
			PedunculatedType = @PedunculatedType,
			PedunculatedBenignType = @PedunculatedBenignType,
			PedunculatedQty = @PedunculatedQty,
			PedunculatedMultiple = @PedunculatedMultiple,
			PedunculatedLargest = @PedunculatedLargest,
			PedunculatedNumExcised = @PedunculatedNumExcised,
			PedunculatedNumRetrieved = @PedunculatedNumRetrieved,
			PedunculatedNumToLabs = @PedunculatedNumToLabs,
			PedunculatedEroded = @PedunculatedEroded,
			PedunculatedUlcerated = @PedunculatedUlcerated,
			PedunculatedOverlyingClot = @PedunculatedOverlyingClot,
			PedunculatedActiveBleeding = @PedunculatedActiveBleeding,
			PedunculatedOverlyingOldBlood = @PedunculatedOverlyingOldBlood,
			Submucosal = @Submucosal,
			SubmucosalType = @SubmucosalType,
			SubmucosalBenignType = @SubmucosalBenignType,
			SubmucosalQty = @SubmucosalQty,
			SubmucosalMultiple = @SubmucosalMultiple,
			SubmucosalLargest = @SubmucosalLargest,
			SubmucosalNumExcised = @SubmucosalNumExcised,
			SubmucosalNumRetrieved = @SubmucosalNumRetrieved,
			SubmucosalNumToLabs = @SubmucosalNumToLabs,
			SubmucosalEroded = @SubmucosalEroded,
			SubmucosalUlcerated = @SubmucosalUlcerated,
			SubmucosalOverlyingClot = @SubmucosalOverlyingClot,
			SubmucosalActiveBleeding = @SubmucosalActiveBleeding,
			SubmucosalOverlyingOldBlood = @SubmucosalOverlyingOldBlood,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END

	--Check the related Therapeutics checkboxes for Polyps
	IF @PolypectomyRemoval > 0 OR @PolypectomyRemovalType > 0
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM ERS_UpperGITherapeutics WHERE SiteId = @SiteId)
		BEGIN
			INSERT INTO ERS_UpperGITherapeutics (SiteId,	Polypectomy,	PolypectomyRemoval,	PolypectomyRemovalType, CarriedOutRole) 
			VALUES (@SiteId,	1,	@PolypectomyRemoval,	@PolypectomyRemovalType, 1)

			INSERT INTO ERS_RecordCount ([ProcedureId],	[SiteId],	[Identifier],	[RecordCount])
			VALUES (@proc_id,	@SiteId,	'Therapeutic Procedures',	1)
		END
		ELSE IF EXISTS (SELECT 1 FROM ERS_UpperGITherapeutics WHERE SiteId = @SiteId AND CarriedOutRole = 1)
		BEGIN
			UPDATE 
				ERS_UpperGITherapeutics
			SET 
				Polypectomy = 1,
				PolypectomyRemoval = @PolypectomyRemoval,
				PolypectomyRemovalType = @PolypectomyRemovalType
			WHERE 
				SiteId = @SiteId AND
				CarriedOutRole = 1
		END
		ELSE 
		BEGIN
			UPDATE 
				ERS_UpperGITherapeutics
			SET 
				Polypectomy = 1,
				PolypectomyRemoval = @PolypectomyRemoval,
				PolypectomyRemovalType = @PolypectomyRemovalType
			WHERE 
				SiteId = @SiteId AND
				CarriedOutRole = 2
		END
	END

	--Check the related Specimens checkboxes for Polyps
	IF @SessileNumToLabs > 0 OR @PedunculatedNumToLabs > 0 OR @SubmucosalNumToLabs > 0
	BEGIN
		IF NOT EXISTS (SELECT 1 FROM ERS_UpperGISpecimens WHERE SiteId = @SiteId)
		BEGIN
			INSERT INTO ERS_UpperGISpecimens (SiteId, Polypectomy) 
			VALUES (@SiteId,	1)

			INSERT INTO ERS_RecordCount ([ProcedureId],	[SiteId],	[Identifier],	[RecordCount])
			VALUES (@proc_id,	@SiteId,	'Specimens Taken',	1)
		END
		ELSE
		BEGIN
			UPDATE 
				ERS_UpperGISpecimens
			SET 
				Polypectomy = 1
			WHERE 
				SiteId = @SiteId
		END
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------234 Create Proc abnormalities_polyps_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_polyps_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_polyps_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@none BIT,
		@sessile BIT,
		@sessileType TINYINT,
		@sessileBenignType TINYINT,
		@sessileQty INT,
		@sessileMultiple BIT,
		@sessileLargest DECIMAL(6,2),
		@sessileNumExcised INT,
		@sessileNumRetrieved INT,
		@sessileNumToLabs INT,
		@sessileEroded BIT,
		@sessileUlcerated BIT,
		@sessileOverlyingClot BIT,
		@sessileActiveBleeding BIT,
		@sessileOverlyingOldBlood BIT,
		@pedunculated BIT,
		@pedunculatedType TINYINT,
		@pedunculatedBenignType TINYINT,
		@pedunculatedQty INT,
		@pedunculatedMultiple BIT,
		@pedunculatedLargest DECIMAL(6,2),
		@pedunculatedNumExcised INT,
		@pedunculatedNumRetrieved INT,
		@pedunculatedNumToLabs INT,
		@pedunculatedEroded BIT,
		@pedunculatedUlcerated BIT,
		@pedunculatedOverlyingClot BIT,
		@pedunculatedActiveBleeding BIT,
		@pedunculatedOverlyingOldBlood BIT,
		@submucosal BIT,
		@submucosalType TINYINT,
		@submucosalBenignType TINYINT,
		@submucosalQty INT,
		@submucosalMultiple BIT,
		@submucosalLargest DECIMAL(6,2),
		@submucosalNumExcised INT,
		@submucosalNumRetrieved INT,
		@submucosalNumToLabs INT,
		@submucosalEroded BIT,
		@submucosalUlcerated BIT,
		@submucosalOverlyingClot BIT,
		@submucosalActiveBleeding BIT,
		@submucosalOverlyingOldBlood BIT,
		@pedunculatedText VARCHAR(4000),
		@submucosalText VARCHAR(4000)

	SELECT 
		@SiteId=SiteId,
		@None=[None],
		@Sessile=Sessile,
		@SessileType=SessileType,
		@SessileBenignType=SessileBenignType,
		@SessileQty=SessileQty,
		@SessileMultiple=SessileMultiple,
		@SessileLargest=SessileLargest,
		@SessileNumExcised=SessileNumExcised,
		@SessileNumRetrieved=SessileNumRetrieved,
		@SessileNumToLabs=SessileNumToLabs,
		@SessileEroded=SessileEroded,
		@SessileUlcerated=SessileUlcerated,
		@SessileOverlyingClot=SessileOverlyingClot,
		@SessileActiveBleeding=SessileActiveBleeding,
		@SessileOverlyingOldBlood=SessileOverlyingOldBlood,
		@Pedunculated=Pedunculated,
		@PedunculatedType=PedunculatedType,
		@PedunculatedBenignType=PedunculatedBenignType,
		@PedunculatedQty=PedunculatedQty,
		@PedunculatedMultiple=PedunculatedMultiple,
		@PedunculatedLargest=PedunculatedLargest,
		@PedunculatedNumExcised=PedunculatedNumExcised,
		@PedunculatedNumRetrieved=PedunculatedNumRetrieved,
		@PedunculatedNumToLabs=PedunculatedNumToLabs,
		@PedunculatedEroded=PedunculatedEroded,
		@PedunculatedUlcerated=PedunculatedUlcerated,
		@PedunculatedOverlyingClot=PedunculatedOverlyingClot,
		@PedunculatedActiveBleeding=PedunculatedActiveBleeding,
		@PedunculatedOverlyingOldBlood=PedunculatedOverlyingOldBlood,
		@Submucosal=Submucosal,
		@SubmucosalType=SubmucosalType,
		@SubmucosalBenignType=SubmucosalBenignType,
		@SubmucosalQty=SubmucosalQty,
		@SubmucosalMultiple=SubmucosalMultiple,
		@SubmucosalLargest=SubmucosalLargest,
		@SubmucosalNumExcised=SubmucosalNumExcised,
		@SubmucosalNumRetrieved=SubmucosalNumRetrieved,
		@SubmucosalNumToLabs=SubmucosalNumToLabs,
		@SubmucosalEroded=SubmucosalEroded,
		@SubmucosalUlcerated=SubmucosalUlcerated,
		@SubmucosalOverlyingClot=SubmucosalOverlyingClot,
		@SubmucosalActiveBleeding=SubmucosalActiveBleeding,
		@SubmucosalOverlyingOldBlood=SubmucosalOverlyingOldBlood
	FROM
		ERS_UpperGIAbnoPolyps
	WHERE
		SiteId = @SiteId

	SET @Summary = ''
	SET @pedunculatedText = ''
	SET @submucosalText = ''

	IF @none = 1
		SET @summary = @summary + 'No polyps'
	
	ELSE 
	BEGIN
		IF @sessile > 0
		BEGIN
				IF @sessileMultiple > 0 SET @summary = @summary + 'multiple'
				ELSE IF @sessileQty > 1 SET @summary = @summary + dbo.fnRemoveDecTrailingZeroes(@sessileQty)

			IF @SessileType = 1 
			BEGIN
				SET @summary = @summary + ' benign'
				IF @sessileBenignType = 1 SET @summary = @summary + ' hyperplastic'
				ELSE IF @sessileBenignType = 2 SET @summary = @summary + ' adenomatous'
				ELSE IF @sessileBenignType = 3 SET @summary = @summary + ' uncertain'
			END
			ELSE IF @SessileType = 2 SET @summary = @summary + ' malignant'

			SET @summary = @summary + ' sessile'

			IF @sessileLargest > 0 SET @summary = @summary + ' (largest ' + dbo.fnRemoveDecTrailingZeroes(@sessileLargest) + ' mm)'

			IF @sessileEroded > 0 OR @sessileUlcerated > 0 OR @sessileOverlyingClot > 0 OR @sessileActiveBleeding > 0 OR @sessileOverlyingOldBlood > 0
			BEGIN
				IF @sessileEroded > 0 SET @summary = @summary + '$$ erosion'
				IF @sessileUlcerated > 0 SET @summary = @summary + '$$ ulceration'
				IF @sessileOverlyingClot > 0 SET @summary = @summary + '$$ overlying clot'
				IF @sessileActiveBleeding > 0 SET @summary = @summary + '$$ active bleeding'
				IF @sessileOverlyingOldBlood > 0 SET @summary = @summary + '$$ overlying old blood'
				
				-- Set the first occurence of $$ to "with"
				SET @summary = STUFF(@summary, charindex('$$', @summary), 2, ' with')
				-- Set the last occurence of $$ to "and"
				IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and')
				-- Replace all other occurences of $$ with commas
				SET @summary = REPLACE(@summary, '$$', ',')
			END
			
			IF @sessileNumExcised > 0 
			BEGIN
				SET @summary = @summary + ' - '
				IF @sessileNumExcised <> @sessileQty SET @summary = @summary + dbo.fnRemoveDecTrailingZeroes(@sessileNumExcised) + ' '
				SET @summary = @summary + 'excised'
			END

			IF @sessileNumRetrieved > 0 
			BEGIN
				SET @summary = @summary + '$$ '
				IF @sessileNumRetrieved <> @sessileNumExcised SET @summary = @summary + dbo.fnRemoveDecTrailingZeroes(@sessileNumRetrieved) + ' '
				SET @summary = @summary + 'retrieved'
			END

			IF @sessileNumToLabs > 0 
			BEGIN
				SET @summary = @summary + '$$ '
				IF @sessileNumToLabs <> @sessileNumRetrieved SET @summary = @summary + dbo.fnRemoveDecTrailingZeroes(@sessileNumToLabs) + ' '
				SET @summary = @summary + 'sent to labs'
			END
			
			-- Set the last occurence of $$ to "and"
			IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and')
			-- Replace all other occurences of $$ with commas
			SET @summary = REPLACE(@summary, '$$', ',')
		END

		IF @pedunculated > 0
		BEGIN
			IF @pedunculatedMultiple > 0 SET @pedunculatedText = @pedunculatedText + 'multiple'
			ELSE IF @pedunculatedQty > 1 SET @pedunculatedText = @pedunculatedText + dbo.fnRemoveDecTrailingZeroes(@pedunculatedQty)
			
			IF @pedunculatedType = 1 
			BEGIN
				SET @pedunculatedText = @pedunculatedText + ' benign'
				IF @pedunculatedBenignType = 1 SET @pedunculatedText = @pedunculatedText + ' hyperplastic'
				ELSE IF @pedunculatedBenignType = 2 SET @pedunculatedText = @pedunculatedText + ' adenomatous'
				ELSE IF @pedunculatedBenignType = 3 SET @pedunculatedText = @pedunculatedText + ' uncertain'
			END
			ELSE IF @pedunculatedType = 2 SET @pedunculatedText = @pedunculatedText + ' malignant'
			
			SET @pedunculatedText = @pedunculatedText + ' pedunculated'

			IF @pedunculatedLargest > 0 SET @pedunculatedText = @pedunculatedText + ' (largest ' + dbo.fnRemoveDecTrailingZeroes(@pedunculatedLargest) + ' mm)'

			IF @pedunculatedEroded > 0 OR @pedunculatedUlcerated > 0 OR @pedunculatedOverlyingClot > 0 OR @pedunculatedActiveBleeding > 0 OR @pedunculatedOverlyingOldBlood > 0
			BEGIN
				IF @pedunculatedEroded > 0 SET @pedunculatedText = @pedunculatedText + '$$ erosion'
				IF @pedunculatedUlcerated > 0 SET @pedunculatedText = @pedunculatedText + '$$ ulceration'
				IF @pedunculatedOverlyingClot > 0 SET @pedunculatedText = @pedunculatedText + '$$ overlying clot'
				IF @pedunculatedActiveBleeding > 0 SET @pedunculatedText = @pedunculatedText + '$$ active bleeding'
				IF @pedunculatedOverlyingOldBlood > 0 SET @pedunculatedText = @pedunculatedText + '$$ overlying old blood'
				
				-- Set the first occurence of $$ to "with"
				SET @pedunculatedText = STUFF(@pedunculatedText, charindex('$$', @pedunculatedText), 2, ' with')
				-- Set the last occurence of $$ to "and"
				IF CHARINDEX('$$', @pedunculatedText) > 0 SET @pedunculatedText = STUFF(@pedunculatedText, len(@pedunculatedText) - charindex('$$', reverse(@pedunculatedText)), 2, ' and')
				-- Replace all other occurences of $$ with commas
				SET @pedunculatedText = REPLACE(@pedunculatedText, '$$', ',')
			END
			
			IF @pedunculatedNumExcised > 0 
			BEGIN
				SET @pedunculatedText = @pedunculatedText + ' - '
				IF @pedunculatedNumExcised <> @pedunculatedQty SET @pedunculatedText = @pedunculatedText + dbo.fnRemoveDecTrailingZeroes(@pedunculatedNumExcised) + ' '
				SET @pedunculatedText = @pedunculatedText + 'excised'
			END

			IF @pedunculatedNumRetrieved > 0 
			BEGIN
				SET @pedunculatedText = @pedunculatedText + ', '
				IF @pedunculatedNumRetrieved <> @pedunculatedNumExcised SET @pedunculatedText = @pedunculatedText + dbo.fnRemoveDecTrailingZeroes(@pedunculatedNumRetrieved) + ' '
				SET @pedunculatedText = @pedunculatedText + 'retrieved'
			END

			IF @pedunculatedNumToLabs > 0 
			BEGIN
				SET @pedunculatedText = @pedunculatedText + '$$ '
				IF @pedunculatedNumToLabs <> @pedunculatedNumRetrieved SET @pedunculatedText = @pedunculatedText + dbo.fnRemoveDecTrailingZeroes(@pedunculatedNumToLabs) + ' '
				SET @pedunculatedText = @pedunculatedText + 'sent to labs'
			END

			-- Set the last occurence of $$ to "and"
			IF CHARINDEX('$$', @pedunculatedText) > 0 SET @pedunculatedText = STUFF(@pedunculatedText, len(@pedunculatedText) - charindex('$$', reverse(@pedunculatedText)), 2, ' and')
			-- Replace all other occurences of $$ with commas
			SET @pedunculatedText = REPLACE(@pedunculatedText, '$$', ',')

			IF @summary <> '' SET @summary = @summary + '. ' + dbo.fnFirstLetterUpper(LTRIM(@pedunculatedText))
			ELSE SET @summary = @pedunculatedText 
		END

		IF @submucosal > 0
		BEGIN
			IF @submucosalMultiple > 0 SET @submucosalText = @submucosalText + 'multiple'
			ELSE IF @submucosalQty > 1 SET @submucosalText = @submucosalText + dbo.fnRemoveDecTrailingZeroes(@submucosalQty)
			
			IF @submucosalType = 1 
			BEGIN
				SET @submucosalText = @submucosalText + ' benign'
				IF @submucosalBenignType = 1 SET @submucosalText = @submucosalText + ' hyperplastic'
				ELSE IF @submucosalBenignType = 2 SET @submucosalText = @submucosalText + ' adenomatous'
				ELSE IF @submucosalBenignType = 3 SET @submucosalText = @submucosalText + ' uncertain'
			END
			ELSE IF @submucosalType = 2 SET @submucosalText = @submucosalText + ' malignant'
			
			SET @submucosalText = @submucosalText + ' submucosal'

			IF @submucosalLargest > 0 SET @submucosalText = @submucosalText + ' (largest ' + dbo.fnRemoveDecTrailingZeroes(@submucosalLargest) + ' mm)'

			IF @submucosalEroded > 0 OR @submucosalUlcerated > 0 OR @submucosalOverlyingClot > 0 OR @submucosalActiveBleeding > 0 OR @submucosalOverlyingOldBlood > 0
			BEGIN
				IF @submucosalEroded > 0 SET @submucosalText = @submucosalText + '$$ erosion'
				IF @submucosalUlcerated > 0 SET @submucosalText = @submucosalText + '$$ ulceration'
				IF @submucosalOverlyingClot > 0 SET @submucosalText = @submucosalText + '$$ overlying clot'
				IF @submucosalActiveBleeding > 0 SET @submucosalText = @submucosalText + '$$ active bleeding'
				IF @submucosalOverlyingOldBlood > 0 SET @submucosalText = @submucosalText + '$$ overlying old blood'
				
				-- Set the first occurence of $$ to "with"
				SET @submucosalText = STUFF(@submucosalText, charindex('$$', @submucosalText), 2, ' with')
				-- Set the last occurence of $$ to "and"
				IF CHARINDEX('$$', @submucosalText) > 0 SET @submucosalText = STUFF(@submucosalText, len(@submucosalText) - charindex('$$', reverse(@submucosalText)), 2, ' and')
				-- Replace all other occurences of $$ with commas
				SET @submucosalText = REPLACE(@submucosalText, '$$', ',')
			END
			
			IF @submucosalNumExcised > 0 
			BEGIN
				SET @submucosalText = @submucosalText + ' - '
				IF @submucosalNumExcised <> @submucosalQty SET @submucosalText = @submucosalText + dbo.fnRemoveDecTrailingZeroes(@submucosalNumExcised) + ' '
				SET @submucosalText = @submucosalText + 'excised'
			END

			IF @submucosalNumRetrieved > 0 
			BEGIN
				SET @submucosalText = @submucosalText + ', '
				IF @submucosalNumRetrieved <> @submucosalNumExcised SET @submucosalText = @submucosalText + dbo.fnRemoveDecTrailingZeroes(@submucosalNumRetrieved) + ' '
				SET @submucosalText = @submucosalText + 'retrieved'
			END

			IF @submucosalNumToLabs > 0 
			BEGIN
				SET @submucosalText = @submucosalText + '$$ '
				IF @submucosalNumToLabs <> @submucosalNumRetrieved SET @submucosalText = @submucosalText + dbo.fnRemoveDecTrailingZeroes(@submucosalNumToLabs) + ' '
				SET @submucosalText = @submucosalText + 'sent to labs'
			END

			-- Set the last occurence of $$ to "and"
			IF CHARINDEX('$$', @submucosalText) > 0 SET @submucosalText = STUFF(@submucosalText, len(@submucosalText) - charindex('$$', reverse(@submucosalText)), 2, ' and')
			-- Replace all other occurences of $$ with commas
			SET @submucosalText = REPLACE(@submucosalText, '$$', ',')

			IF @summary <> '' SET @summary = @summary + '. ' + dbo.fnFirstLetterUpper(LTRIM(@submucosalText)) 
			ELSE SET @summary = @submucosalText 
		END
	END
	
	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_UpperGIAbnoPolyps
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------235a Create Proc ogd_gibleeds_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_gibleeds_select','S';
GO

CREATE PROCEDURE [dbo].[ogd_gibleeds_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

SELECT
	AgeRange,
	Gender,
	Melaena,
	Syncope,
	LowestSystolicBP,
	HighestPulseGreaterThan100,
	Urea,
	Haemoglobin,
	HeartFailure,
	LiverFailure,
	RenalFailure,
	MetastaticCancer,
	Diagnosis,
	Bleeding,
	OverallRiskAssessment
FROM
	ERS_UpperGIBleeds
WHERE 
	ProcedureId = @ProcedureId

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------236 Create Proc OGD_Indications_Select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'OGD_Indications_Select', 'S';
GO

CREATE PROCEDURE [dbo].[OGD_Indications_Select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

	SELECT	ProcedureId,
		Anaemia,
		AnaemiaType,
		AbdominalPain,
		AbnormalCapsuleStudy,
		AbnormalMRI,
		AbnormalityOnBarium,
		ChestPain,
		ChronicLiverDisease,
		CoffeeGroundsVomit,
		Diarrhoea,
		DrugTrial,
		Dyspepsia,
		DyspepsiaAtypical,
		DyspepsiaUlcerType,	
		Dysphagia,
		Haematemesis,
		Melaena,
		NauseaAndOrVomiting,
		Odynophagia,
		PositiveTTG_EMA,
		RefluxSymptoms,
		UlcerExclusion,
		WeightLoss,
		PreviousHPyloriTest,
		SerologyTest,
		SerologyTestResult,
		BreathTest,
		BreathTestResult,
		UreaseTest,
		UreaseTestResult,
		StoolAntigenTest,
		StoolAntigenTestResult,
		OpenAccess,
		OtherIndication,
		ClinicallyImpComments,
		UrgentTwoWeekReferral,
		Cancer,
		WHOStatus,
		BariatricPreAssessment,
		BalloonInsertion,
		SingleBalloonEnteroscopy,
		DoubleBalloonEnteroscopy,
		BalloonRemoval,
		PostBariatricSurgeryAssessment,
		EUS,
		GastrostomyInsertion,
		InsertionOfPHProbe,
		JejunostomyInsertion,
		NasoDuodenalTube,
		OesophagealDilatation,
		PEGRemoval,
		PEGReplacement,
		PushEnteroscopy,
		SmallBowelBiopsy,
		StentRemoval,
		StentInsertion,
		StentReplacement,
		EUSRefGuidedFNABiopsy,
		EUSOesophagealStricture,
		EUSAssessmentOfSubmucosalLesion,
		EUSTumourStagingOesophageal,
		EUSTumourStagingGastric,
		EUSTumourStagingDuodenal,
		OtherPlannedProcedure,
		CoMorbidityNone,
		Angina,
		Asthma,
		COPD,
		DiabetesMellitus,
		DiabetesMellitusType,
		Epilepsy,
		HemiPostStroke,
		Hypertension,
		MI,
		Obesity,
		TIA,
		OtherCoMorbidity,
		ASAStatus,
		PotentiallyDamagingDrug,
		Allergy,
		AllergyDesc,
		CurrentMedication,
		IncludeCurrentRxInReport,
		SurgeryFollowUpProc,
		SurgeryFollowUpProcPeriod,
		SurgeryFollowUpText,
		DiseaseFollowUpProc,
		DiseaseFollowUpProcPeriod,
		BarrettsOesophagus,
		CoeliacDisease,
		Dysplasia,
		Gastritis,
		Malignancy,
		OesophagealDilatationFollowUp,
		OesophagealVarices,
		Oesophagitis,
		UlcerHealing,
		[ColonSreeningColonoscopy],
		[ColonBowelCancerScreening],
		[ColonFOBT],
		[ColonFIT],
		[ColonAlterBowelHabit],
		[ColonRectalBleeding],
		[ColonAnaemia],
		[ColonAnaemiaType],
		[ColonAbnormalCTScan],
		[ColonAbnormalSigmoidoscopy],
		[ColonAbnormalBariumEnema],
		[ColonAbdominalMass],
		[ColonColonicObstruction],
		[ColonAbdominalPain],
		ColonTumourAssessment, 
		ColonMelaena, 
		ColonPolyposisSyndrome, 
		ColonRaisedFaecalCalprotectin,
		ColonWeightLoss,
		ColonFamily,ColonFamilyType,
		ColonAssessment,ColonAssessmentType,
		ColonSurveillance,
		ColonFamilyAdditionalText,
		ColonCarcinoma,
		ColonPolyps,
		ColonDysplasia,
		ERSAbdominalPain,
		ERSChronicPancreatisis,
		ERSSphincter,
		ERSAbnormalEnzymes,
		ERSJaundice,
		ERSStentOcclusion,
		ERSAcutePancreatitisAcute,
		ERSObstructedCBD,
		ERSSuspectedPapillary,
		ERSBiliaryLeak,
		ERSOpenAccess,
		ERSCholangitis,
		ERSPrelaparoscopic,
		ERSRecurrentPancreatitis,
		ERSBileDuctInjury,
		ERSPurulentCholangitis,
		ERSPancreaticPseudocyst,
		ERSPancreatobiliaryPain,
		ERSPapillaryDysfunction,
		ERSPriSclerosingChol,
		ERSImgUltrasound,
		ERSImgCT,
		ERSImgMRI,
		ERSImgMRCP,
		ERSImgIDA,
		ERSImgEUS,
		ERSNormal,
		ERSChronicPancreatitis,
		ERSAcutePancreatitis,
		ERSGallBladder,
		ERSFluidCollection,
		ERSPancreaticMass,
		ERSDilatedPancreatic,
		ERSStonedBiliary,
		ERSHepaticMass,
		ERSObstructed,
		ERSDilatedDucts,
		AmpullaryMass,
		GallBladderMass,
		GallBladderPolyp,
		BiliaryLeak,
		ERSDilatedDuctsType1,
		ERSDilatedDuctsType2,     
		ERSImgOthersTextBox,
		EPlanCanunulate,
		EplanManometry,
		EplanStentremoval,
		EplanCombinedProcedure,
		EplanNasoPancreatic,
		EplanStentReplacement,
		EPlanEndoscopicCyst,
		EplanPapillotomy,
		EplanStoneRemoval,
		EplanStentInsertion,
		EplanStrictureDilatation,
		EplanOthersTextBox,
		EPlanCanunulate,
		EplanManometry,
		EplanStentremoval,
		EplanCombinedProcedure,
		EplanNasoPancreatic,
		EplanStentReplacement,
		EPlanEndoscopicCyst,
		EplanPapillotomy,
		EplanStoneRemoval,
		EplanStentInsertion,
		EplanStrictureDilatation,
		EplanOthersTextBox,
		ERSFollowPrevious,
		ERSFollowCarriedOut,
		ERSFollowBileDuct,
		ERSFollowMalignancy,
		ERSFollowBiliaryStricture,
		ERSFollowStentReplacement,
		PolypTumourAssess,
		EMR
	FROM
		ERS_UpperGIIndications
	WHERE 
		ProcedureId = @ProcedureId;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------236 Create Proc ogd_indications_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_indications_save', 'S';
GO

CREATE PROCEDURE [dbo].[ogd_indications_save]
(
	@ProcedureId INT,
	@Anaemia BIT,
	@AnaemiaType SMALLINT,
	@AbdominalPain BIT,
	@AbnormalCapsuleStudy BIT,
	@AbnormalMRI BIT,
	@AbnormalityOnBarium BIT,
	@ChestPain BIT,
	@ChronicLiverDisease BIT,
	@CoffeeGroundsVomit BIT,
	@Diarrhoea BIT,
	@DrugTrial BIT,
	@Dyspepsia BIT,
	@DyspepsiaAtypical BIT,
	@DyspepsiaUlcerType BIT,	
	@Dysphagia BIT,
	@Haematemesis BIT,
	@Melaena BIT,
	@NauseaAndOrVomiting BIT,
	@Odynophagia BIT,
	@PositiveTTG BIT,
	@RefluxSymptoms BIT,
	@UlcerExclusion BIT,
	@WeightLoss BIT,
	@PreviousHPyloriTest BIT,
	@SerologyTest BIT,
	@SerologyTestResult TINYINT,
	@BreathTest BIT,
	@BreathTestResult TINYINT,
	@UreaseTest BIT,
	@UreaseTestResult TINYINT,
	@StoolAntigenTest BIT,
	@StoolAntigenTestResult TINYINT,
	@OpenAccess BIT,
	@OtherIndication NVARCHAR(1000),
	@ClinicallyImpComments NVARCHAR(4000),
	@UrgentTwoWeekReferral BIT,
	@Cancer INT,
	@WHOStatus SMALLINT,
	@BariatricPreAssessment BIT,
	@BalloonInsertion BIT,
	@BalloonRemoval BIT,
	@SingleBalloonEnteroscopy BIT,
	@DoubleBalloonEnteroscopy BIT,
	@PostBariatricSurgeryAssessment BIT,
	@EUS BIT,
	@GastrostomyInsertion BIT,
	@InsertionOfPHProbe BIT,
	@JejunostomyInsertion BIT,
	@NasoDuodenalTube BIT,
	@OesophagealDilatation BIT,
	@PEGRemoval BIT,
	@PEGReplacement BIT,
	@PushEnteroscopy BIT,
	@SmallBowelBiopsy BIT,
	@StentRemoval BIT,
	@StentInsertion BIT,
	@StentReplacement BIT,
	@EUSRefGuidedFNABiopsy BIT,
	@EUSOesophagealStricture BIT,
	@EUSAssessmentOfSubmucosalLesion BIT,
	@EUSTumourStagingOesophageal BIT,
	@EUSTumourStagingGastric BIT,
	@EUSTumourStagingDuodenal BIT,
	@OtherPlannedProcedure NVARCHAR(1000),
	@CoMorbidityNone BIT,
	@Angina BIT,
	@Asthma BIT,
	@COPD BIT,
	@DiabetesMellitus BIT,
	@DiabetesMellitusType TINYINT,
	@Epilepsy BIT,
	@HemiPostStroke BIT,
	@Hypertension BIT,
	@MI BIT,
	@Obesity BIT,
	@TIA BIT,
	@OtherCoMorbidity NVARCHAR(1000),
	@ASAStatus TINYINT,
	@PotentiallyDamagingDrug NVARCHAR(1000),
	@Allergy TINYINT,
	@AllergyDesc NVARCHAR(1000),
	@CurrentMedication NVARCHAR(4000),
	@IncludeCurrentRxInReport BIT,
	@SurgeryFollowUpProc INT,
	@SurgeryFollowUpProcPeriod INT,
	@SurgeryFollowUpText NVARCHAR(1000),
	@DiseaseFollowUpProc INT,
	@DiseaseFollowUpProcPeriod INT,
	@BarrettsOesophagus BIT,
	@CoeliacDisease BIT,
	@Dysplasia BIT,
	@Gastritis BIT,
	@Malignancy BIT,
	@OesophagealDilatationFollowUp BIT,
	@OesophagealVarices BIT,
	@Oesophagitis BIT,
	@UlcerHealing BIT,
	@ColonSreeningColonoscopy bit,
	@ColonBowelCancerScreening bit,
	@ColonFOBT bit,
	@ColonFIT bit,
	@ColonAlterBowelHabit int,
	@ColonRectalBleeding int,
	@ColonAnaemia bit,
	@ColonAnaemiaType int,
	@ColonAbnormalCTScan bit,
	@ColonAbnormalSigmoidoscopy bit,
	@ColonAbnormalBariumEnema bit,
	@ColonAbdominalMass bit,
	@ColonColonicObstruction bit,
	@ColonAbdominalPain bit,
	@ColonTumourAssessment BIT,
	@ColonMelaena BIT,
	@ColonPolyposisSyndrome BIT,
	@ColonRaisedFaecalCalprotectin BIT,
	@ColonWeightLoss BIT,
	@ColonFamily bit, 
	@ColonFamilyType int,
	@ColonAssessment bit,
	@ColonAssessmentType int,
	@ColonSurveillance bit,
	@ColonFamilyAdditionalText varchar(7000),
	@ColonCarcinoma bit,
	@ColonPolyps bit,
	@ColonDysplasia bit,
	@ERSAbdominalPain bit,
	@ERSChronicPancreatisis bit,
	@ERSSphincter bit,
	@ERSAbnormalEnzymes bit,
	@ERSJaundice bit,
	@ERSStentOcclusion bit,
	@ERSAcutePancreatitisAcute bit,
	@ERSObstructedCBD bit, 
	@ERSSuspectedPapillary bit,	
	@ERSBiliaryLeak bit,
	@ERSOpenAccess bit, 
	@ERSCholangitis bit,
	@ERSPrelaparoscopic bit,
	@ERSRecurrentPancreatitis bit,
	@ERSBileDuctInjury bit,
	@ERSPurulentCholangitis bit,
	@ERSPancreaticPseudocyst bit,
	@ERSPancreatobiliaryPain bit,
	@ERSPapillaryDysfunction bit,
	@ERSPriSclerosingChol bit,
	@ERSImgUltrasound bit,
	@ERSImgCT bit,
	@ERSImgMRI bit,
	@ERSImgMRCP bit,
	@ERSImgIDA bit,
	@ERSImgEUS bit,
	@ERSNormal bit,
	@ERSChronicPancreatitis bit,
	@ERSAcutePancreatitis bit,
	@ERSGallBladder bit,
	@ERSFluidCollection bit,
	@ERSPancreaticMass bit,
	@ERSDilatedPancreatic bit,
	@ERSStonedBiliary bit,
	@ERSHepaticMass bit,
	@ERSObstructed bit,
	@ERSDilatedDucts bit,
	@AmpullaryMass BIT,
	@GallBladderMass AS BIT,
	@GallBladderPolyp AS BIT,
	@BiliaryLeak bit,
	@ERSDilatedDuctsType1 bit,
	@ERSDilatedDuctsType2 bit,
	@ERSImgOthersTextBox varchar(2000),
	@EPlanCanunulate bit,
	@EplanManometry bit,
	@EplanStentremoval bit,
	@EplanCombinedProcedure bit,
	@EplanNasoPancreatic bit,
	@EplanStentReplacement bit,
	@EPlanEndoscopicCyst bit,
	@EplanPapillotomy bit,
	@EplanStoneRemoval bit,
	@EplanStentInsertion bit,
	@EplanStrictureDilatation bit,
	@EplanOthersTextBox varchar(2000),
	@ERSFollowPrevious smallint,
	@ERSFollowCarriedOut smallint,
	@ERSFollowBileDuct bit,
	@ERSFollowMalignancy bit,
	@ERSFollowBiliaryStricture bit,
	@ERSFollowStentReplacement bit,
	@PolypTumourAssess bit,
	@EMR bit,
	@LoggedInUserId INT

)
AS

SET NOCOUNT OFF --## Need to know Whether a Record is INSERTED, from ASP.Net

BEGIN TRANSACTION

BEGIN TRY
			
	IF @SerologyTest = 0 SET @SerologyTestResult = 0
	IF @BreathTest = 0 SET @BreathTestResult = 0
	IF @UreaseTest = 0 SET @UreaseTestResult = 0
	IF @StoolAntigenTest = 0 SET @StoolAntigenTestResult = 0

	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_UpperGIIndications (
			ProcedureId,
			Anaemia,
			AnaemiaType,
			AbdominalPain,
			AbnormalCapsuleStudy,
			AbnormalMRI,
			AbnormalityOnBarium,
			ChestPain,
			ChronicLiverDisease,
			CoffeeGroundsVomit,
			Diarrhoea,
			DrugTrial,
			Dyspepsia,
			DyspepsiaAtypical,
			DyspepsiaUlcerType,			
			Dysphagia,
			Haematemesis,
			Melaena,
			NauseaAndOrVomiting,
			Odynophagia,
			PositiveTTG_EMA,
			RefluxSymptoms,
			UlcerExclusion,
			WeightLoss,
			PreviousHPyloriTest,
			SerologyTest,
			SerologyTestResult,
			BreathTest,
			BreathTestResult,
			UreaseTest,
			UreaseTestResult,
			StoolAntigenTest,
			StoolAntigenTestResult,
			OpenAccess,
			OtherIndication,
			ClinicallyImpComments,
			UrgentTwoWeekReferral,
			Cancer,
			WHOStatus,
			BariatricPreAssessment,
			BalloonInsertion,
			BalloonRemoval,
			SingleBalloonEnteroscopy,
			DoubleBalloonEnteroscopy,
			PostBariatricSurgeryAssessment,
			EUS,
			GastrostomyInsertion,
			InsertionOfPHProbe,
			JejunostomyInsertion,
			NasoDuodenalTube,
			OesophagealDilatation,
			PEGRemoval,
			PEGReplacement,
			PushEnteroscopy,
			SmallBowelBiopsy,
			StentRemoval,
			StentInsertion,
			StentReplacement,
			EUSRefGuidedFNABiopsy,
			EUSOesophagealStricture,
			EUSAssessmentOfSubmucosalLesion,
			EUSTumourStagingOesophageal,
			EUSTumourStagingGastric,
			EUSTumourStagingDuodenal,
			OtherPlannedProcedure,
			CoMorbidityNone,
			Angina,
			Asthma,
			COPD,
			DiabetesMellitus,
			DiabetesMellitusType,
			Epilepsy,
			HemiPostStroke,
			Hypertension,
			MI,
			Obesity,
			TIA,
			OtherCoMorbidity,
			ASAStatus,
			PotentiallyDamagingDrug,
			Allergy,
			AllergyDesc,
			CurrentMedication,
			IncludeCurrentRxInReport,
			SurgeryFollowUpProc,
			SurgeryFollowUpProcPeriod,
			SurgeryFollowUpText,
			DiseaseFollowUpProc,
			DiseaseFollowUpProcPeriod,
			BarrettsOesophagus,
			CoeliacDisease,
			Dysplasia,
			Gastritis,
			Malignancy,
			OesophagealDilatationFollowUp,
			OesophagealVarices,
			Oesophagitis,
			UlcerHealing,
			ColonSreeningColonoscopy,
			ColonBowelCancerScreening,
			ColonFOBT,
			ColonFIT,
			ColonAlterBowelHabit,
			ColonRectalBleeding,
			ColonAnaemia,
			ColonAnaemiaType,	
			ColonAbnormalCTScan,
			ColonAbnormalSigmoidoscopy,
			ColonAbnormalBariumEnema,
			ColonAbdominalMass,
			ColonColonicObstruction,
			ColonAbdominalPain,
			ColonTumourAssessment,
			ColonMelaena,
			ColonPolyposisSyndrome,
			ColonRaisedFaecalCalprotectin,
			ColonWeightLoss,
			ColonFamily,
			ColonAssessment,
			ColonSurveillance,
			ColonCarcinoma,
			ColonPolyps,
			ColonDysplasia,
			ColonFamilyType,
			ColonAssessmentType,
			ColonFamilyAdditionalText,
			ERSAbdominalPain,
			ERSChronicPancreatisis,
			ERSSphincter,
			ERSAbnormalEnzymes,
			ERSJaundice,
			ERSStentOcclusion,
			ERSAcutePancreatitisAcute,
			ERSObstructedCBD,
			ERSSuspectedPapillary,
			ERSBiliaryLeak,
			ERSOpenAccess,
			ERSCholangitis,
			ERSPrelaparoscopic,
			ERSRecurrentPancreatitis,
			ERSBileDuctInjury,
			ERSPurulentCholangitis,
			ERSPancreaticPseudocyst,
			ERSPancreatobiliaryPain,
			ERSPapillaryDysfunction,
			ERSPriSclerosingChol,
			ERSImgUltrasound,
			ERSImgCT,
			ERSImgMRI,
			ERSImgMRCP,
			ERSImgIDA,
			ERSImgEUS,
			ERSNormal,
			ERSChronicPancreatitis,
			ERSAcutePancreatitis,
			ERSGallBladder,
			ERSFluidCollection,
			ERSPancreaticMass,
			ERSDilatedPancreatic,
			ERSStonedBiliary,
			ERSHepaticMass,
			ERSObstructed,
			ERSDilatedDucts,
			AmpullaryMass,
			GallBladderMass,
			GallBladderPolyp,
			BiliaryLeak,
			ERSDilatedDuctsType1,
			ERSDilatedDuctsType2,
			ERSImgOthersTextBox,
			EPlanCanunulate,
			EplanManometry,
			EplanStentremoval,
			EplanCombinedProcedure,
			EplanNasoPancreatic,
			EplanStentReplacement,
			EPlanEndoscopicCyst,
			EplanPapillotomy,
			EplanStoneRemoval,
			EplanStentInsertion,
			EplanStrictureDilatation,
			EplanOthersTextBox,
			ERSFollowPrevious,
			ERSFollowCarriedOut,
			ERSFollowBileDuct,
			ERSFollowMalignancy,
			ERSFollowBiliaryStricture,
			ERSFollowStentReplacement,
			PolypTumourAssess,
			EMR,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@ProcedureId,
			@Anaemia,
			@AnaemiaType,
			@AbdominalPain,
			@AbnormalCapsuleStudy,
			@AbnormalMRI,
			@AbnormalityOnBarium,
			@ChestPain,
			@ChronicLiverDisease,
			@CoffeeGroundsVomit,
			@Diarrhoea,
			@DrugTrial,
			@Dyspepsia,
			@DyspepsiaAtypical,
			@DyspepsiaUlcerType,			
			@Dysphagia,
			@Haematemesis,
			@Melaena,
			@NauseaAndOrVomiting,
			@Odynophagia,
			@PositiveTTG,
			@RefluxSymptoms,
			@UlcerExclusion,
			@WeightLoss,
			@PreviousHPyloriTest,
			@SerologyTest,
			@SerologyTestResult,
			@BreathTest,
			@BreathTestResult,
			@UreaseTest,
			@UreaseTestResult,
			@StoolAntigenTest,
			@StoolAntigenTestResult,
			@OpenAccess,
			@OtherIndication,
			@ClinicallyImpComments,
			@UrgentTwoWeekReferral,
			@Cancer,
			@WHOStatus,
			@BariatricPreAssessment,
			@BalloonInsertion,
			@BalloonRemoval,
			@SingleBalloonEnteroscopy,
			@DoubleBalloonEnteroscopy,
			@PostBariatricSurgeryAssessment,
			@EUS,
			@GastrostomyInsertion,
			@InsertionOfPHProbe,
			@JejunostomyInsertion,
			@NasoDuodenalTube,
			@OesophagealDilatation,
			@PEGRemoval,
			@PEGReplacement,
			@PushEnteroscopy,
			@SmallBowelBiopsy,
			@StentRemoval,
			@StentInsertion,
			@StentReplacement,
			@EUSRefGuidedFNABiopsy,
			@EUSOesophagealStricture,
			@EUSAssessmentOfSubmucosalLesion,
			@EUSTumourStagingOesophageal,
			@EUSTumourStagingGastric,
			@EUSTumourStagingDuodenal,
			@OtherPlannedProcedure,
			@CoMorbidityNone,
			@Angina,
			@Asthma,
			@COPD,
			@DiabetesMellitus,
			@DiabetesMellitusType,
			@Epilepsy,
			@HemiPostStroke,
			@Hypertension,
			@MI,
			@Obesity,
			@TIA,
			@OtherCoMorbidity,
			@ASAStatus,
			@PotentiallyDamagingDrug,
			@Allergy,
			@AllergyDesc,
			@CurrentMedication,
			@IncludeCurrentRxInReport,
			@SurgeryFollowUpProc,
			@SurgeryFollowUpProcPeriod,
			@SurgeryFollowUpText,
			@DiseaseFollowUpProc,
			@DiseaseFollowUpProcPeriod,
			@BarrettsOesophagus,
			@CoeliacDisease,
			@Dysplasia,
			@Gastritis,
			@Malignancy,
			@OesophagealDilatationFollowUp,
			@OesophagealVarices,
			@Oesophagitis,
			@UlcerHealing,
			@ColonSreeningColonoscopy,
			@ColonBowelCancerScreening,
			@ColonFOBT,
			@ColonFIT,
			@ColonAlterBowelHabit,
			@ColonRectalBleeding,
			@ColonAnaemia,
			@ColonAnaemiaType,
			@ColonAbnormalCTScan,
			@ColonAbnormalSigmoidoscopy,
			@ColonAbnormalBariumEnema,
			@ColonAbdominalMass,
			@ColonColonicObstruction,
			@ColonAbdominalPain,
			@ColonTumourAssessment,
			@ColonMelaena,
			@ColonPolyposisSyndrome,
			@ColonRaisedFaecalCalprotectin,
			@ColonWeightLoss,
			@ColonFamily,
			@ColonAssessment,
			@ColonSurveillance,
			@ColonCarcinoma,
			@ColonPolyps,
			@ColonDysplasia,
			@ColonFamilyType,
			@ColonAssessmentType,
			@ColonFamilyAdditionalText, 
			@ERSAbdominalPain,
			@ERSChronicPancreatisis,
			@ERSSphincter,
			@ERSAbnormalEnzymes,
			@ERSJaundice,
			@ERSStentOcclusion,
			@ERSAcutePancreatitisAcute,
			@ERSObstructedCBD,
			@ERSSuspectedPapillary,
			@ERSBiliaryLeak,
			@ERSOpenAccess,
			@ERSCholangitis,
			@ERSPrelaparoscopic,
			@ERSRecurrentPancreatitis,
			@ERSBileDuctInjury,
			@ERSPurulentCholangitis,
			@ERSPancreaticPseudocyst,
			@ERSPancreatobiliaryPain,
			@ERSPapillaryDysfunction,
			@ERSPriSclerosingChol,
			@ERSImgUltrasound,
			@ERSImgCT,
			@ERSImgMRI,
			@ERSImgMRCP,
			@ERSImgIDA,
			@ERSImgEUS,
			@ERSNormal,
			@ERSChronicPancreatitis,
			@ERSAcutePancreatitis,
			@ERSGallBladder,
			@ERSFluidCollection,
			@ERSPancreaticMass,
			@ERSDilatedPancreatic,
			@ERSStonedBiliary,
			@ERSHepaticMass,
			@ERSObstructed,
			@ERSDilatedDucts,
			@AmpullaryMass,
			@GallBladderMass,
			@GallBladderPolyp,
			@BiliaryLeak,
			@ERSDilatedDuctsType1,
			@ERSDilatedDuctsType2,
			@ERSImgOthersTextBox,
			@EPlanCanunulate,
			@EplanManometry,
			@EplanStentremoval,
			@EplanCombinedProcedure,
			@EplanNasoPancreatic,
			@EplanStentReplacement,
			@EPlanEndoscopicCyst,
			@EplanPapillotomy,
			@EplanStoneRemoval,
			@EplanStentInsertion,
			@EplanStrictureDilatation,
			@EplanOthersTextBox,
			@ERSFollowPrevious,
			@ERSFollowCarriedOut,
			@ERSFollowBileDuct,
			@ERSFollowMalignancy,
			@ERSFollowBiliaryStricture,
			@ERSFollowStentReplacement,
			@PolypTumourAssess,
			@EMR,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'Indications',
			1)
	END
ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIIndications
		SET 
			Anaemia = @Anaemia,
			AnaemiaType = @AnaemiaType,
			AbdominalPain = @AbdominalPain,
			AbnormalCapsuleStudy = @AbnormalCapsuleStudy,
			AbnormalMRI = @AbnormalMRI,
			AbnormalityOnBarium = @AbnormalityOnBarium,
			ChestPain = @ChestPain,
			ChronicLiverDisease = @ChronicLiverDisease,
			CoffeeGroundsVomit = @CoffeeGroundsVomit,
			Diarrhoea = @Diarrhoea,
			DrugTrial = @DrugTrial,
			Dyspepsia = @Dyspepsia,
			DyspepsiaAtypical = @DyspepsiaAtypical,
			DyspepsiaUlcerType = @DyspepsiaUlcerType,			
			Dysphagia = @Dysphagia,
			Haematemesis = @Haematemesis,
			Melaena = @Melaena,
			NauseaAndOrVomiting = @NauseaAndOrVomiting,
			Odynophagia = @Odynophagia,
			PositiveTTG_EMA = @PositiveTTG,
			RefluxSymptoms = @RefluxSymptoms,
			UlcerExclusion = @UlcerExclusion,
			WeightLoss = @WeightLoss,
			PreviousHPyloriTest = @PreviousHPyloriTest,
			SerologyTest = @SerologyTest,
			SerologyTestResult = @SerologyTestResult,
			BreathTest = @BreathTest,
			BreathTestResult = @BreathTestResult,
			UreaseTest = @UreaseTest,
			UreaseTestResult = @UreaseTestResult,
			StoolAntigenTest = @StoolAntigenTest,
			StoolAntigenTestResult = @StoolAntigenTestResult,
			OpenAccess = @OpenAccess,
			OtherIndication = @OtherIndication,
			ClinicallyImpComments = @ClinicallyImpComments,
			UrgentTwoWeekReferral = @UrgentTwoWeekReferral,
			Cancer = @Cancer,
			WHOStatus = @WHOStatus,
			BariatricPreAssessment = @BariatricPreAssessment,
			BalloonInsertion = @BalloonInsertion,
			BalloonRemoval = @BalloonRemoval,
			SingleBalloonEnteroscopy = @SingleBalloonEnteroscopy,
			DoubleBalloonEnteroscopy = @DoubleBalloonEnteroscopy,
			PostBariatricSurgeryAssessment = @PostBariatricSurgeryAssessment,
			EUS = @EUS,
			GastrostomyInsertion = @GastrostomyInsertion,
			InsertionOfPHProbe = @InsertionOfPHProbe,
			JejunostomyInsertion = @JejunostomyInsertion,
			NasoDuodenalTube = @NasoDuodenalTube,
			OesophagealDilatation = @OesophagealDilatation,
			PEGRemoval = @PEGRemoval,
			PEGReplacement = @PEGReplacement,
			PushEnteroscopy = @PushEnteroscopy,
			SmallBowelBiopsy = @SmallBowelBiopsy,
			StentRemoval = @StentRemoval,
			StentInsertion = @StentInsertion,
			StentReplacement = @StentReplacement,
			EUSRefGuidedFNABiopsy = @EUSRefGuidedFNABiopsy,
			EUSOesophagealStricture = @EUSOesophagealStricture,
			EUSAssessmentOfSubmucosalLesion = @EUSAssessmentOfSubmucosalLesion,
			EUSTumourStagingOesophageal = @EUSTumourStagingOesophageal,
			EUSTumourStagingGastric = @EUSTumourStagingGastric,
			EUSTumourStagingDuodenal = @EUSTumourStagingDuodenal,
			OtherPlannedProcedure = @OtherPlannedProcedure,
			CoMorbidityNone = @CoMorbidityNone,
			Angina = @Angina,
			Asthma = @Asthma,
			COPD = @COPD,
			DiabetesMellitus = @DiabetesMellitus,
			DiabetesMellitusType = @DiabetesMellitusType,
			Epilepsy = @Epilepsy,
			HemiPostStroke = @HemiPostStroke,
			Hypertension = @Hypertension,
			MI = @MI,
			Obesity = @Obesity,
			TIA = @TIA,
			OtherCoMorbidity = @OtherCoMorbidity,
			ASAStatus = @ASAStatus,
			PotentiallyDamagingDrug = @PotentiallyDamagingDrug,
			Allergy = @Allergy,
			AllergyDesc = @AllergyDesc,
			CurrentMedication = @CurrentMedication,
			IncludeCurrentRxInReport = @IncludeCurrentRxInReport,
			SurgeryFollowUpProc = @SurgeryFollowUpProc,
			SurgeryFollowUpProcPeriod = @SurgeryFollowUpProcPeriod,
			SurgeryFollowUpText = @SurgeryFollowUpText,
			DiseaseFollowUpProc = @DiseaseFollowUpProc,
			DiseaseFollowUpProcPeriod = @DiseaseFollowUpProcPeriod,
			BarrettsOesophagus = @BarrettsOesophagus,
			CoeliacDisease = @CoeliacDisease,
			Dysplasia = @Dysplasia,
			Gastritis = @Gastritis,
			Malignancy = @Malignancy,
			OesophagealDilatationFollowUp = @OesophagealDilatationFollowUp,
			OesophagealVarices = @OesophagealVarices,
			Oesophagitis = @Oesophagitis,
			UlcerHealing = @UlcerHealing,
			ColonSreeningColonoscopy = @ColonSreeningColonoscopy,
			ColonBowelCancerScreening = @ColonBowelCancerScreening,
			ColonFOBT = @ColonFOBT,
			ColonFIT = @ColonFIT,
			ColonAlterBowelHabit = @ColonAlterBowelHabit,
			ColonRectalBleeding = @ColonRectalBleeding,
			ColonAnaemia = @ColonAnaemia,
			ColonAnaemiaType = @ColonAnaemiaType,
			ColonAbnormalCTScan = @ColonAbnormalCTScan,
			ColonAbnormalSigmoidoscopy = @ColonAbnormalSigmoidoscopy,
			ColonAbnormalBariumEnema  = @ColonAbnormalBariumEnema,
			ColonAbdominalMass = @ColonAbdominalMass,
			ColonColonicObstruction =	@ColonColonicObstruction,
			ColonAbdominalPain =		@ColonAbdominalPain,
			ColonTumourAssessment =		@ColonTumourAssessment,
			ColonMelaena =				@ColonMelaena,
			ColonPolyposisSyndrome =	@ColonPolyposisSyndrome,
			ColonRaisedFaecalCalprotectin =	@ColonRaisedFaecalCalprotectin,
			ColonWeightLoss =			@ColonWeightLoss,
			ColonFamily =				@ColonFamily,
			ColonAssessment = @ColonAssessment,
			ColonSurveillance = @ColonSurveillance,
			ColonCarcinoma = @ColonCarcinoma,
			ColonPolyps = @ColonPolyps,
			ColonDysplasia = @ColonDysplasia,
			ColonFamilyType = @ColonFamilyType,
			ColonAssessmentType = @ColonAssessmentType,
			ColonFamilyAdditionalText = @ColonFamilyAdditionalText,
			ERSAbdominalPain = @ERSAbdominalPain,
			ERSChronicPancreatisis = @ERSChronicPancreatisis,
			ERSSphincter = @ERSSphincter,
			ERSAbnormalEnzymes = @ERSAbnormalEnzymes,
			ERSJaundice = @ERSJaundice,
			ERSStentOcclusion = @ERSStentOcclusion,
			ERSAcutePancreatitisAcute = @ERSAcutePancreatitisAcute,
			ERSObstructedCBD = @ERSObstructedCBD,
			ERSSuspectedPapillary = @ERSSuspectedPapillary,
			ERSBiliaryLeak = @ERSBiliaryLeak,
			ERSOpenAccess = @ERSOpenAccess,
			ERSCholangitis = @ERSCholangitis,
			ERSPrelaparoscopic = @ERSPrelaparoscopic,
			ERSRecurrentPancreatitis = @ERSRecurrentPancreatitis,
			ERSBileDuctInjury = @ERSBileDuctInjury,
			ERSPurulentCholangitis = @ERSPurulentCholangitis,
			ERSPancreaticPseudocyst = @ERSPancreaticPseudocyst,
			ERSPancreatobiliaryPain = @ERSPancreatobiliaryPain,
			ERSPapillaryDysfunction = @ERSPapillaryDysfunction,
			ERSPriSclerosingChol = @ERSPriSclerosingChol,
			ERSImgUltrasound = @ERSImgUltrasound,
			ERSImgCT = @ERSImgCT,
			ERSImgMRI = @ERSImgMRI,
			ERSImgMRCP = @ERSImgMRCP,
			ERSImgIDA = @ERSImgIDA,
			ERSImgEUS = @ERSImgEUS,
			ERSNormal = @ERSNormal,
			ERSChronicPancreatitis = @ERSChronicPancreatitis,
			ERSAcutePancreatitis = @ERSAcutePancreatitis,
			ERSGallBladder = @ERSGallBladder,
			ERSFluidCollection = @ERSFluidCollection,
			ERSPancreaticMass = @ERSPancreaticMass,
			ERSDilatedPancreatic = @ERSDilatedPancreatic,
			ERSStonedBiliary = @ERSStonedBiliary,
			ERSHepaticMass = @ERSHepaticMass,
			ERSObstructed = @ERSObstructed,
			ERSDilatedDucts = @ERSDilatedDucts,
			AmpullaryMass =  @AmpullaryMass,
			GallBladderMass = @GallBladderMass,
			GallBladderPolyp = @GallBladderPolyp,
			BiliaryLeak = @BiliaryLeak,
			ERSDilatedDuctsType1 = @ERSDilatedDuctsType1,
			ERSDilatedDuctsType2 = @ERSDilatedDuctsType2,
			ERSImgOthersTextBox = @ERSImgOthersTextBox,
			EPlanCanunulate = @EPlanCanunulate,
			EplanManometry = @EplanManometry,
			EplanStentremoval = @EplanStentremoval,
			EplanCombinedProcedure = @EplanCombinedProcedure,
			EplanNasoPancreatic = @EplanNasoPancreatic,
			EplanStentReplacement = @EplanStentReplacement,
			EPlanEndoscopicCyst = @EPlanEndoscopicCyst,
			EplanPapillotomy = @EplanPapillotomy,
			EplanStoneRemoval = @EplanStoneRemoval,
			EplanStentInsertion = @EplanStentInsertion,
			EplanStrictureDilatation = @EplanStrictureDilatation,
			EplanOthersTextBox = @EplanOthersTextBox,
			ERSFollowPrevious = @ERSFollowPrevious,
		   ERSFollowCarriedOut = @ERSFollowCarriedOut,
		   ERSFollowBileDuct = @ERSFollowBileDuct,
		   ERSFollowMalignancy = @ERSFollowMalignancy,
		   ERSFollowBiliaryStricture = @ERSFollowBiliaryStricture,
			ERSFollowStentReplacement = @ERSFollowStentReplacement,
			PolypTumourAssess = @PolypTumourAssess,	
			EMR = @EMR,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			ProcedureId = @ProcedureId;

	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------236a Create Proc ogd_gibleeds_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_gibleeds_save', 'S';
GO
CREATE PROCEDURE [dbo].[ogd_gibleeds_save]
(
	@ProcedureId INT,
	@AgeRange TINYINT,
	@Gender TINYINT,
	@Melaena TINYINT,
	@Syncope TINYINT,
	@LowestSystolicBP TINYINT,
	@HighestPulseGreaterThan100 TINYINT,
	@Urea TINYINT,
	@Haemoglobin TINYINT,
	@HeartFailure TINYINT,
	@LiverFailure TINYINT,
	@RenalFailure TINYINT,
	@MetastaticCancer TINYINT,
	@Diagnosis TINYINT,
	@Bleeding TINYINT,
	@OverallRiskAssessment NVARCHAR(6)
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIBleeds WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_UpperGIBleeds (
			ProcedureId,
			AgeRange,
			Gender,
			Melaena,
			Syncope,
			LowestSystolicBP,
			HighestPulseGreaterThan100,
			Urea,
			Haemoglobin,
			HeartFailure,
			LiverFailure,
			RenalFailure,
			MetastaticCancer,
			Diagnosis,
			Bleeding,
			OverallRiskAssessment) 
		VALUES (
			@ProcedureId,
			@AgeRange,
			@Gender,
			@Melaena,
			@Syncope,
			@LowestSystolicBP,
			@HighestPulseGreaterThan100,
			@Urea,
			@Haemoglobin,
			@HeartFailure,
			@LiverFailure,
			@RenalFailure,
			@MetastaticCancer,
			@Diagnosis,
			@Bleeding,
			@OverallRiskAssessment)

	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIBleeds
		SET 
			AgeRange = @AgeRange,
			Gender = @Gender,
			Melaena = @Melaena,
			Syncope = @Syncope,
			LowestSystolicBP = @LowestSystolicBP,
			HighestPulseGreaterThan100 = @HighestPulseGreaterThan100,
			Urea = @Urea,
			Haemoglobin = @Haemoglobin,
			HeartFailure = @HeartFailure,
			LiverFailure = @LiverFailure,
			RenalFailure = @RenalFailure,
			MetastaticCancer = @MetastaticCancer,
			Diagnosis = @Diagnosis,
			Bleeding = @Bleeding,
			OverallRiskAssessment = @OverallRiskAssessment
		WHERE 
			ProcedureId = @ProcedureId
	END

	EXEC ogd_diagnoses_summary_update @ProcedureId

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------237 Create Proc ogd_indications_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'ogd_indications_summary_update', 'S';
GO

CREATE PROCEDURE [dbo].[ogd_indications_summary_update]
(
       @ProcedureId INT
)
AS
       SET NOCOUNT ON

       DECLARE
              @summary VARCHAR(4000),
              @summaryTemp VARCHAR(4000),
              @Anaemia BIT,
              @AnaemiaType SMALLINT,
              @PreviousHPyloriTest BIT,
              @SerologyTest BIT,
              @SerologyTestResult TINYINT,
              @BreathTest BIT,
              @BreathTestResult TINYINT,
              @UreaseTest BIT,
              @UreaseTestResult TINYINT,
              @StoolAntigenTest BIT,
              @StoolAntigenTestResult TINYINT,
              @OpenAccess BIT,
              @OtherIndication NVARCHAR(1000),
              @ClinicallyImpComments NVARCHAR(4000),
              @UrgentTwoWeekReferral BIT,
              @Cancer INT,
              @WHOStatus SMALLINT,
			  @Diarrhoea BIT,			--
			  @PositiveTTG BIT,			--
			  @AmpullaryMass BIT,
			  @GallBladderMass BIT,
			  @GallBladderPolyp BIT,		--
              @EUSRefGuidedFNABiopsy BIT,
              @EUSOesophagealStricture BIT,
              @EUSAssessmentOfSubmucosalLesion BIT,
              @EUSTumourStagingOesophageal BIT,
              @EUSTumourStagingGastric BIT,
              @EUSTumourStagingDuodenal BIT,
              @OtherPlannedProcedure NVARCHAR(1000),
              @CoMorbidityNone BIT,
              @DiabetesMellitusType TINYINT,
              @OtherCoMorbidity NVARCHAR(1000),
              @ASAStatus TINYINT,
              @PotentiallyDamagingDrug NVARCHAR(1000),
              @Allergy TINYINT,
              @AllergyDesc NVARCHAR(1000),
              @CurrentMedication NVARCHAR(4000),
              @IncludeCurrentRxInReport BIT,
              @SurgeryFollowUpProc INT,
              @SurgeryFollowUpProcPeriod INT,
              @SurgeryFollowUpText NVARCHAR(1000),
              @DiseaseFollowUpProc INT,
              @DiseaseFollowUpProcPeriod INT,
              @ColonSreeningColonoscopy bit,
			  @ColonPolyposisSyndrome bit,
			  @ColonMelaena bit,
			  @ColonWeightLoss bit,
			  @ColonTumourAssessment bit,
			  @ColonRaisedFaecalCalprotectin bit,
              @ColonBowelCancerScreening bit,
              @ColonFOBT bit,
              @ColonAlterBowelHabit int,
              @ColonRectalBleeding int,
              @ColonAnaemia bit,
              @ColonAnaemiaType int,
              @ColonAbnormalCTScan bit,
              @ColonAbnormalSigmoidoscopy bit,
              @ColonAbnormalBariumEnema bit,
              @ColonAbdominalMass bit,
              @ColonColonicObstruction bit,
              @ColonAbdominalPain bit,
              @ColonFamily bit,
              @ColonAssessment bit,
              @ColonSurveillance bit,
              @ColonFamilyType int,
              @ColonAssessmentType int,
              @ColonFamilyAdditionalText varchar(7000),
              @ColonCarcinoma bit,
              @ColonPolyps bit,
              @ColonDysplasia bit,
              @ERSAbdominalPain bit,
              @ERSChronicPancreatisis bit,
              @ERSSphincter bit,
              @ERSAbnormalEnzymes bit,
              @ERSJaundice bit,
              @ERSStentOcclusion bit,
              @ERSAcutePancreatitisAcute bit,
              @ERSObstructedCBD bit,
              @ERSSuspectedPapillary bit,
              @ERSBiliaryLeak bit,
              @ERSOpenAccess bit,
              @ERSCholangitis bit,
              @ERSPrelaparoscopic bit,
              @ERSRecurrentPancreatitis bit,
			  @ERSBileDuctInjury bit,
			  @ERSPurulentCholangitis bit,
			  @ERSPancreaticPseudocyst bit,
			  @ERSPancreatobiliaryPain bit,
			  @ERSPapillaryDysfunction bit,
			  @ERSPriSclerosingChol bit,
              @ERSImgUltrasound bit,
              @ERSImgCT bit,
              @ERSImgMRI bit,
              @ERSImgMRCP bit,
              @ERSImgIDA bit,
              @ERSImgEUS bit,
              @ERSNormal bit,
              @ERSChronicPancreatitis bit,
              @ERSAcutePancreatitis bit,
              @ERSGallBladder bit,
              @ERSFluidCollection bit,
              @ERSPancreaticMass bit,
              @ERSDilatedPancreatic bit,
              @ERSStonedBiliary bit,
              @ERSHepaticMass bit,
              @ERSObstructed bit,
              @ERSDilatedDucts bit,
              @BiliaryLeak bit,
              @ERSDilatedDuctsType1 bit,
              @ERSDilatedDuctsType2 bit,
              @ERSImgOthersTextBox varchar(2000),
              @EPlanCanunulate bit,
              @EplanManometry bit,
              @EplanStentremoval bit,
              @EplanCombinedProcedure bit,
              @EplanNasoPancreatic bit,
              @EplanStentReplacement bit,
              @EPlanEndoscopicCyst bit,
              @EplanPapillotomy bit,
              @EplanStoneRemoval bit,
              @EplanStentInsertion bit,
              @EplanStrictureDilatation bit,
              @EplanOthersTextBox varchar(2000) ,
              @ERSFollowPrevious smallint ,
              @ERSFollowCarriedOut smallint ,
              @ERSFollowBileDuct bit ,
              @ERSFollowMalignancy bit,
              @ERSFollowBiliaryStricture bit,
              @ERSFollowStentReplacement bit

       SELECT 
              @Anaemia=Anaemia,
              @AnaemiaType=AnaemiaType,
              @PreviousHPyloriTest=PreviousHPyloriTest,
              @SerologyTest=SerologyTest,
              @SerologyTestResult=SerologyTestResult,
              @BreathTest=BreathTest,
              @BreathTestResult=BreathTestResult,
              @UreaseTest=UreaseTest,
              @UreaseTestResult=UreaseTestResult,
              @StoolAntigenTest=StoolAntigenTest,
              @StoolAntigenTestResult=StoolAntigenTestResult,
              @OpenAccess=OpenAccess,
              @OtherIndication=OtherIndication,
              @ClinicallyImpComments=ClinicallyImpComments,
              @UrgentTwoWeekReferral=UrgentTwoWeekReferral,
              @Cancer=Cancer,
              @WHOStatus=WHOStatus,
			  @Diarrhoea = Diarrhoea,
			  @PositiveTTG = PositiveTTG_EMA,
			  @AmpullaryMass = AmpullaryMass,
			  @GallBladderMass = GallBladderMass,
			  @GallBladderPolyp = GallBladderPolyp,
              @EUSRefGuidedFNABiopsy=EUSRefGuidedFNABiopsy,
              @EUSOesophagealStricture=EUSOesophagealStricture,
              @EUSAssessmentOfSubmucosalLesion=EUSAssessmentOfSubmucosalLesion,
              @EUSTumourStagingOesophageal=EUSTumourStagingOesophageal,
              @EUSTumourStagingGastric=EUSTumourStagingGastric,
              @EUSTumourStagingDuodenal=EUSTumourStagingDuodenal,
              @OtherPlannedProcedure=OtherPlannedProcedure,
              @CoMorbidityNone=CoMorbidityNone,
              @DiabetesMellitusType=DiabetesMellitusType,
              @OtherCoMorbidity=OtherCoMorbidity,
              @ASAStatus=ASAStatus,
              @PotentiallyDamagingDrug=PotentiallyDamagingDrug,
              @Allergy=Allergy,
              @AllergyDesc=AllergyDesc,
              @CurrentMedication=CurrentMedication,
              @IncludeCurrentRxInReport=IncludeCurrentRxInReport,
              @SurgeryFollowUpProc=SurgeryFollowUpProc,
              @SurgeryFollowUpProcPeriod=SurgeryFollowUpProcPeriod,
              @SurgeryFollowUpText=SurgeryFollowUpText,
              @DiseaseFollowUpProc=DiseaseFollowUpProc,
              @DiseaseFollowUpProcPeriod=DiseaseFollowUpProcPeriod,
			  @ColonPolyposisSyndrome = ColonPolyposisSyndrome,
			  @ColonMelaena = ColonMelaena,
			  @ColonWeightLoss = ColonWeightLoss,
			  @ColonTumourAssessment = ColonTumourAssessment,
			  @ColonRaisedFaecalCalprotectin = ColonRaisedFaecalCalprotectin,
              @ColonSreeningColonoscopy=ColonSreeningColonoscopy, 
              @ColonBowelCancerScreening = ColonBowelCancerScreening,
              @ColonFOBT = ColonFOBT,
              @ColonAlterBowelHabit =ColonAlterBowelHabit, 
              @ColonRectalBleeding= ColonRectalBleeding,
              @ColonAnaemia =ColonAnaemia,
              @ColonAnaemiaType=ColonAnaemiaType,
              @ColonAbnormalCTScan = ColonAbnormalCTScan,
              @ColonAbnormalSigmoidoscopy = ColonAbnormalSigmoidoscopy,
              @ColonAbnormalBariumEnema = ColonAbnormalBariumEnema,
              @ColonAbdominalMass = ColonAbdominalMass,
              @ColonColonicObstruction = ColonColonicObstruction,
              @ColonAbdominalPain = ColonAbdominalPain,
              @ColonFamily = ColonFamily,
              @ColonAssessment= ColonAssessment,
              @ColonSurveillance =ColonSurveillance,
              @ColonFamilyType = ColonFamilyType,
              @ColonAssessmentType = ColonAssessmentType,
              @ColonFamilyAdditionalText = ColonFamilyAdditionalText,
              @ColonCarcinoma = ColonCarcinoma,
              @ColonPolyps = ColonPolyps,
              @ColonDysplasia =ColonDysplasia ,
              @ERSAbdominalPain=ERSAbdominalPain ,
              @ERSChronicPancreatisis=ERSChronicPancreatisis ,
              @ERSSphincter=ERSSphincter ,
              @ERSAbnormalEnzymes=ERSAbnormalEnzymes ,
              @ERSJaundice=ERSJaundice ,
              @ERSStentOcclusion=ERSStentOcclusion ,
              @ERSAcutePancreatitisAcute=ERSAcutePancreatitisAcute ,
              @ERSObstructedCBD=ERSObstructedCBD ,
              @ERSSuspectedPapillary=ERSSuspectedPapillary ,
              @ERSBiliaryLeak=ERSBiliaryLeak ,
              @ERSOpenAccess=ERSOpenAccess ,
              @ERSCholangitis=ERSCholangitis ,
              @ERSPrelaparoscopic=ERSPrelaparoscopic ,
              @ERSRecurrentPancreatitis=ERSRecurrentPancreatitis ,
			  @ERSBileDuctInjury=ERSBileDuctInjury,
			  @ERSPurulentCholangitis=ERSPurulentCholangitis,
			  @ERSPancreaticPseudocyst=ERSPancreaticPseudocyst,
			  @ERSPancreatobiliaryPain=ERSPancreatobiliaryPain,
			  @ERSPapillaryDysfunction=ERSPapillaryDysfunction,
			  @ERSPriSclerosingChol=ERSPriSclerosingChol,
              @ERSImgUltrasound=ERSImgUltrasound ,
              @ERSImgCT=ERSImgCT ,
              @ERSImgMRI=ERSImgMRI ,
              @ERSImgMRCP=ERSImgMRCP ,
              @ERSImgIDA=ERSImgIDA ,
              @ERSImgEUS=ERSImgEUS ,
              @ERSNormal=ERSNormal ,
              @ERSChronicPancreatitis=ERSChronicPancreatitis ,
              @ERSAcutePancreatitis=ERSAcutePancreatitis ,
              @ERSGallBladder=ERSGallBladder ,
              @ERSFluidCollection=ERSFluidCollection ,
              @ERSPancreaticMass=ERSPancreaticMass ,
              @ERSDilatedPancreatic=ERSDilatedPancreatic ,
              @ERSStonedBiliary=ERSStonedBiliary ,
              @ERSHepaticMass=ERSHepaticMass ,
              @ERSObstructed=ERSObstructed ,
              @ERSDilatedDucts=ERSDilatedDucts ,
              @BiliaryLeak = BiliaryLeak,
              @ERSDilatedDuctsType1=ERSDilatedDuctsType1,
              @ERSDilatedDuctsType2=ERSDilatedDuctsType2,
              @ERSImgOthersTextBox=ERSImgOthersTextBox,
              @EPlanCanunulate=EPlanCanunulate ,
              @EplanManometry=EplanManometry,
              @EplanStentremoval=EplanStentremoval,
              @EplanCombinedProcedure=EplanCombinedProcedure,
              @EplanNasoPancreatic=EplanNasoPancreatic,
              @EplanStentReplacement=EplanStentReplacement,
              @EPlanEndoscopicCyst=EPlanEndoscopicCyst,
              @EplanPapillotomy=EplanPapillotomy,
              @EplanStoneRemoval=EplanStoneRemoval,
              @EplanStentInsertion=EplanStentInsertion,
              @EplanStrictureDilatation=EplanStrictureDilatation,
              @EplanOthersTextBox=EplanOthersTextBox,
              @ERSFollowPrevious=ERSFollowPrevious ,
              @ERSFollowCarriedOut = ERSFollowCarriedOut ,
              @ERSFollowBileDuct = ERSFollowBileDuct ,
              @ERSFollowMalignancy = ERSFollowMalignancy,
              @ERSFollowBiliaryStricture  = ERSFollowBiliaryStricture,
              @ERSFollowStentReplacement = ERSFollowStentReplacement
       FROM
              ERS_UpperGIIndications
       WHERE
              ProcedureId = @ProcedureId

       DECLARE @ProcType int
       DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))

       SET @ProcType = (SELECT ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureId)

       SET @Summary = ''
       SET @summaryTemp = ''
		DELETE FROM @tmpDiv
       ------------------------------------------------------------------------
       --If procedure type is colonoscopy
       ------------------------------------------------------------------------
       IF @ProcType = 3 OR @ProcType=4
              BEGIN
               DECLARE @msg varchar(1000) =''
               DECLARE @Details varchar(1000) =''             
     
              IF @ColonAlterBowelHabit > 0  SET @msg = (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Indications Colon Altered Bowel Habit' AND [ListItemNo] = @ColonAlterBowelHabit)
              IF @ColonRectalBleeding > 0   
              BEGIN
				  IF @msg <> '' 
					SET @msg = @msg  + ' with ' +(SELECT LOWER([ListItemText]) FROM ERS_Lists WHERE ListDescription = 'Indications Colon Rectal Bleeding' AND [ListItemNo] = @ColonRectalBleeding) +' rectal bleeding'
				  ELSE 
					SET @msg = @msg +(SELECT LOWER([ListItemText]) FROM ERS_Lists WHERE ListDescription = 'Indications Colon Rectal Bleeding' AND [ListItemNo] = @ColonRectalBleeding) +' rectal bleeding'
              END

              INSERT INTO @tmpDiv (Val) VALUES(@msg)
              SET @msg=''

              IF     @ColonAbnormalCTScan =1 INSERT INTO @tmpDiv (Val) VALUES('abnormal CT scan')
			  IF	 @ColonPolyposisSyndrome = 1 INSERT INTO @tmpDiv (Val) VALUES('polyposis syndrome')
			  IF	 @ColonMelaena = 1 INSERT INTO @tmpDiv (Val) VALUES('melaena')
			  IF	 @ColonWeightLoss = 1 INSERT INTO @tmpDiv (Val) VALUES('weight loss')
			  IF	 @ColonTumourAssessment = 1 INSERT INTO @tmpDiv (Val) VALUES('tumour assessment')
			  IF	 @ColonRaisedFaecalCalprotectin = 1 INSERT INTO @tmpDiv (Val) Values('raised faecal calprotectin')
              IF     @ColonAbdominalMass =1 INSERT INTO @tmpDiv (Val) VALUES('abdominal mass')
              IF     @ColonAbdominalPain =1 INSERT INTO @tmpDiv (Val) VALUES('abdominal pain')
              IF     @ColonAbnormalBariumEnema =1 INSERT INTO @tmpDiv (Val) VALUES('abnormal barium enema')
              IF     @ColonAbnormalSigmoidoscopy =1 INSERT INTO @tmpDiv (Val) VALUES('abnormal sigmoidoscopy')
              IF     @ColonAnaemia =1 
                     BEGIN
                     IF @ColonAnaemiaType = 1   INSERT INTO @tmpDiv (Val) VALUES('microcytic anaemia')
                     ELSE IF @ColonAnaemiaType = 2     INSERT INTO @tmpDiv (Val) VALUES('normocytic anaemia')
                     ELSE IF @ColonAnaemiaType = 3     INSERT INTO @tmpDiv (Val) VALUES('macrocytic anaemia')
                     ELSE INSERT INTO @tmpDiv (Val) VALUES('anaemia')
                     END
              IF     @ColonColonicObstruction =1 INSERT INTO @tmpDiv (Val) VALUES('colonic obstruction')
              IF @OtherIndication <> '' INSERT INTO @tmpDiv (Val) VALUES(@OtherIndication)
              
              DECLARE @Urgent varchar(3000) = '' , @CarIndic varchar(1000) =''
              IF @UrgentTwoWeekReferral = 1 SET @Urgent = 'urgent two week referral'
              IF @Cancer = 1 SET @CarIndic= 'definite cancer'
              ELSE IF @Cancer = 2 SET @CarIndic= 'suspected cancer'
              ELSE IF @Cancer = 3 SET @CarIndic= 'cancer excluded'

              IF @CarIndic <> ''
              BEGIN
              IF @Urgent = '' SET @Urgent = dbo.fnFirstLetterUpper(@CarIndic)
              ELSE SET @Urgent = @Urgent + ' - ' + @CarIndic
              END
              
              IF @WHOStatus <> null AND @WHOStatus >= 0
              BEGIN
              --Add full stop 
                     SET @Urgent = RTrim(LTRIM(@Urgent))
                     IF @Urgent <> ''  AND (@Urgent NOT LIKE '%.')  SET @Urgent = @Urgent + '. </br>'

                     SET @Urgent =  @Urgent + ' WHO performance status ' + cast(@WHOStatus as varchar(50))
              END

       IF @Urgent <> ''  AND (@Urgent NOT LIKE '%.')  SET @Urgent = @Urgent + '. </br>'
       IF @Urgent<>'' SET @msg = @Urgent
              IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
              BEGIN
              DECLARE @XMLlist XML
                     SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
                     SET @Details = dbo.fnBuildString(@XMLlist)
                     DELETE FROM @tmpDiv
              END  
         
       IF @Details <> ''
       BEGIN
         SET @Details= dbo.fnFirstLetterUpper(RTrim(LTRIM(@Details)))
         IF (@Details NOT LIKE '%.')  SET @Details = @Details + '.'
         SET @details =@details + '</br>'
         END

       DECLARE @FOBT varchar(1000) =''
       IF @ColonFOBT = 1 SET @FOBT = 'FOBT'

       DECLARE @ScreenColon varchar(5000) =''
       IF @ColonSreeningColonoscopy =1
              BEGIN
              IF @FOBT <> '' SET @ScreenColon = 'screening colonoscopy  and ' + @FOBT + '.' + '</br>'
              ELSE SET @ScreenColon = 'screening colonoscopy.' + '</br>'
              END
       IF @ColonBowelCancerScreening = 1 
              BEGIN
              IF @FOBT <> '' SET @ScreenColon = @ScreenColon + 'bowel cancer screening programme (' + @FOBT +') </br>'
              ELSE SET @ScreenColon =@ScreenColon + 'bowel cancer screening programme. </br>'
              END
       IF @ScreenColon ='' AND @FOBT<>''
              BEGIN
              SET @ScreenColon = @FOBT + '.' + '</br>'
              END
              
       DECLARE @A varchar(500) ='' , @FamHistory Varchar(5000) = '' , @FollUp varchar(5000) = ''
       If  @ColonFamily = 1
              BEGIN         
              IF @ColonFamilyType = 1 SET @A = @A+ 'risk unknown'
              ELSE IF @ColonFamilyType = 2 SET @A = @A+ 'no risk'
              ELSE IF @ColonFamilyType = 3 SET @A = @A+ 'familial adenomatous polyposis'
              ELSE IF @ColonFamilyType = 4 SET @A = @A+ 'family history of colorectal cancer'
              ELSE IF @ColonFamilyType = 5 SET @A = @A+ 'hereditary non-polyposis colorectal cancer'
              ELSE IF @ColonFamilyType = 6 SET @A = @A+ 'gene carrier, hereditary non-polyposis colorectal cancer'
              END
       IF @ColonFamilyAdditionalText <> '' SET @A = @A + '(' +@ColonFamilyAdditionalText +')'

       IF @A <> ''   SET @FamHistory = 'family history taken: ' + @A + '. </br>' 

       IF @SurgeryFollowUpText<> '' SET @FollUp = @SurgeryFollowUpText + '. </br>'

       DECLARE @B varchar(1000) = ''

       --IF @ColonAssessmentType  = 0
       --     BEGIN
       --     SET @B ='colitis'
       --     IF @ColonAssessment = 1 SET @B = @B + ' assessment'
       --     IF @ColonAssessment = 1 AND @ColonSurveillance = 1 SET @B = @B + ' and surveillance'
       --     ELSE IF @ColonSurveillance = 1 SET @B = @B + ' surveillance'
       --     END
       --ELSE 
       IF @ColonAssessmentType  > 0
              BEGIN
              SET @B='inflammatory bowel disease'
              IF @ColonAssessment = 1 SET @B = @B + ' assessment'
              IF @ColonAssessment = 1 AND @ColonSurveillance = 1 SET @B = @B + ' and surveillance'
              ELSE IF @ColonSurveillance = 1 SET @B = @B + ' surveillance'
              IF @ColonAssessmentType = 2 SET @B =   @B + '(Crohn''s)'
              ELSE IF @ColonAssessmentType = 3 SET @B =   @B + '(Ulcerative Colitis)'
              END

       DECLARE @D VArchar(3000) =''
       IF @ColonCarcinoma = 1 INSERT INTO @tmpDiv (Val) VALUES('carcinoma')
       IF @ColonPolyps = 1 INSERT INTO @tmpDiv (Val) VALUES('polyps')
       IF @ColonDysplasia = 1 INSERT INTO @tmpDiv (Val) VALUES('dysplasia')
       IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
              BEGIN
                     SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
                     SET @D = dbo.fnBuildString(@XMLlist)
                     DELETE FROM @tmpDiv
              END    
       IF @D <> ''
       BEGIN
       IF @B <> '' SET @B = @B + ' and previous ' + RTrim(LTRIM(@D))
       ELSE SET @B = dbo.fnFirstLetterUpper('previous ' + RTrim(LTRIM(@D)))
       --IF @B <> ''  AND (@B NOT LIKE '%.')  SET @B = @B + '. </br>'
       END

       Declare @clinicalComment varchar(5000) =''
       If @ClinicallyImpComments<> '' SET @clinicalComment = 'Clinical important comments: ' +@ClinicallyImpComments
       IF @clinicalComment <> ''  AND (@clinicalComment NOT LIKE '%.')  SET @clinicalComment = dbo.fnFirstLetterUpper(@clinicalComment) + '. </br>'

       Declare @damagingDrug varchar(5000) =''
       If @PotentiallyDamagingDrug <> '' SET @damagingDrug = 'Potential damaging drug: ' +@PotentiallyDamagingDrug
       IF @damagingDrug <> ''  AND (@damagingDrug NOT LIKE '%.')  SET @damagingDrug = dbo.fnFirstLetterUpper(@damagingDrug) + '.</br>'

         Declare @allerg varchar(5000) =''
         IF @Allergy = 1 SET @allerg = @allerg + 'uknown'
              ELSE IF @Allergy = 2 SET @allerg = @allerg + 'none'
              ELSE IF @Allergy = 3 
              BEGIN
                     IF @AllergyDesc = '' SET @allerg = @allerg + 'unspecified'
                     ELSE SET @allerg = @allerg + @AllergyDesc
              END
       If @Allerg <> '' SET @allerg = 'allergy: ' +@allerg
       IF @allerg <> ''  AND (@allerg NOT LIKE '%.')  SET @allerg = dbo.fnFirstLetterUpper(@allerg) + '. </br>'
       

       ------------------------------------------------------------------
       --CO-MORBIDITY
       ------------------------------------------------------------------
       DECLARE @CoMordi varchar(1000) = ''

       SELECT 
              CoMorbidityItem,
              CASE CoMorbidityItem 
					 WHEN 'Angina' THEN 'angina'
					 WHEN 'Asthma' THEN 'asthma'
					 WHEN 'COPD' THEN 'COPD'
					 WHEN 'DiabetesMellitus' THEN 'diabetes mellitus**'
					 WHEN 'Epilepsy' THEN 'epilepsy'
					 WHEN 'HemiPostStroke' THEN 'hemi post stroke'
					 WHEN 'Hypertension' THEN 'hypertension'
					 WHEN 'MI' THEN 'MI'
					 WHEN 'Obesity' THEN 'obesity'
					 WHEN 'TIA' THEN 'TIA'
                     ELSE CoMorbidityItem 
              END AS CoMorbidityItemDesc, 
              Selected
              INTO #coMorbidity1
       FROM 
       (SELECT * FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId) a
       UNPIVOT
       (      Selected 
              FOR CoMorbidityItem IN (Angina, Asthma, COPD, DiabetesMellitus, Epilepsy, HemiPostStroke, Hypertension, MI, Obesity, TIA)
       ) b
       WHERE Selected = 1

       IF (SELECT COUNT(*) FROM #coMorbidity1) > 0
       BEGIN
              -- Get the concatenated string separated by a delimiter, say $$
              SELECT @CoMordi = COALESCE (
                                                CASE WHEN @CoMordi = '' THEN CoMorbidityItemDesc
                                                ELSE @CoMordi + '$$' + CoMorbidityItemDesc END
                                         ,'')
              FROM #coMorbidity1

              IF @OtherCoMorbidity <> '' SET @CoMordi = @CoMordi + '$$' + @OtherCoMorbidity

              -- Set the last occurence of $$ to "and"
              IF CHARINDEX('$$', @CoMordi) > 0 SET @CoMordi = STUFF(@CoMordi, len(@CoMordi) - charindex('$$', reverse(@CoMordi)), 2, ' and ')
              -- Replace all other occurences of $$ with commas
              IF CHARINDEX('$$', @CoMordi) > 0 SET @CoMordi = REPLACE(@CoMordi, '$$', ', ')
       END

       IF CHARINDEX('**', @CoMordi) > 0
       BEGIN
              IF @DiabetesMellitusType = 0 SET @CoMordi = REPLACE(@CoMordi, '**', '')
              ELSE IF @DiabetesMellitusType = 1 SET @CoMordi = REPLACE(@CoMordi, '**', ' (unknown)')
              ELSE IF @DiabetesMellitusType = 2 SET @CoMordi = REPLACE(@CoMordi, '**', ' (type 1)')
              ELSE IF @DiabetesMellitusType = 3 SET @CoMordi = REPLACE(@CoMordi, '**', ' (type 2)')
       END

       --finally, add to the main summary field
       IF @CoMordi <> '' SET @CoMordi = 'Co-morbidity: ' + @CoMordi + '. </br>'

       
       DECLARE @ASAstat varchar(1000)=''
              ------------------------------------------------------------------
       --ASA STATUS
       ------------------------------------------------------------------
       IF @ASAStatus IS NOT NULL
       BEGIN
       SET @ASAstat = 'ASA status: '
              IF @ASAStatus = 0 SET @ASAstat = @ASAstat + 'not assessed'
              ELSE IF @ASAStatus = 1 SET @ASAstat = @ASAstat + 'ASA I - patient is normal and healthy'
              ELSE IF @ASAStatus = 2 SET @ASAstat = @ASAstat + 'ASA II - patient has mild systemic disease'
              ELSE IF @ASAStatus = 3 SET @ASAstat = @ASAstat + 'ASA III - patient has severe systemic disease'
              ELSE IF @ASAStatus = 4 SET @ASAstat = @ASAstat + 'ASA IV - patient has severe systemic disease that is a constant threat to life'
              ELSE IF @ASAStatus = 5 SET @ASAstat = @ASAstat + 'ASA V - patient is moribund and is not expected to survive without the procedure/operation'
       END
       SET @ASAstat = @ASAstat +  '. </br>'
		SET @B = dbo.fnFirstLetterUpper(@B)
        IF @B <> ''  AND (@B NOT LIKE '%.') SET @B= @B + '.<br/>'
       SET @summary = (CASE WHEN @summary= '' THEN @summary ELSE @summary + '</br>' END) +       
						dbo.fnFirstLetterUpper(@ScreenColon)+ dbo.fnFirstLetterUpper(@FamHistory) + dbo.fnFirstLetterUpper(@FollUp) +  
						dbo.fnFirstLetterUpper(@B) + dbo.fnFirstLetterUpper(@msg) + dbo.fnFirstLetterUpper(@details) + 
						dbo.fnFirstLetterUpper(@damagingDrug) + dbo.fnFirstLetterUpper(@allerg) + dbo.fnFirstLetterUpper(@CoMordi)+ 
						dbo.fnFirstLetterUpper(@ASAstat) + dbo.fnFirstLetterUpper(@clinicalComment)
END
ELSE IF @ProcType= 2 OR @ProcType=7
BEGIN
       ------------------------------------------------------------------
       --URGENT/CANCER
       ------------------------------------------------------------------
       IF @UrgentTwoWeekReferral = 1
       BEGIN
              SET @Summary = 'urgent two week referral'
              
              IF @Cancer = 1 SET @Summary = @Summary + ' - definite cancer'
              ELSE IF @Cancer = 2 SET @Summary = @Summary + ' - suspected cancer'
              ELSE IF @Cancer = 3 SET @Summary = @Summary + ' - excluded cancer'

              IF @WHOStatus > 0 SET @Summary = @Summary + '. WHO performance status ' + CONVERT(VARCHAR(1), @WHOStatus)
       END

       ------------------------------------------------------------------
       --INDICATIONS
       ------------------------------------------------------------------
       SET @summaryTemp = ''
          DECLARE @ms varchar(max)=''

                     IF @ERSAbdominalPain=1 INSERT INTO @tmpDiv (Val) VALUES('abnormal CT scan')
                     IF @ERSAbnormalEnzymes=1 INSERT INTO @tmpDiv (Val) VALUES('abnormal enzymes')
                     IF @ERSAcutePancreatitisAcute=1 INSERT INTO @tmpDiv (Val) VALUES('acute pancreatitis')
					 IF @AmpullaryMass=1 INSERT INTO @tmpDiv (Val) VALUES('ampullary mass');	--## New
                     IF @ERSCholangitis=1 INSERT INTO @tmpDiv (Val) VALUES('cholangitis')
                     IF @ERSChronicPancreatisis=1 INSERT INTO @tmpDiv (Val) VALUES('chronic pancreatitis')
                     IF @ERSBiliaryLeak=1 INSERT INTO @tmpDiv (Val) VALUES('biliary leak')
					 IF @GallBladderMass=1 INSERT INTO @tmpDiv (Val) VALUES('gall bladder mass');		--##
					 IF @GallBladderPolyp=1 INSERT INTO @tmpDiv (Val) VALUES('gall bladder polyp');		--##
                     IF @ERSJaundice=1 INSERT INTO @tmpDiv (Val) VALUES('jaundice')
                     --Dec 1999 - commented out as open access is not an indication
                     --IF @ERSOpenAccess=1 INSERT INTO @tmpDiv (Val) VALUES('abnormal CT scan')               
                     IF @ERSPrelaparoscopic=1 INSERT INTO @tmpDiv (Val) VALUES('pre-laparoscopic cholecystectomy')
                     IF @ERSRecurrentPancreatitis=1 INSERT INTO @tmpDiv (Val) VALUES('recurrent pancreatitis')
					IF @ERSBileDuctInjury=1 INSERT INTO @tmpDiv (Val) VALUES('bile duct injury')
					IF @ERSPurulentCholangitis=1 INSERT INTO @tmpDiv (Val) VALUES('purulent cholangitis')
					IF @ERSPancreaticPseudocyst=1 INSERT INTO @tmpDiv (Val) VALUES('pancreatic pseudocyst')
					IF @ERSPancreatobiliaryPain=1 INSERT INTO @tmpDiv (Val) VALUES('pancreatobiliary pain')
					IF @ERSPapillaryDysfunction=1 INSERT INTO @tmpDiv (Val) VALUES('papillary dysfunction')
					IF @ERSPriSclerosingChol=1 INSERT INTO @tmpDiv (Val) VALUES('primary sclerosing cholangitis')

                     IF @ERSSphincter=1 INSERT INTO @tmpDiv (Val) VALUES('sphincter of Oddi dysfunction')        
                      IF @ERSStentOcclusion=1 INSERT INTO @tmpDiv (Val) VALUES('stent occlusion')
                     IF @ERSSuspectedPapillary=1 INSERT INTO @tmpDiv (Val) VALUES('suspected papillary stenosis')
                     IF @OtherIndication<> '' INSERT INTO @tmpDiv (Val) VALUES(@OtherIndication)
                     IF @ERSObstructedCBD=1 INSERT INTO @tmpDiv (Val) VALUES('obstructed CBD/CHD')
                     
                      IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
              BEGIN
              DECLARE @XMLlis XML
                     SET @XMLlis = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
                     SET @ms = dbo.fnBuildString(@XMLlis)
                     DELETE FROM @tmpDiv
              END  
              SET @summaryTemp = @summaryTemp + @ms       
       --finally, add to the main summary field
       IF @summaryTemp <> ''
       BEGIN
              IF @summary = '' SET @summary = dbo.fnFirstLetterUpper(@summaryTemp)
              ELSE SET @summary = @summary + '. <br />' + dbo.fnFirstLetterUpper(@summaryTemp)
       END

          ------------------------------------------------------------------------
          --IMAGING
          ------------------------------------------------------------------------
           DECLARE @mt varchar(max)=''
              DELETE FROM @tmpDiv
              SET @ms = ''

                           IF @ERSImgUltrasound =1 INSERT INTO @tmpDiv (Val) VALUES('ultrasound')
                           IF @ERSImgCT =1 INSERT INTO @tmpDiv (Val) VALUES('CT')
                           IF @ERSImgMRI =1 INSERT INTO @tmpDiv (Val) VALUES('MRI')
                           IF @ERSImgMRCP =1 INSERT INTO @tmpDiv (Val) VALUES('MRCP')
                           IF @ERSImgIDA =1 INSERT INTO @tmpDiv (Val) VALUES('IDA isotope scan')
                           IF @ERSImgEUS =1 INSERT INTO @tmpDiv (Val) VALUES('EUS')
              IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
              BEGIN
              DECLARE @XMLli XML
                     SET @XMLli = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
                     SET @ms = dbo.fnBuildString(@XMLli)
                     DELETE FROM @tmpDiv
              END

              SET @mt = @ms  

              DELETE FROM @tmpDiv
              SET @ms = ''
                     IF     @ERSNormal = 1 SET @mt = @mt + ' images were normal'
                     ELSE
                           BEGIN
                           IF @ERSChronicPancreatitis =1 INSERT INTO @tmpDiv (Val) VALUES('chronic pancreatitis')
                           IF @ERSPancreaticMass =1 INSERT INTO @tmpDiv (Val) VALUES('pancreatic mass')
                           IF @ERSHepaticMass =1 INSERT INTO @tmpDiv (Val) VALUES('hepatic mass')
                           IF @BiliaryLeak=1  INSERT INTO @tmpDiv (Val) VALUES('biliary leak')
                           IF @ERSAcutePancreatitis =1 INSERT INTO @tmpDiv (Val) VALUES('acute pancreatitis')
                           IF @ERSDilatedPancreatic =1 INSERT INTO @tmpDiv (Val) VALUES('dilated pancreatic duct')
                           IF @ERSDilatedDucts =1
                                  BEGIN 
                                  IF @ERSDilatedDuctsType1 =1 INSERT INTO @tmpDiv (Val) VALUES('dilated extrahepatic ducts')
                                  IF @ERSDilatedDuctsType2 = 1 INSERT INTO @tmpDiv (Val) VALUES('dilated intrahepatic ducts')
                                  IF @ERSDilatedDuctsType1 <>1 AND @ERSDilatedDuctsType2 <> 1 INSERT INTO @tmpDiv (Val) VALUES('dilated bile ducts')
                                  END
                           IF @ERSStonedBiliary =1 INSERT INTO @tmpDiv (Val) VALUES('stone(s) in biliary tree')
                           IF @ERSGallBladder =1 INSERT INTO @tmpDiv (Val) VALUES('gall bladder stone(s)')
                           IF @ERSFluidCollection =1 INSERT INTO @tmpDiv (Val) VALUES('fluid collection')               
                           IF @ERSImgOthersTextBox <> '' INSERT INTO @tmpDiv (Val) VALUES(@ERSImgOthersTextBox)                    
                           IF @ERSObstructed =1 INSERT INTO @tmpDiv (Val) VALUES('obstructed CBD/CHD')
                           
                     IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
              BEGIN
              DECLARE @XMLl XML
                     SET @XMLl = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
                     SET @ms = dbo.fnBuildString(@XMLl)
                     DELETE FROM @tmpDiv
              END
                     SET @mt =LTRIM(RTRIM( @mt + ' imaging revealed ' +@ms))
                     IF @mt <> ''
       BEGIN
              IF @summary = '' SET @summary = dbo.fnFirstLetterUpper(@mt)
              ELSE SET @summary = @summary + '. <br />' + dbo.fnFirstLetterUpper(@mt)
       END
                           

       END
       -----------------------------------------------------------------------
       --FOLLOW UP
       -----------------------------------------------------------------------
       DELETE FROM @tmpDiv
       DECLARE @ao varchar(max) ='',     @bo varchar(max)='' , @co varchar(max)='', @to varchar(max)=''            

       IF @ERSFollowPrevious > 0 SET @ao = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription = 'follow up disease/proc ERCP' AND  ListItemNo = @ERSFollowPrevious),'')
       SET @bo =  (SELECT CASE @ERSFollowCarriedOut 
              WHEN 1 THEN ' within the last month'
              WHEN 2 THEN  ' one to two months ago'
              WHEN 3 THEN  ' three to four months ago'
              WHEN 4 THEN  ' five to six months ago'
              WHEN 5 THEN ' seven to twelve months ago'
              WHEN 6 THEN ' one to three years ago'
              WHEN 7 THEN ' more than three years ago' END)

                           IF @ERSFollowBileDuct = 1 INSERT INTO @tmpDiv (Val) VALUES('bile duct stone(s)')
                           IF @ERSFollowMalignancy =1 INSERT INTO @tmpDiv (Val) VALUES('malignancy')
                           IF @ERSFollowBiliaryStricture = 1 INSERT INTO @tmpDiv (Val) VALUES('biliary stricture')
                           IF @ERSFollowStentReplacement= 1 INSERT INTO @tmpDiv (Val) VALUES('stent replacement')

                           IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
                                    BEGIN
                                    DECLARE @XMLo XML
                                                SET @XMLo = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
                                                SET @co = dbo.fnBuildString(@XMLo)
                                                DELETE FROM @tmpDiv
                                    END
              IF @ao IS NOT NULL AND @ao <> '' SET @to = 'a previous '+ @ao ELSE SET @to= 'a previous examination '
              IF @bo IS NOT NULL AND @bo <> '' SET @to = @to + @bo
              IF @co IS NOT NULL AND  @co <> '' SET @to = @to + ' for ' + @co
              IF @summary = '' SET @summary = dbo.fnFirstLetterUpper(@to)
                ELSE SET @summary = @summary + '. <br />' + dbo.fnFirstLetterUpper(@to)
              
       ------------------------------------------------------------------
       ---PLANNED PROCEDURES
       ------------------------------------------------------------------
       DELETE FROM @tmpDiv
       SET @ms = ''
                     IF @EplanPapillotomy=1 INSERT INTO @tmpDiv (Val) VALUES('sphincterotomy')
                     IF @EPlanCanunulate=1 INSERT INTO @tmpDiv (Val) VALUES('cannulate and opacify the biliary tree')
                     IF @EplanStentremoval=1 INSERT INTO @tmpDiv (Val) VALUES('stent removal')
                     IF @EplanStentInsertion=1 INSERT INTO @tmpDiv (Val) VALUES('stent insertion')
                     IF @EplanStentReplacement=1 INSERT INTO @tmpDiv (Val) VALUES('stent replacement')
                     IF @EplanStoneRemoval=1 INSERT INTO @tmpDiv (Val) VALUES('stone removal')
                     IF @EplanNasoPancreatic=1 INSERT INTO @tmpDiv (Val) VALUES('naso-pancreatic/biliary drains')
                     IF @EPlanEndoscopicCyst=1 INSERT INTO @tmpDiv (Val) VALUES('endoscopic cyst puncture')
                           IF @EplanCombinedProcedure=1 INSERT INTO @tmpDiv (Val) VALUES('combined procedure (Rendezvous)')   
                     IF @EplanStrictureDilatation=1 INSERT INTO @tmpDiv (Val) VALUES('stricture dilatation')
                     IF @EplanManometry=1 INSERT INTO @tmpDiv (Val) VALUES('manometry')
                           IF @EplanOthersTextBox <> '' INSERT INTO @tmpDiv (Val) VALUES(@EplanOthersTextBox)
                           DECLARE @l int =0
                           IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
                             BEGIN
                             DECLARE @XMLi XML
                           SET @l = (SELECT COUNT(Val) FROM @tmpDiv)
                                         SET @XMLi = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
                                         SET @ms = dbo.fnBuildString(@XMLi)
                                         DELETE FROM @tmpDiv
                             END
       
                     IF @ms <> ''
                        BEGIN
                        SET @ms = CASE WHEN @l > 1 THEN 'Planned procedures: ' ELSE 'Planned procedure: ' END + LTRIM(RTRIM(dbo.fnFirstLetterUpper(@ms)))
                                    IF @summary = '' SET @summary = @ms
                                    ELSE SET @summary = @summary + '. <br />' + @ms
                        END
              
              ------------------------------------------------------------------
       --CO-MORBIDITY
       ------------------------------------------------------------------
       SET @summaryTemp = ''
           SELECT 
              CoMorbidityItem,
              CASE CoMorbidityItem 
					 WHEN 'Angina' THEN 'angina'
					 WHEN 'Asthma' THEN 'asthma'
					 WHEN 'COPD' THEN 'COPD'
					 WHEN 'DiabetesMellitus' THEN 'diabetes mellitus**'
					 WHEN 'Epilepsy' THEN 'epilepsy'
					 WHEN 'HemiPostStroke' THEN 'hemi post stroke'
					 WHEN 'Hypertension' THEN 'hypertension'
					 WHEN 'MI' THEN 'MI'
					 WHEN 'Obesity' THEN 'obesity'
					 WHEN 'TIA' THEN 'TIA'
                     ELSE CoMorbidityItem 
              END AS CoMorbidityItemDesc, 
              Selected
              INTO #ecoMorbidity
       FROM 
       (SELECT * FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId) a
       UNPIVOT
       (      Selected 
              FOR CoMorbidityItem IN (Angina, Asthma, COPD, DiabetesMellitus, Epilepsy, HemiPostStroke, Hypertension, MI, Obesity, TIA)
       ) b
       WHERE Selected = 1

       IF (SELECT COUNT(*) FROM #ecoMorbidity) > 0
       BEGIN
              -- Get the concatenated string separated by a delimiter, say $$
              SELECT @summaryTemp = COALESCE (
                                                CASE WHEN @summaryTemp = '' THEN CoMorbidityItemDesc
                                                ELSE @summaryTemp + '$$' + CoMorbidityItemDesc END
                                         ,'')
              FROM #ecoMorbidity

              IF @OtherCoMorbidity <> '' SET @summaryTemp = @summaryTemp + '$$' + @OtherCoMorbidity

              -- Set the last occurence of $$ to "and"
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = STUFF(@summaryTemp, len(@summaryTemp) - charindex('$$', reverse(@summaryTemp)), 2, ' and ')
              -- Replace all other occurences of $$ with commas
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = REPLACE(@summaryTemp, '$$', ', ')
       END

       IF CHARINDEX('**', @summaryTemp) > 0
       BEGIN
              IF @DiabetesMellitusType = 0 SET @summaryTemp = REPLACE(@summaryTemp, '**', '')
              ELSE IF @DiabetesMellitusType = 1 SET @summaryTemp = REPLACE(@summaryTemp, '**', ' (unknown)')
              ELSE IF @DiabetesMellitusType = 2 SET @summaryTemp = REPLACE(@summaryTemp, '**', ' (type 1)')
              ELSE IF @DiabetesMellitusType = 3 SET @summaryTemp = REPLACE(@summaryTemp, '**', ' (type 2)')
       END

       --finally, add to the main summary field
       IF @summaryTemp <> ''
       BEGIN
              IF @summary = '' SET @summary = 'Co-morbidity: ' + @summaryTemp
              ELSE SET @summary = @summary + '. <br />Co-morbidity: ' + @summaryTemp
       END

   ------------------------------------------------------------------
       --ASA STATUS
       ------------------------------------------------------------------
       IF @ASAStatus IS NOT NULL
       BEGIN
              IF @summary <> '' SET @summary = @summary + '. <br />ASA status: '
              ELSE SET @summary = @summary + 'ASA status: '

              IF @ASAStatus = 0 SET @summary = @summary + 'Not assessed'
              ELSE IF @ASAStatus = 1 SET @summary = @summary + 'ASA I - patient is normal and healthy'
              ELSE IF @ASAStatus = 2 SET @summary = @summary + 'ASA II - patient has mild systemic disease'
              ELSE IF @ASAStatus = 3 SET @summary = @summary + 'ASA III - patient has severe systemic disease'
              ELSE IF @ASAStatus = 4 SET @summary = @summary + 'ASA IV - patient has severe systemic disease that is a constant threat to life'
              ELSE IF @ASAStatus = 5 SET @summary = @summary + 'ASA V - patient is moribund and is not expected to survive without the procedure/operation'
       END

     ------------------------------------------------------------------
       --Important COMMENTS
       ------------------------------------------------------------------
       IF @ClinicallyImpComments <> ''
              IF @summary = '' SET @summary = @ClinicallyImpComments
              ELSE SET @summary = @summary + '. <br />Clinically important comments: ' + @ClinicallyImpComments

END
ELSE
       BEGIN
       ------------------------------------------------------------------
       --URGENT/CANCER
       ------------------------------------------------------------------
       IF @UrgentTwoWeekReferral = 1
       BEGIN
              SET @Summary = 'Urgent two week referral'
              
              IF @Cancer = 1 SET @Summary = @Summary + ' - definite cancer'
              ELSE IF @Cancer = 2 SET @Summary = @Summary + ' - suspected cancer'
              ELSE IF @Cancer = 3 SET @Summary = @Summary + ' - excluded cancer'

              IF @WHOStatus > 0 SET @Summary = @Summary + '. WHO performance status ' + CONVERT(VARCHAR(1), @WHOStatus)
       END

       ------------------------------------------------------------------
       --INDICATIONS
       ------------------------------------------------------------------
       SET @summaryTemp = ''

       IF @Anaemia = 1
       BEGIN
              IF @AnaemiaType = 1
                     SET @summaryTemp = @summaryTemp + 'unspecified'
              ELSE IF @AnaemiaType = 2
                     SET @summaryTemp = @summaryTemp + 'microcytic'
              ELSE IF @AnaemiaType = 3
                     SET @summaryTemp = @summaryTemp + 'normocytic'
              ELSE IF @AnaemiaType = 4
                     SET @summaryTemp = @summaryTemp + 'macrocytic'

              IF @summaryTemp = '' SET @summaryTemp = @summaryTemp + 'anaemia'
              ELSE SET @summaryTemp = @summaryTemp + ' anaemia'
       END

       SELECT 
              IndicationItem,
              CASE IndicationItem 
                     WHEN 'AbdominalPain' THEN 'abdominal pain' 
					 WHEN 'AbnormalCapsuleStudy' THEN 'abnormal capsule study' 
					 WHEN 'AbnormalMRI' THEN 'abnormal MRI' 
                     WHEN 'AbnormalityOnBarium' THEN 'abnormality on barium' 
                     WHEN 'ChestPain' THEN 'chest pain' 
                     WHEN 'ChronicLiverDisease' THEN 'chronic liver disease' 
                     WHEN 'CoffeeGroundsVomit' THEN 'coffee grounds vomit'
					 WHEN 'DrugTrial' THEN 'drug trial'
					 WHEN 'Diarrhoea' THEN 'diarrhoea'
                     WHEN 'PositiveTTG_EMA' THEN 'positive TTG/EMA'
					 WHEN 'Dyspepsia' THEN 'dyspepsia'
                     WHEN 'DyspepsiaAtypical' THEN 'dyspepsia - atypical'
                     WHEN 'DyspepsiaUlcerType' THEN 'dyspepsia - ulcer type'
					 WHEN 'Dysphagia' THEN 'dysphagia'
					 WHEN 'Haematemesis' THEN 'haematemesis'
					 WHEN 'Melaena' THEN 'melaena'
                     WHEN 'NauseaAndOrVomiting' THEN 'nausea and/or vomiting'
					 WHEN 'Odynophagia' THEN 'odynophagia'
                     WHEN 'RefluxSymptoms' THEN 'reflux symptoms'
                     WHEN 'UlcerExclusion' THEN 'ulcer exclusion'
                     WHEN 'WeightLoss' THEN 'weight loss'
                     ELSE IndicationItem 
              END AS IndicationItemDesc, 
              Selected
              INTO #indications
       FROM 
       (SELECT * FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId) a
       UNPIVOT
       (      Selected 
              FOR IndicationItem IN (AbdominalPain, AbnormalCapsuleStudy, AbnormalMRI, AbnormalityOnBarium, ChestPain, ChronicLiverDisease, CoffeeGroundsVomit, Diarrhoea, PositiveTTG_EMA, DrugTrial, Dyspepsia, DyspepsiaAtypical,
                                                       DyspepsiaUlcerType, Dysphagia, Haematemesis, Melaena, NauseaAndOrVomiting, Odynophagia, RefluxSymptoms, UlcerExclusion, WeightLoss)
       ) b
       WHERE Selected = 1
       
	   IF @OtherIndication <> '' INSERT INTO #indications VALUES ('OtherIndication',@OtherIndication,1) 
 
       IF (SELECT COUNT(*) FROM #indications) > 0
       BEGIN
              -- Get the concatenated string separated by a delimiter, say $$
              SELECT @summaryTemp = COALESCE (
                                                CASE WHEN @summaryTemp = '' THEN IndicationItemDesc
                                                ELSE @summaryTemp + '$$' + IndicationItemDesc END
                                         ,'')
              FROM #indications

              --IF @OtherIndication <> '' SET @summaryTemp = @summaryTemp + '$$' + @OtherIndication
              
              -- Set the last occurence of $$ to "and"
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = STUFF(@summaryTemp, len(@summaryTemp) - charindex('$$', reverse(@summaryTemp)), 2, ' and ')
              -- Replace all other occurences of $$ with commas
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = REPLACE(@summaryTemp, '$$', ', ')
       END
       
       --finally, add to the main summary field
       IF @summaryTemp <> ''
       BEGIN
			SET @summaryTemp = dbo.fnFirstLetterUpper(@summaryTemp)

            IF @summary = '' SET @summary = @summaryTemp
            ELSE SET @summary = @summary + '. <br />' + @summaryTemp
       END
       

       ------------------------------------------------------------------
       --PREVIOUS H PYLORI
       ------------------------------------------------------------------
       SET @summaryTemp = ''
       IF @PreviousHPyloriTest = 1
       BEGIN
			DECLARE @cnt TINYINT = 0
			DECLARE @HPylori TABLE (result tinyint, test nvarchar(100), descrip nvarchar(100))
			INSERT INTO @HPylori SELECT 1, 'positive',''
			INSERT INTO @HPylori SELECT 2, 'negative',''
			INSERT INTO @HPylori SELECT 3, 'inconclusive',''
			INSERT INTO @HPylori SELECT 0, '',''

			IF @BreathTest = 1 
            BEGIN
				IF @BreathTestResult >= 0 UPDATE @HPylori SET descrip = descrip + '$$' + 'breath' WHERE result = @BreathTestResult
				SET @cnt = @cnt + 1
                    --IF @BreathTestResult = 0 INSERT INTO @HPylori SELECT 0, 'breath', 'breath test was carried out'
                    --ELSE IF @BreathTestResult = 1 INSERT INTO @HPylori SELECT 1, 'breath', 'positive'
                    --ELSE IF @BreathTestResult = 2 INSERT INTO @HPylori SELECT 2, 'breath', 'negative'
                    --ELSE IF @BreathTestResult = 3 INSERT INTO @HPylori SELECT 3, 'breath', 'inconclusive'
            END

            IF @SerologyTest = 1 
            BEGIN
				IF @SerologyTestResult >= 0 UPDATE @HPylori SET descrip = 'serology' WHERE result = @SerologyTestResult
				SET @cnt = @cnt + 1
            END

            IF @StoolAntigenTest = 1 
            BEGIN
				IF @StoolAntigenTestResult >= 0 UPDATE @HPylori SET descrip = descrip + '$$' + 'stool antigen' WHERE result = @StoolAntigenTestResult
				SET @cnt = @cnt + 1
            END

            IF @UreaseTest = 1 
            BEGIN
				IF @UreaseTestResult >= 0 UPDATE @HPylori SET descrip = descrip + '$$' + 'urease' WHERE result = @UreaseTestResult
				SET @cnt = @cnt + 1
            END

              DELETE @HPylori  WHERE descrip = ''

              IF (SELECT COUNT(*) FROM @HPylori) > 0 
              BEGIN
					--remove the first 2 '$$'
					UPDATE @HPylori SET descrip = RIGHT(descrip, LEN(descrip) -2) WHERE LEFT(descrip,2) = '$$'

					UPDATE @HPylori SET test = ' (' + test + ')' WHERE result <> 0
                     
					SELECT @summaryTemp = COALESCE (CASE WHEN @summaryTemp = '' THEN descrip + test
													ELSE @summaryTemp + '$$' + descrip + test END,'')
					FROM @HPylori --WHERE result <> 0

					IF @cnt > 0 SET @summaryTemp = 'test carried out for ' + @summaryTemp 

					-- Set the last occurence of $$ to "and"
					IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = STUFF(@summaryTemp, len(@summaryTemp) - charindex('$$', reverse(@summaryTemp)), 2, ' and ')
					-- Replace all other occurences of $$ with commas
					IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = REPLACE(@summaryTemp, '$$', ', ')
					IF @summaryTemp <> '' SET @summaryTemp = 'Previous Helicobacter pylori ' + @summaryTemp
              END
              ELSE
                     SET @summaryTemp = 'Previous Helicobacter pylori test carried out'
              
              --finally, add to the main summary field
              IF @summary = '' SET @summary = @summaryTemp
              ELSE SET @summary = @summary + '. <br />' + @summaryTemp
       END


       ------------------------------------------------------------------
       --PLANNED PROCEDURES
       ------------------------------------------------------------------
       SET @summaryTemp = ''

       SELECT 
              PlannedProcedureItem,
              CASE PlannedProcedureItem 
                     WHEN 'BariatricPreAssessment' THEN 'bariatric pre-assessment'
                     WHEN 'BalloonInsertion' THEN 'balloon insertion'
                     WHEN 'BalloonRemoval' THEN 'balloon removal'
					 WHEN 'SingleBalloonEnteroscopy' THEN 'single balloon enteroscopy'
					 WHEN 'DoubleBalloonEnteroscopy' THEN 'double balloon enteroscopy (push-pull enteroscopy)'
                     WHEN 'PostBariatricSurgeryAssessment' THEN 'post bariatric surgery assessment'
                     WHEN 'GastrostomyInsertion' THEN 'gastrostomy insertion (PEG)'
                     WHEN 'InsertionOfPHProbe' THEN 'insertion of pH probe'
                     WHEN 'JejunostomyInsertion' THEN 'jejunostomy insertion (PEJ)'
                     WHEN 'NasoDuodenalTube' THEN 'nasojejunal tube (NJT)'
                     WHEN 'OesophagealDilatation' THEN 'oesophageal dilatation'
                     WHEN 'PEGRemoval' THEN 'PEG removal'
					 WHEN 'PEGReplacement' THEN 'PEG Replacement'
                     WHEN 'PushEnteroscopy' THEN 'push enteroscopy'
                     WHEN 'SmallBowelBiopsy' THEN 'small bowel biopsy'
                     WHEN 'StentRemoval' THEN 'stent removal'
                     WHEN 'StentInsertion' THEN 'stent insertion'
                     WHEN 'StentReplacement' THEN 'stent replacement'
                     ELSE PlannedProcedureItem 
              END AS PlannedProcedureItemDesc, 
              Selected
              INTO #plannedProcedures
       FROM 
       (SELECT * FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId) a
       UNPIVOT
       (      Selected 
              FOR PlannedProcedureItem IN (BariatricPreAssessment, BalloonInsertion, BalloonRemoval, SingleBalloonEnteroscopy, DoubleBalloonEnteroscopy, PostBariatricSurgeryAssessment, EUS, GastrostomyInsertion, InsertionOfPHProbe,
                                         JejunostomyInsertion, NasoDuodenalTube, OesophagealDilatation, PEGRemoval, PEGReplacement, PushEnteroscopy, SmallBowelBiopsy, StentRemoval, StentInsertion, StentReplacement)
       ) b
       WHERE Selected = 1

	   IF @OtherPlannedProcedure <> '' INSERT INTO #plannedProcedures VALUES ('OtherPlannedProcedure',@OtherPlannedProcedure,1) 

       IF (SELECT COUNT(*) FROM #plannedProcedures) > 0
       BEGIN
              -- Get the concatenated string separated by a delimiter, say $$
              SELECT @summaryTemp = COALESCE (
                                                CASE WHEN @summaryTemp = '' THEN PlannedProcedureItemDesc
                                                ELSE @summaryTemp + '$$' + PlannedProcedureItemDesc END
                                         ,'')
              FROM #plannedProcedures

              --IF @OtherPlannedProcedure <> '' SET @summaryTemp = @summaryTemp + '$$' + @OtherPlannedProcedure

              -- Set the last occurence of $$ to "and"
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = STUFF(@summaryTemp, len(@summaryTemp) - charindex('$$', reverse(@summaryTemp)), 2, ' and ')
              -- Replace all other occurences of $$ with commas
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = REPLACE(@summaryTemp, '$$', ', ')
       END

       --finally, add to the main summary field
       IF @summaryTemp <> ''
       BEGIN
              IF @summary = '' SET @summary = @summaryTemp
              ELSE SET @summary = @summary + '. <br />Planned procedures: ' + @summaryTemp
       END

       ------------------------------------------------------------------
       --CO-MORBIDITY
       ------------------------------------------------------------------
       SET @summaryTemp = ''

       SELECT 
              CoMorbidityItem,
              CASE CoMorbidityItem 
					 WHEN 'Angina' THEN 'angina'
					 WHEN 'Asthma' THEN 'asthma'
					 WHEN 'COPD' THEN 'COPD'
					 WHEN 'DiabetesMellitus' THEN 'diabetes mellitus**'
					 WHEN 'Epilepsy' THEN 'epilepsy'
					 WHEN 'HemiPostStroke' THEN 'hemi post stroke'
					 WHEN 'Hypertension' THEN 'hypertension'
					 WHEN 'MI' THEN 'MI'
					 WHEN 'Obesity' THEN 'obesity'
					 WHEN 'TIA' THEN 'TIA'
                     ELSE CoMorbidityItem 
              END AS CoMorbidityItemDesc, 
              Selected
              INTO #coMorbidity
       FROM 
       (SELECT * FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId) a
       UNPIVOT
       (      Selected 
              FOR CoMorbidityItem IN (Angina, Asthma, COPD, DiabetesMellitus, Epilepsy, HemiPostStroke, Hypertension, MI, Obesity, TIA)
       ) b
       WHERE Selected = 1

	   IF @OtherCoMorbidity <> '' INSERT INTO #coMorbidity VALUES ('OtherCoMorbidity',@OtherCoMorbidity,1) 

       IF (SELECT COUNT(*) FROM #coMorbidity) > 0
       BEGIN
              -- Get the concatenated string separated by a delimiter, say $$
              SELECT @summaryTemp = COALESCE (
                                                CASE WHEN @summaryTemp = '' THEN CoMorbidityItemDesc
                                                ELSE @summaryTemp + '$$' + CoMorbidityItemDesc END
                                         ,'')
              FROM #coMorbidity

              --IF @OtherCoMorbidity <> '' SET @summaryTemp = @summaryTemp + '$$' + @OtherCoMorbidity

              -- Set the last occurence of $$ to "and"
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = STUFF(@summaryTemp, len(@summaryTemp) - charindex('$$', reverse(@summaryTemp)), 2, ' and ')
              -- Replace all other occurences of $$ with commas
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = REPLACE(@summaryTemp, '$$', ', ')
       END

       IF CHARINDEX('**', @summaryTemp) > 0
       BEGIN
              IF @DiabetesMellitusType = 0 SET @summaryTemp = REPLACE(@summaryTemp, '**', '')
              ELSE IF @DiabetesMellitusType = 1 SET @summaryTemp = REPLACE(@summaryTemp, '**', ' (unknown)')
              ELSE IF @DiabetesMellitusType = 2 SET @summaryTemp = REPLACE(@summaryTemp, '**', ' (type 1)')
              ELSE IF @DiabetesMellitusType = 3 SET @summaryTemp = REPLACE(@summaryTemp, '**', ' (type 2)')
       END

       --finally, add to the main summary field
       IF @summaryTemp <> ''
       BEGIN
              IF @summary = '' SET @summary = 'Co-morbidity: ' + @summaryTemp
              ELSE SET @summary = @summary + '. <br />Co-morbidity: ' + @summaryTemp
       END


       ------------------------------------------------------------------
       --ASA STATUS
       ------------------------------------------------------------------
       IF @ASAStatus IS NOT NULL
       BEGIN
              IF @summary <> '' SET @summary = @summary + '. <br />ASA status: '
              ELSE SET @summary = @summary + 'ASA status: '

              IF @ASAStatus = 0 SET @summary = @summary + 'Not assessed'
              ELSE IF @ASAStatus = 1 SET @summary = @summary + 'ASA I - patient is normal and healthy'
              ELSE IF @ASAStatus = 2 SET @summary = @summary + 'ASA II - patient has mild systemic disease'
              ELSE IF @ASAStatus = 3 SET @summary = @summary + 'ASA III - patient has severe systemic disease'
              ELSE IF @ASAStatus = 4 SET @summary = @summary + 'ASA IV - patient has severe systemic disease that is a constant threat to life'
              ELSE IF @ASAStatus = 5 SET @summary = @summary + 'ASA V - patient is moribund and is not expected to survive without the procedure/operation'
       END

       Declare @dmagingDrug varchar(5000) =''
       If @PotentiallyDamagingDrug <> '' SET @dmagingDrug = '.</br>Potential damaging drug: ' + dbo.fnFirstLetterUpper(@PotentiallyDamagingDrug)
       SET @summary = @summary + @dmagingDrug
       ------------------------------------------------------------------
       --ASA STATUS
       ------------------------------------------------------------------
       IF @Allergy > 0
       BEGIN
              IF @summary = '' SET @summary = @summary + 'allergy: '
              ELSE SET @summary = @summary + '. <br/>Allergy: '

              IF @Allergy = 1 SET @summary = @summary + 'uknown'
              ELSE IF @Allergy = 2 SET @summary = @summary + 'none'
              ELSE IF @Allergy = 3 
              BEGIN
                     IF @AllergyDesc = '' SET @summary = @summary + 'unspecified'
                     ELSE SET @summary = @summary + @AllergyDesc
              END
              
       END


       ------------------------------------------------------------------
       --FOLLOWING UP SURGERY
       ------------------------------------------------------------------
       IF @SurgeryFollowUpText <> ''
              IF @summary <> '' SET @summary = @summary + '. <br />Following up surgery: ' + @SurgeryFollowUpText
              ELSE SET @summary = @summary + 'Following up surgery: ' + @SurgeryFollowUpText


       ------------------------------------------------------------------
       --FOLLOWING UP DISEASE
       ------------------------------------------------------------------
       SET @summaryTemp = ''
       
       IF @DiseaseFollowUpProc > 0
              SELECT @summaryTemp = [ListItemText] FROM ERS_Lists where [ListDescription] = 'Follow up disease/proc Upper GI' AND [ListItemNo] = @DiseaseFollowUpProc
       
       IF @DiseaseFollowUpProcPeriod = 1
              SET @summaryTemp = @summaryTemp + ' within the last month'
       ELSE IF @DiseaseFollowUpProcPeriod = 2
              SET @summaryTemp = @summaryTemp + ' one to two months ago'
       ELSE IF @DiseaseFollowUpProcPeriod = 3
              SET @summaryTemp = @summaryTemp + ' three to four months ago'
       ELSE IF @DiseaseFollowUpProcPeriod = 4
              SET @summaryTemp = @summaryTemp + ' five to six months ago'
       ELSE IF @DiseaseFollowUpProcPeriod = 5
              SET @summaryTemp = @summaryTemp + ' seven to twelve months ago'
       ELSE IF @DiseaseFollowUpProcPeriod = 6
              SET @summaryTemp = @summaryTemp + ' one to three years ago'
       ELSE IF @DiseaseFollowUpProcPeriod = 7
              SET @summaryTemp = @summaryTemp + ' more than three years ago'
       
       SELECT 
              DiseaseItem,
              CASE DiseaseItem 
                     WHEN 'BarrettsOesophagus' THEN 'Barrett''s oesophagus'
                     WHEN 'CoeliacDisease' THEN 'coeliac disease'
					 WHEN 'Dysplasia' THEN 'dysplasia'
					 WHEN 'Gastritis' THEN 'gastritis'
					 WHEN 'Malignancy' THEN 'malignancy'
                     WHEN 'OesophagealDilatationFollowUp' THEN 'oesophageal dilatation'
                     WHEN 'OesophagealVarices' THEN 'oesophageal varices'
					 WHEN 'Oesophagitis' THEN 'oesophagitis'
                     WHEN 'UlcerHealing' THEN 'ulcer healing'
                     ELSE DiseaseItem 
              END AS DiseaseItemDesc, 
              Selected
              INTO #diseases
       FROM 
       (SELECT * FROM ERS_UpperGIIndications WHERE ProcedureId = @ProcedureId) a
       UNPIVOT
       (      Selected 
              FOR DiseaseItem IN (BarrettsOesophagus, CoeliacDisease, Dysplasia, Gastritis, Malignancy, OesophagealDilatationFollowUp, OesophagealVarices, 
                                         Oesophagitis, UlcerHealing)
       ) b
       WHERE Selected = 1

       IF (SELECT COUNT(*) FROM #diseases) > 0
       BEGIN
              -- Get the concatenated string separated by a delimiter, say $$
              SELECT @summaryTemp = COALESCE (
                                                CASE WHEN @summaryTemp = '' THEN DiseaseItemDesc
                                                ELSE @summaryTemp + '$$' + DiseaseItemDesc END
                                         ,'')
              FROM #diseases

              -- Set the last occurence of $$ to "and"
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = STUFF(@summaryTemp, len(@summaryTemp) - charindex('$$', reverse(@summaryTemp)), 2, ' and ')
              -- Replace all other occurences of $$ with commas
              IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = REPLACE(@summaryTemp, '$$', ', ')
       END

       IF @summaryTemp <> ''
       BEGIN
              IF @summary = '' SET @summary = @summaryTemp
              ELSE SET @summary = @summary + '. <br />Following up disease/procedure: ' + @summaryTemp
       END

       ------------------------------------------------------------------
       --Important COMMENTS
       ------------------------------------------------------------------
       IF @ClinicallyImpComments <> ''
              IF @summary = '' SET @summary = @ClinicallyImpComments
              ELSE SET @summary = @summary + '. <br />Clinically important comments: ' + @ClinicallyImpComments

END
       --IF @summary <> '' SET @summary = @summary + '.'
       
       --PRINT @summary

       -- Finally update the summary column in indications and procedures tables
       UPDATE ERS_UpperGIIndications
       SET Summary = @summary 
       WHERE ProcedureId = @ProcedureId;

       UPDATE ERS_ProceduresReporting
       SET PP_Indic = @summary 
       WHERE ProcedureId = @ProcedureId;

          IF OBJECT_ID('tempdb..#indications') IS NOT NULL DROP TABLE #indications
          IF OBJECT_ID('tempdb..#plannedProcedures') IS NOT NULL DROP TABLE #plannedProcedures
          IF OBJECT_ID('tempdb..#coMorbidity') IS NOT NULL DROP TABLE #coMorbidity
          IF OBJECT_ID('tempdb..#ecoMorbidity') IS NOT NULL DROP TABLE #ecoMorbidity
          IF OBJECT_ID('tempdb..#diseases') IS NOT NULL DROP TABLE #diseases
		  IF OBJECT_ID('tempdb..#coMorbidity1') IS NOT NULL DROP TABLE #coMorbidity1
       --IF @ProcType<> 3 OR @ProcType=4
       --BEGIN

       --       DROP TABLE #indications
       --       DROP TABLE #plannedProcedures
       --       DROP TABLE #coMorbidity
       --       DROP TABLE #diseases
       --END 

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------238 Create Proc ogd_extentofintubation_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_extentofintubation_select','S';
GO

CREATE PROCEDURE [dbo].[ogd_extentofintubation_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

SELECT
	ProcedureId,
	ISNULL(CompletionStatus,0) AS CompletionStatus,
	ISNULL(Extent,0) AS Extent,
	ISNULL(FailureReason,0) AS FailureReason,
	ISNULL(FailureReasonOther,'') AS FailureReasonOther,
	ISNULL(Jmanoeuvre,0) AS Jmanoeuvre,
	ISNULL(TrainerCompletionStatus,0) AS TrainerCompletionStatus,
	ISNULL(TrainerExtent,0) AS TrainerExtent,
	ISNULL(TrainerFailureReason,0) AS TrainerFailureReason,
	ISNULL(TrainerFailureReasonOther,'') AS TrainerFailureReasonOther,
	ISNULL(TrainerJmanoeuvre,0) AS TrainerJmanoeuvre
FROM
	ERS_UpperGIExtentOfIntubation
WHERE 
	ProcedureId = @ProcedureId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------238a Create Proc trainer_trainee_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'trainer_trainee_select','S';
GO

CREATE PROCEDURE [dbo].[trainer_trainee_select]
(
	@ProcedureId	AS INT = 0,
	@SiteId			AS INT = 0
)
AS

SET NOCOUNT ON

SELECT 
	(SELECT ISNULL(u.Title, '') + ISNULL(' ' + u.Forename, '') + ' ' + u.Surname AS UserFullName 
		FROM ERS_Users u WHERE u.UserId = p.Endoscopist1) AS TrainerEndoscopist,
	(SELECT ISNULL(u.Title, '') + ISNULL(' ' + u.Forename, '') + ' ' + u.Surname AS UserFullName 
		FROM ERS_Users u WHERE u.UserId = p.Endoscopist2
		AND p.Endoscopist1 <> IsNull(p.Endoscopist2, 0) ) AS TraineeEndoscopist,

	ISNULL(
		CASE WHEN @SiteId > 0 AND p.ProcedureType = 2 --ERCP
				THEN (SELECT TOP 1 Id FROM dbo.ERS_ERCPTherapeutics e WHERE e.SiteId = @SiteId AND e.CarriedOutRole=1)
			WHEN @SiteId > 0 AND p.ProcedureType <> 2 --UpperGI..
				THEN (SELECT TOP 1 Id FROM dbo.ERS_UpperGITherapeutics u WHERE u.SiteId = @SiteId  AND  u.CarriedOutRole=1)
			ELSE 0
		END, 0) AS ER_TherapRecordId,

	ISNULL(
		CASE WHEN @SiteId > 0 AND p.ProcedureType = 2 --ERCP
				THEN (SELECT TOP 1 Id FROM dbo.ERS_ERCPTherapeutics e WHERE e.SiteId = @SiteId AND e.CarriedOutRole=2)
			WHEN @SiteId > 0 AND p.ProcedureType <> 2 --UpperGI..
				THEN (SELECT TOP 1 Id FROM dbo.ERS_UpperGITherapeutics u WHERE u.SiteId = @SiteId  AND  u.CarriedOutRole=2)
			ELSE 0
		END, 0) AS EE_TherapRecordId

FROM ERS_Procedures p
WHERE ProcedureId = @ProcedureID
--AND p.Endoscopist1 <> IsNull(p.Endoscopist2, 0) --AND p.Endoscopist1 > 0 AND p.Endoscopist2 > 0

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------239 Create Proc ogd_extentofintubation_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC dbo.DropIfExist 'ogd_extentofintubation_save', 'S';
GO

CREATE PROCEDURE [dbo].[ogd_extentofintubation_save]
(
	@ProcedureId INT,
	@CompletionStatus TINYINT,
	@Extent SMALLINT,
	@FailureReason TINYINT,
	@FailureReasonOther NVARCHAR(1000),
	@Jmanoeuvre TINYINT,
	@TrainerCompletionStatus TINYINT,
	@TrainerExtent SMALLINT,
	@TrainerFailureReason TINYINT,
	@TrainerFailureReasonOther NVARCHAR(1000),
	@TrainerJmanoeuvre TINYINT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIExtentOfIntubation WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_UpperGIExtentOfIntubation (
			ProcedureId,
			CompletionStatus,
			Extent,
			FailureReason,
			FailureReasonOther,
			Jmanoeuvre,
			TrainerCompletionStatus,
			TrainerExtent,
			TrainerFailureReason,
			TrainerFailureReasonOther,
			TrainerJmanoeuvre,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@ProcedureId,
			@CompletionStatus,
			@Extent,
			@FailureReason,
			@FailureReasonOther,
			@Jmanoeuvre,
			@TrainerCompletionStatus,
			@TrainerExtent,
			@TrainerFailureReason,
			@TrainerFailureReasonOther,
			@TrainerJmanoeuvre,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'Extent of Intubation',
			1)
	END
	
	--ELSE IF (@@CompletionStatus=0)
	--BEGIN
	--	DELETE FROM ERS_UpperGIExtentOfIntubation 
	--	WHERE ProcedureId = @ProcedureId

	--	DELETE FROM ERS_RecordCount 
	--	WHERE ProcedureId = @ProcedureId
	--	AND Identifier = 'Extent of Intubation'
	--END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIExtentOfIntubation
		SET 
			CompletionStatus = @CompletionStatus,
			Extent = @Extent,
			FailureReason = @FailureReason,
			FailureReasonOther = @FailureReasonOther,
			Jmanoeuvre = @Jmanoeuvre,
			TrainerCompletionStatus = @TrainerCompletionStatus,
			TrainerExtent = @TrainerExtent,
			TrainerFailureReason = @TrainerFailureReason,
			TrainerFailureReasonOther = @TrainerFailureReasonOther,
			TrainerJmanoeuvre = @TrainerJmanoeuvre,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			ProcedureId = @ProcedureId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------240 Create Proc ogd_extentofintubation_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC dbo.DropIfExist 'ogd_extentofintubation_summary_update', 'S';
GO

CREATE PROCEDURE [dbo].[ogd_extentofintubation_summary_update]
(
       @ProcedureId INT
)
AS
       SET NOCOUNT ON

	   DECLARE @ProcedureType INT = (SELECT ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureId)

       DECLARE
              @summary VARCHAR(4000),
              @CompletionStatus TINYINT,
              @Extent SMALLINT,
              @FailureReason TINYINT,
              @FailureReasonOther NVARCHAR(1000),
			  @Jmanoeuvre TINYINT,
              @TrainerCompletionStatus TINYINT,
              @TrainerExtent SMALLINT,
              @TrainerFailureReason TINYINT,
              @TrainerFailureReasonOther NVARCHAR(1000),
			  @TrainerJmanoeuvre TINYINT,
			  @ReportCompletionStatus TINYINT,
              @ReportExtent SMALLINT,
              @ReportFailureReason TINYINT,
              @ReportFailureReasonOther NVARCHAR(1000),
			  @ReportJmanoeuvre TINYINT

       SELECT 
              @CompletionStatus = CompletionStatus,
              @Extent = Extent,
              @FailureReason = FailureReason,
              @FailureReasonOther = FailureReasonOther,
			  @Jmanoeuvre = Jmanoeuvre,
              @TrainerCompletionStatus = TrainerCompletionStatus,
              @TrainerExtent = TrainerExtent,
              @TrainerFailureReason = TrainerFailureReason,
              @TrainerFailureReasonOther = TrainerFailureReasonOther,
			  @TrainerJmanoeuvre = TrainerJmanoeuvre
       FROM
              ERS_UpperGIExtentOfIntubation
       WHERE
              ProcedureId = @ProcedureId

       SET @Summary = ''

	   --Report either trainee or trainer, not both - based on completion status (success status should be reported first)
	   IF @CompletionStatus = 1  --Success
	   BEGIN
			SET @ReportCompletionStatus = 1
			SET @ReportExtent = @Extent
			SET @ReportFailureReason = @FailureReason
			SET @ReportFailureReasonOther = @FailureReasonOther
			SET @ReportJmanoeuvre = @Jmanoeuvre
	   END
	   ELSE IF @TrainerCompletionStatus = 1  --Success
	   BEGIN
			SET @ReportCompletionStatus = 1
			SET @ReportExtent = @TrainerExtent
			SET @ReportFailureReason = @TrainerFailureReason
			SET @ReportFailureReasonOther = @TrainerFailureReasonOther
			SET @ReportJmanoeuvre = @TrainerJmanoeuvre
	   END
	   ELSE IF @CompletionStatus = 2  --Failed
	   BEGIN
			SET @ReportCompletionStatus = 2
			SET @ReportExtent = @Extent
			SET @ReportFailureReason = @FailureReason
			SET @ReportFailureReasonOther = @FailureReasonOther
			SET @ReportJmanoeuvre = @Jmanoeuvre
	   END
	   ELSE IF @TrainerCompletionStatus = 2  --Failed
	   BEGIN
			SET @ReportCompletionStatus = 2
			SET @ReportExtent = @TrainerExtent
			SET @ReportFailureReason = @TrainerFailureReason
			SET @ReportFailureReasonOther = @TrainerFailureReasonOther
			SET @ReportJmanoeuvre = @TrainerJmanoeuvre
	   END


       
	   IF @ReportJmanoeuvre = 1 SET @summary = @summary + 'J manoeuvre not carried out'
	   ELSE IF @ReportJmanoeuvre = 2 SET @summary = @summary + 'J manoeuvre performed'

       IF @ReportCompletionStatus = 1
       BEGIN
			IF @summary <> '' SET @summary = @summary + '. '
              SET @summary = @summary + 'The procedure was completed successfully'
			  IF @ProcedureType IN (1, 8) -- Gastroscopy, Antegrade
			  BEGIN
				IF @ReportExtent = 1 SET @summary = @summary + ' to the ' + 'proximal jejunum'
				ELSE IF @ReportExtent = 2 SET @summary = @summary + ' to the ' + 'distal jejunum'
				ELSE IF @ReportExtent = 3 SET @summary = @summary + ' to the ' + 'proximal ileum'
				ELSE IF @ReportExtent = 4 SET @summary = @summary + ' to the ' + 'jejunum'
				ELSE IF @ReportExtent = 5 SET @summary = @summary + ' to the ' + 'D4'
				ELSE IF @ReportExtent = 6 SET @summary = @summary + ' to the ' + 'D3'
				ELSE IF @ReportExtent = 7 SET @summary = @summary + ' to the ' + 'D2'
				ELSE IF @ReportExtent = 8 SET @summary = @summary + ' to the ' + 'D1'
				ELSE IF @ReportExtent = 9 SET @summary = @summary + ' to the ' + 'stomach'
				ELSE IF @ReportExtent = 10 SET @summary = @summary + ' to the ' + 'distal oesophagus'
				ELSE IF @ReportExtent = 11 SET @summary = @summary + ' to the ' + 'proximal oesophagus'
			  END
       END

       ELSE IF @ReportCompletionStatus = 2
       BEGIN
			IF @summary <> '' SET @summary = @summary + '. '
              --SET @summary = @summary + 'Procedure failed'
              IF @ReportFailureReason = 1 SET @summary = @summary + 'Failed intubation'
              ELSE IF @ReportFailureReason = 2 SET @summary = @summary + 'Failed due to oesophageal stricture'
              ELSE IF @ReportFailureReason = 3 
              BEGIN
                     IF @ReportFailureReasonOther <> '' SET @summary = @summary + 'Procedure failed: ' + @ReportFailureReasonOther ELSE SET @summary = @summary + 'Procedure failed'
              END
			  ELSE IF @ReportFailureReason = 4 SET @summary = @summary + 'Procedure failed (abandoned)'
       END

	   SET @summary = LTRIM(RTRIM(@summary))
	   IF RIGHT(@summary,1) = '.' SET @summary = LEFT(@summary, LEN(@summary)-1)

	--Update the summary column in extentofintubation table
       UPDATE ERS_UpperGIExtentOfIntubation
       SET Summary = @summary 
       WHERE ProcedureId = @ProcedureId

	EXEC procedure_summary_update @ProcedureId
       ----PRINT @summary

       

       ----Update the mainreportbody summary column in procedures table
       --DECLARE @summaryTemp NVARCHAR(MAX)
       --DECLARE @noOfChars INT

       --SET @summaryTemp = ''
       --SELECT @summaryTemp = Summary FROM ERS_Procedures WHERE ProcedureId = @ProcedureId
       --IF @summary <> ''
       --BEGIN
       --     IF CHARINDEX('<b>Site', @summaryTemp) = 1 
       --            SET @summaryTemp = @summary + '. ' + @summaryTemp
       --     ELSE IF CHARINDEX('<b>Site', @summaryTemp) > 1 
       --     BEGIN
       --            SET @noOfChars = CHARINDEX('<b>Site', @summaryTemp) - 1
       --            SET @summaryTemp = STUFF(@summaryTemp, 1, @noOfChars, @summary + '. <br/>')
       --     END
       --     ELSE
       --     BEGIN
       --            SET @summaryTemp = @summary
       --     END
       --     UPDATE ERS_Procedures
       --     SET Summary = @summaryTemp
       --     WHERE ProcedureId = @ProcedureId
       --END

       --SET @summaryTemp = ''
       --SELECT @summaryTemp = SummaryWithLinks FROM ERS_Procedures WHERE ProcedureId = @ProcedureId
       --IF @summary <> ''
       --BEGIN
       --     IF CHARINDEX('<b>Site', @summaryTemp) = 1 
       --            SET @summaryTemp = @summary + '. ' + @summaryTemp
       --     ELSE IF CHARINDEX('<b>Site', @summaryTemp) > 1 
       --     BEGIN
       --            SET @noOfChars = CHARINDEX('<b>Site', @summaryTemp) - 1
       --            SET @summaryTemp = STUFF(@summaryTemp, 1, @noOfChars, @summary + '. <br/>')
       --     END
       --     ELSE
       --     BEGIN
       --            SET @summaryTemp = @summary
       --     END
       --     UPDATE ERS_Procedures
       --     SET SummaryWithLinks = @summaryTemp
       --     WHERE ProcedureId = @ProcedureId
       --END

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------244 Create Proc ogd_qa_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC dbo.DropIfExist 'ogd_qa_select', 'S';
GO

CREATE PROCEDURE [dbo].[ogd_qa_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

SELECT
	NoNotes,
	ReferralLetter,
	ManagementNone,
	PulseOximetry,
	IVAccess,
	IVAntibiotics,
	Oxygenation,
	OxygenationMethod,
	OxygenationFlowRate,
	ContinuousECG,
	BP,
	BPSystolic,
	BPDiastolic,
	ManagementOther,
	ManagementOtherText,
	PatSedation,
	PatSedationAsleepResponseState,
	PatDiscomfortNurse,
	PatDiscomfortEndo,
	ComplicationsNone,
	PoorlyTolerated,
	PatientDiscomfort,
	PatientDistress,
	InjuryToMouth,
	FailedIntubation,
	DifficultIntubation,
	DamageToScope,
	DamageToScopeType,
	GastricContentsAspiration,
	ShockHypotension,
	Haemorrhage,
	SignificantHaemorrhage,
	Hypoxia,
	RespiratoryDepression,
	RespiratoryArrest,
	CardiacArrest,
	CardiacArrythmia,
	Death,
	ISNULL(TechnicalFailure,'') AS TechnicalFailure,
	Perforation,
	ISNULL(PerforationText,'') AS PerforationText,
	ComplicationsOther,
	ISNULL(ComplicationsOtherText,'') AS ComplicationsOtherText,
	Bleeding,
	BleedingSeverity,
	BleedingAdrenalineUsed,
	BleedingAdrenalineAmount,
	BleedingColdSalineUsed,
	BleedingBlockingDeviceUsed,
	Pneumothorax,
	PneumothoraxAspirChestDrain,
	Hospitalisation,
	MyocardInfarction,
	Oversedation,
	AdmissionToICU
FROM
	ERS_UpperGIQA
WHERE 
	ProcedureId = @ProcedureId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------245 Create Proc ogd_qa_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC dbo.DropIfExist 'ogd_qa_save', 'S';
GO

CREATE PROCEDURE [dbo].[ogd_qa_save]
(
	@ProcedureId INT,
	@NoNotes BIT,
	@ReferralLetter BIT,
	@ManagementNone BIT,
	@PulseOximetry BIT,
	@IVAccess BIT,
	@IVAntibiotics BIT,
	@Oxygenation BIT,
	@OxygenationMethod TINYINT,
	@OxygenationFlowRate DECIMAL(6,2),
	@ContinuousECG BIT,
	@BP BIT,
	@BPSystolic DECIMAL(6,2),
	@BPDiastolic DECIMAL(6,2),
	@ManagementOther BIT,
	@ManagementOtherText NVARCHAR(1000),
	@PatSedation TINYINT,
	@PatSedationAsleepResponseState TINYINT,
	@PatDiscomfortNurse TINYINT,
	@PatDiscomfortEndo TINYINT,
	@ComplicationsNone BIT,
	@PoorlyTolerated BIT,
	@PatientDiscomfort BIT,
	@PatientDistress BIT,
	@InjuryToMouth BIT,
	@FailedIntubation BIT,
	@DifficultIntubation BIT,
	@DamageToScope BIT,
	@DamageToScopeType TINYINT,
	@GastricContentsAspiration BIT,
	@ShockHypotension BIT,
	@Haemorrhage BIT,
	@SignificantHaemorrhage BIT,
	@Hypoxia BIT,
	@RespiratoryDepression BIT,
	@RespiratoryArrest BIT,
	@CardiacArrest BIT,
	@CardiacArrythmia BIT,
	@Death BIT,
	@TechnicalFailure NVARCHAR(1000),
	@Perforation BIT,
	@PerforationText NVARCHAR(500),
	@ComplicationsOther BIT,
	@ComplicationsOtherText NVARCHAR(1000),
	@Bleeding BIT,
	@BleedingSeverity TINYINT,
	@BleedingAdrenalineUsed BIT,
	@BleedingAdrenalineAmount DECIMAL(8,2),
	@BleedingColdSalineUsed BIT,
	@BleedingBlockingDeviceUsed BIT,
	@Pneumothorax BIT,
	@PneumothoraxAspirChestDrain BIT,
	@Hospitalisation BIT,
	@MyocardInfarction BIT,
	@Oversedation BIT,
	@AdmissionToICU BIT
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIQA WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_UpperGIQA (
			ProcedureId,
			NoNotes,
			ReferralLetter,
			ManagementNone,
			PulseOximetry,
			IVAccess,
			IVAntibiotics,
			Oxygenation,
			OxygenationMethod,
			OxygenationFlowRate,
			ContinuousECG,
			BP,
			BPSystolic,
			BPDiastolic,
			ManagementOther,
			ManagementOtherText,
			PatSedation,
			PatSedationAsleepResponseState,
			PatDiscomfortNurse,
			PatDiscomfortEndo,
			ComplicationsNone,
			PoorlyTolerated,
			PatientDiscomfort,
			PatientDistress,
			InjuryToMouth,
			FailedIntubation,
			DifficultIntubation,
			DamageToScope,
			DamageToScopeType,
			GastricContentsAspiration,
			ShockHypotension,
			Haemorrhage,
			SignificantHaemorrhage,
			Hypoxia,
			RespiratoryDepression,
			RespiratoryArrest,
			CardiacArrest,
			CardiacArrythmia,
			Death,
			TechnicalFailure,
			Perforation,
			PerforationText,
			ComplicationsOther,
			ComplicationsOtherText,
			Bleeding,
			BleedingSeverity,
			BleedingAdrenalineUsed,
			BleedingAdrenalineAmount,
			BleedingColdSalineUsed,
			BleedingBlockingDeviceUsed,
			Pneumothorax,
			PneumothoraxAspirChestDrain,
			Hospitalisation,
			MyocardInfarction,
			Oversedation,
			AdmissionToICU) 
		VALUES (
			@ProcedureId,
			@NoNotes,
			@ReferralLetter,
			@ManagementNone,
			@PulseOximetry,
			@IVAccess,
			@IVAntibiotics,
			@Oxygenation,
			@OxygenationMethod,
			@OxygenationFlowRate,
			@ContinuousECG,
			@BP,
			@BPSystolic,
			@BPDiastolic,
			@ManagementOther,
			@ManagementOtherText,
			@PatSedation,
			@PatSedationAsleepResponseState,
			@PatDiscomfortNurse,
			@PatDiscomfortEndo,
			@ComplicationsNone,
			@PoorlyTolerated,
			@PatientDiscomfort,
			@PatientDistress,
			@InjuryToMouth,
			@FailedIntubation,
			@DifficultIntubation,
			@DamageToScope,
			@DamageToScopeType,
			@GastricContentsAspiration,
			@ShockHypotension,
			@Haemorrhage,
			@SignificantHaemorrhage,
			@Hypoxia,
			@RespiratoryDepression,
			@RespiratoryArrest,
			@CardiacArrest,
			@CardiacArrythmia,
			@Death,
			@TechnicalFailure,
			@Perforation,
			@PerforationText,
			@ComplicationsOther,
			@ComplicationsOtherText,
			@Bleeding,
			@BleedingSeverity,
			@BleedingAdrenalineUsed,
			@BleedingAdrenalineAmount,
			@BleedingColdSalineUsed,
			@BleedingBlockingDeviceUsed,
			@Pneumothorax,
			@PneumothoraxAspirChestDrain,
			@Hospitalisation,
			@MyocardInfarction,
			@Oversedation,
			@AdmissionToICU)

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'QA',
			1)
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIQA
		SET 
			NoNotes = @NoNotes,
			ReferralLetter = @ReferralLetter,
			ManagementNone = @ManagementNone,
			PulseOximetry = @PulseOximetry,
			IVAccess = @IVAccess,
			IVAntibiotics = @IVAntibiotics,
			Oxygenation = @Oxygenation,
			OxygenationMethod = @OxygenationMethod,
			OxygenationFlowRate = @OxygenationFlowRate,
			ContinuousECG = @ContinuousECG,
			BP = @BP,
			BPSystolic = @BPSystolic,
			BPDiastolic = @BPDiastolic,
			ManagementOther = @ManagementOther,
			ManagementOtherText = @ManagementOtherText,
			PatSedation = @PatSedation,
			PatSedationAsleepResponseState = @PatSedationAsleepResponseState,
			PatDiscomfortNurse = @PatDiscomfortNurse,
			PatDiscomfortEndo = @PatDiscomfortEndo,
			ComplicationsNone = @ComplicationsNone,
			PoorlyTolerated = @PoorlyTolerated,
			PatientDiscomfort = @PatientDiscomfort,
			PatientDistress = @PatientDistress,
			InjuryToMouth = @InjuryToMouth,
			FailedIntubation = @FailedIntubation,
			DifficultIntubation = @DifficultIntubation,
			DamageToScope = @DamageToScope,
			DamageToScopeType = @DamageToScopeType,
			GastricContentsAspiration = @GastricContentsAspiration,
			ShockHypotension = @ShockHypotension,
			Haemorrhage = @Haemorrhage,
			SignificantHaemorrhage = @SignificantHaemorrhage,
			Hypoxia = @Hypoxia,
			RespiratoryDepression = @RespiratoryDepression,
			RespiratoryArrest = @RespiratoryArrest,
			CardiacArrest = @CardiacArrest,
			CardiacArrythmia = @CardiacArrythmia,
			Death = @Death,
			TechnicalFailure = @TechnicalFailure,
			Perforation = @Perforation,
			PerforationText = @PerforationText,
			ComplicationsOther = @ComplicationsOther,
			ComplicationsOtherText = @ComplicationsOtherText,
			Bleeding = @Bleeding,
			BleedingSeverity = @BleedingSeverity,
			BleedingAdrenalineUsed = @BleedingAdrenalineUsed,
			BleedingAdrenalineAmount = @BleedingAdrenalineAmount,
			BleedingColdSalineUsed = @BleedingColdSalineUsed,
			BleedingBlockingDeviceUsed = @BleedingBlockingDeviceUsed,
			Pneumothorax = @Pneumothorax,
			PneumothoraxAspirChestDrain = @PneumothoraxAspirChestDrain,
			Hospitalisation = @Hospitalisation,
			MyocardInfarction = @MyocardInfarction,
			Oversedation = @Oversedation,
			AdmissionToICU = @AdmissionToICU
		WHERE 
			ProcedureId = @ProcedureId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------246 Create Proc ogd_qa_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_qa_summary_update','S';
GO

CREATE PROCEDURE [dbo].[ogd_qa_summary_update]
(
       @ProcedureId INT
)
AS
       SET NOCOUNT ON

       DECLARE
              @summary VARCHAR(4000),
              @summaryTemp VARCHAR(4000),
              @summaryTemp2 VARCHAR(500),
              @NoNotes BIT,
              @ReferralLetter BIT,
              @ManagementNone BIT,
              @PulseOximetry BIT,
              @IVAccess BIT,
              @IVAntibiotics BIT,
              @Oxygenation BIT,
              @OxygenationMethod TINYINT,
              @OxygenationFlowRate DECIMAL(6,2),
              @ContinuousECG BIT,
              @BP BIT,
              @BPSystolic DECIMAL(6,2),
              @BPDiastolic DECIMAL(6,2),
              @ManagementOther BIT,
              @ManagementOtherText NVARCHAR(1000),
              @PatSedation TINYINT,
              @PatSedationAsleepResponseState TINYINT,
              @PatDiscomfortNurse TINYINT,
			  @PatDiscomfortEndo TINYINT,
              @ComplicationsNone BIT,
              @PoorlyTolerated BIT,
              @PatientDiscomfort BIT,
              @PatientDistress BIT,
              @InjuryToMouth BIT,
              @FailedIntubation BIT,
              @DifficultIntubation BIT,
              @DamageToScope BIT,
              @DamageToScopeType TINYINT,
              @GastricContentsAspiration BIT,
              @ShockHypotension BIT,
              @Haemorrhage BIT,
              @SignificantHaemorrhage BIT,
              @Hypoxia BIT,
              @RespiratoryDepression BIT,
              @RespiratoryArrest BIT,
              @CardiacArrest BIT,
              @CardiacArrythmia BIT,
              @Death BIT,
              @TechnicalFailure NVARCHAR(1000),
              @Perforation BIT,
              @PerforationText NVARCHAR(500),
              @ComplicationsOther BIT,
              @ComplicationsOtherText NVARCHAR(1000),
			  @Bleeding BIT,
			  @BleedingSeverity TINYINT,
			  @BleedingAdrenalineUsed BIT,
			  @BleedingAdrenalineAmount DECIMAL(8,2),
			  @BleedingColdSalineUsed BIT,
			  @BleedingBlockingDeviceUsed BIT,
			  @Pneumothorax BIT,
			  @PneumothoraxAspirChestDrain BIT,
			  @Hospitalisation BIT,
			  @MyocardInfarction BIT,
			  @Oversedation BIT,
			  @AdmissionToICU BIT

       SELECT 
              @NoNotes=NoNotes,
              @ReferralLetter=ReferralLetter,
              @ManagementNone=ManagementNone,
              @PulseOximetry=PulseOximetry,
              @IVAccess=IVAccess,
              @IVAntibiotics=IVAntibiotics,
              @Oxygenation=Oxygenation,
              @OxygenationMethod=OxygenationMethod,
              @OxygenationFlowRate=OxygenationFlowRate,
              @ContinuousECG=ContinuousECG,
              @BP=BP,
              @BPSystolic=BPSystolic,
              @BPDiastolic=BPDiastolic,
              @ManagementOther=ManagementOther,
              @ManagementOtherText=ManagementOtherText,
              @PatSedation=PatSedation,
              @PatSedationAsleepResponseState=PatSedationAsleepResponseState,
              @PatDiscomfortNurse=PatDiscomfortNurse,
			  @PatDiscomfortEndo=PatDiscomfortEndo,
              @ComplicationsNone=ComplicationsNone,
              @PoorlyTolerated=PoorlyTolerated,
              @PatientDiscomfort=PatientDiscomfort,
              @PatientDistress=PatientDistress,
              @InjuryToMouth=InjuryToMouth,
              @FailedIntubation=FailedIntubation,
              @DifficultIntubation=DifficultIntubation,
              @DamageToScope=DamageToScope,
              @DamageToScopeType=DamageToScopeType,
              @GastricContentsAspiration=GastricContentsAspiration,
              @ShockHypotension=ShockHypotension,
              @Haemorrhage=Haemorrhage,
              @SignificantHaemorrhage=SignificantHaemorrhage,
              @Hypoxia=Hypoxia,
              @RespiratoryDepression=RespiratoryDepression,
              @RespiratoryArrest=RespiratoryArrest,
              @CardiacArrest=CardiacArrest,
              @CardiacArrythmia=CardiacArrythmia,
              @Death=Death,
              @TechnicalFailure=TechnicalFailure,
              @Perforation=Perforation,
              @PerforationText=PerforationText,
              @ComplicationsOther=ComplicationsOther,
              @ComplicationsOtherText=ComplicationsOtherText,
			  @Bleeding=Bleeding,
			  @BleedingSeverity=BleedingSeverity,
			  @BleedingAdrenalineUsed=BleedingAdrenalineUsed,
			  @BleedingAdrenalineAmount=BleedingAdrenalineAmount,
			  @BleedingColdSalineUsed=BleedingColdSalineUsed,
			  @BleedingBlockingDeviceUsed=BleedingBlockingDeviceUsed,
			  @Pneumothorax=Pneumothorax,
			  @PneumothoraxAspirChestDrain=PneumothoraxAspirChestDrain,
			  @Hospitalisation=Hospitalisation,
			  @MyocardInfarction=MyocardInfarction,
			  @Oversedation=Oversedation,
			  @AdmissionToICU=AdmissionToICU
       FROM
              ERS_UpperGIQA
       WHERE
              ProcedureId = @ProcedureId

       SET @summary = ''
       SET @summaryTemp = ''

       IF @NoNotes = 1 AND @ReferralLetter = 1
              SET @summary = 'Patient notes NOT available but referral letter/documentation WAS available'
       ELSE IF @NoNotes = 1 AND @ReferralLetter = 0
              SET @summary = 'Patient notes NOT available '
       ELSE 
              SET @summary = 'Patient notes available'
       
       
       --------------------------------------------------
       ------------------- MANAGEMENT ------------------- 
       -------------------------------------------------- 
       SET @summaryTemp = ''
       IF @ManagementNone = 1 
       BEGIN
              IF @summary = '' SET @summary = 'Management: None'
              ELSE SET @summary = @summary + '. <br/>Management: None'
       END

       ELSE
       BEGIN
              SELECT 
                     ManagementItem,
                     CASE ManagementItem 
                           WHEN 'PulseOximetry' THEN 'Pulse oximetry' 
                           WHEN 'IVAccess' THEN 'IV access' 
                           WHEN 'IVAntibiotics' THEN 'IV antibiotics' 
                           WHEN 'ContinuousECG' THEN 'Continuous ECG' 
                           WHEN 'ManagementOther' THEN 'Other'
                           ELSE ManagementItem 
                     END AS ManagementItemDesc, 
                     Selected
                     INTO #Management
              FROM 
              (SELECT * FROM ERS_UpperGIQA WHERE ProcedureId = @ProcedureId) a
              UNPIVOT
              (      Selected 
                     FOR ManagementItem IN (PulseOximetry,IVAccess,IVAntibiotics,Oxygenation,ContinuousECG,BP,ManagementOther)
              ) b
              WHERE Selected = 1

              IF (SELECT COUNT(*) FROM #Management) > 0
              BEGIN
                     -- Get the concatenated string separated by a delimiter, say $$
                     SELECT @summaryTemp = COALESCE (
                                                       CASE WHEN @summaryTemp = '' THEN ManagementItemDesc
                                                       ELSE @summaryTemp + '$$' + ManagementItemDesc END
                                                ,'')
                     FROM #Management

                     IF @ManagementOtherText <> '' SET @summaryTemp = REPLACE(@summaryTemp, 'Other' , @ManagementOtherText)

                     IF @OxygenationMethod > 0 OR @OxygenationFlowRate > 0 
                     BEGIN
                           SET @summaryTemp2 = ''
                           IF @OxygenationMethod = 1 
                                  IF @OxygenationFlowRate > 0 SET @summaryTemp2 = '(Cannulae ' + CONVERT(VARCHAR(10), @OxygenationFlowRate) + ' l/min)'
                                  ELSE SET @summaryTemp2 = '(Cannulae)'
                           ELSE IF @OxygenationMethod = 2 
                                  IF @OxygenationFlowRate > 0 SET @summaryTemp2 = '(Mask ' + CONVERT(VARCHAR(10), @OxygenationFlowRate) + ' l/min)'
                                  ELSE SET @summaryTemp2 = '(Mask)'
                           SET @summaryTemp = REPLACE(@summaryTemp, 'Oxygenation' , @summaryTemp2)
                     END

                     IF @BPSystolic > 0 OR @BPDiastolic > 0
                     BEGIN
                           SET @summaryTemp2 = 'BP ('
                           IF @BPSystolic > 0
                                  SET @summaryTemp2 = @summaryTemp2 + 'Systolic ' + CONVERT(VARCHAR(10), @BPSystolic) + ' mm'
                           IF @BPDiastolic > 0
                                  IF @summaryTemp2 <> '' SET @summaryTemp2 = @summaryTemp2 + ', Diastolic ' + CONVERT(VARCHAR(10), @BPDiastolic) + ' mm'
                                  ELSE SET @summaryTemp2 = @summaryTemp2 + 'Diastolic ' + CONVERT(VARCHAR(10), @BPDiastolic) + ' mm'
                           SET @summaryTemp2 = @summaryTemp2  + ')'
                           SET @summaryTemp = REPLACE(@summaryTemp, 'BP' , @summaryTemp2)
                     END
                     
                     -- Set the last occurence of $$ to "and"
                     IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = STUFF(@summaryTemp, len(@summaryTemp) - charindex('$$', reverse(@summaryTemp)), 2, ' and ')
                     -- Replace all other occurences of $$ with commas
                     IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = REPLACE(@summaryTemp, '$$', ', ')
              END

              DROP TABLE #Management

              --finally, add to the main summary field
              IF @summaryTemp <> ''
              BEGIN
                     IF @summary = '' SET @summary = 'Management: ' + @summaryTemp
                     ELSE SET @summary = @summary + '. <br/>Management: ' + @summaryTemp
              END
       END


       --------------------------------------------------
       ------------------- Nurse Assessment -------------
       -------------------------------------------------- 
       SET @summaryTemp = ''
       IF @PatSedation > 0
       BEGIN
              SET @summaryTemp = 'Patient Sedation'
              IF @PatSedation = 1 SET @summaryTemp = @summaryTemp + ' - Not recorded'
              ELSE IF @PatSedation = 2 SET @summaryTemp = @summaryTemp + ' - Awake'
              ELSE IF @PatSedation = 3 SET @summaryTemp = @summaryTemp + ' - Drowsy'
              ELSE IF @PatSedation = 4 
              BEGIN
                     SET @summaryTemp = @summaryTemp + ' - Asleep'
                     IF @PatSedationAsleepResponseState = 1 SET @summaryTemp = @summaryTemp + ' but responding to name'
                     ELSE IF @PatSedationAsleepResponseState = 2 SET @summaryTemp = @summaryTemp + ' but responding to touch'
                     ELSE IF @PatSedationAsleepResponseState = 3 SET @summaryTemp = @summaryTemp + ' but unresponsive'
              END
       END

       IF @PatDiscomfortNurse > 0
       BEGIN
              SET @summaryTemp2 = 'Patient Discomfort'
              IF @PatDiscomfortNurse = 1 SET @summaryTemp2 = @summaryTemp2 + ' - Not recorded'
              IF @PatDiscomfortNurse = 2 SET @summaryTemp2 = @summaryTemp2 + ' - None-resting comfortably throughout'
              IF @PatDiscomfortNurse = 3 SET @summaryTemp2 = @summaryTemp2 + ' - One or two episode of mild discomfort, well tolerated'
              IF @PatDiscomfortNurse = 4 SET @summaryTemp2 = @summaryTemp2 + ' - More than two episodes of discomfort, adequately tolerated'
              IF @PatDiscomfortNurse = 5 SET @summaryTemp2 = @summaryTemp2 + ' - Significant discomfort, experienced several times during procedure'
              IF @PatDiscomfortNurse = 6 SET @summaryTemp2 = @summaryTemp2 + ' - Extreme discomfort frequently during test'
              
              IF @summaryTemp = '' SET @summaryTemp = @summaryTemp2
              ELSE SET @summaryTemp = @summaryTemp + '. ' + @summaryTemp2
       END

       IF @summary = '' SET @summary = 'Nurse Assessment: ' + @summaryTemp
       ELSE SET @summary = @summary + '. <br/>Nurse Assessment: ' + @summaryTemp


       --------------------------------------------------
       ------------------- Complications ----------------
       -------------------------------------------------- 
       SET @summaryTemp = ''
       IF @ComplicationsNone = 1 
       BEGIN
              IF @summary = '' SET @summary = 'No complications'
              ELSE SET @summary = @summary + '. <br/>No complications'

			  UPDATE ERS_UpperGIQA SET ComplicationsSummary = 'No complications' WHERE ProcedureId = @ProcedureId
       END

       ELSE
       BEGIN
              SELECT 
                     ComplicationsItem,
                     CASE ComplicationsItem 
                           WHEN 'PoorlyTolerated' THEN 'poorly tolerated' 
                           WHEN 'PatientDiscomfort' THEN 'patient discomfort' 
                           WHEN 'PatientDistress' THEN 'patient distress' 
                           WHEN 'InjuryToMouth' THEN 'injury to mouth' 
                           WHEN 'FailedIntubation' THEN 'failed intubation'
                           WHEN 'DifficultIntubation' THEN 'difficult intubation'
                           WHEN 'DamageToScope' THEN 'damage to scope' + CASE @DamageToScopeType WHEN 1 THEN ' (mechanical)' WHEN 2 THEN ' (patient initiated)' WHEN 9 THEN ' (mechanical and patient initiated)' ELSE '' END
                           WHEN 'GastricContentsAspiration' THEN 'gastric contents aspiration'
                           WHEN 'ShockHypotension' THEN 'shock/hypotension'
						   WHEN 'Haemorrhage' THEN 'haemorrhage'
                           WHEN 'SignificantHaemorrhage' THEN 'significant haemorrhage'
						   WHEN 'Hypoxia' THEN 'hypoxia'
                           WHEN 'RespiratoryDepression' THEN 'respiratory depression'
                           WHEN 'RespiratoryArrest' THEN 'respiratory arrest'
                           WHEN 'CardiacArrest' THEN 'cardiac arrest'
						   WHEN 'CardiacArrythmia' THEN 'cardiac arrythmia'
						   WHEN 'Death' THEN 'death'
						   WHEN 'Perforation' THEN 'perforation' + CASE WHEN @PerforationText <> '' THEN ' (site: ' + @PerforationText + ')' ELSE '' END
						   WHEN 'Pneumothorax' THEN 'pneumothorax' + CASE WHEN @PneumothoraxAspirChestDrain = 1 THEN ' (required aspiration/chest drain)' ELSE '' END
						   WHEN 'Hospitalisation' THEN 'hospitalisation'
						   WHEN 'MyocardInfarction' THEN 'myocardial infarction/pulmonary oedema'
						   WHEN 'Oversedation' THEN 'oversedation requiring ventilatory support or reversal'
						   WHEN 'AdmissionToICU' THEN 'admission to ICU'
                           WHEN 'ComplicationsOther' THEN CASE WHEN @ComplicationsOtherText <> '' THEN @ComplicationsOtherText ELSE 'other' END
                           ELSE ComplicationsItem 
                     END AS ComplicationsItemDesc, 
                     Selected
                     INTO #Complications
              FROM 
              (SELECT * FROM ERS_UpperGIQA WHERE ProcedureId = @ProcedureId) a
              UNPIVOT
              (      Selected 
                     FOR ComplicationsItem IN (PoorlyTolerated,PatientDiscomfort,PatientDistress,InjuryToMouth,FailedIntubation,DifficultIntubation,DamageToScope,
                                                              GastricContentsAspiration,ShockHypotension,Haemorrhage,SignificantHaemorrhage,Hypoxia,RespiratoryDepression,RespiratoryArrest,
                                                              CardiacArrest,CardiacArrythmia,Death,Perforation,
															  Pneumothorax,Hospitalisation,MyocardInfarction,Oversedation,AdmissionToICU,
															  ComplicationsOther)
              ) b
              WHERE Selected = 1
			  
			  IF @Bleeding = 1
			  BEGIN
				DECLARE @bleedingsummary VARCHAR(500) = '', @actiontakensummary VARCHAR(500) = ''
				IF @BleedingSeverity = 1 SET @bleedingsummary = 'mild bleeding'
				ELSE IF @BleedingSeverity = 2 SET @bleedingsummary = 'moderate bleeding'
				ELSE IF @BleedingSeverity = 3 SET @bleedingsummary = 'severe bleeding'
				ELSE SET @bleedingsummary = 'bleeding'

				IF @BleedingColdSalineUsed = 1 OR @BleedingBlockingDeviceUsed = 1 OR @BleedingAdrenalineUsed = 1
				BEGIN
					SET @actiontakensummary = ' (action taken: '

					IF @BleedingColdSalineUsed = 1 SET @actiontakensummary = @actiontakensummary + '$$cold saline'
					IF @BleedingBlockingDeviceUsed = 1 SET @actiontakensummary = @actiontakensummary + '$$blocking device used'
					IF @BleedingAdrenalineUsed = 1
					BEGIN
						SET @actiontakensummary = @actiontakensummary + '$$adrenaline used'
						IF @BleedingAdrenalineAmount > 0 SET @actiontakensummary = @actiontakensummary + ' ' + CONVERT(VARCHAR, @BleedingAdrenalineAmount) + ' ml'
					END
					SET @actiontakensummary = @actiontakensummary + ')'

					-- Remove the first occurence of $$
					IF CHARINDEX('$$', @actiontakensummary) > 0 SET @actiontakensummary = REPLACE(@actiontakensummary, ': $$', ': ')
					-- Set the last occurence of $$ to "and"
					IF CHARINDEX('$$', @actiontakensummary) > 0 SET @actiontakensummary = STUFF(@actiontakensummary, len(@actiontakensummary) - charindex('$$', reverse(@actiontakensummary)), 2, ' and ')
					-- Replace all other occurences of $$ with commas
					IF CHARINDEX('$$', @actiontakensummary) > 0 SET @actiontakensummary = REPLACE(@actiontakensummary, '$$', ', ')
				END
				INSERT INTO #Complications VALUES ('Bleeding', @bleedingsummary + @actiontakensummary, 1)
			  END

              IF (SELECT COUNT(*) FROM #Complications) > 0
              BEGIN
                     -- Get the concatenated string separated by a delimiter, say $$
                     SELECT @summaryTemp = COALESCE (
                                                       CASE WHEN @summaryTemp = '' THEN ComplicationsItemDesc
                                                       ELSE @summaryTemp + '$$' + ComplicationsItemDesc END
                                                ,'')
                     FROM #Complications

                     --IF @PerforationText <> '' SET @summaryTemp = REPLACE(@summaryTemp, 'Perforation' , 'perforation (site: ' + @PerforationText + ')')
                     --IF @ComplicationsOtherText <> '' SET @summaryTemp = REPLACE(@summaryTemp, 'Other' , @ComplicationsOtherText)
                     IF @TechnicalFailure <> '' SET @summaryTemp = @summaryTemp + '$$technical failure (' + @TechnicalFailure + ')'

                     --IF @DamageToScopeType > 0
                     --BEGIN
                     --      SET @summaryTemp2 = ''
                     --      IF @DamageToScopeType = 1 
                     --             SET @summaryTemp2 = 'Damage to scope (mechanical)'
                     --      ELSE IF @DamageToScopeType = 2 
                     --             SET @summaryTemp2 = 'Damage to scope (patient initiated)'
                     --      SET @summaryTemp = REPLACE(@summaryTemp, 'Damage to scope' , @summaryTemp2)
                     --END

                     -- Set the last occurence of $$ to "and"
                     IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = STUFF(@summaryTemp, len(@summaryTemp) - charindex('$$', reverse(@summaryTemp)), 2, ' and ')
                     -- Replace all other occurences of $$ with commas
                     IF CHARINDEX('$$', @summaryTemp) > 0 SET @summaryTemp = REPLACE(@summaryTemp, '$$', ', ')
              END

              DROP TABLE #Complications

              --finally, add to the main summary field
              IF @summaryTemp <> ''
              BEGIN
				  UPDATE ERS_UpperGIQA SET ComplicationsSummary = 'Complications: ' + @summaryTemp WHERE ProcedureId = @ProcedureId
				  IF @summary = '' SET @summary = 'Complications: ' + @summaryTemp
				  ELSE SET @summary = @summary + '. <br/>Complications: ' + @summaryTemp
              END
			  ELSE
			  BEGIN
				UPDATE ERS_UpperGIQA SET ComplicationsSummary = '' WHERE ProcedureId = @ProcedureId
			  END
       END

       --PRINT @summary

       --Update the summary column in diagnoses table and procedures table
       UPDATE ERS_UpperGIQA
       SET Summary = @summary 
       WHERE ProcedureId = @ProcedureId

       EXEC procedure_summary_update @procedureID


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------247 Create Proc ogd_followup_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_followup_select','S';
GO

CREATE PROCEDURE [dbo].[ogd_followup_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

SELECT
	NoFurtherTestsRequired,
	AwaitingPathologyResults,
	FurtherProcedure,
	FurtherProcedureDueCount,
	FurtherProcedureDueType,
	FurtherProcedureText,
	ReturnTo,
	NoFurtherFollowUp,
	ReviewLocation,
	ReviewDueCount,
	ReviewDueType,
	ReviewText,
	Comments,
	PP_PFRFollowUp,
	CopyToPatient,
	CopyToPatientText,
	PatientNotCopiedReason,
	CopyToRefCon,
	CopyToRefConText,
	CopyToOther,
	CopyToOtherText,
	Salutation
FROM
	ERS_UpperGIFollowUp
WHERE 
	ProcedureId = @ProcedureId

GO
GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------248 Create Proc ogd_followup_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_followup_save','S';
GO

CREATE PROCEDURE [dbo].[ogd_followup_save]
(
	@ProcedureId INT,
	@NoFurtherTestsRequired BIT,
	@AwaitingPathologyResults BIT,
	@FurtherProcedure INT,
	@FurtherProcedureDueCount INT,
	@FurtherProcedureDueType TINYINT,
	@FurtherProcedureText NVARCHAR(500),
	@ReturnTo SMALLINT,
	@NoFurtherFollowUp BIT,
	@ReviewLocation SMALLINT,
	@ReviewDueCount INT,
	@ReviewDueType TINYINT,
	@ReviewText NVARCHAR(500),
	@Comments NVARCHAR(500),
	@PP_PFRFollowUp NVARCHAR(500),
	@CopyToPatient TINYINT,
	@CopyToPatientText NVARCHAR(500),
	@PatientNotCopiedReason NVARCHAR(500),
	@CopyToRefCon BIT,
	@CopyToRefConText NVARCHAR(500),
	@CopyToOther BIT,
	@CopyToOtherText NVARCHAR(500),
	@Salutation NVARCHAR(200),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIFollowUp WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_UpperGIFollowUp (
			ProcedureId,
			NoFurtherTestsRequired,
			AwaitingPathologyResults,
			FurtherProcedure,
			FurtherProcedureDueCount,
			FurtherProcedureDueType,
			FurtherProcedureText,
			ReturnTo,
			NoFurtherFollowUp,
			ReviewLocation,
			ReviewDueCount,
			ReviewDueType,
			ReviewText,
			Comments,
			PP_PFRFollowUp,
			CopyToPatient,
			CopyToPatientText,
			PatientNotCopiedReason,
			CopyToRefCon,
			CopyToRefConText,
			CopyToOther,
			CopyToOtherText,
			Salutation,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@ProcedureId,
			@NoFurtherTestsRequired,
			@AwaitingPathologyResults,
			@FurtherProcedure,
			@FurtherProcedureDueCount,
			@FurtherProcedureDueType,
			@FurtherProcedureText,
			@ReturnTo,
			@NoFurtherFollowUp,
			@ReviewLocation,
			@ReviewDueCount,
			@ReviewDueType,
			@ReviewText,
			@Comments,
			@PP_PFRFollowUp,
			@CopyToPatient,
			@CopyToPatientText,
			@PatientNotCopiedReason,
			@CopyToRefCon,
			@CopyToRefConText,
			@CopyToOther,
			@CopyToOtherText,
			@Salutation,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'Follow Up',
			1)
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIFollowUp
		SET 
			NoFurtherTestsRequired = @NoFurtherTestsRequired,
			AwaitingPathologyResults = @AwaitingPathologyResults,
			FurtherProcedure = @FurtherProcedure,
			FurtherProcedureDueCount = @FurtherProcedureDueCount,
			FurtherProcedureDueType = @FurtherProcedureDueType,
			FurtherProcedureText = @FurtherProcedureText,
			ReturnTo = @ReturnTo,
			NoFurtherFollowUp = @NoFurtherFollowUp,
			ReviewLocation = @ReviewLocation,
			ReviewDueCount = @ReviewDueCount,
			ReviewDueType = @ReviewDueType,
			ReviewText = @ReviewText,
			Comments = @Comments,
			PP_PFRFollowUp = @PP_PFRFollowUp,
			CopyToPatient = @CopyToPatient,
			CopyToPatientText = @CopyToPatientText,
			PatientNotCopiedReason = @PatientNotCopiedReason,
			CopyToRefCon = @CopyToRefCon,
			CopyToRefConText = @CopyToRefConText,
			CopyToOther = @CopyToOther,
			CopyToOtherText = @CopyToOtherText,
			Salutation = @Salutation,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			ProcedureId = @ProcedureId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------249 Create Proc ogd_followup_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_followup_summary_update','S';
GO

CREATE PROCEDURE [dbo].[ogd_followup_summary_update]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@NoFurtherTestsRequired BIT,
		@AwaitingPathologyResults BIT,
		@FurtherProcedure BIT,
		@FurtherProcedureDueCount INT,
		@FurtherProcedureDueType TINYINT,
		@FurtherProcedureText NVARCHAR(500),
		@ReturnTo SMALLINT,
		@NoFurtherFollowUp BIT,
		@ReviewLocation SMALLINT,
		@ReviewDueCount INT,
		@ReviewDueType TINYINT,
		@ReviewText NVARCHAR(500),
		@Comments NVARCHAR(500),
		@PP_PFRFollowUp NVARCHAR(500),
		@CopyToPatient BIT,
		@CopyToPatientText NVARCHAR(500),
		@PatientNotCopiedReason NVARCHAR(500),
		@CopyToRefCon BIT,
		@CopyToRefConText NVARCHAR(500),
		@CopyToOther BIT,
		@CopyToOtherText NVARCHAR(500),
		@Salutation NVARCHAR(200)

	SELECT 
		@NoFurtherTestsRequired=NoFurtherTestsRequired,
		@AwaitingPathologyResults=AwaitingPathologyResults,
		@FurtherProcedure=FurtherProcedure,
		@FurtherProcedureDueCount=FurtherProcedureDueCount,
		@FurtherProcedureDueType=FurtherProcedureDueType,
		@FurtherProcedureText=FurtherProcedureText,
		@ReturnTo=ReturnTo,
		@NoFurtherFollowUp=NoFurtherFollowUp,
		@ReviewLocation=ReviewLocation,
		@ReviewDueCount=ReviewDueCount,
		@ReviewDueType=ReviewDueType,
		@ReviewText=ReviewText,
		@Comments=Comments,
		@PP_PFRFollowUp=PP_PFRFollowUp,
		@CopyToPatient=CopyToPatient,
		@CopyToPatientText=CopyToPatientText,
		@PatientNotCopiedReason=PatientNotCopiedReason,
		@CopyToRefCon=CopyToRefCon,
		@CopyToRefConText=CopyToRefConText,
		@CopyToOther=CopyToOther,
		@CopyToOtherText=CopyToOtherText,
		@Salutation=Salutation
	FROM
		ERS_UpperGIFollowUp
	WHERE
		ProcedureId = @ProcedureId

	SET @summary = ''

	IF @NoFurtherTestsRequired = 1
		SET @summary = 'No further tests required'
	
	IF @ReviewText <> ''
		IF @summary = '' SET @summary = @ReviewText
		ELSE SET @summary = @summary + '. <br/>' + @ReviewText
	ELSE
	BEGIN
		DECLARE @tmpFollowUp VARCHAR(100) = ''
		IF @ReturnTo > 0
			SET @tmpFollowUp = ISNULL((SELECT 'Return to the ' + [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Return or referred to' AND [ListItemNo] = @ReturnTo),'') 
	
		IF @NoFurtherFollowUp = 1 
		BEGIN
			IF @tmpFollowUp <> '' 
				SET @tmpFollowUp = @tmpFollowUp + ' and no further follow up'
			ELSE
				SET @tmpFollowUp = @tmpFollowUp + 'No further follow up'
		END 

		IF @summary = '' SET @summary = @tmpFollowUp
		ELSE SET @summary = @summary + '. ' + @tmpFollowUp
	END 
		
	IF @AwaitingPathologyResults = 1
		IF @summary = '' SET @summary = 'Awaiting pathology results'
		ELSE SET @summary = @summary + '. Awaiting pathology results'
	
	
	IF @FurtherProcedureText <> ''
		IF @summary = '' SET @summary = 'Further Procedure(s): ' + @FurtherProcedureText
		ELSE SET @summary = @summary + '. <br/>Further Procedure(s): ' + @FurtherProcedureText
	
	
	--IF @Comments <> ''
		--IF @summary = '' SET @summary = 'Advice/comments: ' + @Comments
		--ELSE SET @summary = @summary + '. <br/>Advice/comments: ' + @Comments

	--PRINT @summary

	--Update the summary column in diagnoses table and procedures table
	UPDATE ERS_UpperGIFollowUp
	SET Summary = @summary 
	WHERE ProcedureId = @ProcedureId
	
	UPDATE ERS_ProceduresReporting
	SET PP_Followup = @summary, PP_AdviceAndComments = @Comments
	WHERE ProcedureId = @ProcedureId

	IF @CopyToRefCon IS NOT NULL AND @CopyToRefCon=1    
		UPDATE ERS_ProceduresReporting 
		SET PP_CCRefCons= LTRIM(RTRIM((SELECT ISNULL(Title,'') + ' ' + ISNULL(Forename,'') 
										FROM ERS_Consultant 
										WHERE ConsultantID= @CopyToRefConText))) 
		WHERE ProcedureId = @ProcedureId
	ELSE 
		UPDATE ERS_ProceduresReporting SET PP_CCRefCons = NULL
		WHERE ProcedureId = @ProcedureId


	IF @CopyToPatient IS NOT NULL AND @CopyToPatient=1     
		UPDATE ERS_ProceduresReporting SET PP_CCPatient= @CopyToPatientText   
		WHERE ProcedureId = @ProcedureId
	ELSE 
		UPDATE ERS_ProceduresReporting SET PP_CCPatient= NULL
		WHERE ProcedureId = @ProcedureId

	
	IF @CopyToOther IS NOT NULL AND @CopyToOther=1             
		UPDATE ERS_ProceduresReporting 
		SET PP_CCOther = @CopyToOtherText     
		WHERE ProcedureId = @ProcedureId
	ELSE 
		UPDATE ERS_ProceduresReporting 
		SET PP_CCOther = NULL 
		WHERE ProcedureId = @ProcedureId

		
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------341 Create Proc ogd_premedication_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_premedication_summary_update','S';
GO

CREATE PROCEDURE [dbo].[ogd_premedication_summary_update]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@DrugName NVARCHAR(50),
		@Dose NVARCHAR(15),
		@Units NVARCHAR(12),
		@DeliveryMethod NVARCHAR(25),
		@ProcedureTypeId INT

	SET @Summary = ''
	

	DECLARE cm CURSOR READ_ONLY FOR
	SELECT DrugName, CAST(Dose AS FLOAT), Units, DeliveryMethod  FROM ERS_UpperGIPremedication WHERE ProcedureId = @ProcedureId
	OPEN cm
	FETCH NEXT FROM cm INTO @DrugName, @Dose, @Units, @DeliveryMethod
	WHILE @@fetch_status = 0 
	BEGIN	
		--SET @summary = @summary + @DrugName + ' (' + @DeliveryMethod + ') ' + @Dose + ' ' + @Units + '<br />'
		IF @DrugName IN ('NoSedation')
		BEGIN
			SET @summary = @summary + 'No sedation/premedication'
		END
		ELSE IF @DrugName IN ('GeneralAnaesthetic')
		BEGIN
			SET @summary = @summary + 'General anaesthetic'
		END
		ELSE
		BEGIN
			SET @summary = @summary + @DrugName 
			IF @DeliveryMethod IS NOT NULL SET @summary = @summary + ' (' + @DeliveryMethod + ')'
			IF ISNULL(@Dose,0) > CONVERT(DECIMAL,0) AND @Units IS NOT NULL  SET @summary= @summary + ' '+ @Dose + ' '+ @Units	 
		END
		IF @summary<>''  SET @summary= @summary + '<br />'	
		FETCH NEXT FROM cm INTO @DrugName, @Dose, @Units, @DeliveryMethod
	END
	DEALLOCATE cm

	--PRINT @summary
	IF EXISTS(SELECT 1 FROM ERS_UpperGIPremedication_Summary WHERE ProcedureId = @ProcedureId)
	BEGIN
		DELETE FROM ERS_UpperGIPremedication_Summary WHERE ProcedureId = @ProcedureId
	END

	IF @summary <> ''
	BEGIN
		INSERT INTO ERS_UpperGIPremedication_Summary (ProcedureId, Summary)
		VALUES (@ProcedureId, @summary)
	END

	SELECT @ProcedureTypeId = ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureId

	IF @ProcedureTypeId = 10 --Bronchoscopy
	BEGIN
		SELECT @summary = @summary + ISNULL(summary, '')
		FROM ERS_BRT_BronchoDrugs 
		WHERE ProcedureId = @ProcedureId
		
		SET @summary = REPLACE(@summary, '<br /><br />', '<br />')
	END

	UPDATE ERS_ProceduresReporting
	SET PP_Premed = @summary
	WHERE ProcedureId = @ProcedureId

GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc broncho_drugs_select ---------------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'broncho_drugs_select','S';
GO

CREATE PROCEDURE [dbo].[broncho_drugs_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

SELECT
	EffectOfSedation,
	LignocaineSpray,
	LignocaineGel,
	LignocaineViaScope1pc,
	LignocaineViaScope2pc,
	LignocaineViaScope4pc,
	LignocaineNebuliser2pc,
	LignocaineNebuliser4pc,
	LignocaineTranscricoid2pc,
	LignocaineTranscricoid4pc,
	LignocaineBronchial1pc,
	LignocaineBronchial2pc,
	SupplyOxygen,
	SupplyOxygenPercentage,
	Nasal,
	SpO2Base,
	SpO2Min
FROM
	ERS_BRT_BronchoDrugs
WHERE 
	ProcedureId = @ProcedureId

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc broncho_drugs_save -----------------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'broncho_drugs_save','S';
GO

CREATE PROCEDURE [dbo].[broncho_drugs_save]
(
	@ProcedureId INT,
	@EffectOfSedation INT,
	@LignocaineSpray BIT,
	@LignocaineGel BIT,
	@LignocaineViaScope1pc DECIMAL(8,2),
	@LignocaineViaScope2pc DECIMAL(8,2),
	@LignocaineViaScope4pc DECIMAL(8,2),
	@LignocaineNebuliser2pc DECIMAL(8,2),
	@LignocaineNebuliser4pc DECIMAL(8,2),
	@LignocaineTranscricoid2pc DECIMAL(8,2),
	@LignocaineTranscricoid4pc DECIMAL(8,2),
	@LignocaineBronchial1pc DECIMAL(8,2),
	@LignocaineBronchial2pc DECIMAL(8,2),
	@SupplyOxygen BIT,
	@SupplyOxygenPercentage DECIMAL(8,2),
	@Nasal DECIMAL(8,2),
	@SpO2Base DECIMAL(8,2),
	@SpO2Min DECIMAL(8,2),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM ERS_BRT_BronchoDrugs WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_BRT_BronchoDrugs (
			ProcedureId,
			EffectOfSedation,
			LignocaineSpray,
			LignocaineGel,
			LignocaineViaScope1pc,
			LignocaineViaScope2pc,
			LignocaineViaScope4pc,
			LignocaineNebuliser2pc,
			LignocaineNebuliser4pc,
			LignocaineTranscricoid2pc,
			LignocaineTranscricoid4pc,
			LignocaineBronchial1pc,
			LignocaineBronchial2pc,
			SupplyOxygen,
			SupplyOxygenPercentage,
			Nasal,
			SpO2Base,
			SpO2Min,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@ProcedureId,
			@EffectOfSedation,
			@LignocaineSpray,
			@LignocaineGel,
			@LignocaineViaScope1pc,
			@LignocaineViaScope2pc,
			@LignocaineViaScope4pc,
			@LignocaineNebuliser2pc,
			@LignocaineNebuliser4pc,
			@LignocaineTranscricoid2pc,
			@LignocaineTranscricoid4pc,
			@LignocaineBronchial1pc,
			@LignocaineBronchial2pc,
			@SupplyOxygen,
			@SupplyOxygenPercentage,
			@Nasal,
			@SpO2Base,
			@SpO2Min,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'Drugs',
			1)
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_BRT_BronchoDrugs
		SET 
			EffectOfSedation = @EffectOfSedation,
			LignocaineSpray = @LignocaineSpray,
			LignocaineGel = @LignocaineGel,
			LignocaineViaScope1pc = @LignocaineViaScope1pc,
			LignocaineViaScope2pc = @LignocaineViaScope2pc,
			LignocaineViaScope4pc = @LignocaineViaScope4pc,
			LignocaineNebuliser2pc = @LignocaineNebuliser2pc,
			LignocaineNebuliser4pc = @LignocaineNebuliser4pc,
			LignocaineTranscricoid2pc = @LignocaineTranscricoid2pc,
			LignocaineTranscricoid4pc = @LignocaineTranscricoid4pc,
			LignocaineBronchial1pc = @LignocaineBronchial1pc,
			LignocaineBronchial2pc = @LignocaineBronchial2pc,
			SupplyOxygen = @SupplyOxygen,
			SupplyOxygenPercentage = @SupplyOxygenPercentage,
			Nasal = @Nasal,
			SpO2Base = @SpO2Base,
			SpO2Min = @SpO2Min,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			ProcedureId = @ProcedureId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc broncho_drugs_summary_update -------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'broncho_drugs_summary_update','S';
GO

CREATE PROCEDURE [dbo].[broncho_drugs_summary_update]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	--FLOAT removes trailing zeroes
	DECLARE
		@summary VARCHAR(4000),
		@EffectOfSedation INT,
		@LignocaineSpray BIT,
		@LignocaineGel BIT,
		@LignocaineViaScope1pc FLOAT,
		@LignocaineViaScope2pc FLOAT,
		@LignocaineViaScope4pc FLOAT,
		@LignocaineNebuliser2pc FLOAT,
		@LignocaineNebuliser4pc FLOAT,
		@LignocaineTranscricoid2pc FLOAT,
		@LignocaineTranscricoid4pc FLOAT,
		@LignocaineBronchial1pc FLOAT,
		@LignocaineBronchial2pc FLOAT,
		@SupplyOxygen BIT,
		@SupplyOxygenPercentage FLOAT,
		@Nasal FLOAT,
		@SpO2Base FLOAT,
		@SpO2Min FLOAT

	DECLARE @tempsummary VARCHAR(300)
	DECLARE @summaryitems TABLE (summary VARCHAR (300))

	SET @Summary  =  ''
	SET @tempsummary = ''

	SELECT
		@EffectOfSedation = EffectOfSedation,
		@LignocaineSpray = LignocaineSpray,
		@LignocaineGel = LignocaineGel,
		@LignocaineViaScope1pc = LignocaineViaScope1pc,
		@LignocaineViaScope2pc = LignocaineViaScope2pc,
		@LignocaineViaScope4pc = LignocaineViaScope4pc,
		@LignocaineNebuliser2pc = LignocaineNebuliser2pc,
		@LignocaineNebuliser4pc = LignocaineNebuliser4pc,
		@LignocaineTranscricoid2pc = LignocaineTranscricoid2pc,
		@LignocaineTranscricoid4pc = LignocaineTranscricoid4pc,
		@LignocaineBronchial1pc = LignocaineBronchial1pc,
		@LignocaineBronchial2pc = LignocaineBronchial2pc,
		@SupplyOxygen = SupplyOxygen,
		@SupplyOxygenPercentage = SupplyOxygenPercentage,
		@Nasal = Nasal,
		@SpO2Base = SpO2Base,
		@SpO2Min = SpO2Min
	FROM 
		ERS_BRT_BronchoDrugs
	WHERE
		@ProcedureId = ProcedureId

	IF @LignocaineSpray = 1
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine spray was used')

	IF @LignocaineGel = 1
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine gel was used')

	IF @LignocaineNebuliser2pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 2% by nebuliser ' + CONVERT(VARCHAR, @LignocaineNebuliser2pc) + ' mls')
	END

	IF @LignocaineNebuliser4pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 4% by nebuliser ' + CONVERT(VARCHAR, @LignocaineNebuliser4pc) + ' mls')
	END

	IF @LignocaineViaScope1pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 1% to larynx via scope ' + CONVERT(VARCHAR, @LignocaineViaScope1pc) + ' mls')
	END

	IF @LignocaineViaScope2pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 2% to larynx via scope ' + CONVERT(VARCHAR, @LignocaineViaScope2pc) + ' mls')
	END

	IF @LignocaineViaScope4pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 4% to larynx via scope ' + CONVERT(VARCHAR, @LignocaineViaScope4pc) + ' mls')
	END

	IF @LignocaineTranscricoid2pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 2% given transcricoid ' + CONVERT(VARCHAR, @LignocaineTranscricoid2pc) + ' mls')
	END

	IF @LignocaineTranscricoid4pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 4% given transcricoid ' + CONVERT(VARCHAR, @LignocaineTranscricoid4pc) + ' mls')
	END

	IF @LignocaineBronchial1pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 1% to bronchial tree ' + CONVERT(VARCHAR, @LignocaineBronchial1pc) + ' mls')
	END

	IF @LignocaineBronchial2pc > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Lido\Lignocaine 2% to bronchial tree ' + CONVERT(VARCHAR, @LignocaineBronchial2pc) + ' mls')
	END

	IF @SupplyOxygen = 1
	BEGIN
		SET @tempsummary = 'Oxygen mask'
		IF @SupplyOxygenPercentage > 0
			SET @tempsummary = @tempsummary + ' ' + CONVERT(VARCHAR, @SupplyOxygenPercentage) + '%'

		INSERT INTO @summaryitems 
		VALUES (@tempsummary)
	END

	IF @Nasal > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Nasal cannulae ' + CONVERT(VARCHAR, @Nasal) + ' L min-1')
	END

	IF @SpO2Base > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Saturation (SPO2) Pre-procedure baseline ' + CONVERT(VARCHAR, @SpO2Base) + ' %')
	END

	IF @SpO2Min > 0
	BEGIN
		INSERT INTO @summaryitems 
		VALUES ('Saturation (SPO2) Minimum during procedure ' + CONVERT(VARCHAR, @SpO2Min) + ' %')
	END

	SELECT @summary = COALESCE(@summary + '<br /> ', '') + summary
	FROM @summaryitems

	IF @summary <> ''
	BEGIN
		UPDATE ERS_BRT_BronchoDrugs
		SET Summary = @summary
		WHERE ProcedureId = @ProcedureId
	END
GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_BronchoDrugs_Insert	-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_BronchoDrugs_Insert', 'TR';
GO

CREATE TRIGGER TR_BronchoDrugs_Insert
ON ERS_BRT_BronchoDrugs
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC broncho_drugs_summary_update @procedure_id
	EXEC ogd_premedication_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc broncho_coding_save -----------------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'broncho_coding_save','S';
GO

CREATE PROCEDURE [dbo].[broncho_coding_save]
(
	@ProcedureId INT,
	@CodeId INT,
	@FibreOpticCodeValue BIT,
	@RigidCodeValue BIT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	IF NOT EXISTS (SELECT 1 FROM ERS_BRT_BronchoCoding WHERE ProcedureId = @ProcedureId AND CodeId = @CodeId) 
	BEGIN 
		INSERT INTO ERS_BRT_BronchoCoding (
			ProcedureId, 
			CodeId, 
			FibreOpticCodeValue, 
			RigidCodeValue,
			WhoCreatedId,
			WhenCreated) 
        VALUES (
			@ProcedureId, 
			@CodeId, 
			@FibreOpticCodeValue, 
			@RigidCodeValue,
			@LoggedInUserId,
			GETDATE()) 

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'Coding',
			1)
	END 

    ELSE 
    BEGIN
		UPDATE 
			ERS_BRT_BronchoCoding 
        SET 
			FibreOpticCodeValue = @FibreOpticCodeValue, 
			RigidCodeValue = @RigidCodeValue,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
        WHERE 
			ProcedureId = @ProcedureId 
			AND CodeId = @CodeId 
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO



--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc broncho_coding_summary_update ------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'broncho_coding_summary_update','S';
GO

CREATE PROCEDURE [dbo].[broncho_coding_summary_update]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	DECLARE @summary VARCHAR(4000)

	SELECT 
		Name, 
		Stuff(
			Coalesce(', ' + CASE WHEN ISNULL(FibreOpticCodeValue, 0) = 1 THEN l.FibreOpticCode ELSE NULL END, '') 
			+ Coalesce(', ' + CASE WHEN ISNULL(RigidCodeValue, 0) = 1 THEN l.RigidCode ELSE NULL END, '') 
			, 1, 1, ''
		) AS Codes
	INTO 
		#temp
    FROM 
		ERS_BRT_CodeList l  
    LEFT JOIN 
		ERS_BRT_BronchoCoding c ON l.CodeId = c.CodeId AND ProcedureId = @ProcedureId
	WHERE 
		ISNULL(c.FibreOpticCodeValue, 0) = 1 
		OR ISNULL(c.RigidCodeValue, 0) = 1


	SELECT @summary = COALESCE(@summary + ',', '') + Codes
	FROM #temp
	WHERE Codes IS NOT NULL

	--IF EXISTS(SELECT 1 FROM ERS_BRT_BronchoCodingSummary WHERE ProcedureId = @ProcedureId)
	--BEGIN
	--	DELETE FROM ERS_BRT_BronchoCodingSummary WHERE ProcedureId = @ProcedureId
	--END

	--IF @summary <> ''
	--BEGIN
	--	INSERT INTO ERS_BRT_BronchoCodingSummary (ProcedureId, Summary)
	--	VALUES (@ProcedureId, @summary)
	--END

	UPDATE ERS_ProceduresReporting
	SET PP_Coding = @summary
	WHERE ProcedureId = @ProcedureId

	DROP TABLE #temp

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_BronchoCoding_Insert -------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'TR_BronchoCoding_Insert', 'TR';
GO

CREATE TRIGGER TR_BronchoCoding_Insert
ON ERS_BRT_BronchoCoding
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC broncho_coding_summary_update @procedure_id
GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc broncho_pathology_save -----------------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'broncho_pathology_save','S';
GO

CREATE PROCEDURE [dbo].[broncho_pathology_save]
(
	@ProcedureId INT,
	@AsthmaThermoplasty BIT,
	@EmphysemaLungVolRed BIT,
	@Haemoptysis BIT,
	@HilarMediaLymphadenopathy BIT,
	@Infection BIT,
	@InfectionImmunoSuppressed BIT,
	@LungLobarCollapse BIT,
	@RadiologicalAbno BIT,
	@SuspectedLCa BIT,
	@SuspectedSarcoidosis BIT,
	@SuspectedTB BIT,
	@ClinicalDetails VARCHAR(1000),
	@AtrialFibrillation BIT,
	@ChronicKidneyDisease BIT,
	@COPD BIT,
	@EnlargedLymphNodes BIT,
	@EssentialHyperTension BIT,
	@HeartFailure BIT,
	@InterstitialLungDisease BIT,
	@IschaemicHeartDisease BIT,
	@LungCancer BIT,
	@Obesity BIT,
	@PleuralEffusion BIT,
	@Pneumonia BIT,
	@RheumatoidArthritis BIT,
	@SecondaryCancer BIT,
	@Stroke BIT,
	@Type2Diabetes BIT,
	@OtherComorb VARCHAR(1000),
	@StagingInvestigations BIT,
	@ClinicalGrounds BIT,
	@ImagingOfThorax BIT,
	@MediastinalSampling BIT,
	@Metastases BIT,
	@PleuralHistology BIT,
	@Bronchoscopy BIT,
	@Stage BIT,
	@StageT INT,
	@StageN INT,
	@StageM INT,
	@StageType INT,
	@StageDate DATETIME,
	@PerformanceStatus BIT,
	@PerformanceStatusType INT,
	@DateBronchRequested DATETIME,
	@DateOfReferral DATETIME,
	@LCaSuspectedBySpecialist BIT,
	@CTScanAvailable BIT,
	@DateOfScan DATETIME,
	@FEV1Result DECIMAL(8,2),
	@FEV1Percentage DECIMAL(8,2),
	@FVCResult DECIMAL(8,2),
	@FVCPercentage DECIMAL(8,2),
	@WHOPerformanceStatus INT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM ERS_BRT_BronchoPathology WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_BRT_BronchoPathology (
			ProcedureId,
			AsthmaThermoplasty,
			EmphysemaLungVolRed,
			Haemoptysis,
			HilarMediaLymphadenopathy,
			Infection,
			InfectionImmunoSuppressed,
			LungLobarCollapse,
			RadiologicalAbno,
			SuspectedLCa,
			SuspectedSarcoidosis,
			SuspectedTB,
			ClinicalDetails,
			AtrialFibrillation,
			ChronicKidneyDisease,
			COPD,
			EnlargedLymphNodes,
			EssentialHyperTension,
			HeartFailure,
			InterstitialLungDisease,
			IschaemicHeartDisease,
			LungCancer,
			Obesity,
			PleuralEffusion,
			Pneumonia,
			RheumatoidArthritis,
			SecondaryCancer,
			Stroke,
			Type2Diabetes,
			OtherComorb,
			StagingInvestigations,
			ClinicalGrounds,
			ImagingOfThorax,
			MediastinalSampling,
			Metastases,
			PleuralHistology,
			Bronchoscopy,
			Stage,
			StageT,
			StageN,
			StageM,
			StageType,
			StageDate,
			PerformanceStatus,
			PerformanceStatusType,
			DateBronchRequested,
			DateOfReferral,
			LCaSuspectedBySpecialist,
			CTScanAvailable,
			DateOfScan,
			FEV1Result,
			FEV1Percentage,
			FVCResult,
			FVCPercentage,
			WHOPerformanceStatus,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@ProcedureId,
			@AsthmaThermoplasty,
			@EmphysemaLungVolRed,
			@Haemoptysis,
			@HilarMediaLymphadenopathy,
			@Infection,
			@InfectionImmunoSuppressed,
			@LungLobarCollapse,
			@RadiologicalAbno,
			@SuspectedLCa,
			@SuspectedSarcoidosis,
			@SuspectedTB,
			@ClinicalDetails,
			@AtrialFibrillation,
			@ChronicKidneyDisease,
			@COPD,
			@EnlargedLymphNodes,
			@EssentialHyperTension,
			@HeartFailure,
			@InterstitialLungDisease,
			@IschaemicHeartDisease,
			@LungCancer,
			@Obesity,
			@PleuralEffusion,
			@Pneumonia,
			@RheumatoidArthritis,
			@SecondaryCancer,
			@Stroke,
			@Type2Diabetes,
			@OtherComorb,
			@StagingInvestigations,
			@ClinicalGrounds,
			@ImagingOfThorax,
			@MediastinalSampling,
			@Metastases,
			@PleuralHistology,
			@Bronchoscopy,
			@Stage,
			@StageT,
			@StageN,
			@StageM,
			@StageType,
			@StageDate,
			@PerformanceStatus,
			@PerformanceStatusType,
			@DateBronchRequested,
			@DateOfReferral,
			@LCaSuspectedBySpecialist,
			@CTScanAvailable,
			@DateOfScan,
			@FEV1Result,
			@FEV1Percentage,
			@FVCResult,
			@FVCPercentage,
			@WHOPerformanceStatus,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'Pathology',
			1)
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_BRT_BronchoPathology
		SET 
			AsthmaThermoplasty = @AsthmaThermoplasty,
			EmphysemaLungVolRed = @EmphysemaLungVolRed,
			Haemoptysis = @Haemoptysis,
			HilarMediaLymphadenopathy = @HilarMediaLymphadenopathy,
			Infection = @Infection,
			InfectionImmunoSuppressed = @InfectionImmunoSuppressed,
			LungLobarCollapse = @LungLobarCollapse,
			RadiologicalAbno = @RadiologicalAbno,
			SuspectedLCa = @SuspectedLCa,
			SuspectedSarcoidosis = @SuspectedSarcoidosis,
			SuspectedTB = @SuspectedTB,
			ClinicalDetails = @ClinicalDetails,
			AtrialFibrillation = @AtrialFibrillation,
			ChronicKidneyDisease = @ChronicKidneyDisease,
			COPD = @COPD,
			EnlargedLymphNodes = @EnlargedLymphNodes,
			EssentialHyperTension = @EssentialHyperTension,
			HeartFailure = @HeartFailure,
			InterstitialLungDisease = @InterstitialLungDisease,
			IschaemicHeartDisease = @IschaemicHeartDisease,
			LungCancer = @LungCancer,
			Obesity = @Obesity,
			PleuralEffusion = @PleuralEffusion,
			Pneumonia = @Pneumonia,
			RheumatoidArthritis = @RheumatoidArthritis,
			SecondaryCancer = @SecondaryCancer,
			Stroke = @Stroke,
			Type2Diabetes = @Type2Diabetes,
			OtherComorb = @OtherComorb,
			StagingInvestigations = @StagingInvestigations,
			ClinicalGrounds = @ClinicalGrounds,
			ImagingOfThorax = @ImagingOfThorax,
			MediastinalSampling = @MediastinalSampling,
			Metastases = @Metastases,
			PleuralHistology = @PleuralHistology,
			Bronchoscopy = @Bronchoscopy,
			Stage = @Stage,
			StageT = @StageT,
			StageN = @StageN,
			StageM = @StageM,
			StageType = @StageType,
			StageDate = @StageDate,
			PerformanceStatus = @PerformanceStatus,
			PerformanceStatusType = @PerformanceStatusType,
			DateBronchRequested = @DateBronchRequested,
			DateOfReferral = @DateOfReferral,
			LCaSuspectedBySpecialist = @LCaSuspectedBySpecialist,
			CTScanAvailable = @CTScanAvailable,
			DateOfScan = @DateOfScan,
			FEV1Result = @FEV1Result,
			FEV1Percentage = @FEV1Percentage,
			FVCResult = @FVCResult,
			FVCPercentage = @FVCPercentage,
			WHOPerformanceStatus = @WHOPerformanceStatus,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			ProcedureId = @ProcedureId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc broncho_pathology_summary_update ------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'broncho_pathology_summary_update', 'S';
GO

CREATE PROCEDURE [dbo].[broncho_pathology_summary_update]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	DECLARE 
		@summary VARCHAR(8000),
		@stagingsummary VARCHAR(2000),
		@tmpsummary VARCHAR(2000),
		@AsthmaThermoplasty BIT,
		@EmphysemaLungVolRed BIT,
		@Haemoptysis BIT,
		@HilarMediaLymphadenopathy BIT,
		@Infection BIT,
		@InfectionImmunoSuppressed BIT,
		@LungLobarCollapse BIT,
		@RadiologicalAbno BIT,
		@SuspectedLCa BIT,
		@SuspectedSarcoidosis BIT,
		@SuspectedTB BIT,
		@ClinicalDetails VARCHAR(1000),
		@AtrialFibrillation BIT,
		@ChronicKidneyDisease BIT,
		@COPD BIT,
		@EnlargedLymphNodes BIT,
		@EssentialHyperTension BIT,
		@HeartFailure BIT,
		@InterstitialLungDisease BIT,
		@IschaemicHeartDisease BIT,
		@LungCancer BIT,
		@Obesity BIT,
		@PleuralEffusion BIT,
		@Pneumonia BIT,
		@RheumatoidArthritis BIT,
		@SecondaryCancer BIT,
		@Stroke BIT,
		@Type2Diabetes BIT,
		@OtherComorb VARCHAR(1000),
		@StagingInvestigations BIT,
		@ClinicalGrounds BIT,
		@ImagingOfThorax BIT,
		@MediastinalSampling BIT,
		@Metastases BIT,
		@PleuralHistology BIT,
		@Bronchoscopy BIT,
		@Stage BIT,
		@StageT VARCHAR(20),
		@StageN VARCHAR(20),
		@StageM VARCHAR(20),
		@StageType VARCHAR(20),
		@StageDate DATETIME,
		@PerformanceStatus BIT,
		@PerformanceStatusType INT,
		@DateBronchRequested DATETIME,
		@DateOfReferral DATETIME,
		@LCaSuspectedBySpecialist BIT,
		@CTScanAvailable BIT,
		@DateOfScan DATETIME,
		@FEV1Result FLOAT,
		@FEV1Percentage FLOAT,
		@FVCResult FLOAT,
		@FVCPercentage FLOAT,
		@WHOPerformanceStatus INT

	DECLARE @tblsummary TABLE (summary VARCHAR(500))

	SELECT 
		@AsthmaThermoplasty=AsthmaThermoplasty,
		@EmphysemaLungVolRed=EmphysemaLungVolRed,
		@Haemoptysis=Haemoptysis,
		@HilarMediaLymphadenopathy=HilarMediaLymphadenopathy,
		@Infection=Infection,
		@InfectionImmunoSuppressed=InfectionImmunoSuppressed,
		@LungLobarCollapse=LungLobarCollapse,
		@RadiologicalAbno=RadiologicalAbno,
		@SuspectedLCa=SuspectedLCa,
		@SuspectedSarcoidosis=SuspectedSarcoidosis,
		@SuspectedTB=SuspectedTB,
		@ClinicalDetails=ClinicalDetails,
		@AtrialFibrillation=AtrialFibrillation,
		@ChronicKidneyDisease=ChronicKidneyDisease,
		@COPD=COPD,
		@EnlargedLymphNodes=EnlargedLymphNodes,
		@EssentialHyperTension=EssentialHyperTension,
		@HeartFailure=HeartFailure,
		@InterstitialLungDisease=InterstitialLungDisease,
		@IschaemicHeartDisease=IschaemicHeartDisease,
		@LungCancer=LungCancer,
		@Obesity=Obesity,
		@PleuralEffusion=PleuralEffusion,
		@Pneumonia=Pneumonia,
		@RheumatoidArthritis=RheumatoidArthritis,
		@SecondaryCancer=SecondaryCancer,
		@Stroke=Stroke,
		@Type2Diabetes=Type2Diabetes,
		@OtherComorb=OtherComorb,
		@StagingInvestigations=StagingInvestigations,
		@ClinicalGrounds=ClinicalGrounds,
		@ImagingOfThorax=ImagingOfThorax,
		@MediastinalSampling=MediastinalSampling,
		@Metastases=Metastases,
		@PleuralHistology=PleuralHistology,
		@Bronchoscopy=Bronchoscopy,
		@Stage=Stage,
		@StageT=stageTNames.ListItemText,
		@StageN=stageNNames.ListItemText,
		@StageM=stageMNames.ListItemText,
		@StageType=stageTypes.ListItemText,
		@StageDate=StageDate,
		@PerformanceStatus=PerformanceStatus,
		@PerformanceStatusType=PerformanceStatusType,
		@DateBronchRequested=DateBronchRequested,
		@DateOfReferral=DateOfReferral,
		@LCaSuspectedBySpecialist=LCaSuspectedBySpecialist,
		@CTScanAvailable=CTScanAvailable,
		@DateOfScan=DateOfScan,
		@FEV1Result=FEV1Result,
		@FEV1Percentage=FEV1Percentage,
		@FVCResult=FVCResult,
		@FVCPercentage=FVCPercentage,
		@WHOPerformanceStatus=WHOPerformanceStatus
	FROM 
		ERS_BRT_BronchoPathology p
	LEFT JOIN
		ERS_Lists stageTNames ON p.StageT = stageTNames.ListItemNo AND stageTNames.ListDescription = 'BronchoStageT'
	LEFT JOIN
		ERS_Lists stageNNames ON p.StageN = stageNNames.ListItemNo AND stageNNames.ListDescription = 'BronchoStageN'
	LEFT JOIN
		ERS_Lists stageMNames ON p.StageM = stageMNames.ListItemNo AND stageMNames.ListDescription = 'BronchoStageM'
	LEFT JOIN
		ERS_Lists stageTypes ON p.StageType = stageTypes.ListItemNo AND stageTypes.ListDescription = 'BronchoStageType'
	WHERE
		ProcedureId = @ProcedureId

	SET @summary = ''
	

	-------------------------
	------ INDICATIONS ------ 
	-------------------------
	
	SET @tmpsummary = NULL

	IF @AsthmaThermoplasty = 1 INSERT INTO @tblsummary VALUES ('Asthma (thermoplasty)')
	IF @EmphysemaLungVolRed = 1 INSERT INTO @tblsummary VALUES ('Emphysema (lung volume reduction)')
	IF @Haemoptysis = 1 INSERT INTO @tblsummary VALUES ('Haemoptysis')
	IF @HilarMediaLymphadenopathy = 1 INSERT INTO @tblsummary VALUES ('Hilar/Mediastinal Lymphadenopathy')

	IF @Infection = 1 
	BEGIN
		SET @tmpsummary = 'Infection'
		IF @InfectionImmunoSuppressed = 1 SET @tmpsummary = 'Infection (immunosuppressed)'
		INSERT INTO @tblsummary VALUES (@tmpsummary)
	END

	IF @LungLobarCollapse = 1 INSERT INTO @tblsummary VALUES ('Lung/lobar collapse')
	IF @RadiologicalAbno = 1 INSERT INTO @tblsummary VALUES ('Radiological abnormality')
	IF @SuspectedLCa = 1 INSERT INTO @tblsummary VALUES ('Suspected lung cancer') 
	IF @SuspectedSarcoidosis = 1 INSERT INTO @tblsummary VALUES ('Suspected sarcoidosis')
	IF @SuspectedTB = 1 INSERT INTO @tblsummary VALUES ('Suspected TB')
	IF @ClinicalDetails <> '' INSERT INTO @tblsummary VALUES (@ClinicalDetails)

	SELECT @tmpsummary = COALESCE(@tmpsummary + ', ', '') + summary
	FROM @tblsummary

	SET @summary = @summary + @tmpsummary


	-------------------------
	------ STAGING ----------
	-------------------------

	IF @SuspectedLCa = 1
	BEGIN
		IF @StagingInvestigations = 1 
		BEGIN
			DELETE FROM @tblsummary
			SET @tmpsummary = NULL

			IF @ClinicalGrounds = 1 INSERT INTO @tblsummary VALUES ('Clinical grounds only')
			IF @ImagingOfThorax = 1 INSERT INTO @tblsummary VALUES ('Cross sectional imaging of thorax')
			IF @MediastinalSampling = 1 INSERT INTO @tblsummary VALUES ('Mediastinal sampling')
			IF @Metastases = 1 INSERT INTO @tblsummary VALUES ('Diagnostic tests for metastases')
			IF @PleuralHistology = 1 INSERT INTO @tblsummary VALUES ('Pleural cytology / histology')
			IF @Bronchoscopy = 1 INSERT INTO @tblsummary VALUES ('Bronchoscopy')

			SELECT @tmpsummary = COALESCE(@tmpsummary + ', ', '') + summary
			FROM @tblsummary

			IF @tmpsummary IS NOT NULL SET @tmpsummary = 'Staging Investigations (' + @tmpsummary + ')'
			ELSE SET @tmpsummary = 'Staging Investigations'

			SET @stagingsummary = @tmpsummary
		END

		IF @Stage = 1
		BEGIN
			DELETE FROM @tblsummary
			SET @tmpsummary = NULL

			IF @StageT IS NOT NULL AND @StageT <> '' INSERT INTO @tblsummary VALUES (@StageT)
			IF @StageN IS NOT NULL AND @StageN <> '' INSERT INTO @tblsummary VALUES (@StageN)
			IF @StageM IS NOT NULL AND @StageM <> '' INSERT INTO @tblsummary VALUES (@StageM)
			IF @StageType IS NOT NULL AND @StageType <> '' INSERT INTO @tblsummary VALUES (@StageType)
			IF @StageDate IS NOT NULL INSERT INTO @tblsummary VALUES ('Date ' + CONVERT(VARCHAR, @StageDate, 105))

			SELECT @tmpsummary = COALESCE(@tmpsummary + ', ', '') + summary
			FROM @tblsummary

			IF @tmpsummary IS NOT NULL SET @tmpsummary = 'Stage (' + @tmpsummary + ')'
			ELSE SET @tmpsummary = 'Stage'

			IF @stagingsummary IS NOT NULL SET @stagingsummary = @stagingsummary + ' ' + @tmpsummary
			ELSE SET @stagingsummary = @tmpsummary
		END

		IF @PerformanceStatus = 1
		BEGIN
			SET @tmpsummary = 'Performance Status' + 
							CASE @PerformanceStatusType 
								WHEN 1 THEN ' (normal activity)'
								WHEN 2 THEN ' (able to carry out light work)'
								WHEN 3 THEN ' (unable to carry out any work)'
								WHEN 4 THEN ' (limited self care)'
								WHEN 5 THEN ' (completely disabled)'
								ELSE ' (none)'
							END

			IF @stagingsummary IS NOT NULL SET @stagingsummary = @stagingsummary + ' ' + @tmpsummary
			ELSE SET @stagingsummary = @tmpsummary
		END

		IF @stagingsummary IS NOT NULL
			IF @summary <> '' SET @summary = @summary + '<br/>' + @stagingsummary
			ELSE SET @summary = @stagingsummary
	END


	------------------------------
	------ CO-MORBIDITY ----------
	------------------------------

	DELETE FROM @tblsummary
	SET @tmpsummary = NULL

	IF @AtrialFibrillation = 1 INSERT INTO @tblsummary VALUES ('Atrial fibrillation')
	IF @ChronicKidneyDisease = 1 INSERT INTO @tblsummary VALUES ('Chronic kidney disease')
	IF @COPD = 1 INSERT INTO @tblsummary VALUES ('COPD')
	IF @EnlargedLymphNodes = 1 INSERT INTO @tblsummary VALUES ('Enlarged lymph nodes')
	IF @EssentialHyperTension = 1 INSERT INTO @tblsummary VALUES ('Essential hyper tension')
	IF @HeartFailure = 1 INSERT INTO @tblsummary VALUES ('Heart failure')
	IF @InterstitialLungDisease = 1 INSERT INTO @tblsummary VALUES ('Interstitial lung disease')
	IF @IschaemicHeartDisease = 1 INSERT INTO @tblsummary VALUES ('Ischaemic heart disease')
	IF @LungCancer = 1 INSERT INTO @tblsummary VALUES ('Lung cancer')
	IF @Obesity = 1 INSERT INTO @tblsummary VALUES ('Obesity')
	IF @PleuralEffusion = 1 INSERT INTO @tblsummary VALUES ('Pleural effusion')
	IF @Pneumonia = 1 INSERT INTO @tblsummary VALUES ('Pneumonia')
	IF @RheumatoidArthritis = 1 INSERT INTO @tblsummary VALUES ('Rheumatoid arthritis')
	IF @SecondaryCancer = 1 INSERT INTO @tblsummary VALUES ('Secondary Cancer')
	IF @Stroke = 1 INSERT INTO @tblsummary VALUES ('Stroke')
	IF @Type2Diabetes = 1 INSERT INTO @tblsummary VALUES ('Type 2 Diabetes')
	IF @OtherComorb <> '' INSERT INTO @tblsummary VALUES (@OtherComorb)
	
	SELECT @tmpsummary = COALESCE(@tmpsummary + ', ', '') + summary
	FROM @tblsummary

	IF @tmpsummary IS NOT NULL SET @tmpsummary = 'Co-Morbidity (' + @tmpsummary + ')'
	ELSE SET @tmpsummary = ''

	IF @tmpsummary <> ''
		IF @summary <> '' SET @summary = @summary + '<br/>' + @tmpsummary
		ELSE SET @summary = @tmpsummary

	
	--------------------------------
	------ PULMONARY PHYSIOLOGY ----
	--------------------------------

	SET @tmpsummary = ''

	IF @FEV1Result IS NOT NULL 
	BEGIN
		SET @tmpsummary = 'FEV1 ' + CONVERT(VARCHAR, @FEV1Result) + ' litres'
		IF @FEV1Percentage IS NOT NULL SET @tmpsummary = @tmpsummary + ' (' + CONVERT(VARCHAR, @FEV1Percentage) + '% of predictive)'
	END

	IF @FVCResult IS NOT NULL 
	BEGIN
		IF @tmpsummary <> '' SET @tmpsummary = @tmpsummary + ' '
		SET @tmpsummary = @tmpsummary + ' FVCResult ' + CONVERT(VARCHAR, @FVCResult) + ' litres'
		IF @FVCPercentage IS NOT NULL SET @tmpsummary = @tmpsummary + ' (' + CONVERT(VARCHAR, @FVCPercentage) + '% of predictive)'
	END
	
	IF @WHOPerformanceStatus > 0
	BEGIN
		IF @tmpsummary <> '' SET @tmpsummary = @tmpsummary + ' '
		SET @tmpsummary = @tmpsummary + 'WHO performance status' + 
							CASE @WHOPerformanceStatus 
								WHEN 1 THEN ' (normal activity)'
								WHEN 2 THEN ' (able to carry out light work)'
								WHEN 3 THEN ' (unable to carry out any work)'
								WHEN 4 THEN ' (limited self care)'
								WHEN 5 THEN ' (completely disabled)'
								ELSE ''
							END
	END

	IF @tmpsummary <> ''
	BEGIN
		SET @tmpsummary = 'Pulmonary Physiology (' + @tmpsummary + ')'

		IF @summary <> '' SET @summary = @summary + '<br/>' + @tmpsummary
		ELSE SET @summary = @tmpsummary
	END

	--------------------------------
	------ REFERAL DATA ------------
	--------------------------------
	
	DELETE FROM @tblsummary
	SET @tmpsummary = NULL

	IF @DateBronchRequested IS NOT NULL INSERT INTO @tblsummary VALUES ('Date bronchoscopy requested ' + CONVERT(VARCHAR, @DateBronchRequested, 105))
	IF @DateOfReferral IS NOT NULL INSERT INTO @tblsummary VALUES ('Date of referral ' + CONVERT(VARCHAR, @DateOfReferral, 105))
	IF @LCaSuspectedBySpecialist = 1 INSERT INTO @tblsummary VALUES ('Lung Ca suspected by lung Ca specialist')
	IF @CTScanAvailable = 1 INSERT INTO @tblsummary VALUES ('CT scan available prior to bronchoscopy')
	IF @DateOfScan IS NOT NULL INSERT INTO @tblsummary VALUES ('Date of scan ' + CONVERT(VARCHAR, @DateOfScan, 105))
	
	SELECT @tmpsummary = COALESCE(@tmpsummary + ', ', '') + summary
	FROM @tblsummary

	IF @tmpsummary IS NOT NULL SET @tmpsummary = 'Referal Data (' + @tmpsummary + ')'
	ELSE SET @tmpsummary = ''

	IF @tmpsummary <> ''
		IF @summary <> '' SET @summary = @summary + '<br/>' + @tmpsummary
		ELSE SET @summary = @tmpsummary



	UPDATE ERS_ProceduresReporting
	SET PP_Indic = @summary
	WHERE ProcedureId = @ProcedureId

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_BronchoPathology_Insert -------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'TR_BronchoPathology_Insert', 'TR';
GO

CREATE TRIGGER TR_BronchoPathology_Insert
ON ERS_BRT_BronchoPathology
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC broncho_pathology_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
------------------------------ Create Proc abnormalities_brt_descriptions_select -----------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_brt_descriptions_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_brt_descriptions_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT [SiteId]
	,[Normal]
	,ISNULL([Carinal],0) AS Carinal
	,ISNULL([Vocal],0) AS Vocal
	,CASE WHEN [CompressionGeneral] = 1 OR [CompressionFromLeft] = 1 OR [CompressionFromRight] = 1 OR 
				[CompressionFromAnterior] = 1 OR [CompressionFromPosterior] = 1 THEN 1 ELSE 0 END
		AS [Compression]
	,[CompressionGeneral]
	,[CompressionFromLeft]
	,[CompressionFromRight]
	,[CompressionFromAnterior]
	,[CompressionFromPosterior]
	,[Stenosis]
	,[Obstruction]
	,CASE WHEN [MucosalOedema] = 1 OR [MucosalErythema] = 1 OR [MucosalPits] = 1 OR 
				[MucosalAnthracosis] = 1 OR [MucosalInfiltration] = 1 THEN 1 ELSE 0 END
		AS [Mucosal]
	,[MucosalOedema]
	,[MucosalErythema]
	,[MucosalPits]
	,[MucosalAnthracosis]
	,[MucosalInfiltration]
	,[MucosalIrregularity]
	,[ExcessiveSecretions]
	,[Bleeding]
	,[Summary]
FROM 
	[dbo].[ERS_BRTAbnoDescriptions]
WHERE 
	SiteId = @SiteId

GO

--------------------------------------------------------------------------------------------------------------------
---------------------------- Create Proc abnormalities_brt_descriptions_save ---------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_brt_descriptions_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_brt_descriptions_save]
(
	@SiteId					INT,
	@Normal					BIT,
	@Carinal				TINYINT,
	@Vocal					TINYINT,
	@Compression			BIT,
	@CompressionGeneral		BIT,
	@CompressionFromLeft	BIT,
	@CompressionFromRight	BIT,
	@CompressionFromAnterior	BIT,
	@CompressionFromPosterior	BIT,
	@Stenosis				TINYINT,
	@Obstruction			TINYINT,
	@Mucosal				BIT,
	@MucosalOedema			BIT,
	@MucosalErythema		BIT,
	@MucosalPits			BIT,
	@MucosalAnthracosis		BIT,
	@MucosalInfiltration	BIT,
	@MucosalIrregularity	TINYINT,
	@ExcessiveSecretions	TINYINT,
	@Bleeding				TINYINT,
	@LoggedInUserId			INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId

	IF NOT EXISTS (SELECT 1 FROM ERS_BRTAbnoDescriptions WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_BRTAbnoDescriptions (
				SiteId,
				Normal,
				Carinal,
				Vocal,
				[Compression],
				CompressionGeneral,
				CompressionFromLeft,
				CompressionFromRight,
				CompressionFromAnterior,
				CompressionFromPosterior,
				Stenosis,
				Obstruction,
				Mucosal,
				MucosalOedema,
				MucosalErythema,
				MucosalPits,
				MucosalAnthracosis,
				MucosalInfiltration,
				MucosalIrregularity,
				ExcessiveSecretions,
				Bleeding,
				WhoCreatedId,
				WhenCreated) 
		VALUES (
				@SiteId,
				@Normal,
				@Carinal,
				@Vocal,
				@Compression,
				@CompressionGeneral,
				@CompressionFromLeft,
				@CompressionFromRight,
				@CompressionFromAnterior,
				@CompressionFromPosterior,
				@Stenosis,
				@Obstruction,
				@Mucosal,
				@MucosalOedema,
				@MucosalErythema,
				@MucosalPits,
				@MucosalAnthracosis,
				@MucosalInfiltration,
				@MucosalIrregularity,
				@ExcessiveSecretions,
				@Bleeding,
				@LoggedInUserId,
				GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'BRTAbnoDescriptions',
			1)
	END
	
	ELSE IF (@Normal=0 AND @Carinal=0 AND @Vocal=0 AND
				@CompressionGeneral=0 AND @CompressionFromLeft=0 AND @CompressionFromRight=0 AND 
				@CompressionFromAnterior=0 AND @CompressionFromPosterior=0 
				AND @Stenosis=0 AND @Obstruction=0 AND 
				@MucosalOedema=0 AND @MucosalErythema=0 AND @MucosalPits=0 AND 
				@MucosalAnthracosis=0 AND @MucosalInfiltration=0 AND 
				@MucosalIrregularity=0 AND @ExcessiveSecretions=0 AND @Bleeding=0)
	BEGIN
		DELETE FROM ERS_BRTAbnoDescriptions 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'BRTAbnoDescriptions'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_BRTAbnoDescriptions
		SET 
				Normal = @Normal,
				Carinal = @Carinal,
				Vocal = @Vocal,
				[Compression] = @Compression,
				CompressionGeneral = @CompressionGeneral,
				CompressionFromLeft = @CompressionFromLeft,
				CompressionFromRight = @CompressionFromRight,
				CompressionFromAnterior = @CompressionFromAnterior,
				CompressionFromPosterior = @CompressionFromPosterior,
				Stenosis = @Stenosis,
				Obstruction = @Obstruction,
				Mucosal = @Mucosal,
				MucosalOedema = @MucosalOedema,
				MucosalErythema = @MucosalErythema,
				MucosalPits = @MucosalPits,
				MucosalAnthracosis = @MucosalAnthracosis,
				MucosalInfiltration = @MucosalInfiltration,
				MucosalIrregularity = @MucosalIrregularity,
				ExcessiveSecretions = @ExcessiveSecretions,
				Bleeding = @Bleeding,
				WhoUpdatedId = @LoggedInUserId,
				WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc brt_abno_descrip_summary_update ----------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'brt_abno_descrip_summary_update', 'S';
GO

CREATE PROCEDURE [dbo].[brt_abno_descrip_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE 
		@summary VARCHAR(8000),
		@tmpsummary VARCHAR(2000),
		@Normal					BIT,
		@Carinal				TINYINT,
		@Vocal					TINYINT,
		@Compression			BIT,
		@CompressionGeneral		BIT,
		@CompressionFromLeft	BIT,
		@CompressionFromRight	BIT,
		@CompressionFromAnterior	BIT,
		@CompressionFromPosterior	BIT,
		@Stenosis				TINYINT,
		@Obstruction			TINYINT,
		@Mucosal				BIT,
		@MucosalOedema			BIT,
		@MucosalErythema		BIT,
		@MucosalPits			BIT,
		@MucosalAnthracosis		BIT,
		@MucosalInfiltration	BIT,
		@MucosalIrregularity	TINYINT,
		@ExcessiveSecretions	TINYINT,
		@Bleeding				TINYINT

	DECLARE @tblsummary TABLE (summary VARCHAR(500))

	SELECT 
		@Normal = Normal,
		@Carinal = Carinal,
		@Vocal = Vocal,
		@Compression = [Compression],
		@CompressionGeneral = CompressionGeneral,
		@CompressionFromLeft = CompressionFromLeft,
		@CompressionFromRight = CompressionFromRight,
		@CompressionFromAnterior = CompressionFromAnterior,
		@CompressionFromPosterior = CompressionFromPosterior,
		@Stenosis = Stenosis,
		@Obstruction = Obstruction,
		@Mucosal = Mucosal,
		@MucosalOedema = MucosalOedema,
		@MucosalErythema = MucosalErythema,
		@MucosalPits = MucosalPits,
		@MucosalAnthracosis = MucosalAnthracosis,
		@MucosalInfiltration = MucosalInfiltration,
		@MucosalIrregularity = MucosalIrregularity,
		@ExcessiveSecretions = ExcessiveSecretions,
		@Bleeding = Bleeding
	FROM 
		ERS_BRTAbnoDescriptions p
	WHERE
		SiteId = @SiteId

	SET @summary = ''
	

	-------------------------
	------ INDICATIONS ------ 
	-------------------------
	
	SET @tmpsummary = NULL

	



	-- Finally update the summary in abnormalities table
	UPDATE ERS_BRTAbnoDescriptions
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO


--------------------------------------------------------------------------------------------------------------------
---------------------------------------- Create Trigger TR_BRT_AbnoDesrip ------------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'TR_BRT_AbnoDesrip', 'TR';
GO

CREATE TRIGGER TR_BRT_AbnoDesrip
ON ERS_BRTAbnoDescriptions
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId FROM INSERTED

		EXEC brt_abno_descrip_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------250 Create Proc abnormalities_deformity_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_deformity_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_deformity_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	[None],
	DeformityType,
	DeformityOther
FROM
	ERS_UpperGIAbnoDeformity
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------251 Create Proc abnormalities_deformity_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_deformity_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_deformity_save]
(
	@SiteId INT,
	@None BIT,
	@DeformityType SMALLINT,
	@DeformityOther VARCHAR(200),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoDeformity WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoDeformity (
			SiteId,
			[None],
			DeformityType,
			DeformityOther,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@DeformityType,
			@DeformityOther,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Deformity',
			1)
	END
	
	ELSE IF (@None=0 AND @DeformityType=0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoDeformity 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Deformity'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoDeformity
		SET 
			[None] = @None,
			DeformityType = @DeformityType,
			DeformityOther = @DeformityOther,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------252 Create Proc abnormalities_deformity_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_deformity_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_deformity_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@None BIT,
		@DeformityType SMALLINT,
		@DeformityOther VARCHAR(200)

	SELECT 
		@None=[None],
		@DeformityType=DeformityType,
		@DeformityOther=DeformityOther
	FROM
		ERS_UpperGIAbnoDeformity
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @None = 1
		SET @summary = @summary + 'No deformity'
	
	ELSE IF @DeformityType > 0
	BEGIN
		IF @DeformityType = 1 SET @summary = 'extrinsic compression'
		ELSE IF @DeformityType = 2 SET @summary = 'cup and spill stomach'
		ELSE IF @DeformityType = 3 SET @summary = 'hourglass stomach'
		ELSE IF @DeformityType = 4 SET @summary = 'post operative stenosis'
		ELSE IF @DeformityType = 5 SET @summary = 'J-shaped stomach'
		ELSE IF @DeformityType = 6 SET @summary = 'submucosal tumour'
		ELSE IF @DeformityType = 7 
			IF @DeformityOther <> '' SET @summary = @DeformityOther
	END
	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_UpperGIAbnoDeformity
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc abnormalities_mediastinal_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_mediastinal_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_mediastinal_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	[None],
	MediastinalType,
	NodeStation
FROM
	ERS_EUSAbnoMediastinal
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc abnormalities_mediastinal_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_mediastinal_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_mediastinal_save]
(
	@SiteId INT,
	@None BIT,
	@MediastinalType SMALLINT,
	@NodeStation VARCHAR(20)
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_EUSAbnoMediastinal WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_EUSAbnoMediastinal (
			SiteId,
			[None],
			MediastinalType,
			NodeStation) 
		VALUES (
			@SiteId,
			@None,
			@MediastinalType,
			@NodeStation)

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			CASE WHEN @proc_type = 7 THEN 'Site' ELSE 'Mediastinal' END,  -- FOR EUS-HPB, region outside anatomy is 'Site' - and 'Mediastinal' for EUS-OGD
			1)
	END
	
	ELSE IF (@None=0 AND @MediastinalType=0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoDeformity 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = CASE WHEN @proc_type = 7 THEN 'Site' ELSE 'Mediastinal' END
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_EUSAbnoMediastinal
		SET 
			[None] = @None,
			MediastinalType = @MediastinalType,
			NodeStation = @NodeStation
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------252 Create Proc abnormalities_mediastinal_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_mediastinal_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_mediastinal_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@None BIT,
		@MediastinalType SMALLINT,
		@NodeStation VARCHAR(20)

	SELECT 
		@None=[None],
		@MediastinalType= MediastinalType,
		@NodeStation=NodeStation
	FROM
		ERS_EUSAbnoMediastinal
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @None = 1
	BEGIN
		DECLARE @procType INT

		SELECT @procType = p.ProcedureType
		FROM ERS_Sites s 
		JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
		WHERE SiteId = @SiteId

		IF @procType = 6		SET @summary = @summary + 'Mediastinal normal'	--EUS OGD
		ELSE IF @procType = 7	SET @summary = @summary + 'Site normal'			--EUS HPB
	END



	ELSE IF @MediastinalType > 0
	BEGIN
		IF @MediastinalType = 1 SET @summary = 'mass'
		ELSE IF @MediastinalType = 2 
		BEGIN
			SET @summary = 'lymph node'
			IF ISNULL(@NodeStation,'') <> '' SET @summary = @summary + ' (station ' + @NodeStation + ')'
		END
	END
	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_EUSAbnoMediastinal
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------253 Create Proc abnormalities_varices_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_varices_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_varices_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	[None],
	Grading,
	Multiple,
	Quantity,
	Bleeding,
	RedSign,			
	WhiteFibrinClot
FROM
	ERS_UpperGIAbnoVarices
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------254 Create Proc abnormalities_varices_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_varices_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_varices_save]
(
	@SiteId INT,
	@None BIT,
	@Grading TINYINT,
	@Multiple BIT,
	@Quantity INT,
	@Bleeding TINYINT,
	@RedSign TINYINT,				
	@WhiteFibrinClot BIT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId

	IF (@None=0 AND @Grading=0 AND @Bleeding = 0 AND @RedSign=0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoVarices 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Varices'
	END	
	ELSE IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoVarices WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoVarices (
			SiteId,
			[None],
			Grading,
			Multiple,
			Quantity,
			Bleeding,	
			RedSign,				
			WhiteFibrinClot,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Grading,
			@Multiple,
			@Quantity,
			@Bleeding,
			@RedSign,				
			@WhiteFibrinClot,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Varices',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoVarices
		SET 
			[None] = @None,
			Grading = @Grading,
			Multiple = @Multiple,
			Quantity = @Quantity,
			Bleeding = @Bleeding,
			RedSign = @RedSign,
			WhiteFibrinClot = @WhiteFibrinClot,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------255 Create Proc abnormalities_varices_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_varices_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_varices_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(200),
		@temp VARCHAR(250),
		@None BIT,
		@Grading TINYINT,
		@Multiple BIT,
		@Quantity INT,
		@Bleeding TINYINT,
		@RedSign TINYINT,	 			
		@WhiteFibrinClot BIT,
		@Region VARCHAR(50),
		@OesophagusGradingText VARCHAR(150) = ''

	SELECT 
		@None=[None],
		@Grading=Grading,
		@Multiple=Multiple,
		@Quantity=Quantity,
		@Bleeding=Bleeding,
		@RedSign=RedSign,
		@WhiteFibrinClot=WhiteFibrinClot
	FROM
		ERS_UpperGIAbnoVarices
	WHERE
		SiteId = @SiteId

	SELECT @Region = r.Region FROM ERS_Sites s JOIN ERS_Regions r ON s.RegionId = r.RegionId WHERE SiteId = @SiteId

	SET @Summary = ''

	IF @None = 1
		SET @summary = @summary + 'No varices'
	
	ELSE IF @Grading > 0
	BEGIN
		IF @Multiple > 0 SET @summary = @summary + 'multiple'
		ELSE IF @Quantity > 1 SET @summary = @summary + CONVERT(VARCHAR(20), @Quantity)

		IF (CHARINDEX('Oesophagus', @Region) > 0)
		BEGIN
			IF @Grading = 1 SET @OesophagusGradingText = 'Grade I. These collapse on inflation of the oesophagus with air'
			ELSE IF @Grading = 2 SET @OesophagusGradingText = 'Grade II. These do not collapse on air insufflation but are not large enough to occlude lumen'
			ELSE IF @Grading = 3 SET @OesophagusGradingText = 'Grade III. These are large enough to occlude the lumen'
			--ELSE IF @Grading = 4 SET @temp = 'protruding to 1/2 of lumen'
			--ELSE IF @Grading = 5 SET @temp = 'protruding greater than 1/2 of lumen'

			IF @summary <> '' SET @OesophagusGradingText = @summary + ' ' + @OesophagusGradingText
			SET @summary = ''
		END
		ELSE
		BEGIN
			IF @Grading = 1 SET @temp = 'Small'
			ELSE IF @Grading = 2 SET @temp = 'Medium'
			ELSE IF @Grading = 3 SET @temp = 'Large'

			SET @temp = LOWER(@temp)

			IF @summary <> '' SET @summary = @summary + ' ' + @temp
		ELSE SET @summary = @temp
		END

		IF @RedSign > 0 
		BEGIN
			IF @RedSign = 1 SET @summary = @summary + ' with absence of red sign'
			ELSE IF @RedSign = 2 SET @summary = @summary + ' with presence of red sign'
		END 

		IF @Bleeding > 0 
		BEGIN
			IF @RedSign > 0 SET @summary = @summary + ' and '
			ELSE SET @summary = @summary + ', with '

			IF (CHARINDEX('Oesophagus', @Region) > 0)
			BEGIN
				IF @Bleeding = 1 SET @summary = @summary +  'no bleeding'
				ELSE IF @Bleeding = 2 SET @summary = @summary + 'fresh clot'
				ELSE IF @Bleeding = 3 SET @summary = @summary + 'altered blood'
				ELSE IF @Bleeding = 4 SET @summary = @summary + 'active bleeding'
				ELSE IF @Bleeding = 5 SET @summary = @summary + 'signs of recent bleeding'

				IF @WhiteFibrinClot = 1 SET @summary = @summary + ' - white fibrin clot visible'

			END
			ELSE
			BEGIN
				IF @Bleeding = 1 SET @summary = @summary +  'no bleeding'
				ELSE IF @Bleeding = 2 SET @summary = @summary + 'fibrin plug'
				ELSE IF @Bleeding = 3 SET @summary = @summary + 'fresh clot'
				ELSE IF @Bleeding = 4 SET @summary = @summary + 'red sign'
				ELSE IF @Bleeding = 5 SET @summary = @summary + 'active bleeding'
			END		
		END

		IF LEN(@OesophagusGradingText) > 0 AND (@RedSign > 0  OR @Bleeding > 0) 
			SET @summary = @OesophagusGradingText + ' (' + LTRIM(REPLACE(@summary,',','')) + ')' 
		ELSE IF @RedSign > 0  OR @Bleeding > 0
			SET @summary = @summary
		ELSE IF LEN(@OesophagusGradingText) > 0
			SET @summary = @OesophagusGradingText
	END


	-- Finally update the summary in abnormalities table
	UPDATE ERS_UpperGIAbnoVarices
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------256 Create Proc patient_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'patients_save','S';
GO

CREATE PROCEDURE [dbo].[patients_save]
(
	@PatientId INT=NULL,
	@CaseNoteNo VARCHAR(100),
	@Title VARCHAR(20),
	@Forename VARCHAR(100),
	@Surname NVARCHAR(100),
	@DateOfBirth DATETIME,
	@NHSNo VARCHAR(20),
	@Address1 NVARCHAR(500),
	@Address2 NVARCHAR(500),
	@Town NVARCHAR(500),
	@County NVARCHAR(500),
	@PostCode VARCHAR(10),
	@PhoneNo VARCHAR(20),
	@Gender VARCHAR(1),
	@EthnicOrigin INT=NULL,
	@JustDownloaded BIT=NULL,
	@Notes VARCHAR(200)=NULL,
	@District VARCHAR(50)=NULL,
	@DHACode NVARCHAR(20)=NULL,
	@GPId INT=NULL,
	@DateOfDeath DATETIME=NULL,
	@AdvocateRequired BIT=NULL,
	@DateLastSeenAlive DATETIME=NULL,
	@CauseOfDeath NVARCHAR(500)=NULL,
	@CodeForCauseOfDeath VARCHAR(100)=NULL,
	@CARelatedDeath BIT=NULL,
	@DeathWithinHospital BIT=NULL,
	@Hospitals INT=NULL,
	@ExtraReferral NVARCHAR(100)=NULL,
	@ConsultantNo INT=NULL,
	@HIVRisk INT=NULL,
	@OutcomeNotes NVARCHAR(100)=NULL,
	@UniqueHospitalId INT=NULL,
	@GPReferralFlag BIT=NULL,
	@OwnedBy VARCHAR(100)=NULL,
	@HasImages BIT=NULL,
	@VerificationStatus VARCHAR(4)=NULL,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
       
	   IF ISNULL(@GPId,0) = 0  SELECT @GPId = GPId  FROM dbo.ERS_GPS WHERE [Code] = 'G9999998'
	   --If not found
	   IF ISNULL(@GPId,0) = 0 
	   BEGIN
			INSERT INTO ERS_GPS (Code, Name, [NationalCode], [ExternalCode]) 
			VALUES ('G9999998', 'Not Stated', 'G9999998', 'G9999998')

			SET @GPId = @@IDENTITY
	   END

       --While downloading from PAS, we don't have the PatientId. So use CaseNoteNo to check if an insert or an update is required.
       IF @PatientId IS NULL OR @PatientId = 0
       BEGIN
             SELECT @PatientId = [PatientId] FROM ERS_Patients WHERE HospitalNumber = @CaseNoteNo
       END

	IF ISNULL(@PatientId,0)= 0
	BEGIN
		INSERT INTO ERS_Patients (
			HospitalNumber
			,[Title]
			,[Forename1]
			,[Surname]
			,[Dateofbirth]
			,[NHSNo]
			,[Address1]
			,[Address2]
			,[Address3]
			,[Address4]
			,[Postcode]
			,[Telephone]
			,[GenderId]
			,[EthnicId]
			,[RegGpId]
			,[Dateofdeath]
			,[WhoCreatedId]
			,[WhenCreated])
		VALUES (
			@CaseNoteNo,
			@Title,
			@Forename,
			@Surname,
			@DateOfBirth,
			@NHSNo,
			@Address1,
			@Address2,
			@Town,
			@County,
			@PostCode,
			@PhoneNo,
			(SELECT GenderId FROM ERS_GenderTypes WHERE Code = @Gender),
			@EthnicOrigin,
			@GPId,
			@DateOfDeath,
			@LoggedInUserId,
			GETDATE())
		SET @PatientId = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		UPDATE 
			ERS_Patients
		SET 
			Title = @Title,
			Forename1 = @Forename,
			Surname = @Surname,
			[Dateofbirth] = @DateOfBirth,
			[NHSNo] = @NHSNo,
			[Address1] = @Address1,
			[Address2] = @Address2,
			[Address3] = @Town,
			[Address4] = @County,
			[Postcode] = @PostCode,
			[Telephone] = @PhoneNo,
			GenderId = (SELECT GenderId FROM ERS_GenderTypes WHERE Code = @Gender),
			[EthnicId] = @EthnicOrigin,
			RegGPId = @GPId,
			[Dateofdeath] = @DateOfDeath,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			[PatientId] = @PatientId
	END
	SELECT @PatientId
END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH
IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------256a Create Proc patient_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'patient_select','S';
GO

CREATE PROCEDURE [dbo].[patient_select]
(
	@PatientId int
)
AS

SET NOCOUNT ON

DECLARE @GPid INT 

BEGIN TRANSACTION

BEGIN TRY

	SELECT [Title], [Forename1] AS Forename, [Surname], [Address], [Postcode], CASE WHEN ISNULL(GPName,'') = '' THEN 'Not Stated' ELSE GPName END AS GPName, PracticeName,
			ISNULL(GPAddress,'') AS GPAddress, NHSNo, Gender, DateOfBirth, HospitalNumber as CaseNoteNo, dbo.fnEthnicity(EthnicId) AS Ethnicity,
			[DateAdded] AS CreatedOn, DateUpdated AS ModifiedOn, Deceased
	FROM ERS_VW_PatientswithGP 
	WHERE PatientId = @PatientId
	
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------257 Create Proc gp_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'gp_save','S';
GO

CREATE PROCEDURE [dbo].[gp_save]
(
	@GPId INT,
	@Title VARCHAR(10),
	@Initials VARCHAR(10),
	@ForeName VARCHAR(100),
	@Surname VARCHAR(100),
	@PracticeName VARCHAR(30),
	@Address VARCHAR(500),
	@Telephone VARCHAR(20),
	@Suppressed BIT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	IF @GPId IS NULL OR @GPId = 0
	BEGIN
		INSERT INTO ERS_GP (
			Title,
			Initials,
			ForeName,
			Surname,
			PracticeName,
			[Address],
			Telephone,
			Suppressed,
			WhoCreatedId,
			WhenCreated)
		VALUES (
			@Title,
			@Initials,
			@ForeName,
			@Surname,
			@PracticeName,
			@Address,
			@Telephone,
			@Suppressed,
			@LoggedInUserId,
			GETDATE())

		SET @GPId = SCOPE_IDENTITY()
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_GP
		SET 
			Title = @Title,
			Initials = @Initials,
			ForeName = @ForeName,
			Surname = @Surname,
			PracticeName = @PracticeName,
			[Address] = @Address,
			Telephone = @Telephone,
			Suppressed = @Suppressed,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			GPId = @GPId
	END

	SELECT @GPId
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------258 Create Proc abnormalities_vascular_lesions_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_vascular_lesions_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_vascular_lesions_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	[None],
	[Type],
	Multiple,
	Quantity,
	Bleeding
FROM
	ERS_CommonAbnoVascularLesions
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------259 Create Proc abnormalities_vascular_lesions_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_vascular_lesions_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_vascular_lesions_save]
(
	@SiteId INT,
	@None BIT,
	@Type TINYINT,
	@Multiple BIT,
	@Quantity INT,
	@Bleeding TINYINT,
	@Area VARCHAR(50),
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_CommonAbnoVascularLesions WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_CommonAbnoVascularLesions (
			SiteId,
			[None],
			[Type],
			Multiple,
			Quantity,
			Bleeding,
			Area,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Type,
			@Multiple,
			@Quantity,
			@Bleeding,
			@Area,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Vascular Lesions',
			1)
	END
	
	ELSE IF (@None=0 AND @Type=0 AND @Bleeding = 0)
	BEGIN
		DELETE FROM ERS_CommonAbnoVascularLesions 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Vascular Lesions'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_CommonAbnoVascularLesions
		SET 
			[None] = @None,
			[Type] = @Type,
			Multiple = @Multiple,
			Quantity = @Quantity,
			Bleeding = @Bleeding,
			Area = @Area,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------260 Create Proc abnormalities_vascular_lesions_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_vascular_lesions_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_vascular_lesions_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(200),
		@temp VARCHAR(120),
		@None BIT,
		@Type TINYINT,
		@Multiple BIT,
		@Quantity INT,
		@Bleeding TINYINT,
		@Area  VARCHAR(50)

	SELECT 
		@None=[None],
		@Type=[Type],
		@Multiple=Multiple,
		@Quantity=Quantity,
		@Bleeding=Bleeding,
		@Area=Area
	FROM
		ERS_CommonAbnoVascularLesions
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @None = 1
		SET @summary = @summary + 'No vascular lesions'
	
	ELSE IF @Type > 0
	BEGIN
		IF @Multiple > 0 SET @summary = @summary + 'multiple'
		ELSE IF @Quantity > 1 SET @summary = @summary + CONVERT(VARCHAR(20), @Quantity)

		IF RIGHT(LOWER(@Area),5) = ' part' SET @Area = 'Duodenum' --For ERCP, the variable @Area has region name instead of Area and all the region in duodenum ends with ' part', so use this to generate @Summary text

		IF @Area = 'Oesophagus'
		BEGIN
			SET @temp = CASE @Type
						WHEN 1 THEN 'Telangiectasia'
					END
		END
		ELSE IF @Area = 'Stomach'
		BEGIN
			SET @temp = CASE @Type
						WHEN 1 THEN 'Telangiectasia'
						WHEN 2 THEN 'Angiodysplasia (<5mm)'
						WHEN 3 THEN 'Angiodysplasia (>5mm)'
						WHEN 4 THEN 'Angiodysplasia (large and small lesions)'
						WHEN 5 THEN 'Portal hypertensive gastropathy'
						WHEN 6 THEN 'Watermelon stomach'
					END
		END
		ELSE IF @Area = 'Duodenum'
		BEGIN
			SET @temp = CASE @Type
						WHEN 1 THEN 'Telangiectasia'
						WHEN 2 THEN 'Angiodysplasia (<5mm)'
						WHEN 3 THEN 'Angiodysplasia (>5mm)'
						WHEN 4 THEN 'Angiodysplasia (large and small lesions)'
						WHEN 5 THEN 'Varices'
					END
		END

		IF @summary <> '' SET @summary = @summary + ' ' + LOWER(@temp)
		ELSE SET @summary = @temp

		IF @Bleeding > 0 
		BEGIN
			SET @summary = @summary + ' with '


			IF @Area = 'Stomach'
			BEGIN
				SET @summary =  @summary + 
					CASE @Bleeding
						WHEN 1 THEN 'no bleeding'
						WHEN 2 THEN 'fresh clot'
						WHEN 3 THEN 'altered blood'
						WHEN 4 THEN 'active bleeding'
					END
			END
			ELSE IF @Area = 'Duodenum'
			BEGIN
				SET @summary =  @summary + 
					CASE @Bleeding
						WHEN 1 THEN 'no bleeding'
						WHEN 2 THEN 'fibrin plug'
						WHEN 3 THEN 'fresh clot'
						WHEN 4 THEN 'red sign'
						WHEN 5 THEN 'active bleeding'
					END
			END




		END
	END
	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_CommonAbnoVascularLesions
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------261 Create Proc ogd_premed_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_premedication_save','S';
GO

CREATE PROCEDURE [dbo].[ogd_premedication_save]
(
	@ProcedureId INT,
	@DrugNo TINYINT,
	@Dose DECIMAL(8,2)
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF EXISTS (SELECT 1 FROM ERS_UpperGIPremedication WHERE ProcedureId = @ProcedureId)
	BEGIN
		DELETE FROM ERS_UpperGIPremedication WHERE ProcedureId = @ProcedureId
		DELETE FROM ERS_RecordCount WHERE ProcedureId = @ProcedureId AND Identifier = 'Premed'
	END 

	INSERT INTO ERS_UpperGIPremedication (
		ProcedureId,
		DrugNo,
		DrugName,
		Dose,
		Units) 
	SELECT @ProcedureId, @DrugNo, [Drug name], @Dose, Units 
	FROM [Drug list] 
	WHERE [Drug no] = @DrugNo


	INSERT INTO ERS_RecordCount (
		[ProcedureId],
		[SiteId],
		[Identifier],
		[RecordCount]
	)
	VALUES (
		@ProcedureId,
		NULL,
		'Premed',
		1)
	
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------262 Create Proc ogd_premedication_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_premedication_select','S';
GO

CREATE PROCEDURE [dbo].[ogd_premedication_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

SELECT * FROM ERS_UpperGIPremedication
WHERE ProcedureId = @ProcedureId

--IF @@ROWCOUNT <= 0
--BEGIN
--	DECLARE @Premedication_Defaults TABLE( DrugNo NVARCHAR(6), Dose NVARCHAR(15), DrugName NVARCHAR(50),
--											Units NVARCHAR(12),  DeliveryMethod NVARCHAR(25))
--
--	INSERT INTO @Premedication_Defaults EXEC [ogd_premedication_select_default] @UserID
--
--	SELECT * FROM @Premedication_Defaults
--END

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------262a Create Proc ogd_premedication_select_default.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_premedication_select_default','S';
GO

CREATE PROCEDURE [dbo].[ogd_premedication_select_default]
(
	@UserID INT
)
AS
--This procedure is called from 
SET NOCOUNT ON

DECLARE @Premedication VARCHAR(500)
SELECT @Premedication = ISNULL(Premedication,'') FROM ERS_Default WHERE UserID = @UserID

IF ISNULL(@Premedication,'') <> ''
BEGIN
	SELECT 
		CASE [item] WHEN '-1' THEN -1
					WHEN '-2' THEN -2
					ELSE SUBSTRING([item],0,charindex('|',[item])) 
					END AS DrugNo,
		CASE [item] WHEN '-1' THEN ''
					WHEN '-2' THEN ''
					ELSE SUBSTRING([item],charindex('|',[item]) + 1,LEN([item]))
					END AS DOSE, 
		'' AS DrugName, '' AS Units, '' AS DeliveryMethod
	INTO #tmpPremed FROM dbo.fnSplitString(@Premedication,'~') 

	SELECT * FROM #tmpPremed
	DROP TABLE #tmpPremed
END

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------263 Create Proc ogd_rx_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_rx_summary_update','S';
GO

CREATE PROCEDURE [dbo].[ogd_rx_summary_update]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@MedicationText NVARCHAR(1000)

	SELECT 
		@MedicationText=MedicationText
	FROM
		ERS_UpperGIRx
	WHERE
		ProcedureId = @ProcedureId

	SET @Summary = @MedicationText
	
	--Update the summary column in rx table
	UPDATE ERS_UpperGIRx
	SET Summary = @summary 
	WHERE ProcedureId = @ProcedureId

	UPDATE ERS_ProceduresReporting
	SET PP_Rx = @summary
	WHERE ProcedureId = @ProcedureId
	
GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------264 Create Proc ogd_rx_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_rx_select','S';
GO

CREATE PROCEDURE [dbo].[ogd_rx_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

SELECT
	ProcedureId
      ,ContMedication
      ,ContMedicationByGP
      ,ContPrescribeMedication
      ,SuggestPrescribe
      ,MedicationText
      ,Summary
FROM
	ERS_UpperGIRx
WHERE 
	ProcedureId = @ProcedureId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------265 Create Proc ogd_rx_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_rx_save','S';
GO

CREATE PROCEDURE [dbo].[ogd_rx_save]
(
	@ProcedureId INT,
    @ContMedication BIT,
    @ContMedicationByGP BIT,
    @ContPrescribeMedication BIT,
    @SuggestPrescribe BIT,
    @MedicationText NVARCHAR(1000),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIRx WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_UpperGIRx (
			ProcedureId,
			ContMedication,
			ContMedicationByGP,
			ContPrescribeMedication,
			SuggestPrescribe,
			MedicationText,
			WhoCreatedId,
			WhenCreated)
		VALUES (
			@ProcedureId,
			@ContMedication,
			@ContMedicationByGP,
			@ContPrescribeMedication,
			@SuggestPrescribe,
			@MedicationText,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'Rx',
			1)
	END

	ELSE IF (@ContMedication=0 AND @ContMedicationByGP=0 AND @ContPrescribeMedication=0 AND @SuggestPrescribe=0)
	BEGIN
		DELETE FROM ERS_UpperGIRx 
		WHERE ProcedureId = @ProcedureId

		UPDATE ERS_ProceduresReporting
		SET PP_Rx = NULL
		WHERE ProcedureId = @ProcedureId

		DELETE FROM ERS_RecordCount 
		WHERE ProcedureId = @ProcedureId
		AND Identifier = 'Rx'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIRx
		SET 
			ContMedication = @ContMedication
			,ContMedicationByGP = @ContMedicationByGP
			,ContPrescribeMedication = @ContPrescribeMedication
			,SuggestPrescribe = @SuggestPrescribe
			,MedicationText = @MedicationText
			,WhoUpdatedId = @LoggedInUserId
			,WhenUpdated = GETDATE()
		WHERE 
			ProcedureId = @ProcedureId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------266 Create Proc abnormalities_hiatus_hernia_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_hiatus_hernia_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_hiatus_hernia_save]
(
	@SiteId INT,
	@None BIT,
	@Sliding BIT,
	@Paraoesophageal BIT,
	@SlidingLength REAL = NULL,
	@ParaLength REAL = NULL,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoHiatusHernia WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoHiatusHernia
				   (SiteId
				   ,[None]
				   ,Sliding
				   ,Paraoesophageal
				   ,SlidingLength
				   ,ParaLength
				   ,WhoCreatedId
				   ,WhenCreated)
			 VALUES	(@SiteId,
					@None,
					@Sliding,
					@Paraoesophageal,
					@SlidingLength,
					@ParaLength,
					@LoggedInUserId,
					GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Hiatus Hernia',
			1)
	END
	
	ELSE IF (@None=0 AND @Sliding=0 AND @Paraoesophageal = 0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoHiatusHernia 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Hiatus Hernia'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoHiatusHernia
		SET 
			[None] = @None,
			Sliding = @Sliding,
			Paraoesophageal = @Paraoesophageal,
			SlidingLength = @SlidingLength,
			ParaLength = @ParaLength,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------267 Create Proc abnormalities_hiatus_hernia_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_hiatus_hernia_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_hiatus_hernia_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	[None],
    Sliding,
    Paraoesophageal,
    SlidingLength,
    ParaLength
FROM
	ERS_UpperGIAbnoHiatusHernia
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------268 Create Proc abnormalities_hiatus_hernia_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_hiatus_hernia_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_hiatus_hernia_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(300),
		@temp VARCHAR(20),
		@None BIT,
		@Sliding BIT,
		@Paraoesophageal BIT,
		@SlidingLength REAL,
		@ParaLength REAL


	SELECT 
		@None=[None],
		@Sliding=Sliding,
		@Paraoesophageal=Paraoesophageal,
		@SlidingLength=SlidingLength,
		@ParaLength=ParaLength
	FROM
		ERS_UpperGIAbnoHiatusHernia
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @None = 1
		SET @summary = @summary + 'No hiatus hernia'
	
	ELSE IF @Sliding > 0 OR @Paraoesophageal > 0
	BEGIN
		IF @Sliding > 0 SET @summary = @summary + 'sliding'
		IF @SlidingLength > 0 SET @summary = @summary + ' of length ' + CONVERT(VARCHAR(20), @SlidingLength) + ' cm'

		IF @Sliding > 0 AND @Paraoesophageal > 0 SET @summary = @summary + ' and '
		IF @Paraoesophageal > 0 SET @summary = @summary + 'paraoesophageal'
		IF @ParaLength > 0 SET @summary = @summary + ' of length ' + CONVERT(VARCHAR(20), @ParaLength) + ' cm'
	END

	-- Finally update the summary in abnormalities table
	UPDATE ERS_UpperGIAbnoHiatusHernia
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------269 Create Proc abnormalities_oesophagitis_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_oesophagitis_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_oesophagitis_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	[SiteId],
	[None],
	[MucosalAppearance],
	[Reflux],
	[ActiveBleeding],
	[MSMGrade1],
	[MSMGrade2a],
	[MSMGrade2b],
	[MSMGrade3],
	[MSMGrade4],
	[MSMGrade5],
	[ShortOesophagus],
	[Ulcer],
	[Stricture],
	[LAClassification],
	[Other],
	[SuspectedCandida],
	[CausticIngestion],
	[SuspectedHerpes],
	[OtherTypeOther],
	[OtherTypeOtherDesc],
	[SuspectedCandidaSeverity],
	[CausticIngestionSeverity],
	[SuspectedHerpesSeverity]
FROM
	ERS_UpperGIAbnoOesophagitis
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------270 Create Proc abnormalities_oesophagitis_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_oesophagitis_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_oesophagitis_save]
(
	@SiteId INT,
	@None BIT,
	@MucosalAppearance	TINYINT,
	@Reflux				bit,
	@ActiveBleeding		bit,
	@MSMGrade1			bit,
	@MSMGrade2a			bit,
	@MSMGrade2b			bit,
	@MSMGrade3			bit,
	@MSMGrade4			bit,
	@MSMGrade5			bit,
	@ShortOesophagus	bit,
	--@Ulcer				bit,
	--@Stricture			bit,
	@LAClassification	tinyint,
	@Other				bit,
	@SuspectedCandida	bit,
	@CausticIngestion	bit,
	@SuspectedHerpes	bit,
	@OtherTypeOther		bit,
	@OtherTypeOtherDesc	nvarchar(200) ,
	@SuspectedCandidaSeverity	tinyint,
	@CausticIngestionSeverity	tinyint,
	@SuspectedHerpesSeverity	tinyint,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoOesophagitis WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoOesophagitis (
			SiteId,
			[None],
			MucosalAppearance,
			Reflux,
			ActiveBleeding,
			MSMGrade1,
			MSMGrade2a,
			MSMGrade2b,
			MSMGrade3,
			MSMGrade4,
			MSMGrade5,
			ShortOesophagus,
			--Ulcer,
			--Stricture,
			LAClassification,
			Other,
			SuspectedCandida,
			CausticIngestion,
			SuspectedHerpes,
			OtherTypeOther,
			OtherTypeOtherDesc,
			SuspectedCandidaSeverity,
			CausticIngestionSeverity,
			SuspectedHerpesSeverity,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@MucosalAppearance,
			@Reflux,
			@ActiveBleeding,
			@MSMGrade1,
			@MSMGrade2a,
			@MSMGrade2b,
			@MSMGrade3,
			@MSMGrade4,
			@MSMGrade5,
			@ShortOesophagus,
			--@Ulcer,
			--@Stricture,
			@LAClassification,
			@Other,
			@SuspectedCandida,
			@CausticIngestion,
			@SuspectedHerpes,
			@OtherTypeOther	,
			@OtherTypeOtherDesc,
			@SuspectedCandidaSeverity,
			@CausticIngestionSeverity,
			@SuspectedHerpesSeverity,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Oesophagitis',
			1)
	END
	
	ELSE IF (@None=0 AND @MucosalAppearance=0 AND @Reflux=0 AND @Other=0 )
	BEGIN
		DELETE FROM ERS_UpperGIAbnoOesophagitis 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Oesophagitis'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoOesophagitis
		SET 
			[None] = @None,
			MucosalAppearance = @MucosalAppearance,
			Reflux = @Reflux,
			ActiveBleeding = @ActiveBleeding,
			MSMGrade1 = @MSMGrade1,
			MSMGrade2a = @MSMGrade2a,
			MSMGrade2b = @MSMGrade2b,
			MSMGrade3 = @MSMGrade3,
			MSMGrade4 = @MSMGrade4,
			MSMGrade5 = @MSMGrade5,
			ShortOesophagus = @ShortOesophagus,
			--Ulcer = @Ulcer,
			--Stricture = @Stricture,
			LAClassification = @LAClassification,
			Other = @Other,
			SuspectedCandida = @SuspectedCandida,
			CausticIngestion = @CausticIngestion,
			SuspectedHerpes = @SuspectedHerpes,
			OtherTypeOther = @OtherTypeOther,
			OtherTypeOtherDesc = @OtherTypeOtherDesc,
			SuspectedCandidaSeverity = @SuspectedCandidaSeverity,
			CausticIngestionSeverity = @CausticIngestionSeverity,
			SuspectedHerpesSeverity = @SuspectedHerpesSeverity,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------271 Create Proc abnormalities_barrett_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_barrett_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_barrett_save]
(
       @SiteId INT,
       @None BIT,
       @BarrettIslands BIT,
       @Proximal INT,
       @Distal INT,
       @DistanceC1 INT,
       @DistanceC2 INT,
       @DistanceC3 INT,
       @DistanceM1 INT,
       @DistanceM2 INT,
	   @LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
       SELECT 
              @proc_id = p.ProcedureId,
              @proc_type = p.ProcedureType
       FROM 
              ERS_Sites s
       JOIN 
              ERS_Procedures p ON s.ProcedureId = p.ProcedureId
       WHERE 
              SiteId = @SiteId
                     
       IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoBarrett WHERE SiteId = @SiteId)
       BEGIN
              INSERT INTO ERS_UpperGIAbnoBarrett
                             ([SiteId]
                            ,[None]
                            ,[BarrettIslands]
                            ,[Proximal]
                            ,[Distal]
                            ,[DistanceC1]
                            ,[DistanceC2]
                            ,[DistanceC3]
                            ,[DistanceM1]
                            ,[DistanceM2]
							,[WhoCreatedId]
							,[WhenCreated])
					VALUES (@SiteId ,
                            @None ,
                            @BarrettIslands ,
                            @Proximal ,
                            @Distal ,
                            @DistanceC1 ,
                            @DistanceC2 ,
                            @DistanceC3 ,
                            @DistanceM1 ,
                            @DistanceM2 ,
							@LoggedInUserId ,
							GETDATE())	

              INSERT INTO ERS_RecordCount (
                     [ProcedureId],
                     [SiteId],
                     [Identifier],
                     [RecordCount]
              )
              VALUES (
                     @proc_id,
                     @SiteId,
                     'Barretts',
                     1)
       END
       
       ELSE IF (@None=0 AND @BarrettIslands=0 AND @Proximal IS NULL AND @Distal IS NULL AND @DistanceC1 IS NULL AND @DistanceC2 IS NULL AND @DistanceC3 IS NULL AND @DistanceM1 IS NULL AND @DistanceM2 IS NULL )
       BEGIN
              DELETE FROM ERS_UpperGIAbnoBarrett 
              WHERE SiteId = @SiteId

              DELETE FROM ERS_RecordCount 
              WHERE SiteId = @SiteId
              AND Identifier = 'Barretts'
       END

       ELSE
       BEGIN
              UPDATE 
                     ERS_UpperGIAbnoBarrett
              SET 
                                         [None]=@None  ,
                                         [BarrettIslands]=@BarrettIslands ,
                                         [Proximal]=@Proximal ,
                                         [Distal]=@Distal ,
                                         [DistanceC1]=@DistanceC1,
                                         [DistanceC2]=@DistanceC2 ,
                                         [DistanceC3]=@DistanceC3 ,
                                         [DistanceM1]= @DistanceM1 ,
                                         [DistanceM2]=@DistanceM2 ,
										 [WhoUpdatedId] = @LoggedInUserId,
										 [WhenUpdated] = GETDATE()
              WHERE 
                     SiteId = @SiteId
       END
END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------272 Create Proc abnormalities_barrett_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_barrett_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_barrett_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
       [SiteId]
      ,[None]
      ,[BarrettIslands]
      ,[Proximal]
      ,[Distal]
      ,[DistanceC1]
      ,[DistanceC2]
      ,[DistanceC3]
      ,[DistanceM1]
      ,[DistanceM2]
FROM
       ERS_UpperGIAbnoBarrett
WHERE 
       SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------273 Create Proc abnormalities_barrett_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_barrett_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_barrett_summary_update]
(
       @SiteId INT
)
AS
       SET NOCOUNT ON

       DECLARE
              @summary VARCHAR(300),
              @None BIT,
              @BarrettIslands BIT,
              @Proximal INT,
              @Distal INT,
              @DistanceC1 INT,
              @DistanceC2 INT,
              @DistanceC3 INT,
              @DistanceM1 INT,
              @DistanceM2 INT



       SELECT 
              @None=[None],
              @BarrettIslands = BarrettIslands,
              @Proximal = Proximal,
              @Distal = Distal,
              @DistanceC1 = DistanceC1,
              @DistanceC2 = DistanceC2,
              @DistanceC3 = DistanceC3,
              @DistanceM1 = DistanceM1,
              @DistanceM2 = DistanceM2
       FROM
              ERS_UpperGIAbnoBarrett
       WHERE
              SiteId = @SiteId

       SET @Summary = ''
	DECLARE @BarrattsText varchar(500) ='', @Start varchar(500) ='', @End varchar(500)=''

       IF @None = 1 SET @summary = @summary + 'No Barrett''s epithelium'
       ELSE 
              BEGIN
              IF @BarrettIslands=1 SET @Start='Islands of '
              IF (ISNULL(@Distal,0) <> 0) OR (ISNULL(@Proximal,0) <>0)
                     BEGIN
                     SET @End= ' from ' + cast(ISNULL(@Proximal,0) as varchar(50)) + 'cm'
                     SET @End= @End + ' to ' + cast(ISNULL(@Distal,0) as varchar(50)) + 'cm'
                     END
              IF ISNULL(@DistanceM1,0)<>0 OR ISNULL(@DistanceM2,0)<>0
                     BEGIN
                     SET @BarrattsText= ', Prague C'+cast(ISNULL(@DistanceM2,0) as varchar(50))
                     SET @BarrattsText= @BarrattsText + 'M' +cast(ISNULL(@DistanceM1,0) as varchar(50))
                     END
              ELSE
                     BEGIN
                     IF @DistanceC1>0 AND @DistanceC2>0 AND @DistanceC3>0
                     BEGIN
                     SET @BarrattsText = ', Prague C' +cast(ISNULL(@DistanceC3-@DistanceC1,0) as varchar(50))
                     SET @BarrattsText= @BarrattsText + 'M' +cast(ISNULL(@DistanceC3 - @DistanceC2,0) as varchar(50))
                     END
                     END
              IF @BarrattsText ='' BEGIN IF @Start <> '' OR @End <> '' SET @summary = @Start + 'Barrett''s epithelium'+ @End END
              ELSE SET @summary = @Start + 'Barrett''s epithelium'+ @End+@BarrattsText 
              END

       --ELSE IF @BarrettType > 0 OR @ExtentStart > 0
       --BEGIN
       --     IF @BarrettType > 0
       --     BEGIN
       --            SET @temp = CASE @BarrettType
       --                                WHEN 1 THEN 'Non-circular '
       --                                WHEN 2 THEN 'Star-shaped '
       --                                WHEN 3 THEN 'Circumferential '
       --                                WHEN 4 THEN 'Islands of '
       --                                ELSE ''
       --                         END
       --     END
       --     SET @summary = @temp + 'Barrett''s epithelium ' + CASE WHEN @ExtentStart> 0 THEN 'from ' + CONVERT(VARCHAR(20), @ExtentStart) + 'cm' ELSE '' END
--           IF @ExtentStart > 0 AND @ExtentEnd > 0
       --     BEGIN
       --            SET @summary = @summary + ' to ' +  CONVERT(VARCHAR(20), @ExtentEnd) + 'cm'
       --     END
       --END


       -- Finally update the summary in abnormalities table
       UPDATE ERS_UpperGIAbnoBarrett
       SET Summary = @Summary 
       WHERE SiteId = @siteId


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------274 Create Proc abnormalities_oesophagitis_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_oesophagitis_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_oesophagitis_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
		DECLARE
		@summary VARCHAR(8000),
		@temp VARCHAR(50),
		@None BIT,
		@MucosalAppearance TINYINT,
		@Reflux BIT,
		@ActiveBleeding BIT,
		@MSMGrade1 BIT,
		@MSMGrade2a BIT,
		@MSMGrade2b BIT,
		@MSMGrade3 BIT,
		@MSMGrade4 BIT,
		@MSMGrade5 BIT,
		@ShortOesophagus BIT,
		@Ulcer BIT,
		@Stricture BIT,
		@LAClassification TINYINT,
		@Other BIT,
		@SuspectedCandida BIT,
		@CausticIngestion BIT,
		@SuspectedHerpes BIT,
		@OtherTypeOther BIT,
		@OtherTypeOtherDesc VARCHAR(200),
		@SuspectedCandidaSeverity TINYINT,
		@CausticIngestionSeverity TINYINT,
		@SuspectedHerpesSeverity TINYINT

		DECLARE @nonGrade5MSMText VARCHAR(200) = '',
				--@mMSM VARCHAR(50) = '',
				@sg2common VARCHAR(50) = '',
				@sg2common1 VARCHAR(50) = '',
				@Grade VARCHAR(50) = 'grade ',
				@sg1 VARCHAR(220) = '',
				@sg2 VARCHAR(220) = '',
				@sg2a VARCHAR(320) = '',
				@sg2b VARCHAR(320) = '',
				@sg3 VARCHAR(320) = '',
				@plus VARCHAR(10) = '',
				@Grade5BarrattsText VARCHAR(200) = '',
				@RefluxBleedingOnly VARCHAR(200) = ''

	SELECT 
		@None=[None],
		@MucosalAppearance = MucosalAppearance,
		@Reflux = ISNULL(Reflux,0),
		@ActiveBleeding = ISNULL(ActiveBleeding,0),
		@MSMGrade1 = ISNULL(MSMGrade1,0),
		@MSMGrade2a = ISNULL(MSMGrade2a,0),
		@MSMGrade2b = ISNULL(MSMGrade2b,0),
		@MSMGrade3 = ISNULL(MSMGrade3,0),
		@MSMGrade4 = ISNULL(MSMGrade4,0),
		@MSMGrade5 = ISNULL(MSMGrade5,0),
		@ShortOesophagus = ISNULL(ShortOesophagus,0),
		@Ulcer = ISNULL(Ulcer,0),
		@Stricture = ISNULL(Stricture,0),
		@LAClassification = LAClassification,
		@Other = Other,
		@SuspectedCandida = SuspectedCandida,
		@CausticIngestion = CausticIngestion,
		@SuspectedHerpes = SuspectedHerpes,
		@OtherTypeOther = OtherTypeOther,
		@OtherTypeOtherDesc = ISNULL(OtherTypeOtherDesc,''),
		@SuspectedCandidaSeverity = SuspectedCandidaSeverity,
		@CausticIngestionSeverity = CausticIngestionSeverity,
		@SuspectedHerpesSeverity = SuspectedHerpesSeverity
	FROM
		ERS_UpperGIAbnoOesophagitis
	WHERE
		SiteId = @SiteId

	SET @Summary = ''
	SET @temp = ''

	--If 'No oesophagitis' then ...
	IF @None = 1
		SET @summary = @summary + 'No oesophagitis'
	
	ELSE IF @MucosalAppearance > 0 OR @Reflux = 1 OR @Other = 1
	BEGIN
        -- There IS Oesophagitis or Barrett's so ...
        -- nonMSMOesoText contains the non-MSM oesophagitis text
		DECLARE @tmpOeso TABLE(Val VARCHAR(MAX))

		DECLARE @tmpVal VARCHAR(500) = '',
				@LAClassText VARCHAR(300) = ''
		DECLARE @SC VARCHAR(50) = '',
				@SH VARCHAR(50) = '',
				@nonMSMOesoText VARCHAR(500) = '',
				@withText VARCHAR(20) = '',
				--@MA VARCHAR(50) = '',
				@Oeso VARCHAR(150) = '',
				@mMSM VARCHAR(150) = 'Modified Savary Miller '
		DECLARE @XMLlist XML
				

		IF @Other = 1
		BEGIN
			-- Suspected candida
			IF @SuspectedCandida = 1
			BEGIN
				SET @SC = CASE @SuspectedCandidaSeverity
							WHEN 1 THEN 'mild '
							WHEN 2 THEN 'moderate '
							WHEN 3 THEN 'severe '
							ELSE ''
						END
				SET @SC = @SC + 'candida'
				INSERT INTO @tmpOeso (Val) VALUES(@SC)
			END
			--Suspected herpes
			IF @SuspectedHerpes = 1
			BEGIN
				SET @SH = ''
				SET @SH = CASE @SuspectedHerpesSeverity
							WHEN 1 THEN 'mild '
							WHEN 2 THEN 'moderate '
							WHEN 3 THEN 'severe '
							ELSE ''
						END
				SET @SH = @SH + 'herpes'
				INSERT INTO @tmpOeso (Val) VALUES(@SH)
			END

			--'If either candida or herpes then add 'suspected'
			IF @SuspectedHerpes = 1 UPDATE @tmpOeso SET VAL = VAL + ' suspected' WHERE VAL LIKE '%herpes' --  SET @SH = @SH + ' suspected'
			ELSE IF @SuspectedCandida = 1  UPDATE @tmpOeso SET VAL = VAL + ' suspected' WHERE VAL LIKE '%candida' -- SET @SC = @SC + ' suspected'

			--IF @SuspectedHerpes = 1 INSERT INTO @tmpOeso (Val) VALUES(@SH)
			--IF @SuspectedCandida = 1 INSERT INTO @tmpOeso (Val) VALUES(@SC)

			--Caustic ingestion
			IF @CausticIngestion = 1
			BEGIN
				SET @tmpVal = ''
				SET @tmpVal = CASE @CausticIngestionSeverity
							WHEN 1 THEN 'mild '
							WHEN 2 THEN 'moderate '
							WHEN 3 THEN 'severe '
							ELSE ''
						END
				SET @tmpVal = @tmpVal + 'caustic ingestion'
				INSERT INTO @tmpOeso (Val) VALUES(@tmpVal)
			END

			--Other
			If @OtherTypeOther = 1 AND LTRIM(RTRIM(@OtherTypeOtherDesc)) <> ''
			BEGIN
				SET @tmpVal = ''
				SET @tmpVal = LTRIM(RTRIM(@OtherTypeOtherDesc))
				SET @tmpVal = dbo.fnFirstLetterUpper(@tmpVal)
				INSERT INTO @tmpOeso (Val) VALUES(@tmpVal)
			END
		END  --'Of Oesophagitis other

		--Mucosal appearance
		IF @MucosalAppearance > 0
		BEGIN
			SET @tmpVal = ''
			SET @tmpVal = CASE @MucosalAppearance
						WHEN 1 THEN 'normal mucosa'
						WHEN 2 THEN 'discrete erosion '
						WHEN 3 THEN 'discrete pseudomembranes '
						WHEN 4 THEN 'confluent ulceration '
						WHEN 5 THEN 'confluent pseudomembranes '
						ELSE ''
					END
			INSERT INTO @tmpOeso (Val) VALUES(@tmpVal)
			--IF @Reflux = 1 SET @temp = @temp + 'with '
		END

		SET @XMLlist = (SELECT Val FROM @tmpOeso FOR XML  RAW, ELEMENTS, TYPE)
		SET @nonMSMOesoText = dbo.fnBuildString(@XMLlist)

		--If there's only one of the above then the sentence will be concatenated with any others using the 'with' conjunction, else it will read 'together with'
		IF ISNULL((SELECT COUNT(Val) FROM @tmpOeso WHERE NOT VAL IS NULL),0) = 1
			SET @withText = ' with '
		ELSE IF ISNULL((SELECT COUNT(Val) FROM @tmpOeso WHERE NOT VAL IS NULL),0) <> 0
			SET @withText = ' together with '

		DECLARE @OesophagitisClassification BIT
		SELECT @OesophagitisClassification = ISNULL(OesophagitisClassification,0) FROM ERS_SystemConfig 
		WHERE OperatingHospitalID = 
			(SELECT OperatingHospitalID FROM ERS_Procedures WHERE ProcedureId = 
				(SELECT ProcedureId FROM ERS_Sites WHERE SiteId = @SiteId))

		--Which Oeso Classification?
		IF @LAClassification > 0 OR @OesophagitisClassification > 0
		BEGIN
			SET @tmpVal = ''
			SET @tmpVal = CASE @LAClassification
						WHEN 1 THEN 'grade A oesophagitis (mucosal breaks confined to the mucosal fold each no longer than 5mm'
						WHEN 2 THEN 'grade B oesophagitis (at least one mucosal break longer than 5mm confined to the mucosal fold but not continuous between two folds'
						WHEN 3 THEN 'grade C oesophagitis (mucosal breaks that are continuous between the tops of mucosal folds but not circumferential'
						WHEN 4 THEN 'grade D oesophagitis (extensive mucosal breaks engaging at least 75% of the oesophageal circumference'
						ELSE ''
					END
				
			IF @ActiveBleeding = 1 SET @tmpVal = @tmpVal + ' with active bleeding'
			SET @tmpVal = @tmpVal + ')'

			DELETE @tmpOeso

			--If there's Short oesophagus
			IF @ShortOesophagus = 1 INSERT INTO @tmpOeso (Val) VALUES('short oesophagus')

			--If there's Ulceration
			IF @Ulcer = 1 INSERT INTO @tmpOeso (Val) VALUES('ulcer')

			IF @Stricture = 1 INSERT INTO @tmpOeso (Val) VALUES('stricture')
				
			SET @XMLlist = (SELECT Val FROM @tmpOeso FOR XML  RAW, ELEMENTS, TYPE)

			IF (SELECT COUNT(Val) FROM @tmpOeso) > 0 SET @tmpVal = @tmpVal + ' and ' + dbo.fnBuildString(@XMLlist)

			IF @tmpVal <> '' SET @LAClassText = dbo.fnFirstLetterUpper(@tmpVal)
		END
		ELSE
		BEGIN
			SET @tmpVal = ''

			DELETE FROM @tmpOeso

			If @MSMGrade5=1 SET @nonGrade5MSMText = @mMSM + 'grade 5. '

			--If the site has both reflux grade 5 and grade 4
			If @MSMGrade5=1 AND (@MSMGrade4=1 OR @MSMGrade3=1 OR @MSMGrade2b=1 OR @MSMGrade2a=1 OR @MSMGrade1=1) 
			BEGIN
				SET @nonGrade5MSMText = @nonGrade5MSMText + 'This is associated with '
				SET @mMSM = 'grade 4 '
			END

			--If the site is not 5 but is 4 or less
			If @MSMGrade5=0 AND (@MSMGrade4=1 OR @MSMGrade3=1 OR @MSMGrade2b=1 OR @MSMGrade2a=1 OR @MSMGrade1=1) 
			BEGIN
				SET @nonGrade5MSMText = @nonGrade5MSMText + @mMSM

				IF @MSMGrade4=1
				BEGIN
					SET @nonGrade5MSMText = @nonGrade5MSMText + 'grade 4 '
					SET @Grade = ''
					SET @mMSM = ''
				END
			END

			IF @MSMGrade4=1
			BEGIN
				SET @plus = ' plus '
				IF @ShortOesophagus=0 AND @Ulcer=0 AND @Stricture=0 
					SET @nonGrade5MSMText = @nonGrade5MSMText + @mMSM + 'chronic lesions'
			END

			--If there's Grade 4 Short oesophagus
			IF @ShortOesophagus=1 INSERT INTO @tmpOeso (Val) VALUES('short oesophagus')

			--If there's Grade 4 Ulceration
			IF @Ulcer=1  INSERT INTO @tmpOeso (Val) VALUES('ulcer')

			IF @Stricture=1  INSERT INTO @tmpOeso (Val) VALUES('stricture')

			IF (SELECT COUNT(Val) FROM @tmpOeso) > 0
			BEGIN
				SET @XMLlist = (SELECT Val FROM @tmpOeso FOR XML  RAW, ELEMENTS, TYPE)
				SET @nonGrade5MSMText = RTRIM(@nonGrade5MSMText) + ' ' + @mMSM + dbo.fnBuildString(@XMLlist)
			END 

			SET @sg2common = 'multiple erosions, non-circumferential, '
			SET @sg2common1 = 'affecting more than one longitudinal fold '

			IF @Grade <> ''
			BEGIN
				SET @sg1 = @Grade + '1 '
				SET @sg2 = @Grade + '2 '
				SET @sg2a = @Grade + '2a '
				SET @sg2b = @Grade + '2b '
				SET @sg3 = @Grade + '3 '
			END

			SET @sg1 = @sg1 + 'single or isolated erosion(s), oval or linear, but affecting only one longitudinal fold '
			SET @sg2 = @sg2 + @sg2common + @sg2common1
			SET @sg2a = @sg2a + @sg2common + 'without confluence, ' + @sg2common1
			SET @sg2b = @sg2b + @sg2common + 'with confluence, ' + @sg2common1
			SET @sg3 = @sg3 + 'circumferential erosion' 
				
			--If reflux grade 3, 2b, 2a or 1 then just report the grade description.
			If @MSMGrade3=1 SET @nonGrade5MSMText = @nonGrade5MSMText + @plus + @sg3
			If @MSMGrade2b=1 SET @nonGrade5MSMText = @nonGrade5MSMText + @plus + @sg2b
			If @MSMGrade2a=1 SET @nonGrade5MSMText = @nonGrade5MSMText + @plus + @sg2a
			If @MSMGrade1=1 SET @nonGrade5MSMText = @nonGrade5MSMText + @plus + @sg1

			IF LTRIM(RTRIM(@nonGrade5MSMText)) <> ''
			BEGIN
				IF @ActiveBleeding=1 SET @nonGrade5MSMText = @nonGrade5MSMText + ' and active bleeding'
			END
		END

        --'-----------------------------------------------------------------------------------------
        --' if any non Grade 5 has been reported then "active bleeding" has been already included,
        --' if any Grade 5 has been reported then now is the time to add "active bleeding",
        --' but if neither has been reported then it's just "reflux oesophagitis"
        --' (with or without active bleeding)
        --'-----------------------------------------------------------------------------------------
			
		IF LTRIM(RTRIM(@nonGrade5MSMText)) <> ''
		BEGIN
			IF LTRIM(RTRIM(@LAClassText)) = ''
			BEGIN
				IF @Reflux=1 SET @RefluxBleedingOnly = 'Reflux oesophagitis'  --'unspecified type of reflux (no MSM grade)

				IF @ActiveBleeding=1
				BEGIN
					IF @RefluxBleedingOnly <> '' SET @RefluxBleedingOnly = @RefluxBleedingOnly + ' with active bleeding'
					ELSE SET @RefluxBleedingOnly = 'Active bleeding'
				END
			END
		END

        --'If stricture has been reported check to see if scope could pass. Note stricture can
        --'only occur on MSM Grade 4 therefore text is added to nonGrade5MSMText
		--VB6 Code - StrictureReported variable will always be false


		--'complete the unspecified reflux sentence
		SET @RefluxBleedingOnly = dbo.fnAddFullStop(@RefluxBleedingOnly)
		
		IF @nonGrade5MSMText <> ''
		BEGIN
			--If there's non-MSM Oeso text to begin with then we need to combine sentences with the conjuction
			IF @nonMSMOesoText <> ''
				SET @summary = @nonMSMOesoText + @withText + @nonGrade5MSMText
			ELSE
				SET @summary = @nonGrade5MSMText

			IF  @ActiveBleeding=1 SET @Grade5BarrattsText =  ' and active bleeding'
		END
		ELSE
		BEGIN
			--'If there's LA Classification then ...
			IF @LAClassText <> '' 
			BEGIN
				SET @summary = @nonMSMOesoText + @withText + @LAClassText
				SET @LAClassText=''
			END
			ELSE
			BEGIN
				--'But if there's only Oesophagitis other
				SET @summary = @nonMSMOesoText
			END

		END
	END

	SET @Summary = LTRIM(RTRIM(@Summary))
	IF RIGHT(@Summary,1) = '.' SET @Summary = LEFT(@Summary, LEN(@Summary) - 1)

	-- Finally update the summary in abnormalities table
	UPDATE ERS_UpperGIAbnoOesophagitis
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------275 Create Proc abnormalities_miscellaneous_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_miscellaneous_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_miscellaneous_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,						
	[None],							
	[Web],							
	[Mallory],				
	[SchatzkiRing],					
	[FoodResidue],					
	[Foreignbody],					
	[ExtrinsicCompression],			
	[Diverticulum],					
	[DivertMultiple],				
	[DivertQty],						
	[Pharyngeal],					
	[DiffuseIntramural],				
	[TractionType],					
	[PulsionType],					
	[MotilityDisorder],				
	[ProbableAchalasia],				
	[ConfirmedAchalasia],			
	[Presbyoesophagus],				
	[MarkedTertiaryContractions],	
	[LaxLowerOesoSphincter],			
	[TortuousOesophagus],			
	[DilatedOesophagus],				
	[MotilityPoor],					
	[Ulceration],					
	[UlcerationType],				
	[UlcerationMultiple],			
	[UlcerationQty],					
	[UlcerationLength],				
	[UlcerationClotInBase],			
	[UlcerationReflux],				
	[UlcerationPostSclero],			
	[UlcerationPostBanding],			
	[Stricture],						
	[StrictureCompression],			
	[StrictureScopeNotPass],			
	[StrictureSeverity],			
	[StrictureType],					
	[StrictureProbably],				
	[StrictureBenignType],			
	[StrictureBeginning],			
	[StrictureLength],	
	[StricturePerforation],			
	[Tumour],						
	[TumourType],					
	[TumourProbably],				
	[TumourExophytic],				
	[TumourBenignType],				
	[TumourBenignTypeOther],			
	[TumourBeginning],				
	[TumourLength],					
	[MiscOther],						
	[EUSproctype],
	[InletPatch],
	[InletPatchMultiple],
	[InletPatchQty],
	[Summary]
FROM
	[ERS_UpperGIAbnoMiscellaneous]
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------276 Create Proc abnormalities_miscellaneous_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_miscellaneous_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_miscellaneous_save]
(
	@SiteId INT,
	@None BIT,
	@Web BIT,
	@Mallory BIT,
	@SchatzkiRing BIT,
	@FoodResidue BIT,
	@Foreignbody BIT,
	@ExtrinsicCompression BIT,
	@Diverticulum BIT,
	@DivertMultiple BIT,
	@DivertQty SMALLINT,
	@Pharyngeal BIT,
	@DiffuseIntramural BIT,
	@TractionType BIT,
	@PulsionType BIT,
	@MotilityDisorder BIT,
	@ProbableAchalasia BIT,
	@ConfirmedAchalasia BIT,
	@Presbyoesophagus BIT,
	@MarkedTertiaryContractions BIT,
	@LaxLowerOesoSphincter BIT,
	@TortuousOesophagus BIT,
	@DilatedOesophagus BIT,
	@MotilityPoor BIT,
	@Ulceration BIT,
	@UlcerationType BIT,
	@UlcerationMultiple BIT,
	@UlcerationQty SMALLINT,
	@UlcerationLength SMALLINT,
	@UlcerationClotInBase BIT,
	@UlcerationReflux BIT,
	@UlcerationPostSclero BIT,
	@UlcerationPostBanding BIT,
	@Stricture BIT,
	@StrictureCompression TINYINT,
	@StrictureScopeNotPass BIT,
	@StrictureSeverity TINYINT,
	@StrictureType SMALLINT,
	@StrictureProbably BIT,
	@StrictureBenignType TINYINT,
	@StrictureBeginning SMALLINT,
	@StrictureLength SMALLINT,
	@StricturePerforation TINYINT,
	@Tumour BIT,
	@TumourType TINYINT,
	@TumourProbably BIT,
	@TumourExophytic TINYINT,
	@TumourBenignType TINYINT,
	@TumourBenignTypeOther NVARCHAR(100),
	@TumourBeginning SMALLINT,
	@TumourLength SMALLINT,
	@MiscOther NVARCHAR(150),
	@IsLAClassification BIT,
	@InletPatch BIT,
	@InletPatchMultiple BIT,
	@InletPatchQty SMALLINT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoMiscellaneous WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoMiscellaneous (
			SiteId,
			[None],
			Web,
			Mallory,
			SchatzkiRing,
			FoodResidue,
			Foreignbody,
			ExtrinsicCompression,
			Diverticulum,
			DivertMultiple,
			DivertQty,
			Pharyngeal,
			DiffuseIntramural,
			TractionType,
			PulsionType,
			MotilityDisorder,
			ProbableAchalasia,
			ConfirmedAchalasia,
			Presbyoesophagus,
			MarkedTertiaryContractions,
			LaxLowerOesoSphincter,
			TortuousOesophagus,
			DilatedOesophagus,
			MotilityPoor,
			Ulceration,
			UlcerationType,
			UlcerationMultiple,
			UlcerationQty,
			UlcerationLength,
			UlcerationClotInBase,
			UlcerationReflux,
			UlcerationPostSclero,
			UlcerationPostBanding,
			Stricture,
			StrictureCompression,
			StrictureScopeNotPass,
			StrictureSeverity,
			StrictureType,
			StrictureProbably,
			StrictureBenignType,
			StrictureBeginning,
			StrictureLength,
			StricturePerforation,
			Tumour,
			TumourType,
			TumourProbably,
			TumourExophytic,
			TumourBenignType,
			TumourBenignTypeOther,
			TumourBeginning,
			TumourLength,
			MiscOther,
			IsLAClassification,
			InletPatch,
			InletPatchMultiple,
			InletPatchQty,
			WhoCreatedId,
			WhenCreated) 
		VALUES (@SiteId,
				@None,
				@Web,
				@Mallory,
				@SchatzkiRing,
				@FoodResidue,
				@Foreignbody,
				@ExtrinsicCompression,
				@Diverticulum,
				@DivertMultiple,
				@DivertQty,
				@Pharyngeal,
				@DiffuseIntramural,
				@TractionType,
				@PulsionType,
				@MotilityDisorder,
				@ProbableAchalasia,
				@ConfirmedAchalasia,
				@Presbyoesophagus,
				@MarkedTertiaryContractions,
				@LaxLowerOesoSphincter,
				@TortuousOesophagus,
				@DilatedOesophagus,
				@MotilityPoor,
				@Ulceration,
				@UlcerationType,
				@UlcerationMultiple,
				@UlcerationQty,
				@UlcerationLength,
				@UlcerationClotInBase,
				@UlcerationReflux,
				@UlcerationPostSclero,
				@UlcerationPostBanding,
				@Stricture,
				@StrictureCompression,
				@StrictureScopeNotPass,
				@StrictureSeverity,
				@StrictureType,
				@StrictureProbably,
				@StrictureBenignType,
				@StrictureBeginning,
				@StrictureLength,
				@StricturePerforation,
				@Tumour,
				@TumourType,
				@TumourProbably,
				@TumourExophytic,
				@TumourBenignType,
				@TumourBenignTypeOther,
				@TumourBeginning,
				@TumourLength,
				@MiscOther,
				@IsLAClassification,
				@InletPatch,
				@InletPatchMultiple,
				@InletPatchQty,
				@LoggedInUserId,
				GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Miscellaneous',
			1)
	END

	ELSE IF (@None = 0 AND @Web = 0 AND @Mallory = 0 AND @SchatzkiRing = 0 AND @FoodResidue = 0 
			AND @Diverticulum = 0 AND @MotilityDisorder = 0 AND @Ulceration = 0 AND @Stricture = 0 AND @Tumour = 0
			AND RTRIM(LTRIM(@MiscOther)) = '')
	BEGIN
		DELETE FROM ERS_UpperGIAbnoMiscellaneous 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Miscellaneous'
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoMiscellaneous
		SET 
			[None]				=	@None,
			Web					=	@Web,
			Mallory				=	@Mallory,
			SchatzkiRing		=	@SchatzkiRing,
			FoodResidue			=	@FoodResidue,
			Foreignbody = @Foreignbody,
			ExtrinsicCompression	=	@ExtrinsicCompression,
			Diverticulum		=	@Diverticulum,
			DivertMultiple		=	@DivertMultiple,
			DivertQty			=	@DivertQty,
			Pharyngeal			=	@Pharyngeal,
			DiffuseIntramural	=	@DiffuseIntramural,
			TractionType		=	@TractionType,
			PulsionType			=	@PulsionType,
			MotilityDisorder	=	@MotilityDisorder,
			ProbableAchalasia	=	@ProbableAchalasia,
			ConfirmedAchalasia	=	@ConfirmedAchalasia,
			Presbyoesophagus	=	@Presbyoesophagus,
			MarkedTertiaryContractions	=	@MarkedTertiaryContractions,
			LaxLowerOesoSphincter		=	@LaxLowerOesoSphincter,
			TortuousOesophagus		=	@TortuousOesophagus,
			DilatedOesophagus		=	@DilatedOesophagus,
			MotilityPoor			=	@MotilityPoor,
			Ulceration				=	@Ulceration,
			UlcerationType			=	@UlcerationType,
			UlcerationMultiple		=	@UlcerationMultiple,
			UlcerationQty			=	@UlcerationQty,
			UlcerationLength		=	@UlcerationLength,
			UlcerationClotInBase	=	@UlcerationClotInBase,
			UlcerationReflux		=	@UlcerationReflux,
			UlcerationPostSclero	=	@UlcerationPostSclero,
			UlcerationPostBanding	=	@UlcerationPostBanding,
			Stricture				=	@Stricture,
			StrictureCompression	=	@StrictureCompression,
			StrictureScopeNotPass	=	@StrictureScopeNotPass,
			StrictureSeverity		=	@StrictureSeverity,
			StrictureType			=	@StrictureType,
			StrictureProbably		=	@StrictureProbably,
			StrictureBenignType		=	@StrictureBenignType,
			StrictureBeginning		=	@StrictureBeginning,
			StrictureLength			=	@StrictureLength,
			StricturePerforation	=	@StricturePerforation,
			Tumour					=	@Tumour,
			TumourType				=	@TumourType,
			TumourProbably			=	@TumourProbably,
			TumourExophytic			=	@TumourExophytic,
			TumourBenignType		=	@TumourBenignType,
			TumourBenignTypeOther	=	@TumourBenignTypeOther,
			TumourBeginning			=	@TumourBeginning,
			TumourLength			=	@TumourLength,
			MiscOther				=	@MiscOther,
			IsLAClassification		=	@IsLAClassification,
			InletPatch				=	@InletPatch,
			InletPatchMultiple		=	@InletPatchMultiple,
			InletPatchQty			=	@InletPatchQty,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------277 Create Proc abnormalities_miscellaneous_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_miscellaneous_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_miscellaneous_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@Summary VARCHAR(1200),
		@temp VARCHAR(50),
		@OesoUlcer BIT,
		@None BIT,
		@Web BIT,
		@Mallory BIT,
		@SchatzkiRing BIT,
		@FoodResidue BIT,
		@Foreignbody BIT,
		@ExtrinsicCompression BIT,
		@Diverticulum BIT,
		@DivertMultiple BIT,
		@DivertQty SMALLINT,
		@Pharyngeal BIT,
		@DiffuseIntramural BIT,
		@TractionType BIT,
		@PulsionType BIT,
		@MotilityDisorder BIT,
		@ProbableAchalasia BIT,
		@ConfirmedAchalasia BIT,
		@Presbyoesophagus BIT,
		@MarkedTertiaryContractions BIT,
		@LaxLowerOesoSphincter BIT,
		@TortuousOesophagus BIT,
		@DilatedOesophagus BIT,
		@MotilityPoor BIT,
		@Ulceration BIT,
		@UlcerationType BIT,
		@UlcerationMultiple BIT,
		@UlcerationQty SMALLINT,
		@UlcerationLength SMALLINT,
		@UlcerationClotInBase BIT,
		@UlcerationReflux BIT,
		@UlcerationPostSclero BIT,
		@UlcerationPostBanding BIT,
		@Stricture BIT,
		@StrictureCompression TINYINT,
		@StrictureScopeNotPass BIT,
		@StrictureSeverity TINYINT,
		@StrictureType SMALLINT,
		@StrictureProbably BIT,
		@StrictureBenignType TINYINT,
		@StrictureBeginning SMALLINT,
		@StrictureLength SMALLINT,
		@StricturePerforation TINYINT,
		@Tumour BIT,
		@TumourType TINYINT,
		@TumourProbably BIT,
		@TumourExophytic TINYINT,
		@TumourBenignType TINYINT,
		@TumourBenignTypeOther NVARCHAR(100),
		@TumourBeginning SMALLINT,
		@TumourLength SMALLINT,
		@MiscOther NVARCHAR(150),
		@IsLAClassification BIT,
		@InletPatch BIT,
		@InletPatchMultiple BIT,
		@InletPatchQty SMALLINT

	SELECT 
		@None				=	[None],
		@Web				=	Web,
		@Mallory			=	Mallory,
		@SchatzkiRing		=	SchatzkiRing,
		@FoodResidue		=	FoodResidue,
		@Foreignbody 		= 	Foreignbody,
		@ExtrinsicCompression	=	ExtrinsicCompression,
		@Diverticulum		=	Diverticulum,
		@DivertMultiple		=	DivertMultiple,
		@DivertQty			=	DivertQty,
		@Pharyngeal			=	Pharyngeal,
		@DiffuseIntramural	=	DiffuseIntramural,
		@TractionType		=	TractionType,
		@PulsionType		=	PulsionType,
		@MotilityDisorder	=	MotilityDisorder,
		@ProbableAchalasia	=	ProbableAchalasia,
		@ConfirmedAchalasia	=	ConfirmedAchalasia,
		@Presbyoesophagus	=	Presbyoesophagus,
		@MarkedTertiaryContractions	=	MarkedTertiaryContractions,
		@LaxLowerOesoSphincter		=	LaxLowerOesoSphincter,
		@TortuousOesophagus		=	TortuousOesophagus,
		@DilatedOesophagus		=	DilatedOesophagus,
		@MotilityPoor			=	MotilityPoor,
		@Ulceration				=	Ulceration,
		@UlcerationType			=	UlcerationType,
		@UlcerationMultiple		=	UlcerationMultiple,
		@UlcerationQty			=	UlcerationQty,
		@UlcerationLength		=	UlcerationLength,
		@UlcerationClotInBase	=	UlcerationClotInBase,
		@UlcerationReflux		=	UlcerationReflux,
		@UlcerationPostSclero	=	UlcerationPostSclero,
		@UlcerationPostBanding	=	UlcerationPostBanding,
		@Stricture				=	Stricture,
		@StrictureCompression	=	StrictureCompression,
		@StrictureScopeNotPass	=	StrictureScopeNotPass,
		@StrictureSeverity		=	StrictureSeverity,
		@StrictureType			=	StrictureType,
		@StrictureProbably		=	StrictureProbably,
		@StrictureBenignType	=	StrictureBenignType,
		@StrictureBeginning		=	StrictureBeginning,
		@StrictureLength		=	StrictureLength,
		@StricturePerforation	=	StricturePerforation,
		@Tumour					=	Tumour,
		@TumourType				=	TumourType,
		@TumourProbably			=	TumourProbably,
		@TumourExophytic		=	TumourExophytic,
		@TumourBenignType		=	TumourBenignType,
		@TumourBenignTypeOther	=	TumourBenignTypeOther,
		@TumourBeginning		=	TumourBeginning,
		@TumourLength			=	TumourLength,
		@MiscOther				=	MiscOther,
		@IsLAClassification		=	ISNULL(IsLAClassification,0),
		@InletPatch				=	InletPatch,
		@InletPatchMultiple		=	InletPatchMultiple,
		@InletPatchQty			=	InletPatchQty
	FROM
		ERS_UpperGIAbnoMiscellaneous
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @None = 1
		SET @Summary = '' --@Summary + 'No varices'
	ELSE 
	BEGIN

		DECLARE @tmpMisc	TABLE(Val VARCHAR(MAX))
		DECLARE @tmpMiscTAR TABLE(Val VARCHAR(MAX))
		DECLARE @UlcerText VARCHAR(500)
		DECLARE @StrictText VARCHAR(500)
		DECLARE @TumourText VARCHAR(500)
		DECLARE @a VARCHAR(500) = ''
		DECLARE @XMLlist XML
		DECLARE @br VARCHAR(7) = '<br />'
		DECLARE @indent VARCHAR(10) = '&nbsp;- ';

		--This line will be ignored in funtion dbo.fnBuildString at the end
		INSERT INTO @tmpMisc (Val) VALUES('~~NoCommas~~')

		IF ISNULL(@Ulceration,0) = 1
		BEGIN
			IF @Ulceration = 1 SET @UlcerText = dbo.fnRepOesoUlcer(@SiteId)
			IF @UlcerText <> '' INSERT INTO @tmpMisc (Val) VALUES(@indent + dbo.fnFirstLetterUpper(RTRIM(LTRIM(@UlcerText))) + '.' + @br)
		END

		IF ISNULL(@Tumour,0) = 1
		BEGIN
			SET @TumourText = dbo.fnRepOesoTumour(@SiteId)
			IF @TumourText <> '' INSERT INTO @tmpMisc (Val) VALUES(@indent + dbo.fnFirstLetterUpper(RTRIM(LTRIM(@TumourText))) + '.' + @br)
		END

		IF ISNULL(@Stricture,0) = 1
		BEGIN
			SET @StrictText = dbo.fnRepOesoStricture(@SiteId)
			IF @StrictText <> '' INSERT INTO @tmpMisc (Val) VALUES(@indent + dbo.fnFirstLetterUpper(RTRIM(LTRIM(@StrictText))) + '.' + @br)
		END

		--IF ISNULL(@TumourText,'') <> '' AND ISNULL(@StrictText,'') <> '' 
		--	SET @a = @TumourText + '. <br />' + @StrictText
		--ELSE
		--SET @a = RTRIM(LTRIM(ISNULL(@TumourText,'') + ISNULL(@StrictText,'')))

		--IF @a <> '' INSERT INTO @tmpMisc (Val) VALUES(@a)

		IF @Web = 1				INSERT INTO @tmpMiscTAR (Val) VALUES('web')
		IF @Mallory = 1			INSERT INTO @tmpMiscTAR (Val) VALUES('Mallory-Weiss tear')
		IF @SchatzkiRing = 1	INSERT INTO @tmpMiscTAR (Val) VALUES('Schatzki ring')
		IF @ExtrinsicCompression = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('extrinsic compression')
		IF @FoodResidue = 1		INSERT INTO @tmpMiscTAR (Val) VALUES('food residue')
		IF @Foreignbody = 1		INSERT INTO @tmpMiscTAR (Val) VALUES('foreign body')
		IF @InletPatch = 1 
		BEGIN
			SET @a = ''
			IF @InletPatchMultiple = 1
				SET @a = 'inlet patch: multiple '
			ELSE IF ISNULL(@InletPatchQty,0) > 0
			BEGIN
				IF ISNULL(@InletPatchQty,0) = 1 SET @a='one inlet patch'
				ELSE SET @a='inlet patch: ' + CONVERT(VARCHAR, @InletPatchQty) + ' '
			END

			INSERT INTO @tmpMiscTAR(Val) VALUES	(@a)
		END

		IF (SELECT COUNT(Val) FROM @tmpMiscTAR) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpMiscTAR FOR XML  RAW, ELEMENTS, TYPE)
			INSERT INTO @tmpMisc (Val) VALUES(@indent + dbo.fnFirstLetterUpper(dbo.fnBuildString(@XMLlist)) + '.' + @br)
			DELETE FROM @tmpMiscTAR
		END

		IF @MotilityDisorder = 1
		BEGIN
			IF @ProbableAchalasia = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('probable achalasia')
			IF @ConfirmedAchalasia = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('confirmed achalasia')
			IF @MarkedTertiaryContractions = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('marked tertiary contractions')
			IF @Presbyoesophagus = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('presbyoesophagus')
			IF @LaxLowerOesoSphincter = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('lax lower oesophageal sphincter')
			IF @TortuousOesophagus = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('tortuous oesophagus')
			IF @DilatedOesophagus = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('dilated oesophagus')
			IF @MotilityPoor = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('poor motility')

			IF (SELECT COUNT(Val) FROM @tmpMiscTAR) > 0 
			BEGIN
				SET @XMLlist = (SELECT Val FROM @tmpMiscTAR FOR XML  RAW, ELEMENTS, TYPE)
				INSERT INTO @tmpMisc (Val) VALUES(@indent + dbo.fnFirstLetterUpper(dbo.fnBuildString(@XMLlist)) + '.' + @br)
				DELETE FROM @tmpMiscTAR
			END
			ELSE --None selected
				INSERT INTO @tmpMisc (Val) VALUES(@indent + dbo.fnFirstLetterUpper('motility disorder') + '.' + @br)
		END


		SET @a = ''

		IF @Diverticulum = 1
		BEGIN
			IF @Pharyngeal = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('pharyngeal (Zenker''s)')
			IF @TractionType = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('traction type')
			IF @PulsionType = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('pulsion type')
			IF @DiffuseIntramural = 1 INSERT INTO @tmpMiscTAR (Val) VALUES('diffuse intramural')

			IF @DivertMultiple = 1 
				SET @a = 'diverticulae: multiple '
			ELSE IF ISNULL(@DivertQty,0) > 0
			BEGIN
				IF ISNULL(@DivertQty,0) = 1 SET @a = 'one diverticulum'
				ELSE SET @a = 'diverticulae: ' + CONVERT(VARCHAR, @DivertQty) + ' '
			END
			ELSE 
				SET @a = 'diverticulum: '
			
			IF (SELECT COUNT(Val) FROM @tmpMiscTAR) > 0
			BEGIN
				IF LEFT(@a,3) = 'one' SET @a = @a + ', '
				SET @XMLlist = (SELECT Val FROM @tmpMiscTAR FOR XML  RAW, ELEMENTS, TYPE)
				SET @a =  @a + dbo.fnBuildString(@XMLlist)
			END

			IF LEN(@a) > 0 
			BEGIN
				SET @a = RTRIM(LTRIM(@a))
				IF RIGHT(@a,1) = ':' SET @a = LEFT(@a, LEN(@a) - 1)
				INSERT INTO @tmpMisc (Val) VALUES(@indent + dbo.fnFirstLetterUpper(@a) + '.' + @br)
				DELETE FROM @tmpMiscTAR
			END
		END

		IF ISNULL(@MiscOther,'') <> '' 
			INSERT INTO @tmpMisc (Val) VALUES(@indent + dbo.fnFirstLetterUpper(RTRIM(@MiscOther)) + @br)

		SET @XMLlist = (SELECT Val FROM @tmpMisc FOR XML  RAW, ELEMENTS, TYPE)
		SET @Summary = dbo.fnBuildString(@XMLlist)

		IF @Summary <> '' 
		BEGIN
			SET @Summary = LTRIM(RTRIM(@Summary))
			--Remove the first indent as this will be done in SP sites_summary_update
			IF LEFT(@Summary,8) = @indent SET @Summary = RIGHT(@Summary, LEN(@Summary) - 8)
			IF RIGHT(@Summary,6) = @br SET @Summary = LEFT(@Summary, LEN(@Summary) - 6)
			IF RIGHT(@Summary,1) = '.' SET @Summary = LEFT(@Summary, LEN(@Summary) - 1)
		END
	END

	-- Finally update the summary in abnormalities table
	UPDATE ERS_UpperGIAbnoMiscellaneous
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------277a Create Proc ogd_kpi_stricture_perforation.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_kpi_stricture_perforation','S';
GO

-- =============================================
-- Description:	Get a list of regions where perforation occurred to be displayed under QA (Complications) as Perforation text
-- =============================================

CREATE PROCEDURE [dbo].[ogd_kpi_stricture_perforation]
(
	@SiteId	INT
)
AS

	DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
	DECLARE @proc_id INT, @XMLlist XML, @perforation VARCHAR(1000)=''

	SELECT TOP 1 @proc_id = ProcedureId
	FROM ERS_Sites
	WHERE SiteId = @SiteId

	INSERT INTO @tmpDiv (Val)
	SELECT  r.Region 
	FROM ERS_Sites s
	JOIN ERS_Regions r ON s.RegionId = r.RegionId
	JOIN ERS_UpperGIAbnoMiscellaneous u ON u.SiteId = s.SiteId AND ISNULL(StricturePerforation,0) = 1
	WHERE s.procedureid = @proc_id
	UNION
	SELECT  r.Region
	FROM ERS_Sites s
	JOIN ERS_Regions r ON s.RegionId = r.RegionId
	JOIN ERS_UpperGITherapeutics u ON u.SiteId = s.SiteId AND ISNULL(PyloricLeadingToPerforation,0) = 1
	WHERE s.procedureid = @proc_id

    SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
	SET @perforation = dbo.fnBuildString(@XMLlist)

	UPDATE ERS_UpperGIQA
	SET Perforation = CASE WHEN ISNULL(@perforation,'') <> '' THEN 1 ELSE 0 END,
		PerforationText = @perforation
	WHERE ProcedureID = @proc_id

	IF @@ROWCOUNT<=0 AND ISNULL(@perforation,'') <> ''
	BEGIN
		INSERT INTO ERS_UpperGIQA (ProcedureId,  Perforation, PerforationText)
		SELECT @proc_id, 1,  @perforation
	END

 GO 
--------------------------------------------------------------------------------------------------------------------
-------------------------------------278 Create Proc abnormalities_diverticulum_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_diverticulum_select','S';
GO


CREATE PROCEDURE [dbo].[abnormalities_diverticulum_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT [SiteId]
      ,[None]
      ,[Pseudodiverticulum]
      ,[Congenital1stPart]
      ,[Congenital2ndPart]
      ,[Other]
      ,[OtherDesc]
      ,[EUSProcType]
      ,[Summary]
  FROM 
	[ERS_CommonAbnoDiverticulum]
  WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------278a Create Proc abnormalities_diverticulum_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_diverticulum_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_diverticulum_save]
(
	@SiteId INT,
	@None BIT,
	@Pseudodiverticulum BIT,
	@Congenital1stPart BIT,
	@Congenital2ndPart BIT,
	@Other BIT,
	@OtherDesc VARCHAR(150),
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT
DECLARE @identifier VARCHAR(100)

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	
	--Abnormalities for OGD, Antegrade are "Diverticulum/Other"
	SET @identifier = CASE WHEN @proc_type IN (1,8) then 'Diverticulum/Other' ELSE 'Diverticulum' END
			
	IF NOT EXISTS (SELECT 1 FROM ERS_CommonAbnoDiverticulum WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_CommonAbnoDiverticulum (
			SiteId,
			[None],
			Pseudodiverticulum,
			Congenital1stPart,
			Congenital2ndPart,
			Other,
			OtherDesc,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Pseudodiverticulum,
			@Congenital1stPart,
			@Congenital2ndPart,
			@Other,
			@OtherDesc,
			@LoggedInUserId,
			GETDATE()) 

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			@identifier,
			1)
	END

	ELSE IF (@None = 0 AND @Pseudodiverticulum = 0 AND @Congenital1stPart = 0 AND @Congenital2ndPart = 0 AND @Other = 0)
	BEGIN
		DELETE FROM ERS_CommonAbnoDiverticulum 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = @identifier
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_CommonAbnoDiverticulum
		SET 
			[None] = @None,
			Pseudodiverticulum = @Pseudodiverticulum,
			Congenital1stPart = @Congenital1stPart,
			Congenital2ndPart = @Congenital2ndPart,
			Other = @Other,
			OtherDesc = @OtherDesc,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------278b Create Proc abnormalities_diverticulum_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_diverticulum_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_diverticulum_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
		DECLARE
		@summary VARCHAR(1000),
		@temp VARCHAR(50),
		@None BIT,
		@Pseudodiverticulum BIT,
		@Congenital1stPart BIT,
		@Congenital2ndPart BIT,
		@Other BIT,
		@OtherDesc VARCHAR(150)

	SELECT 
		@None=[None],
		@Pseudodiverticulum = Pseudodiverticulum,
		@Congenital1stPart = Congenital1stPart,
		@Congenital2ndPart = Congenital2ndPart,
		@Other = Other,
		@OtherDesc = OtherDesc
	FROM
		ERS_CommonAbnoDiverticulum
	WHERE
		SiteId = @SiteId

	SET @Summary = ''
	SET @temp = ''

	IF @None = 1
		SET @summary = @summary + 'No Diverticula'
	
	ELSE IF @Pseudodiverticulum = 1 OR @Congenital1stPart = 1 OR @Congenital2ndPart = 1 OR @Other = 1
	BEGIN

		DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
		DECLARE @XMLlist XML

		IF @Pseudodiverticulum = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('pseudodiverticulum')
		END

		IF @Congenital1stPart = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('1st part')
		END

		IF @Congenital2ndPart = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('2nd part')
		END

		IF @Other = 1
		BEGIN
			IF LTRIM(RTRIM(ISNULL(@OtherDesc,''))) = ''
				INSERT INTO @tmpDiv (Val) VALUES('other')
			ELSE
				INSERT INTO @tmpDiv (Val) VALUES(@OtherDesc)
		END
					
		IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = dbo.fnBuildString(@XMLlist)
		END
	END


	-- Finally update the summary in abnormalities table
	UPDATE ERS_CommonAbnoDiverticulum
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------279 Create Proc abnormalities_tumour_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_tumour_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_tumour_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

	SELECT [SiteId]
      ,[None]
      ,[Type]
      ,[Primary]
      ,[ExternalInvasion]
      ,[EUSProcType]
      ,[Summary]
	FROM 
		[dbo].[ERS_CommonAbnoTumour]
	WHERE 
		SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------279a Create Proc abnormalities_tumour_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_tumour_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_tumour_save]
(
	@SiteId INT,
	@None BIT,
	@Type TINYINT,
	@Primary BIT,
	@ExternalInvasion BIT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_CommonAbnoTumour WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_CommonAbnoTumour (
			SiteId,
			[None],
			[Type],
			[Primary],
			ExternalInvasion,
			WhoCreatedId,
			WhenCreated)
		VALUES (
			@SiteId,
			@None,
			@Type,
			@Primary,
			@ExternalInvasion,
			@LoggedInUserId,
			GETDATE()) 

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Tumour',
			1)
	END

	ELSE IF (@None = 0 AND @Type = 0)
	BEGIN
		DELETE FROM ERS_CommonAbnoTumour 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Tumour'
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_CommonAbnoTumour
		SET 
			[None] = @None,
			[Type] = @Type,
			[Primary] = @Primary,
			ExternalInvasion = @ExternalInvasion,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------279b Create Proc abnormalities_tumour_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_tumour_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_tumour_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
		DECLARE
		@summary VARCHAR(1000),
		@temp VARCHAR(50),
		@None BIT,
		@Type TINYINT,
		@Primary BIT,
		@ExternalInvasion BIT

	SELECT 
		@None=[None],
		@Type = [Type],
		@Primary = [Primary],
		@ExternalInvasion = ExternalInvasion
	FROM
		ERS_CommonAbnoTumour
	WHERE
		SiteId = @SiteId

	SET @Summary = ''
	SET @temp = ''

	IF @None = 1
		SET @summary = @summary + 'No tumour'
	
	ELSE IF @Type > 0
	BEGIN
		
		DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
		DECLARE @XMLlist XML
		DECLARE @a VARCHAR(200) = 'Tumour:'
		DECLARE @b VARCHAR(200) = ''
		DECLARE @c VARCHAR(200) = ''


		IF @Type = 1
		BEGIN
			SET @a = ''
			SET @b = ' Benign polyp'
		END
		ELSE IF @Type = 2
		BEGIN
			SET @b = ' lymphoma'
		END
		ELSE IF @Type = 3
		BEGIN
			SET @b = ' carcinoma'
			SET @c = ' probable'
		END
		ELSE IF @Type = 4
		BEGIN
			SET @b = ' carcinoma'
			SET @c = ' confirmed'
		END
		ELSE SET @a = ''


		IF @ExternalInvasion = 1 SET @a = @a + ' external invasion of'

		IF @Primary = 1 SET @a = @a + ' primary'

		IF @b <> '' SET @a = @a + @c + @b

		IF @a <> '' SET @Summary = @a 

	END

	-- Finally update the summary in abnormalities table
	UPDATE ERS_CommonAbnoTumour
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------280 Create Proc abnormalities_duodenitis_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duodenitis_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duodenitis_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT [SiteId]
      ,[None]
      ,[Duodenitis]
      ,[Severity]
      ,[Bleeding]
      ,[PatchyErythema]
      ,[DiffuseErythema]
      ,[Erosions]
      ,[Nodularity]
      ,[Oedematous]
      ,[EUSProcType]
      ,[Summary]
FROM 
	[dbo].[ERS_CommonAbnoDuodenitis]
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------280a Create Proc abnormalities_duodenitis_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duodenitis_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duodenitis_save]
(
	@SiteId INT,
    @None BIT,
    @Duodenitis BIT,
    @Severity TINYINT,
    @Bleeding TINYINT,
    @PatchyErythema BIT,
    @DiffuseErythema BIT,
    @Erosions BIT,
    @Nodularity BIT,
    @Oedematous BIT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT
DECLARE @region VARCHAR(500)

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType,
		@region = Region
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	JOIN
		ERS_Regions r ON s.RegionId = r.RegionId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_CommonAbnoDuodenitis WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_CommonAbnoDuodenitis (
			SiteId,
			[None],
			Duodenitis,
			Severity,
			Bleeding,
			PatchyErythema,
			DiffuseErythema,
			Erosions,
			Nodularity,
			Oedematous,
			WhoCreatedId,
			WhenCreated)
		VALUES (
			@SiteId,
			@None,
			@Duodenitis,
			@Severity,
			@Bleeding,
			@PatchyErythema,
			@DiffuseErythema,
			@Erosions,
			@Nodularity,
			@Oedematous,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			CASE WHEN @region = 'Jejunum' THEN 'Jejunitis' WHEN @region = 'Ileum' THEN 'Ileitis' ELSE 'Duodenitis' END,
			1)
	END

	ELSE IF (@None = 0 AND @Duodenitis = 0)
	BEGIN
		DELETE FROM ERS_CommonAbnoDuodenitis 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = CASE WHEN @region = 'Jejunum' THEN 'Jejunitis' WHEN @region = 'Ileum' THEN 'Ileitis' ELSE 'Duodenitis' END
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_CommonAbnoDuodenitis
		SET 
			[None] = @None,
			Duodenitis = @Duodenitis,
			Severity = @Severity,
			Bleeding = @Bleeding,
			PatchyErythema = @PatchyErythema,
			DiffuseErythema = @DiffuseErythema,
			Erosions = @Erosions,
			Nodularity = @Nodularity,
			Oedematous = @Oedematous,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------280b Create Proc abnormalities_duodenitis_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duodenitis_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duodenitis_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
		DECLARE
		@summary VARCHAR(1000),
		@temp VARCHAR(50),
		@None BIT,
		@Duodenitis BIT,
		@Severity TINYINT,
		@Bleeding TINYINT,
		@PatchyErythema BIT,
		@DiffuseErythema BIT,
		@Erosions BIT,
		@Nodularity BIT,
		@Oedematous BIT,
		@region VARCHAR(500),
		@abnoName VARCHAR(50)


	SELECT 
		@None=[None],
		@Duodenitis = Duodenitis,
		@Severity = Severity,
		@Bleeding = Bleeding,
		@PatchyErythema = PatchyErythema,
		@DiffuseErythema = DiffuseErythema,
		@Erosions = Erosions,
		@Nodularity = Nodularity,
		@Oedematous = Oedematous,
		@region = r.Region
	FROM
		ERS_CommonAbnoDuodenitis a
	JOIN
		ERS_Sites s ON a.SiteId = s.SiteId
	JOIN
		ERS_Regions r ON s.RegionId = r.RegionId
	WHERE
		a.SiteId = @SiteId

	SET @Summary = ''
	SET @temp = ''
	SET @abnoName = CASE WHEN @region = 'Jejunum' THEN 'Jejunitis' WHEN @region = 'Ileum' THEN 'Ileitis' ELSE 'Duodenitis' END

	IF @None = 1
		SET @summary = @summary + 'No ' + @abnoName
	
	ELSE IF @Duodenitis = 1
	BEGIN
		
		DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
		DECLARE @XMLlist XML
		DECLARE @b VARCHAR(200) = ''
		DECLARE @c VARCHAR(200) = ''

		SET @summary = @abnoName + ':'

		IF @Severity = 1
		BEGIN
			SET @summary = @summary + ' mild'
		END
		ELSE IF @Severity = 2
		BEGIN
			SET @summary = @summary + ' moderate'
		END
		ELSE IF @Severity = 3
		BEGIN
			SET @summary = @summary + ' severe'
		END

		IF @Oedematous = 1
		BEGIN
			IF @summary = @abnoName + ':' SET @summary = @summary + ' oedematous'
			ELSE SET @summary = @summary + ' and oedematous'
		END

		IF @Bleeding = 1
		BEGIN
			SET @summary = @summary + ' with no bleeding'
		END
		ELSE IF @Bleeding = 2
		BEGIN
			SET @summary = @summary + ' with active bleeding'
		END
		ELSE IF @Bleeding = 3
		BEGIN
			SET @summary = @summary + ' with recent bleeding'
		END

		IF @PatchyErythema = 1	INSERT INTO @tmpDiv (Val) VALUES('patchy erythema')
		IF @DiffuseErythema = 1 INSERT INTO @tmpDiv (Val) VALUES('diffuse erythema')
		IF @Erosions = 1		INSERT INTO @tmpDiv (Val) VALUES('erosions')
		IF @Nodularity = 1		INSERT INTO @tmpDiv (Val) VALUES('nodularity')
		
		IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @summary + ' associated with ' +  dbo.fnBuildString(@XMLlist)
		END

		IF RIGHT(@summary,1) = ':' SET @summary = @abnoName -- + ':' 

	END

	-- Finally update the summary in abnormalities table
	UPDATE ERS_CommonAbnoDuodenitis
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------281 Create Proc abnormalities_duodenalulcer_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duodenalulcer_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duodenalulcer_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT [SiteId]
      ,[None]
      ,[Ulcer]
      ,[UlcerType]
      ,[Quantity]
      ,[Largest]
      ,[VisibleVessel]
      ,[VisibleVesselType]
      ,[FreshClot]
      ,[ActiveBleeding]
      ,[ActiveBleedingType]
      ,[OldClot]
      ,[Perforation]
      ,[EUSProcType]
      ,[Summary]
FROM 
	[dbo].[ERS_CommonAbnoDuodenalUlcer]
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------281a Create Proc abnormalities_duodenalulcer_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duodenal_ulcer_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duodenal_ulcer_save]
(
	@SiteId INT,
	@None BIT,
	@Ulcer BIT,
	@UlcerType TINYINT, 
	@Quantity SMALLINT, 
	@Largest SMALLINT, 
	@VisibleVessel BIT, 
	@VisibleVesselType TINYINT, 
	@FreshClot BIT, 
	@ActiveBleeding BIT, 
	@ActiveBleedingType TINYINT, 
	@OldClot BIT, 
	@Perforation BIT,
	@RegionalIdentifier VARCHAR(100),
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		s.SiteId = @SiteId
	
	IF NOT EXISTS (SELECT 1 FROM ERS_CommonAbnoDuodenalUlcer WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_CommonAbnoDuodenalUlcer (
			SiteId,
			[None],
			Ulcer,
			UlcerType, 
			Quantity, 
			Largest, 
			VisibleVessel, 
			VisibleVesselType, 
			FreshClot, 
			ActiveBleeding, 
			ActiveBleedingType, 
			OldClot, 
			Perforation,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Ulcer,
			@UlcerType, 
			@Quantity, 
			@Largest, 
			@VisibleVessel, 
			@VisibleVesselType, 
			@FreshClot, 
			@ActiveBleeding, 
			@ActiveBleedingType, 
			@OldClot, 
			@Perforation,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			@RegionalIdentifier,
			1
		)

	END

	ELSE IF (@None = 0 AND @Ulcer = 0)
	BEGIN
		DELETE FROM ERS_CommonAbnoDuodenalUlcer 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = @RegionalIdentifier
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_CommonAbnoDuodenalUlcer
		SET 
			[None] = @None,
			Ulcer = @Ulcer,
			UlcerType = @UlcerType,
			Quantity = @Quantity,
			Largest = @Largest,
			VisibleVessel = @VisibleVessel,
			VisibleVesselType = @VisibleVesselType,
			FreshClot = @FreshClot,
			ActiveBleeding = @ActiveBleeding,
			ActiveBleedingType = @ActiveBleedingType,
			OldClot = @OldClot,
			Perforation = @Perforation,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------281b Create Proc abnormalities_duodenal_ulcer_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duodenal_ulcer_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duodenal_ulcer_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	DECLARE
		@Summary VARCHAR(4000),
		@None BIT,
		@Ulcer BIT,
		@UlcerType TINYINT, 
		@Quantity SMALLINT, 
		@Largest SMALLINT, 
		@VisibleVessel BIT, 
		@VisibleVesselType TINYINT, 
		@FreshClot BIT, 
		@ActiveBleeding BIT, 
		@ActiveBleedingType TINYINT, 
		@OldClot BIT, 
		@Perforation BIT

	SELECT 
		@None=[None],
		@Ulcer=Ulcer,
		@UlcerType=UlcerType,
		@Quantity = Quantity, 
		@Largest = Largest, 
		@VisibleVessel = VisibleVessel, 
		@VisibleVesselType = VisibleVesselType, 
		@FreshClot = FreshClot, 
		@ActiveBleeding = ActiveBleeding, 
		@ActiveBleedingType = ActiveBleedingType, 
		@OldClot = OldClot, 
		@Perforation = Perforation
	FROM
		ERS_CommonAbnoDuodenalUlcer
	WHERE
		SiteId = @SiteId

		DECLARE @Region VARCHAR(50), @RegionIdentifier VARCHAR(50)
		SELECT @Region =Region FROM dbo.ERS_Sites es
			INNER JOIN dbo.ERS_Regions er ON es.RegionId = er.RegionId
		WHERE es.SiteId = @SiteId

	SET @Summary = ''
	
	IF @None = 1
	BEGIN
		IF (@Region = 'Jejunum')
			SET @Summary = 'No jejunal ulcer'
		ELSE IF @Region = 'Ileum'
			SET @Summary = 'No ileal ulcer'
		ELSE
			SET @Summary = 'No duodenal ulcer'

	END
	ELSE IF @Ulcer = 1 
	BEGIN
		DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
		DECLARE @XMLlist XML
		DECLARE @b VARCHAR(200) = ''

		IF (@Region = 'Jejunum')
			SET @Summary = 'Jejunal ulcer:'
		ELSE IF @Region = 'Ileum'
			SET @Summary = 'Ileal ulcer:'
		ELSE
			SET @Summary = 'Duodenal ulcer:'


		IF ISNULL(@Quantity,0) > 0 SET @Summary = @Summary + ' ' + CONVERT(VARCHAR(20),@Quantity)

		IF @UlcerType = 1
		BEGIN
			SET @Summary = @Summary + ' acute' 
		END
		ELSE IF @UlcerType = 2
		BEGIN
			SET @Summary = @Summary + ' chronic' 
		END
		
		--IF @Largest > 0
		--BEGIN
			IF ISNULL(@Largest,0) > 0 SET @Summary = @Summary + ' (largest diameter ' + CONVERT(VARCHAR(20),@Largest) + 'cm)'
            --ELSE SET @Summary = @Summary + ' (diameter ' + CONVERT(VARCHAR(20),@Largest) + 'cm)'
		--END
		
		IF @VisibleVessel = 1
		BEGIN
            SET @b = 'visible vessel'
			IF @VisibleVesselType = 1		SET @b = @b + ' (adherent clot in base)'
			ELSE IF @VisibleVesselType = 2	SET @b = @b + ' (pigmented base)'

			INSERT INTO @tmpDiv (Val) VALUES(@b)
		END

		IF @ActiveBleeding = 1
		BEGIN
            SET @b = 'active bleeding'
			IF @ActiveBleedingType = 1		SET @b = @b + ' (spurting)'
			ELSE IF @ActiveBleedingType = 2	SET @b = @b + ' (oozing)'

			INSERT INTO @tmpDiv (Val) VALUES(@b)
		END

		IF @FreshClot = 1 INSERT INTO @tmpDiv (Val) VALUES('fresh clotting')

		IF @OldClot = 1 INSERT INTO @tmpDiv (Val) VALUES('old clotting')

		IF @Perforation = 1 INSERT INTO @tmpDiv (Val) VALUES('perforation')

		IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = @Summary + ' with ' +  dbo.fnBuildString(@XMLlist)
		END


		IF RIGHT(@Summary,1) = ':' SET @summary = REPLACE(@summary,':','')
	END

	-- Finally update the summary in abnormalities table
	UPDATE ERS_CommonAbnoDuodenalUlcer
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------282 Create Proc abnormalities_scaring_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_scaring_select','S';
GO


CREATE PROCEDURE [dbo].[abnormalities_scaring_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT [SiteId]
      ,[None]
	  ,[PylorusNotEntered]
      ,[PylorusScar]
      ,[PyloricStenosis]
      ,[PylorusDeformity]
      ,[DuodUlcerScar]
      ,[DuodDeformity]
      ,[DuodStenosis]
      ,[DuodPsudodivert]
      ,[EUSProcType]
      ,[Summary]
FROM 
  [dbo].[ERS_CommonAbnoScaring]
WHERE 
	SiteId = @SiteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------282a Create Proc abnormalities_scaring_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_scaring_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_scaring_save]
(
	@SiteId INT,
	@PylorusNotEntered BIT,
	@PylorusScar BIT,
    @PyloricStenosis BIT,
    @PylorusDeformity BIT,
    @DuodUlcerScar BIT,
    @DuodDeformity BIT,
    @DuodStenosis BIT,
    @DuodPsudodivert BIT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_CommonAbnoScaring WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_CommonAbnoScaring (
			SiteId,
			PylorusNotEntered,
			PylorusScar,
			PyloricStenosis,
			PylorusDeformity,
			DuodUlcerScar,
			DuodDeformity,
			DuodStenosis,
			DuodPsudodivert,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@PylorusNotEntered,
			@PylorusScar,
			@PyloricStenosis,
			@PylorusDeformity,
			@DuodUlcerScar,
			@DuodDeformity,
			@DuodStenosis,
			@DuodPsudodivert,
			@LoggedInUserId,
			GETDATE()) 

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Scarring/Stenosis',
			1)
	END

	ELSE IF (@PylorusScar = 0 AND @PyloricStenosis = 0 AND @PylorusDeformity = 0 AND @PylorusNotEntered = 0 AND
				@DuodUlcerScar = 0 AND @DuodDeformity = 0 AND @DuodStenosis = 0 AND @DuodPsudodivert = 0)
	BEGIN
		DELETE FROM ERS_CommonAbnoScaring 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Scarring/Stenosis'
	END
	
	ELSE
	BEGIN
		UPDATE 
			ERS_CommonAbnoScaring
		SET 
			PylorusNotEntered = @PylorusNotEntered,
			PylorusScar = @PylorusScar,
			PyloricStenosis = @PyloricStenosis,
			PylorusDeformity = @PylorusDeformity,
			DuodUlcerScar = @DuodUlcerScar,
			DuodDeformity = @DuodDeformity,
			DuodStenosis = @DuodStenosis,
			DuodPsudodivert = @DuodPsudodivert,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------282b Create Proc abnormalities_scaring_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_scaring_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_scaring_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
		DECLARE
		@summary VARCHAR(1000),
		@temp VARCHAR(50),
		@PylorusNotEntered BIT,
		@PylorusScar BIT,
		@PyloricStenosis BIT,
		@PylorusDeformity BIT,
		@DuodUlcerScar BIT,
		@DuodDeformity BIT,
		@DuodStenosis BIT,
		@DuodPsudodivert BIT


	SELECT 
		@PylorusNotEntered = PylorusNotEntered,
		@PylorusScar = PylorusScar,
		@PyloricStenosis = PyloricStenosis,
		@PylorusDeformity = PylorusDeformity,
		@DuodUlcerScar = DuodUlcerScar,
		@DuodDeformity = DuodDeformity,
		@DuodStenosis = DuodStenosis,
		@DuodPsudodivert = DuodPsudodivert
	FROM
		ERS_CommonAbnoScaring
	WHERE
		SiteId = @SiteId

	SET @Summary = ''
	SET @temp = ''

	
	IF @PylorusScar = 1 OR @PyloricStenosis = 1 OR @PylorusDeformity = 1 
	BEGIN

		DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
		DECLARE @XMLlist XML

		IF @PyloricStenosis = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('stenosis')
		END

		IF @PylorusScar = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('scarring')
		END

		IF @PylorusDeformity = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('deformity')
		END

		IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = 'pyloric ' + dbo.fnBuildString(@XMLlist)
			DELETE FROM @tmpDiv
		END
	END

	IF @DuodUlcerScar = 1 OR @DuodDeformity = 1 OR @DuodStenosis = 1 OR @DuodPsudodivert = 1
	BEGIN
		IF @DuodUlcerScar = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('ulcer scarring')
		END

		IF @DuodDeformity = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('deformity')
		END

		IF @DuodStenosis = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('stenosis')
		END

		IF @DuodPsudodivert = 1
		BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('pseudodiverticulum')
		END

		IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary = 'duodenal ' + dbo.fnBuildString(@XMLlist)
			DELETE FROM @tmpDiv
		END
	END

	IF @Summary <> '' 
	BEGIN
		SET @Summary = dbo.fnFirstLetterUpper(@Summary)
	END

	-- Finally update the summary in abnormalities table
	UPDATE ERS_CommonAbnoScaring
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------283 Create Proc abnormalities_atrophic_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_atrophic_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_atrophic_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT [SiteId]
      ,[None]
      ,[Type]
      ,[EUSProcType]
      ,[Summary]
FROM 
	[dbo].[ERS_CommonAbnoAtrophic]
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------283a Create Proc abnormalities_atrophic_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_atrophic_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_atrophic_save]
(
	@SiteId INT,
	@None BIT,
	@Type TINYINT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_CommonAbnoAtrophic WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_CommonAbnoAtrophic (
			SiteId,
			[None],
			[Type],
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Type,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Atrophic Duodenum',
			1)
	END
	
	ELSE IF (@None=0 AND @Type=0)
	BEGIN
		DELETE FROM ERS_CommonAbnoAtrophic 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Atrophic Duodenum'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_CommonAbnoAtrophic
		SET 
			[None] = @None,
			[Type] = @Type,
			[WhoUpdatedId] = @LoggedInUserId,
			[WhenUpdated] = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------283b Create Proc abnormalities_atrophic_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_atrophic_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_atrophic_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(200),
		@temp VARCHAR(50),
		@None BIT,
		@Type TINYINT

	SELECT 
		@None=[None],
		@Type=[Type]
	FROM
		ERS_CommonAbnoAtrophic
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @None = 1
		SET @summary = @summary + 'No atrophic duodenum'
	
	ELSE IF @Type > 0
	BEGIN
		SET @temp = CASE @Type
						WHEN 1 THEN ' mild'
						WHEN 2 THEN ' moderate'
						WHEN 3 THEN ' severe'
					END

		--IF @summary <> '' SET @summary = @summary + ' ' + LOWER(@temp)
		--ELSE 
		SET @summary = @temp

	END
	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_CommonAbnoAtrophic
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------284 Create Proc abnormalities_calibre_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_calibre_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_calibre_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	[SiteId], 
	[None], 
	[Contraction], 
	[Dilated], 
	[DilatedType], 
	[Obstruction], 
	[Spasm], 
	[Stricture], 
	[StrictureType], 
	[Stricturelength], 
	[StrictureImpeded], 
	[Summary]
FROM
	[ERS_ColonAbnoCalibre]
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------285 Create Proc abnormalities_calibre_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_calibre_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_calibre_save]
(
	@SiteId INT,
	@None BIT,
	@Contraction BIT,
	@Dilated BIT,
	@DilatedType TINYINT,
	@Obstruction BIT,
	@Spasm BIT,
	@Stricture BIT,
	@StrictureType TINYINT,
	@Stricturelength DECIMAL (6, 1),
	@StrictureImpeded TINYINT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	
	IF (@None = 0 AND @Contraction = 0 AND @Dilated = 0 AND @Obstruction = 0 AND @Spasm = 0 AND @Stricture = 0)
	BEGIN
		IF EXISTS (SELECT 1 FROM [ERS_ColonAbnoCalibre] WHERE SiteId = @SiteId)
		BEGIN
			DELETE FROM [ERS_ColonAbnoCalibre] 
			WHERE SiteId = @SiteId

			DELETE FROM ERS_RecordCount 
			WHERE SiteId = @SiteId
			AND Identifier = 'Calibre'
		END
	END


	ELSE IF NOT EXISTS (SELECT 1 FROM [ERS_ColonAbnoCalibre] WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO [ERS_ColonAbnoCalibre] (
			SiteId,
			[None],
			Contraction,
			Dilated,
			DilatedType,
			Obstruction,
			Spasm,
			Stricture,
			StrictureType,
			Stricturelength,
			StrictureImpeded,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Contraction,
			@Dilated,
			@DilatedType,
			@Obstruction,
			@Spasm,
			@Stricture,
			@StrictureType,
			@Stricturelength,
			@StrictureImpeded,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Calibre',
			1)
	END
	
	ELSE
	BEGIN
		UPDATE 
			[ERS_ColonAbnoCalibre]
		SET 
			[None] = @None,
			Contraction = @Contraction,
			Dilated = @Dilated,
			DilatedType = @DilatedType,
			Obstruction = @Obstruction,
			Spasm = @Spasm,
			Stricture = @Stricture,
			StrictureType = @StrictureType,
			Stricturelength = @Stricturelength,
			StrictureImpeded = @StrictureImpeded,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------286 Create Proc abnormalities_calibre_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_calibre_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_calibre_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
	DECLARE 
		@summary VARCHAR (8000)
		,@tempsummary VARCHAR (1000)
		,@None BIT
		,@Contraction BIT
		,@Dilated BIT
		,@DilatedType TINYINT
		,@Obstruction BIT
		,@Spasm BIT
		,@Stricture BIT
		,@StrictureType TINYINT
		,@Stricturelength DECIMAL (6, 1)
		,@StrictureImpeded TINYINT

	SET @summary = ''
	SET @tempsummary = ''

	SELECT 
		@None=[None]
		,@Contraction=Contraction
		,@Dilated=Dilated
		,@DilatedType=DilatedType
		,@Obstruction=Obstruction
		,@Spasm=Spasm
		,@Stricture=Stricture
		,@StrictureType=StrictureType
		,@StrictureLength=ISNULL(StrictureLength,0)
		,@StrictureImpeded=StrictureImpeded
	FROM
		ERS_ColonAbnoCalibre
	WHERE
		SiteId = @SiteId

	
	IF @None = 1
		SET @summary = @summary + 'No calibre abnormalities'

	ELSE
	BEGIN
		IF @Contraction = 1 
			SET @summary = @summary + 'contraction'
			
		IF @Dilated = 1 
		BEGIN
			IF @summary <> '' SET @summary = @summary + '$$dilated' 
			ELSE SET @summary = @summary + 'dilated'
			
			IF @DilatedType > 0
			BEGIN
				SET @summary = @summary 
								+ ' (' + 
										CASE @DilatedType 
											WHEN 1 THEN 'sigmoid volvulus' 
											WHEN 2 THEN 'pseudo-obstruction'
										END 
								+ ')'
			END
		END

		IF @Obstruction = 1
			IF @summary <> '' SET @summary = @summary + '$$obstruction' 
			ELSE SET @summary = @summary + 'obstruction'

		IF @Spasm = 1
			IF @summary <> '' SET @summary = @summary + '$$spasm' 
			ELSE SET @summary = @summary + 'spasm'

		IF @Stricture = 1
		BEGIN
			IF @StrictureType > 0
				SET @tempsummary = CASE @StrictureType 
										WHEN 1 THEN 'smooth stricture'
										WHEN 2 THEN 'ulcerated stricture'
										WHEN 3 THEN 'post operative stricture'
										WHEN 4 THEN 'tumorous stricture'
										WHEN 5 THEN 'inflammatory stricture'
									END
			ELSE
				SET @tempsummary = 'stricture' 

			IF @StrictureLength > 0
			BEGIN
				SET @tempsummary = @tempsummary + ' (length ' + CONVERT(VARCHAR(20), @StrictureLength) + ' cm'
				IF @StrictureImpeded > 0 SET @tempsummary = @tempsummary + ', ' ELSE SET @tempsummary = @tempsummary + ')' 
			END

			IF @StrictureImpeded > 0
			BEGIN
				IF @StrictureLength <= 0 SET @tempsummary = @tempsummary + ' ('
				SET @tempsummary = @tempsummary + CASE @StrictureImpeded 
														WHEN 1 THEN 'impeded endoscopy)'
														WHEN 2 THEN 'endoscope passed through)'
													END
			END
			
			IF @summary <> '' SET @summary =  @summary + '$$' + @tempsummary
			ELSE SET @summary = @tempsummary
		END
		
		-- Set the last occurence of $$ to "and"
		IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and ')
		-- Replace all other occurences of $$ with commas
		SET @summary = REPLACE(@summary, '$$', ', ')
	END
	
	-- Finally, update the summary in gastritis table
	UPDATE ERS_ColonAbnoCalibre 
	SET Summary = @summary 
	WHERE SiteId = @SiteId

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc abnormalities_colon_miscellaneous_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_miscellaneous_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_miscellaneous_save]
(
	@SiteId INT,
	@None BIT,
    @Crohn BIT,
    @Fistula BIT,
    @ForeignBody BIT,
	@Lipoma BIT,
    @Melanosis BIT,
    @Parasites BIT,
    @PneumatosisColi BIT,
    @PolyposisSyndrome BIT,
    @PostoperativeAppearance BIT,
    @Pseudoobstruction BIT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	
	IF (@None = 0 AND @Crohn = 0 AND @Fistula = 0 AND @ForeignBody = 0 AND @Lipoma = 0 AND @Melanosis = 0 AND @Parasites = 0 AND 
			@PneumatosisColi = 0 AND @PolyposisSyndrome = 0 AND @PostoperativeAppearance = 0 AND @Pseudoobstruction = 0) 
	BEGIN
		IF EXISTS (SELECT 1 FROM [ERS_ColonAbnoMiscellaneous] WHERE SiteId = @SiteId)
		BEGIN
			DELETE FROM [ERS_ColonAbnoMiscellaneous] 
			WHERE SiteId = @SiteId

			DELETE FROM ERS_RecordCount 
			WHERE SiteId = @SiteId
			AND Identifier = 'Miscellaneous'
		END
	END


	ELSE IF NOT EXISTS (SELECT 1 FROM [ERS_ColonAbnoMiscellaneous] WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO [ERS_ColonAbnoMiscellaneous] (
			SiteId,
			[None],
			Crohn,
			Fistula,
			ForeignBody,
			Lipoma,
			Melanosis,
			Parasites,
			PneumatosisColi,
			PolyposisSyndrome,
			PostoperativeAppearance,
			Pseudoobstruction,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Crohn,
			@Fistula,
			@ForeignBody,
			@Lipoma,
			@Melanosis,
			@Parasites,
			@PneumatosisColi,
			@PolyposisSyndrome,
			@PostoperativeAppearance,
			@Pseudoobstruction,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Miscellaneous',
			1)
	END
	
	ELSE
	BEGIN
		UPDATE 
			[ERS_ColonAbnoMiscellaneous]
		SET 
			[None] = @None,
			Crohn = @Crohn,
			Fistula = @Fistula,
			ForeignBody = @ForeignBody,
			Lipoma = @Lipoma,
			Melanosis = @Melanosis,
			Parasites = @Parasites,
			PneumatosisColi = @PneumatosisColi,
			PolyposisSyndrome = @PolyposisSyndrome,
			PostoperativeAppearance = @PostoperativeAppearance,
			Pseudoobstruction = @Pseudoobstruction,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc abnormalities_colon_miscellaneous_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_miscellaneous_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_miscellaneous_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON
	
	DECLARE 
		@summary VARCHAR (8000)
		,@tempsummary VARCHAR (1000)
		,@None BIT
		,@Crohn BIT
		,@Fistula BIT
		,@ForeignBody BIT
		,@Lipoma BIT
		,@Melanosis BIT
		,@Parasites BIT
		,@PneumatosisColi BIT
		,@PolyposisSyndrome BIT
		,@PostoperativeAppearance BIT
		,@Pseudoobstruction BIT

	SET @summary = ''
	SET @tempsummary = ''

	SELECT 
		@None=[None]
		,@Crohn = Crohn
		,@Fistula = Fistula
		,@ForeignBody = ForeignBody
		,@Lipoma = Lipoma
		,@Melanosis = Melanosis
		,@Parasites = Parasites
		,@PneumatosisColi = PneumatosisColi
		,@PolyposisSyndrome = PolyposisSyndrome
		,@PostoperativeAppearance = PostoperativeAppearance
		,@Pseudoobstruction = Pseudoobstruction
	FROM
		[ERS_ColonAbnoMiscellaneous]
	WHERE
		SiteId = @SiteId

	
	IF @None = 1
		SET @summary = @summary + 'No miscellaneous abnormalities'

	ELSE
	BEGIN
		IF @Crohn = 1 
			SET @summary = @summary + 'Crohn''s - terminal ileum'

		IF @Fistula = 1
			IF @summary <> '' SET @summary = @summary + '$$fistula' 
			ELSE SET @summary = @summary + 'fistula'

		IF @ForeignBody = 1
			IF @summary <> '' SET @summary = @summary + '$$foreign body' 
			ELSE SET @summary = @summary + 'foreign body'

		IF @Lipoma = 1
			IF @summary <> '' SET @summary = @summary + '$$lipoma' 
			ELSE SET @summary = @summary + 'lipoma'

		IF @Melanosis = 1
			IF @summary <> '' SET @summary = @summary + '$$melanosis' 
			ELSE SET @summary = @summary + 'melanosis'

		IF @Parasites = 1
			IF @summary <> '' SET @summary = @summary + '$$parasites' 
			ELSE SET @summary = @summary + 'parasites'

		IF @PneumatosisColi = 1
			IF @summary <> '' SET @summary = @summary + '$$pneumatosis coli' 
			ELSE SET @summary = @summary + 'pneumatosis coli'

		IF @PolyposisSyndrome = 1
			IF @summary <> '' SET @summary = @summary + '$$polyposis syndrome' 
			ELSE SET @summary = @summary + 'polyposis syndrome'

		IF @PostoperativeAppearance = 1
			IF @summary <> '' SET @summary = @summary + '$$postoperative appearance' 
			ELSE SET @summary = @summary + 'postoperative appearance'

		IF @Pseudoobstruction = 1
			IF @summary <> '' SET @summary = @summary + '$$pseudo-obstruction' 
			ELSE SET @summary = @summary + 'pseudo-obstruction'

		
		-- Set the last occurence of $$ to "and"
		IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and ')
		-- Replace all other occurences of $$ with commas
		SET @summary = REPLACE(@summary, '$$', ', ')
	END
	
	-- Finally, update the summary in Miscellaneous table
	UPDATE [ERS_ColonAbnoMiscellaneous] 
	SET Summary = @summary 
	WHERE SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------287 Create Proc abnormalities_mucosa_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_mucosa_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_mucosa_save]
(
	@SiteId INT,
	@None BIT,
	@Atrophic BIT,
	@AtrophicDistribution TINYINT,
	@AtrophicSeverity TINYINT,
	@Congested BIT,
	@CongestedDistribution TINYINT,
	@CongestedSeverity TINYINT,
	@Erythematous BIT,
	@ErythematousDistribution TINYINT,
	@ErythematousSeverity TINYINT,
	@Granular BIT,
	@GranularDistribution TINYINT,
	@GranularSeverity TINYINT,
	@Exudate BIT,
	@ExudateDistribution TINYINT,
	@ExudateSeverity TINYINT,
	@Pigmented BIT,
	@PigmentedDistribution TINYINT,
	@PigmentedSeverity TINYINT,
	@RedundantRectal BIT,
	@Ulcerative BIT,
	@SmallUlcers BIT,
	@SmallUlcersType TINYINT,
	@LargeUlcers BIT,
	@LargeUlcersType TINYINT,
	@PleomorphicUlcers BIT,
	@PleomorphicUlcersType TINYINT,
	@SerpiginousUlcers BIT,
	@SerpiginousUlcersType TINYINT,
	@AphthousUlcers BIT,
	@AphthousUlcersType TINYINT,
	@CobblestoneMucosa BIT,
	@CobblestoneMucosaType TINYINT,
	@ConfluentUlceration BIT,
	@DeepUlceration BIT,
	@SolitaryUlcer BIT,
	@SolitaryUlcerDiameter INT,
	@InflammatoryColitis BIT,		
	@InflammatoryIleitis BIT,		
	@InflammatoryProctitis BIT,	
	@InflammatoryDisorder TINYINT,		
	@InflammatoryExtent TINYINT,		
	@InflammatoryMayoScore TINYINT,		
	@InflammatorySESCrohn TINYINT,	
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	

	IF (@None = 0 AND @Atrophic = 0 AND @Congested = 0 AND @Erythematous = 0 AND @Granular = 0 AND @Exudate = 0 AND @Pigmented = 0 AND @RedundantRectal = 0 AND @Ulcerative = 0 AND 
				@SmallUlcers = 0 AND @LargeUlcers = 0 AND @PleomorphicUlcers = 0 AND @SerpiginousUlcers = 0 AND @AphthousUlcers = 0 AND @CobblestoneMucosa = 0 AND 
				@ConfluentUlceration = 0 AND @DeepUlceration = 0 AND @SolitaryUlcer = 0 AND
				@InflammatoryColitis = 0 AND @InflammatoryIleitis = 0 AND @InflammatoryProctitis = 0)

	BEGIN
		IF EXISTS (SELECT 1 FROM [ERS_ColonAbnoMucosa] WHERE SiteId = @SiteId)
		BEGIN
			DELETE FROM [ERS_ColonAbnoMucosa] 
			WHERE SiteId = @SiteId

			DELETE FROM ERS_RecordCount 
			WHERE SiteId = @SiteId
			AND Identifier = 'Mucosa'
		END
	END

	ELSE IF NOT EXISTS (SELECT 1 FROM [ERS_ColonAbnoMucosa] WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO [ERS_ColonAbnoMucosa] (
			SiteId,
			[None],
			Atrophic,
			AtrophicDistribution,
			AtrophicSeverity,
			Congested,
			CongestedDistribution,
			CongestedSeverity,
			Erythematous,
			ErythematousDistribution,
			ErythematousSeverity,
			Granular,
			GranularDistribution,
			GranularSeverity,
			Exudate,
			ExudateDistribution,
			ExudateSeverity,
			Pigmented,
			PigmentedDistribution,
			PigmentedSeverity,
			RedundantRectal,
			Ulcerative,
			SmallUlcers,
			SmallUlcersType,
			LargeUlcers,
			LargeUlcersType,
			PleomorphicUlcers,
			PleomorphicUlcersType,
			SerpiginousUlcers,
			SerpiginousUlcersType,
			AphthousUlcers,
			AphthousUlcersType,
			CobblestoneMucosa,
			CobblestoneMucosaType,
			ConfluentUlceration,
			DeepUlceration,
			SolitaryUlcer,
			SolitaryUlcerDiameter,
			InflammatoryColitis,
			InflammatoryIleitis,
			InflammatoryProctitis,
			InflammatoryDisorder,
			InflammatoryExtent,
			InflammatoryMayoScore,
			InflammatorySESCrohn,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Atrophic,
			@AtrophicDistribution,
			@AtrophicSeverity,
			@Congested,
			@CongestedDistribution,
			@CongestedSeverity,
			@Erythematous,
			@ErythematousDistribution,
			@ErythematousSeverity,
			@Granular,
			@GranularDistribution,
			@GranularSeverity,
			@Exudate,
			@ExudateDistribution,
			@ExudateSeverity,
			@Pigmented,
			@PigmentedDistribution,
			@PigmentedSeverity,
			@RedundantRectal,
			@Ulcerative,
			@SmallUlcers,
			@SmallUlcersType,
			@LargeUlcers,
			@LargeUlcersType,
			@PleomorphicUlcers,
			@PleomorphicUlcersType,
			@SerpiginousUlcers,
			@SerpiginousUlcersType,
			@AphthousUlcers,
			@AphthousUlcersType,
			@CobblestoneMucosa,
			@CobblestoneMucosaType,
			@ConfluentUlceration,
			@DeepUlceration,
			@SolitaryUlcer,
			@SolitaryUlcerDiameter,
			@InflammatoryColitis,
			@InflammatoryIleitis,
			@InflammatoryProctitis,
			@InflammatoryDisorder,
			@InflammatoryExtent,
			@InflammatoryMayoScore,
			@InflammatorySESCrohn,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Mucosa',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			[ERS_ColonAbnoMucosa]
		SET 
			[None] = @None,
			Atrophic = @Atrophic,
			AtrophicDistribution = @AtrophicDistribution,
			AtrophicSeverity = @AtrophicSeverity,
			Congested = @Congested,
			CongestedDistribution = @CongestedDistribution,
			CongestedSeverity = @CongestedSeverity,
			Erythematous = @Erythematous,
			ErythematousDistribution = @ErythematousDistribution,
			ErythematousSeverity = @ErythematousSeverity,
			Granular = @Granular,
			GranularDistribution = @GranularDistribution,
			GranularSeverity = @GranularSeverity,
			Exudate = @Exudate,
			ExudateDistribution = @ExudateDistribution,
			ExudateSeverity = @ExudateSeverity,
			Pigmented = @Pigmented,
			PigmentedDistribution = @PigmentedDistribution,
			PigmentedSeverity = @PigmentedSeverity,
			RedundantRectal = @RedundantRectal,
			Ulcerative = @Ulcerative,
			SmallUlcers = @SmallUlcers,
			SmallUlcersType = @SmallUlcersType,
			LargeUlcers = @LargeUlcers,
			LargeUlcersType = @LargeUlcersType,
			PleomorphicUlcers = @PleomorphicUlcers,
			PleomorphicUlcersType = @PleomorphicUlcersType,
			SerpiginousUlcers = @SerpiginousUlcers,
			SerpiginousUlcersType = @SerpiginousUlcersType,
			AphthousUlcers = @AphthousUlcers,
			AphthousUlcersType = @AphthousUlcersType,
			CobblestoneMucosa = @CobblestoneMucosa,
			CobblestoneMucosaType = @CobblestoneMucosaType,
			ConfluentUlceration = @ConfluentUlceration,
			DeepUlceration = @DeepUlceration,
			SolitaryUlcer = @SolitaryUlcer,
			SolitaryUlcerDiameter = @SolitaryUlcerDiameter,
			InflammatoryColitis = @InflammatoryColitis,
			InflammatoryIleitis = @InflammatoryIleitis,
			InflammatoryProctitis = @InflammatoryProctitis,
			InflammatoryDisorder = @InflammatoryDisorder,
			InflammatoryExtent = @InflammatoryExtent,
			InflammatoryMayoScore = @InflammatoryMayoScore, 
			InflammatorySESCrohn = @InflammatorySESCrohn,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------288 Create Proc abnormalities_mucosa_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_mucosa_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_mucosa_summary_update]
(
	@SiteId INT
)
AS
SET NOCOUNT ON
	
DECLARE 
	@summary VARCHAR (8000),
	@tempsummary VARCHAR (1000),
	@None BIT,
	@RedundantRectal BIT,
	@Ulcerative BIT,
	@CobblestoneMucosa BIT,
	@CobblestoneMucosaType TINYINT,
	@ConfluentUlceration BIT,
	@DeepUlceration BIT,
	@SolitaryUlcer BIT,
	@SolitaryUlcerDiameter INT,
	@InflammatoryColitis BIT,
	@InflammatoryIleitis BIT,
	@InflammatoryProctitis BIT,
	@InflammatoryDisorder TINYINT,
	@InflammatoryExtent TINYINT,
	@InflammatoryMayoScore TINYINT,
	@InflammatorySESCrohn TINYINT

SET @summary = ''
SET @tempsummary = ''

SELECT 
	@None = [None],
	@RedundantRectal = RedundantRectal,
	@Ulcerative = Ulcerative,
	@CobblestoneMucosa = CobblestoneMucosa,
	@CobblestoneMucosaType = CobblestoneMucosaType,
	@ConfluentUlceration=ConfluentUlceration,
	@DeepUlceration=DeepUlceration,
	@SolitaryUlcer=SolitaryUlcer,
	@SolitaryUlcerDiameter=SolitaryUlcerDiameter,
	@InflammatoryColitis = InflammatoryColitis,
	@InflammatoryIleitis =InflammatoryIleitis,
	@InflammatoryProctitis =InflammatoryProctitis,
	@InflammatoryDisorder =InflammatoryDisorder,
	@InflammatoryExtent =InflammatoryExtent,
	@InflammatoryMayoScore =InflammatoryMayoScore,
	@InflammatorySESCrohn =InflammatorySESCrohn
FROM
	ERS_ColonAbnoMucosa
WHERE
	SiteId = @SiteId
	
IF @None = 1 SET @summary = 'No mucosal abnormalities'

ELSE
BEGIN
	SELECT * INTO #mucosa
	FROM ERS_ColonAbnoMucosa 
	WHERE SiteId = @SiteId

	----------------------------- Build the "severity/distribution" string -----------------------------
	SELECT 
		MucosaItem,
		CASE MucosaItem 
			WHEN 'Atrophic' THEN 'atrophy' 
			WHEN 'Congested' THEN 'congestion' 
			WHEN 'Erythematous' THEN 'erythema' 
			WHEN 'Granular' THEN 'granularity' 
			WHEN 'Exudate' THEN 'mucopurulent exudate' 
			WHEN 'Pigmented' THEN 'pigmentation (melanosis)' 
			ELSE MucosaItem 
		END AS MucosaItemDesc, 
		Selected
	INTO #main
	FROM 
		(SELECT * FROM #mucosa) a
	UNPIVOT
		(Selected FOR MucosaItem IN (Atrophic,Congested,Erythematous,Granular,Exudate,Pigmented)) b
	WHERE 
		Selected = 1

	SELECT MucosaDistribution, MucosaDistributionSelected
	INTO #dist
	FROM 
		(SELECT * FROM #mucosa) a
	UNPIVOT
		(MucosaDistributionSelected FOR MucosaDistribution IN (AtrophicDistribution,CongestedDistribution,ErythematousDistribution,GranularDistribution,ExudateDistribution,PigmentedDistribution)) c
	WHERE 
		ISNULL(MucosaDistributionSelected,0) <> 0
	

	SELECT MucosaSeverity, MucosaSeveritySelected
	INTO #sev
	FROM 
		(SELECT * FROM #mucosa) a
	UNPIVOT
		(MucosaSeveritySelected FOR MucosaSeverity IN (AtrophicSeverity,CongestedSeverity,ErythematousSeverity,GranularSeverity,ExudateSeverity,PigmentedSeverity)) c
	WHERE 
		ISNULL(MucosaSeveritySelected,0) <> 0
		
	SELECT 
		ISNULL(c.CodeValue,0) AS MucosaDistributionId,
		ISNULL(c.codekey,'') AS MucosaDistribution, 
		ISNULL(c2.CodeValue,0) AS MucosaSeverityId, 
		ISNULL(c2.codekey,'') AS MucosaSeverity, 
		MucosaItemDesc AS summary
	INTO #prefinal
	FROM #main a 
	LEFT JOIN #dist b on a.MucosaItem + 'Distribution' = b.MucosaDistribution
	LEFT JOIN #sev b2 on a.MucosaItem + 'Severity' = b2.MucosaSeverity
	LEFT JOIN ERS_Codes c on b.MucosaDistributionSelected = c.codevalue AND c.code='MucosaDistribution'
	LEFT JOIN ERS_Codes c2 on b2.MucosaSeveritySelected = c2.codevalue AND c2.code='MucosaSeverity'
	ORDER BY MucosaSeverityId DESC, MucosaDistributionId DESC

	SELECT
		MucosaDistribution , MucosaSeverity ,
		CASE 
			WHEN MucosaDistribution <> '' AND MucosaSeverity = '' THEN MucosaDistribution + ' '
			WHEN MucosaDistribution = '' AND MucosaSeverity <> '' THEN MucosaSeverity + ' '
			WHEN MucosaDistribution <> '' AND MucosaSeverity <> '' THEN MucosaDistribution + ' ' + MucosaSeverity + ' '
			WHEN MucosaDistribution = '' AND MucosaSeverity = '' THEN ''
		END  +
		 STUFF(
			 (SELECT ',' + summary
			  FROM #prefinal
			  WHERE MucosaDistribution = a.MucosaDistribution AND MucosaSeverity = a.MucosaSeverity
			  FOR XML PATH (''))
			  , 1, 1, '')
		AS summary
	INTO #final
	FROM #prefinal AS a
	GROUP BY MucosaDistributionId, MucosaDistribution, MucosaSeverityId, MucosaSeverity
	ORDER BY MucosaSeverityId DESC, MucosaDistributionId DESC

	UPDATE #final SET summary = STUFF(summary, LEN(summary) - CHARINDEX(',', REVERSE(summary)) + 1, 1, ' and ') 
	WHERE CHARINDEX(',', summary) > 0 

	UPDATE #final SET summary = REPLACE(summary,',',', ') 
	WHERE CHARINDEX(',', summary) > 0 

	IF (SELECT COUNT(*) FROM #final) > 1
	BEGIN
		-- Get the concatenated string separated by the delimiter "; "
		SELECT @summary = COALESCE (
							CASE WHEN @summary = '' THEN summary
							ELSE @summary + '; ' + summary
							END
						,'')
		FROM #final
	END
	ELSE
	BEGIN
		SELECT @summary = summary FROM #final
	END
	
	IF @RedundantRectal = 1
	BEGIN
		IF @summary = '' SET @summary = 'redundant anterior rectal mucosa'
		ELSE SET @summary = @summary + '; redundant anterior rectal mucosa'
	END

	IF @Ulcerative = 1
	BEGIN
		----------------------------- Build the "solitary" string -----------------------------
		IF @SolitaryUlcer = 1 
		BEGIN
			SET @tempsummary = 'solitary ulcer'
			IF @SolitaryUlcerDiameter > 0 SET @tempsummary = @tempsummary + ' (' + CONVERT(varchar(5), @SolitaryUlcerDiameter) + ' mm in largest diameter)'
		END

		----------------------------- Build the "deep/confluent" string -----------------------------
		IF @ConfluentUlceration = 1 OR @DeepUlceration = 1
		BEGIN
			IF @tempsummary <> ''  AND RIGHT(RTRIM(@tempsummary),1) <> ';' SET @tempsummary = @tempsummary + '; '
			SET @tempsummary = @tempsummary + CASE WHEN @ConfluentUlceration = 1 AND @DeepUlceration = 1 THEN 'deep and confluent ulceration with fissuring'
													WHEN @ConfluentUlceration = 1 AND @DeepUlceration = 0 THEN 'confluent ulceration with fissuring'
													WHEN @ConfluentUlceration = 0 AND @DeepUlceration = 1 THEN 'deep ulceration with fissuring'
												END
		END

		----------------------------- Build the "ulcers" string -----------------------------
		SELECT 
			UlcerItem,
			CASE UlcerItem 
				WHEN 'SmallUlcers' THEN 'small' 
				WHEN 'LargeUlcers' THEN 'large' 
				WHEN 'PleomorphicUlcers' THEN 'pleomorphic' 
				WHEN 'SerpiginousUlcers' THEN 'serpiginous' 
				WHEN 'AphthousUlcers' THEN 'aphthous' 
				ELSE UlcerItem 
			END AS UlcerItemDesc, 
			Selected
		INTO #ulcermain
		FROM 
			(SELECT * FROM #mucosa) a
		UNPIVOT
			(Selected FOR UlcerItem IN (SmallUlcers,LargeUlcers,PleomorphicUlcers,SerpiginousUlcers,AphthousUlcers)) b
		WHERE 
			Selected = 1
			
		SELECT UlcerType, UlcerTypeSelected
		INTO #ulcertype
		FROM 
			(SELECT * FROM #mucosa) a
		UNPIVOT
			(UlcerTypeSelected FOR UlcerType IN (SmallUlcersType,LargeUlcersType,PleomorphicUlcersType,SerpiginousUlcersType,AphthousUlcersType)) c
		WHERE 
			ISNULL(UlcerTypeSelected,0) <> 0
			
		SELECT 
			ISNULL(c.CodeValue,0) AS UlcerTypeId,
			ISNULL(c.codekey,'') AS UlcerType, 
			UlcerItemDesc AS summary
		INTO #ulcerprefinal
		FROM #ulcermain a 
		LEFT JOIN #ulcertype b on a.UlcerItem + 'Type' = b.UlcerType
		LEFT JOIN ERS_Codes c on b.UlcerTypeSelected = c.codevalue AND c.code='MucosaUlcerType'
		ORDER BY UlcerTypeId DESC

		SELECT
			UlcerType ,
			CASE 
				WHEN UlcerType <> '' THEN UlcerType + ' '
				ELSE UlcerType
			END  +
			 STUFF(
				 (SELECT ',' + summary
				  FROM #ulcerprefinal
				  WHERE UlcerType = a.UlcerType
				  FOR XML PATH (''))
				  , 1, 1, '') + ' ulcers' AS summary
		INTO #ulcerfinal
		FROM #ulcerprefinal AS a
		GROUP BY UlcerTypeId, UlcerType
		ORDER BY UlcerTypeId DESC

		UPDATE #ulcerfinal SET summary = STUFF(summary, LEN(summary) - CHARINDEX(',', REVERSE(summary)) + 1, 1, ' and ') 
		WHERE CHARINDEX(',', summary) > 0 

		UPDATE #ulcerfinal SET summary = REPLACE(summary,',',', ') 
		WHERE CHARINDEX(',', summary) > 0 

		IF (SELECT COUNT(*) FROM #ulcerfinal) > 0
		BEGIN
			IF @tempsummary <> '' AND RIGHT(RTRIM(@tempsummary),1) <> ';' SET @tempsummary = @tempsummary + '; '

			IF (SELECT COUNT(*) FROM #ulcerfinal) > 1
				-- Get the concatenated string separated by the delimiter "; "
				SELECT @tempsummary = COALESCE (
									CASE WHEN @tempsummary = '' THEN summary
									ELSE @tempsummary + '; ' + summary
									END
								,'')
				FROM #ulcerfinal
			ELSE
				SELECT @tempsummary = summary + '; ' +  @tempsummary FROM #ulcerfinal
		END

		DROP TABLE #ulcerprefinal
		DROP TABLE #ulcerfinal
		DROP TABLE #ulcermain
		DROP TABLE #ulcertype

		----------------------------- Build the "cobblestone" string -----------------------------
		IF @CobblestoneMucosa = 1
		BEGIN
			IF @tempsummary <> '' AND RIGHT(RTRIM(@tempsummary),1) <> ';' SET @tempsummary = @tempsummary + '; '
			SET @tempsummary = @tempsummary + CASE WHEN @CobblestoneMucosaType = 1 THEN 'patchy cobblestone mucosa'
													WHEN @CobblestoneMucosaType = 2 THEN 'extensive cobblestone mucosa'
													ELSE 'cobblestone mucosa'
											  END
		END

		IF @tempsummary = '' SET @tempsummary = 'ulceration'

		IF @summary <> ''  AND RIGHT(RTRIM(@summary),1) <> ';' SET @summary = @summary + '; ' + @tempsummary
		ELSE SET @summary = @tempsummary

		SET @summary = LTRIM(RTRIM(@summary))
		IF RIGHT(@summary,1) = ';' SET @summary = LEFT(@summary, LEN(@summary) - 1)

	END

	----------------------------- Build the "Inflammatory disorders" string -----------------------------

	IF @InflammatoryColitis = 1 OR @InflammatoryIleitis = 1
	BEGIN
		DECLARE @tmp_Inflammatory VARCHAR(20) = '',
				@tmp_InflammatoryExtent VARCHAR(100) = '',
				@tmp_InflammatoryMayoScore VARCHAR(320) = '',
				@tmp_InflammatorySESCrohn VARCHAR(320) = '',
				@tmp_Inf VARCHAR(320) = ''
		IF @InflammatoryColitis = 1 SET @tmp_Inflammatory = 'colitis'
		IF @InflammatoryIleitis = 1 SET @tmp_Inflammatory = 'ileitis'
		SET @tempsummary = ''

		IF @InflammatoryDisorder > 1
		BEGIN
			SET @tempsummary = CASE @InflammatoryDisorder 
									WHEN 2 THEN 'Crohn''s Disease' 
									WHEN 3 THEN 'cytomegalovirus ' + @tmp_Inflammatory
									WHEN 4 THEN 'diverticular ' + @tmp_Inflammatory
									WHEN 5 THEN 'drug-induced ' + @tmp_Inflammatory
									WHEN 6 THEN 'IBD unclassified' 
									WHEN 7 THEN 'infectious entero' + @tmp_Inflammatory
									WHEN 8 THEN 'ischaemic ' + @tmp_Inflammatory
									WHEN 9 THEN 'non-specific ' + @tmp_Inflammatory
									WHEN 10 THEN 'pseudomembranous ' + @tmp_Inflammatory
									WHEN 11 THEN 'radiation ' + @tmp_Inflammatory
									WHEN 12 THEN 'ulcerative ' + @tmp_Inflammatory
									ELSE '' 
								END  
			IF @InflammatoryExtent > 0
				SELECT @tmp_InflammatoryExtent = ListItemText FROM dbo.ERS_Lists el WHERE el.ListDescription = 'Diagnoses Colon Extent' AND el.ListItemNo = @InflammatoryExtent AND ListItemText IS NOT NULL
			IF @InflammatoryMayoScore > 0
				SELECT @tmp_InflammatoryMayoScore = ListItemText FROM dbo.ERS_Lists el WHERE el.ListDescription = 'Mayo Score' AND el.ListItemNo = @InflammatoryMayoScore AND ListItemText IS NOT NULL
			IF @InflammatorySESCrohn > 0
				SELECT @tmp_InflammatorySESCrohn = ListItemText FROM dbo.ERS_Lists el WHERE el.ListDescription = 'Simple Endoscopic Score – Crohn''s Disease' AND el.ListItemNo = @InflammatorySESCrohn AND ListItemText IS NOT NULL
			

			IF @tmp_InflammatorySESCrohn <> '' SET @tmp_Inf = ' (' + @tmp_InflammatorySESCrohn + CASE WHEN @tmp_InflammatoryExtent <> '' THEN ', ' + @tmp_InflammatoryExtent + ')' ELSE ')' END
			IF @tmp_InflammatoryMayoScore <> '' SET @tmp_Inf = ' (' + @tmp_InflammatoryMayoScore + CASE WHEN @tmp_InflammatoryExtent <> '' THEN ', ' + @tmp_InflammatoryExtent + ')' ELSE ')' END
			IF @tmp_InflammatoryExtent <> '' AND @tmp_Inf = '' SET @tmp_Inf = ' (' + @tmp_InflammatoryExtent + ')' 
			SET @tempsummary = @tempsummary + @tmp_Inf
		END
		ELSE
		BEGIN
			IF @InflammatoryColitis = 1 SET @tempsummary = 'Colitis'
			IF @InflammatoryIleitis = 1 SET @tempsummary = 'Ileitis'
		END

		IF @summary = '' SET @summary = @tempsummary
		ELSE SET @summary = @summary + '; ' + @tempsummary
	END 

	IF @InflammatoryProctitis = 1
	BEGIN
		IF @summary = '' SET @summary = 'proctitis'
		ELSE SET @summary = @summary + '; proctitis'
	END 



	DROP TABLE #mucosa
	DROP TABLE #main
	DROP TABLE #dist
	DROP TABLE #sev
	DROP TABLE #final
	DROP TABLE #prefinal
END

-- Finally, update the summary in Mucosa table
UPDATE ERS_ColonAbnoMucosa 
SET Summary = @summary 
WHERE SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------289 Create Proc abnormalities_colon_diverticulum_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_diverticulum_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_diverticulum_save]
(
	@SiteId INT,
	@None BIT,
	@MucosalInflammation BIT,
	@Quantity TINYINT,
	@Distribution TINYINT,
	@NarrowingTortuosity BIT,
	@Severity TINYINT,
	@CircMuscleHypertrophy BIT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	

	IF (@None = 0 AND @MucosalInflammation = 0 AND @Quantity = 0 AND @Distribution = 0 AND @NarrowingTortuosity = 0 AND @Severity = 0 AND @CircMuscleHypertrophy = 0)

	BEGIN
		IF EXISTS (SELECT 1 FROM [ERS_ColonAbnoDiverticulum] WHERE SiteId = @SiteId)
		BEGIN
			DELETE FROM [ERS_ColonAbnoDiverticulum] 
			WHERE SiteId = @SiteId

			DELETE FROM ERS_RecordCount 
			WHERE SiteId = @SiteId
			AND Identifier = 'Diverticulum'
		END
	END

	ELSE IF NOT EXISTS (SELECT 1 FROM [ERS_ColonAbnoDiverticulum] WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO [ERS_ColonAbnoDiverticulum] (
			SiteId,
			[None],
			MucosalInflammation,
			Quantity,
			Distribution,
			NarrowingTortuosity,
			Severity,
			CircMuscleHypertrophy,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@MucosalInflammation,
			@Quantity,
			@Distribution,
			@NarrowingTortuosity,
			@Severity,
			@CircMuscleHypertrophy,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Diverticulum',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			[ERS_ColonAbnoDiverticulum]
		SET 
			[None] = @None,
			MucosalInflammation = @MucosalInflammation,
			Quantity = @Quantity,
			Distribution = @Distribution,
			NarrowingTortuosity = @NarrowingTortuosity,
			Severity = @Severity,
			CircMuscleHypertrophy = @CircMuscleHypertrophy,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------290 Create Proc abnormalities_colon_diverticulum_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_diverticulum_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_diverticulum_summary_update]
(
	@SiteId INT
)
AS
SET NOCOUNT ON
	
DECLARE 
	@summary VARCHAR (8000),
	@tempsummary VARCHAR (1000),
	@None BIT,
	@MucosalInflammation BIT,
	@Quantity TINYINT,
	@Distribution TINYINT,
	@NarrowingTortuosity BIT,
	@Severity TINYINT,
	@CircMuscleHypertrophy BIT

SET @summary = ''
SET @tempsummary = ''

SELECT 
	@None=[None],
	@MucosalInflammation=MucosalInflammation,
	@Quantity=Quantity,
	@Distribution=Distribution,
	@NarrowingTortuosity=NarrowingTortuosity,
	@Severity=Severity,
	@CircMuscleHypertrophy=CircMuscleHypertrophy
FROM
	ERS_ColonAbnoDiverticulum
WHERE
	SiteId = @SiteId
	
IF @None = 1 SET @summary = 'No diverticula'

ELSE
BEGIN
	IF @Quantity > 0 
	BEGIN
		SET @summary =	CASE @Quantity 
							WHEN 1 THEN 'a few'
							WHEN 2 THEN 'several'
							WHEN 3 THEN 'multiple'
							WHEN 4 THEN 'single'
						END

		SET @summary =	@summary + 
						CASE @Distribution 
							WHEN 0 THEN ''
							WHEN 1 THEN ' scattered'
							WHEN 2 THEN ' localised'
						END
	END

	IF @NarrowingTortuosity = 1
	BEGIN
		SET @tempsummary =	CASE @Severity
								WHEN 0 THEN ''
								WHEN 1 THEN 'mild '
								WHEN 2 THEN 'moderate '
								WHEN 3 THEN 'severe '
							END

		SET @tempsummary = @tempsummary + 'narrowing/tortuosity of the diverticular segment'

		IF @summary <> '' SET @summary = @summary + ' with ' + @tempsummary
		ELSE SET @summary = @tempsummary
	END

	
	IF @MucosalInflammation = 1
		IF @summary = ''
			SET @summary = 'mucosal inflammation'
		ELSE IF CHARINDEX('with', @summary) > 0 
			SET @summary = @summary + '$$' + 'mucosal inflammation'
		ELSE
			SET @summary = @summary + ' with ' + 'mucosal inflammation'

	
	IF @CircMuscleHypertrophy = 1 SET @summary = @summary + '$$' + 'circular muscle hypertrophy'
	
	-- Set the last occurence of $$ to "and"
	IF CHARINDEX('$$', @summary) > 0 
	SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and ')
	IF LEFT(@summary,5) = ' and ' SET @summary = RIGHT(@summary, LEN(@summary)-5)

	-- Replace all other occurences of $$ with commas
	SET @summary = REPLACE(@summary, '$$', ', ')
END

-- Finally, update the summary in Diverticulum table
UPDATE ERS_ColonAbnoDiverticulum 
SET Summary = @summary 
WHERE SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------291a Create Proc abnormalities_colon_lesions_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_lesions_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_lesions_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

	SELECT 
		git.MarkedQuantity, 
		git.Marking, 
		git.MarkingType, 
		git.CarriedOutRole,
		ecal.* 
	FROM dbo.ERS_ColonAbnoLesions ecal 
	LEFT JOIN (
			SELECT * FROM dbo.ERS_UpperGITherapeutics eug 
			WHERE eug.SiteId=@SiteId AND eug.Marking = 1
		) git ON git.SiteId = ecal.SiteId
	WHERE ecal.SiteId=@SiteId


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------291 Create Proc abnormalities_colon_lesions_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_lesions_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_lesions_save]
(
	@SiteId INT,
	@None BIT,
	@Sessile BIT,
	@SessileQuantity INT,
	@SessileLargest INT,
	@SessileExcised INT,
	@SessileRetrieved INT,
	@SessileToLabs INT,
	@SessileRemoval TINYINT,
	@SessileRemovalMethod TINYINT,
	@SessileProbably BIT,
	@SessileType TINYINT,
	@SessileParisClass TINYINT,
	@SessilePitPattern TINYINT,
	@Pedunculated BIT,
	@PedunculatedQuantity INT,
	@PedunculatedLargest INT,
	@PedunculatedExcised INT,
	@PedunculatedRetrieved INT,
	@PedunculatedToLabs INT,
	@PedunculatedRemoval TINYINT,
	@PedunculatedRemovalMethod TINYINT,
	@PedunculatedProbably BIT,
	@PedunculatedType TINYINT,
	@PedunculatedParisClass TINYINT,
	@PedunculatedPitPattern TINYINT,
	@Pseudopolyps BIT,
	@PseudopolypsMultiple BIT,
	@PseudopolypsQuantity INT,
	@PseudopolypsLargest INT,
	@PseudopolypsExcised INT,
	@PseudopolypsRetrieved INT,
	@PseudopolypsToLabs INT,
	@PseudopolypsInflam BIT,
	@PseudopolypsPostInflam BIT,
	@PseudopolypsRemoval TINYINT,
	@PseudopolypsRemovalMethod TINYINT,
	@Submucosal BIT,
	@SubmucosalQuantity INT,
	@SubmucosalLargest INT,
	@SubmucosalProbably BIT,
	@SubmucosalType TINYINT,
	@Villous BIT,
	@VillousQuantity INT,
	@VillousLargest INT,
	@VillousProbably BIT,
	@VillousType TINYINT,
	@Ulcerative BIT,
	@UlcerativeQuantity INT,
	@UlcerativeLargest INT,
	@UlcerativeProbably BIT,
	@UlcerativeType TINYINT,
	@Stricturing BIT,
	@StricturingQuantity INT,
	@StricturingLargest INT,
	@StricturingProbably BIT,
	@StricturingType TINYINT,
	@Polypoidal BIT,
	@PolypoidalQuantity INT,
	@PolypoidalLargest INT,
	@PolypoidalProbably BIT,
	@PolypoidalType TINYINT,
	@Granuloma BIT,
	@GranulomaQuantity INT,
	@GranulomaLargest INT,
	@Dysplastic BIT,
	@DysplasticQuantity INT,
	@DysplasticLargest INT,
	@PneumatosisColi BIT,
	@Tattooed BIT,
	@PreviouslyTattooed BIT,
	@TattooType INT,
	@TattooedQty INT,
	@TattooedBy INT,
	@LoggedInUserId INT)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT
DECLARE @Insert BIT = 0

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	

	IF (@None = 0 AND @Sessile = 0 AND @Pedunculated = 0 AND @Pseudopolyps = 0 AND @Submucosal = 0 AND @Villous = 0 AND @Ulcerative = 0 AND @Stricturing = 0 AND @Polypoidal = 0 AND @Granuloma = 0 AND @Dysplastic = 0 AND @PneumatosisColi = 0)
	BEGIN
		IF EXISTS (SELECT 1 FROM [ERS_ColonAbnoLesions] WHERE SiteId = @SiteId)
		BEGIN
			DELETE FROM [ERS_ColonAbnoLesions] 
			WHERE SiteId = @SiteId

			DELETE FROM ERS_RecordCount 
			WHERE SiteId = @SiteId
			AND Identifier = 'Lesions'
		END
	END

	ELSE IF NOT EXISTS (SELECT 1 FROM [ERS_ColonAbnoLesions] WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO [ERS_ColonAbnoLesions] (
			SiteId,
			[None],
			Sessile,
			SessileQuantity,
			SessileLargest,
			SessileExcised,
			SessileRetrieved,
			SessileToLabs,
			SessileRemoval,
			SessileRemovalMethod,
			SessileProbably,
			SessileType,
			SessileParisClass,
			SessilePitPattern,
			Pedunculated,
			PedunculatedQuantity,
			PedunculatedLargest,
			PedunculatedExcised,
			PedunculatedRetrieved,
			PedunculatedToLabs,
			PedunculatedRemoval,
			PedunculatedRemovalMethod,
			PedunculatedProbably,
			PedunculatedType,
			PedunculatedParisClass,
			PedunculatedPitPattern,
			Pseudopolyps,
			PseudopolypsMultiple,
			PseudopolypsQuantity,
			PseudopolypsLargest,
			PseudopolypsExcised,
			PseudopolypsRetrieved,
			PseudopolypsToLabs,
			PseudopolypsInflam,
			PseudopolypsPostInflam,
			PseudopolypsRemoval,
			PseudopolypsRemovalMethod,
			Submucosal,
			SubmucosalQuantity,
			SubmucosalLargest,
			SubmucosalProbably,
			SubmucosalType,
			Villous,
			VillousQuantity,
			VillousLargest,
			VillousProbably,
			VillousType,
			Ulcerative,
			UlcerativeQuantity,
			UlcerativeLargest,
			UlcerativeProbably,
			UlcerativeType,
			Stricturing,
			StricturingQuantity,
			StricturingLargest,
			StricturingProbably,
			StricturingType,
			Polypoidal,
			PolypoidalQuantity,
			PolypoidalLargest,
			PolypoidalProbably,
			PolypoidalType,
			Granuloma,
			GranulomaQuantity,
			GranulomaLargest,
			Dysplastic,
			DysplasticQuantity,
			DysplasticLargest,
			PneumatosisColi,
			Tattooed,
			PreviouslyTattooed,
			TattooType,
			TattooedQuantity,
			TattooedBy,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Sessile,
			@SessileQuantity,
			@SessileLargest,
			@SessileExcised,
			@SessileRetrieved,
			@SessileToLabs,
			@SessileRemoval,
			@SessileRemovalMethod,
			@SessileProbably,
			@SessileType,
			@SessileParisClass,
			@SessilePitPattern,
			@Pedunculated,
			@PedunculatedQuantity,
			@PedunculatedLargest,
			@PedunculatedExcised,
			@PedunculatedRetrieved,
			@PedunculatedToLabs,
			@PedunculatedRemoval,
			@PedunculatedRemovalMethod,
			@PedunculatedProbably,
			@PedunculatedType,
			@PedunculatedParisClass,
			@PedunculatedPitPattern,
			@Pseudopolyps,
			@PseudopolypsMultiple,
			@PseudopolypsQuantity,
			@PseudopolypsLargest,
			@PseudopolypsExcised,
			@PseudopolypsRetrieved,
			@PseudopolypsToLabs,
			@PseudopolypsInflam,
			@PseudopolypsPostInflam,
			@PseudopolypsRemoval,
			@PseudopolypsRemovalMethod,
			@Submucosal,
			@SubmucosalQuantity,
			@SubmucosalLargest,
			@SubmucosalProbably,
			@SubmucosalType,
			@Villous,
			@VillousQuantity,
			@VillousLargest,
			@VillousProbably,
			@VillousType,
			@Ulcerative,
			@UlcerativeQuantity,
			@UlcerativeLargest,
			@UlcerativeProbably,
			@UlcerativeType,
			@Stricturing,
			@StricturingQuantity,
			@StricturingLargest,
			@StricturingProbably,
			@StricturingType,
			@Polypoidal,
			@PolypoidalQuantity,
			@PolypoidalLargest,
			@PolypoidalProbably,
			@PolypoidalType,
			@Granuloma,
			@GranulomaQuantity,
			@GranulomaLargest,
			@Dysplastic,
			@DysplasticQuantity,
			@DysplasticLargest,
			@PneumatosisColi,
			@Tattooed,
			@PreviouslyTattooed,
			@TattooType,
			@TattooedQty,
			@TattooedBy,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Lesions',
			1)

			SET @Insert = 1
	END

	ELSE
	BEGIN
		UPDATE 
			[ERS_ColonAbnoLesions]
		SET 
			[None] = @None,
			Sessile = @Sessile,
			SessileQuantity = @SessileQuantity,
			SessileLargest = @SessileLargest,
			SessileExcised = @SessileExcised,
			SessileRetrieved = @SessileRetrieved,
			SessileToLabs = @SessileToLabs,
			SessileRemoval = @SessileRemoval,
			SessileRemovalMethod = @SessileRemovalMethod,
			SessileProbably = @SessileProbably,
			SessileType = @SessileType,
			SessileParisClass = @SessileParisClass,
			SessilePitPattern = @SessilePitPattern,
			Pedunculated = @Pedunculated,
			PedunculatedQuantity = @PedunculatedQuantity,
			PedunculatedLargest = @PedunculatedLargest,
			PedunculatedExcised = @PedunculatedExcised,
			PedunculatedRetrieved = @PedunculatedRetrieved,
			PedunculatedToLabs = @PedunculatedToLabs,
			PedunculatedRemoval = @PedunculatedRemoval,
			PedunculatedRemovalMethod = @PedunculatedRemovalMethod,
			PedunculatedProbably = @PedunculatedProbably,
			PedunculatedType = @PedunculatedType,
			PedunculatedParisClass = @PedunculatedParisClass,
			PedunculatedPitPattern = @PedunculatedPitPattern,
			Pseudopolyps = @Pseudopolyps,
			PseudopolypsMultiple = @PseudopolypsMultiple,
			PseudopolypsQuantity = @PseudopolypsQuantity,
			PseudopolypsLargest = @PseudopolypsLargest,
			PseudopolypsExcised = @PseudopolypsExcised,
			PseudopolypsRetrieved = @PseudopolypsRetrieved,
			PseudopolypsToLabs = @PseudopolypsToLabs,
			PseudopolypsInflam = @PseudopolypsInflam,
			PseudopolypsPostInflam = @PseudopolypsPostInflam,
			PseudopolypsRemoval = @PseudopolypsRemoval,
			PseudopolypsRemovalMethod = @PseudopolypsRemovalMethod,
			Submucosal = @Submucosal,
			SubmucosalQuantity = @SubmucosalQuantity,
			SubmucosalLargest = @SubmucosalLargest,
			SubmucosalProbably = @SubmucosalProbably,
			SubmucosalType = @SubmucosalType,
			Villous = @Villous,
			VillousQuantity = @VillousQuantity,
			VillousLargest = @VillousLargest,
			VillousProbably = @VillousProbably,
			VillousType = @VillousType,
			Ulcerative = @Ulcerative,
			UlcerativeQuantity = @UlcerativeQuantity,
			UlcerativeLargest = @UlcerativeLargest,
			UlcerativeProbably = @UlcerativeProbably,
			UlcerativeType = @UlcerativeType,
			Stricturing = @Stricturing,
			StricturingQuantity = @StricturingQuantity,
			StricturingLargest = @StricturingLargest,
			StricturingProbably = @StricturingProbably,
			StricturingType = @StricturingType,
			Polypoidal = @Polypoidal,
			PolypoidalQuantity = @PolypoidalQuantity,
			PolypoidalLargest = @PolypoidalLargest,
			PolypoidalProbably = @PolypoidalProbably,
			PolypoidalType = @PolypoidalType,
			Granuloma = @Granuloma,
			GranulomaQuantity = @GranulomaQuantity,
			GranulomaLargest = @GranulomaLargest,
			Dysplastic = @Dysplastic,
			DysplasticQuantity = @DysplasticQuantity,
			DysplasticLargest = @DysplasticLargest,
			PneumatosisColi = @PneumatosisColi,
			Tattooed = @Tattooed,
			PreviouslyTattooed = @PreviouslyTattooed,
			TattooType = @TattooType,
			TattooedQuantity = @TattooedQty,
			TattooedBy = @TattooedBy,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END

	--Save Polypectomy in ERS_UpperGITherapeutics
	IF (@Insert=1) --only on an insert?.. so if they go and change in Therapeutic types and come back here and alter changes wont be carried across again
	BEGIN
	DECLARE @RemovalType tinyint
	DECLARE @Removal tinyint

		IF @Sessile = 1 OR @Pedunculated = 1 OR @Pseudopolyps = 1
		BEGIN
			IF @Sessile = 1
			BEGIN
				SET @Removal = @SessileRemoval
				SET @RemovalType = @SessileRemovalMethod
			END
			ELSE IF @Pedunculated = 1
			BEGIN
				SET @Removal = @PedunculatedRemoval
				SET @RemovalType = @PedunculatedRemovalMethod
			END
			ELSE IF @Pseudopolyps = 1
			BEGIN
				SET @Removal = @PseudopolypsRemoval
				SET @RemovalType = @PseudopolypsRemovalMethod
			END	

			IF @Removal > 0 OR @RemovalType > 0
			BEGIN
				IF NOT EXISTS (SELECT 1 FROM ERS_UpperGITherapeutics WHERE SiteId = @SiteId)
				BEGIN
					INSERT INTO ERS_UpperGITherapeutics (SiteId,	Polypectomy,	PolypectomyRemoval, PolypectomyRemovalType, CarriedOutRole, WhoCreatedId, WhenCreated) 
					VALUES (@SiteId,	1,	@Removal, @RemovalType, 1, @LoggedInUserId, GETDATE())

					IF NOT EXISTS (SELECT 1 FROM ERS_RecordCount WHERE ProcedureId = @proc_id AND SiteId = @SiteId AND Identifier = 'Therapeutic Procedures')
					BEGIN
						INSERT INTO ERS_RecordCount ([ProcedureId],	[SiteId], [Identifier], [RecordCount])
						VALUES (@proc_id, @SiteId, 'Therapeutic Procedures', 1)
					END 
				END
				ELSE IF EXISTS (SELECT 1 FROM ERS_UpperGITherapeutics WHERE SiteId = @SiteId AND CarriedOutRole = 1)
				BEGIN
					UPDATE ERS_UpperGITherapeutics
					SET Polypectomy = 1,						
						PolypectomyRemoval = @Removal,
						PolypectomyRemovalType = @RemovalType,
						WhoUpdatedId = @LoggedInUserId,
						WhenUpdated = GETDATE()
					WHERE
						SiteId = @SiteId AND
						CarriedOutRole = 1
				END
				ELSE
				BEGIN
					UPDATE ERS_UpperGITherapeutics
					SET Polypectomy = 1,						
						PolypectomyRemoval = @Removal,
						PolypectomyRemovalType = @RemovalType,
						WhoUpdatedId = @LoggedInUserId,
						WhenUpdated = GETDATE()
					WHERE 
						SiteId = @SiteId AND
						CarriedOutRole = 2
				END
			END
		END	

		IF @Tattooed =1 
		BEGIN
			--Save Tattoo/Marking in ERS_UpperGITherapeutics
			IF NOT EXISTS(SELECT 1 FROM dbo.ERS_UpperGITherapeutics eug WHERE eug.SiteId = @SiteId AND eug.CarriedOutRole = @TattooedBy)
			BEGIN
				INSERT INTO ERS_UpperGITherapeutics (SiteId,	Marking,	MarkingType, MarkedQuantity, CarriedOutRole, WhoCreatedId, WhenCreated) 
				VALUES (@SiteId,	@Tattooed,	@TattooType, @TattooedQty, @TattooedBy, @LoggedInUserId, GETDATE())

				IF NOT EXISTS (SELECT 1 FROM ERS_RecordCount WHERE ProcedureId = @proc_id AND SiteId = @SiteId AND Identifier = 'Therapeutic Procedures')
				BEGIN
					INSERT INTO ERS_RecordCount ([ProcedureId],	[SiteId], [Identifier], [RecordCount])
					VALUES (@proc_id, @SiteId, 'Therapeutic Procedures', 1)
				END 
			END
			ELSE
			BEGIN
				UPDATE ERS_UpperGITherapeutics
				SET Marking = @Tattooed,						
					MarkingType = @TattooType,
					MarkedQuantity = @TattooedQty,
					WhoUpdatedId = @LoggedInUserId,
					WhenUpdated = GETDATE()
				WHERE 
					SiteId = @SiteId AND
					CarriedOutRole = @TattooedBy
			END
		END
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------292 Create Proc abnormalities_colon_lesions_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_lesions_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_lesions_summary_update]
(
	@SiteId INT
)
AS
SET NOCOUNT ON
	
DECLARE 
	@summary VARCHAR (8000),
	@tempsummary VARCHAR (1000),
	@None BIT,
	@Sessile BIT,
	@SessileQuantity INT,
	@SessileLargest INT,
	@SessileExcised INT,
	@SessileRetrieved INT,
	@SessileToLabs INT,
	@SessileRemoval TINYINT,
	@SessileRemovalMethod TINYINT,
	@SessileProbably BIT,
	@SessileType TINYINT,
	@SessileParisClass TINYINT,
	@SessilePitPattern TINYINT,
	@Pedunculated BIT,
	@PedunculatedQuantity INT,
	@PedunculatedLargest INT,
	@PedunculatedExcised INT,
	@PedunculatedRetrieved INT,
	@PedunculatedToLabs INT,
	@PedunculatedRemoval TINYINT,
	@PedunculatedRemovalMethod TINYINT,
	@PedunculatedProbably BIT,
	@PedunculatedType TINYINT,
	@PedunculatedParisClass TINYINT,
	@PedunculatedPitPattern TINYINT,
	@Pseudopolyps BIT,
	@PseudopolypsMultiple BIT,
	@PseudopolypsQuantity INT,
	@PseudopolypsLargest INT,
	@PseudopolypsExcised INT,
	@PseudopolypsRetrieved INT,
	@PseudopolypsToLabs INT,
	@PseudopolypsInflam BIT,
	@PseudopolypsPostInflam BIT,
	@PseudopolypsRemoval TINYINT,
	@PseudopolypsRemovalMethod TINYINT,
	@Submucosal BIT,
	@SubmucosalQuantity INT,
	@SubmucosalLargest INT,
	@SubmucosalProbably BIT,
	@SubmucosalType TINYINT,
	@Villous BIT,
	@VillousQuantity INT,
	@VillousLargest INT,
	@VillousProbably BIT,
	@VillousType TINYINT,
	@Ulcerative BIT,
	@UlcerativeQuantity INT,
	@UlcerativeLargest INT,
	@UlcerativeProbably BIT,
	@UlcerativeType TINYINT,
	@Stricturing BIT,
	@StricturingQuantity INT,
	@StricturingLargest INT,
	@StricturingProbably BIT,
	@StricturingType TINYINT,
	@Polypoidal BIT,
	@PolypoidalQuantity INT,
	@PolypoidalLargest INT,
	@PolypoidalProbably BIT,
	@PolypoidalType TINYINT,
	@Granuloma BIT,
	@GranulomaQuantity INT,
	@GranulomaLargest INT,
	@Dysplastic BIT,
	@DysplasticQuantity INT,
	@DysplasticLargest INT,
	@PneumatosisColi BIT,
	@Tattooed BIT,
	@PreviouslyTattooed BIT,
	@TattooType INT,
	@TattooedQty INT

SET @summary = ''
SET @tempsummary = ''

SELECT 
	@None=[None],
	@Sessile=Sessile,
	@SessileQuantity=SessileQuantity,
	@SessileLargest=SessileLargest,
	@SessileExcised=SessileExcised,
	@SessileRetrieved=SessileRetrieved,
	@SessileToLabs=SessileToLabs,
	@SessileRemoval=SessileRemoval,
	@SessileRemovalMethod=SessileRemovalMethod,
	@SessileProbably=SessileProbably,
	@SessileType=SessileType,
	@SessileParisClass=SessileParisClass,
	@SessilePitPattern=SessilePitPattern,
	@Pedunculated=Pedunculated,
	@PedunculatedQuantity=PedunculatedQuantity,
	@PedunculatedLargest=PedunculatedLargest,
	@PedunculatedExcised=PedunculatedExcised,
	@PedunculatedRetrieved=PedunculatedRetrieved,
	@PedunculatedToLabs=PedunculatedToLabs,
	@PedunculatedRemoval=PedunculatedRemoval,
	@PedunculatedRemovalMethod=PedunculatedRemovalMethod,
	@PedunculatedProbably=PedunculatedProbably,
	@PedunculatedType=PedunculatedType,
	@PedunculatedParisClass=PedunculatedParisClass,
	@PedunculatedPitPattern=PedunculatedPitPattern,
	@Pseudopolyps=Pseudopolyps,
	@PseudopolypsMultiple=PseudopolypsMultiple,
	@PseudopolypsQuantity=PseudopolypsQuantity,
	@PseudopolypsLargest=PseudopolypsLargest,
	@PseudopolypsExcised=PseudopolypsExcised,
	@PseudopolypsRetrieved=PseudopolypsRetrieved,
	@PseudopolypsToLabs=PseudopolypsToLabs,
	@PseudopolypsInflam=PseudopolypsInflam,
	@PseudopolypsPostInflam=PseudopolypsPostInflam,
	@PseudopolypsRemoval=PseudopolypsRemoval,
	@PseudopolypsRemovalMethod=PseudopolypsRemovalMethod,
	@Submucosal=Submucosal,
	@SubmucosalQuantity=SubmucosalQuantity,
	@SubmucosalLargest=SubmucosalLargest,
	@SubmucosalProbably=SubmucosalProbably,
	@SubmucosalType=SubmucosalType,
	@Villous=Villous,
	@VillousQuantity=VillousQuantity,
	@VillousLargest=VillousLargest,
	@VillousProbably=VillousProbably,
	@VillousType=VillousType,
	@Ulcerative=Ulcerative,
	@UlcerativeQuantity=UlcerativeQuantity,
	@UlcerativeLargest=UlcerativeLargest,
	@UlcerativeProbably=UlcerativeProbably,
	@UlcerativeType=UlcerativeType,
	@Stricturing=Stricturing,
	@StricturingQuantity=StricturingQuantity,
	@StricturingLargest=StricturingLargest,
	@StricturingProbably=StricturingProbably,
	@StricturingType=StricturingType,
	@Polypoidal=Polypoidal,
	@PolypoidalQuantity=PolypoidalQuantity,
	@PolypoidalLargest=PolypoidalLargest,
	@PolypoidalProbably=PolypoidalProbably,
	@PolypoidalType=PolypoidalType,
	@Granuloma=Granuloma,
	@GranulomaQuantity=GranulomaQuantity,
	@GranulomaLargest=GranulomaLargest,
	@Dysplastic=Dysplastic,
	@DysplasticQuantity=DysplasticQuantity,
	@DysplasticLargest=DysplasticLargest,
	@PneumatosisColi=PneumatosisColi,
	@Tattooed = Tattooed,
	@PreviouslyTattooed = PreviouslyTattooed,
	@TattooType = TattooType,
	@TattooedQty = TattooedQuantity
FROM
	ERS_ColonAbnoLesions
WHERE
	SiteId = @SiteId

SET @Summary = ''


IF @None = 1 SET @summary = 'No lesions'

ELSE
BEGIN
	------------------------------------------------------------------------------------------
	-------	SESSILE	-------
	------------------------------------------------------------------------------------------
	IF @Sessile > 0
	BEGIN
		IF @SessileQuantity > 0 SET @summary = @summary + CONVERT(VARCHAR(20), @SessileQuantity) + ' '
		
		IF @SessileProbably = 1 SET @summary = @summary + 'probably '

		IF @SessileType = 1 SET @summary = @summary + 'benign '
		ELSE IF @SessileType = 2 SET @summary = @summary + 'malignant '

		IF @SessileQuantity > 1 SET @summary = @summary + 'sessile polyps ' ELSE SET @summary = @summary + 'sessile polyp ' 

		IF (@SessileQuantity > 0 AND @SessileLargest > 0) 
		BEGIN
			IF @SessileQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @SessileLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @SessileLargest) + 'mm) '
		END

		IF @SessileParisClass > 0 OR @SessilePitPattern > 0
		BEGIN
			SET @summary = @summary + '('

			IF @SessileParisClass > 0 
			SET @summary = @summary +
                     CASE @SessileParisClass
                           WHEN  1 THEN 'Paris Is'
                           WHEN  2 THEN 'Paris IIa'
                           WHEN  3 THEN 'Paris IIa + IIc'
                           WHEN 4 THEN 'Paris IIb'
                           WHEN  5 THEN 'Paris IIc'
                           WHEN  6 THEN 'Paris IIc + IIa'
                           ELSE ''
			END

			IF @SessilePitPattern > 0 
			BEGIN
				IF @SessileParisClass > 0 SET @summary = @summary + ', '
				
				SET @summary = @summary +
                           CASE @SessilePitPattern
                                  WHEN  1 THEN 'pit type I'
                                  WHEN 2 THEN 'pit type II'
                                  WHEN  3 THEN 'pit type IIIs'
                                  WHEN  4 THEN 'pit type IIIL'
                                  WHEN  5 THEN 'pit type IV'
                                  WHEN  6 THEN 'pit type V'
					ELSE ''
				END
			END

			SET @summary = @summary + ')'
		END

		IF @SessileExcised > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @SessileExcised <> @SessileQuantity SET @summary = @summary + CONVERT(VARCHAR(20), @SessileExcised) + ' '
			SET @summary = @summary + 'excised '

			IF @SessileRemoval > 0 OR @SessileRemovalMethod > 0
			BEGIN
				SET @summary = @summary + '(removed '
				
				IF @SessileRemoval = 1 SET @summary = @summary + 'entirely '
				ELSE IF @SessileRemoval = 2 SET @summary = @summary + 'piecemeal '
				
				IF @SessileRemovalMethod = 1 SET @summary = @summary + 'using partial snare'
				ELSE IF @SessileRemovalMethod = 2 SET @summary = @summary + 'using cold snare'
				ELSE IF @SessileRemovalMethod = 2 SET @summary = @summary + 'using hot snare'
				ELSE IF @SessileRemovalMethod = 2 SET @summary = @summary + 'using hot biopsy'
				ELSE IF @SessileRemovalMethod = 2 SET @summary = @summary + 'using cold biopsy'

				SET @summary = @summary + ')'
			END
		END

		IF @SessileRetrieved > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @SessileRetrieved <> @SessileExcised SET @summary = @summary + CONVERT(VARCHAR(20), @SessileRetrieved) + ' '
			SET @summary = @summary + 'retrieved '
		END

		IF @SessileToLabs > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @SessileToLabs <> @SessileRetrieved SET @summary = @summary + CONVERT(VARCHAR(20), @SessileToLabs) + ' '
			SET @summary = @summary + 'sent to labs '
		END

		-- Set the last occurence of $$ to "and"
		IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 3, ' and')
		-- Replace all other occurences of $$ with commas
		SET @summary = REPLACE(@summary, '$$', ',')
	END

	------------------------------------------------------------------------------------------
	-------	PEDUNCULATED -------
	------------------------------------------------------------------------------------------
	ELSE IF @Pedunculated > 0
	BEGIN
		IF @PedunculatedQuantity > 0 SET @summary = @summary + CONVERT(VARCHAR(20), @PedunculatedQuantity) + ' '
		
		IF @PedunculatedProbably = 1 SET @summary = @summary + 'probably '

		IF @PedunculatedType = 1 SET @summary = @summary + 'benign '
		ELSE IF @PedunculatedType = 2 SET @summary = @summary + 'malignant '

		IF @PedunculatedQuantity > 1 SET @summary = @summary + 'pedunculated polyps ' ELSE SET @summary = @summary + 'pedunculated polyp ' 

		IF (@PedunculatedQuantity > 0 AND @PedunculatedLargest > 0) 
		BEGIN
			IF @PedunculatedQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @PedunculatedLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @PedunculatedLargest) + 'mm) '
		END

		IF @PedunculatedParisClass > 0 OR @PedunculatedPitPattern > 0
		BEGIN
			SET @summary = @summary + '('

			IF @PedunculatedParisClass > 0 
			SET @summary = @summary +
			CASE 
                           WHEN @PedunculatedParisClass = 1 THEN 'Ip'
                           WHEN @PedunculatedParisClass = 2 THEN 'Isp'
				ELSE ''
			END

			IF @PedunculatedPitPattern > 0 
			BEGIN
				IF @PedunculatedParisClass > 0 SET @summary = @summary + ', '
				
				SET @summary = @summary +
				CASE 
					WHEN @PedunculatedPitPattern = 1 THEN 'pit type I'
					WHEN @PedunculatedPitPattern = 2 THEN 'pit type II'
					WHEN @PedunculatedPitPattern = 3 THEN 'pit type IIIs'
					WHEN @PedunculatedPitPattern = 4 THEN 'pit type IIIL'
					WHEN @PedunculatedPitPattern = 5 THEN 'pit type IV'
					WHEN @PedunculatedPitPattern = 6 THEN 'pit type V'
					ELSE ''
				END
			END

			SET @summary = @summary + ')'
		END

		IF @PedunculatedExcised > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @PedunculatedExcised <> @PedunculatedQuantity SET @summary = @summary + CONVERT(VARCHAR(20), @PedunculatedExcised) + ' '
			SET @summary = @summary + 'excised '

			IF @PedunculatedRemoval > 0 OR @PedunculatedRemovalMethod > 0
			BEGIN
				SET @summary = @summary + '(removed '
				
				IF @PedunculatedRemoval = 1 SET @summary = @summary + 'entirely '
				ELSE IF @PedunculatedRemoval = 2 SET @summary = @summary + 'piecemeal '
				
				IF @PedunculatedRemovalMethod = 1 SET @summary = @summary + 'using partial snare'
				ELSE IF @PedunculatedRemovalMethod = 2 SET @summary = @summary + 'using cold snare'
				ELSE IF @PedunculatedRemovalMethod = 2 SET @summary = @summary + 'using hot snare'
				ELSE IF @PedunculatedRemovalMethod = 2 SET @summary = @summary + 'using hot biopsy'
				ELSE IF @PedunculatedRemovalMethod = 2 SET @summary = @summary + 'using cold biopsy'

				SET @summary = @summary + ')'
			END
		END

		IF @PedunculatedRetrieved > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @PedunculatedRetrieved <> @PedunculatedExcised SET @summary = @summary + CONVERT(VARCHAR(20), @PedunculatedRetrieved) + ' '
			SET @summary = @summary + 'retrieved '
		END

		IF @PedunculatedToLabs > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @PedunculatedToLabs <> @PedunculatedRetrieved SET @summary = @summary + CONVERT(VARCHAR(20), @PedunculatedToLabs) + ' '
			SET @summary = @summary + 'sent to labs '
		END

		-- Set the last occurence of $$ to "and"
		IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 3, ' and')
		-- Replace all other occurences of $$ with commas
		SET @summary = REPLACE(@summary, '$$', ',')
	END

	------------------------------------------------------------------------------------------
	-------	PSEUDOPOLYPS -------
	------------------------------------------------------------------------------------------
	ELSE IF @Pseudopolyps > 0
	BEGIN
		IF @PseudopolypsQuantity > 0 SET @summary = @summary + CONVERT(VARCHAR(20), @PseudopolypsQuantity) + ' '
		ELSE IF @PseudopolypsMultiple = 1 SET @summary = @summary + 'multiple '

		IF @PseudopolypsInflam = 1 AND @PseudopolypsPostInflam = 0 SET @summary = @summary + 'inflammatory '
		ELSE IF @PseudopolypsInflam = 0 AND @PseudopolypsPostInflam = 1 SET @summary = @summary + 'post-inflammatory '
		ELSE IF @PseudopolypsInflam = 1 AND @PseudopolypsPostInflam = 1 SET @summary = @summary + 'inflammatory and post-inflammatory '
		
		IF (@PseudopolypsQuantity > 1 OR @PseudopolypsMultiple = 1) SET @summary = @summary + 'pseudopolyps ' ELSE SET @summary = @summary + 'pseudopolyp ' 

		IF (@PseudopolypsQuantity > 0 AND @PseudopolypsLargest > 0) 
		BEGIN
			IF @PseudopolypsQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @PseudopolypsLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @PseudopolypsLargest) + 'mm) '
		END

		IF @PseudopolypsExcised > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @PseudopolypsExcised <> @PseudopolypsQuantity SET @summary = @summary + CONVERT(VARCHAR(20), @PseudopolypsExcised) + ' '
			SET @summary = @summary + 'excised '

			IF @PseudopolypsRemoval > 0 OR @PseudopolypsRemovalMethod > 0
			BEGIN
				SET @summary = @summary + '(removed '
				
				IF @PseudopolypsRemoval = 1 SET @summary = @summary + 'entirely '
				ELSE IF @PseudopolypsRemoval = 2 SET @summary = @summary + 'piecemeal '
				
				IF @PseudopolypsRemovalMethod = 1 SET @summary = @summary + 'using partial snare'
				ELSE IF @PseudopolypsRemovalMethod = 2 SET @summary = @summary + 'using cold snare'
				ELSE IF @PseudopolypsRemovalMethod = 2 SET @summary = @summary + 'using hot snare'
				ELSE IF @PseudopolypsRemovalMethod = 2 SET @summary = @summary + 'using hot biopsy'
				ELSE IF @PseudopolypsRemovalMethod = 2 SET @summary = @summary + 'using cold biopsy'

				SET @summary = @summary + ')'
			END
		END

		IF @PseudopolypsRetrieved > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @PseudopolypsRetrieved <> @PseudopolypsExcised SET @summary = @summary + CONVERT(VARCHAR(20), @PseudopolypsRetrieved) + ' '
			SET @summary = @summary + 'retrieved '
		END

		IF @PseudopolypsToLabs > 0 
		BEGIN
			SET @summary = @summary + '$$ '
			IF @PseudopolypsToLabs <> @PseudopolypsRetrieved SET @summary = @summary + CONVERT(VARCHAR(20), @PseudopolypsToLabs) + ' '
			SET @summary = @summary + 'sent to labs '
		END

		-- Set the last occurence of $$ to "and"
		IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 3, ' and')
		-- Replace all other occurences of $$ with commas
		SET @summary = REPLACE(@summary, '$$', ',')
	END

	------------------------------------------------------------------------------------------
	-------	TUMOUR: SUBMUCOSAL -------
	------------------------------------------------------------------------------------------
	IF @Submucosal > 0
	BEGIN
		IF @summary <> '' SET @summary = @summary + '##'

		IF @SubmucosalQuantity > 1 SET @summary = @summary + CONVERT(VARCHAR(20), @SubmucosalQuantity) + ' '
		ELSE SET @summary = @summary + 'A '
		
		IF @SubmucosalProbably = 1 SET @summary = @summary + 'probably '

		IF @SubmucosalType = 1 SET @summary = @summary + 'benign '
		ELSE IF @SubmucosalType = 2 SET @summary = @summary + 'malignant '

		IF @SubmucosalQuantity > 1 SET @summary = @summary + 'submucosal tumours ' ELSE SET @summary = @summary + 'submucosal tumour ' 

		IF (@SubmucosalQuantity > 0 AND @SubmucosalLargest > 0) 
		BEGIN
			IF @SubmucosalQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @SubmucosalLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @SubmucosalLargest) + 'mm) '
		END
	END

	------------------------------------------------------------------------------------------
	-------	TUMOUR: VILLOUS -------
	------------------------------------------------------------------------------------------
	IF @Villous > 0
	BEGIN
		IF @summary <> '' SET @summary = @summary + '##'

		IF @VillousQuantity > 1 SET @summary = @summary + CONVERT(VARCHAR(20), @VillousQuantity) + ' '
		ELSE SET @summary = @summary + 'A '
		
		IF @VillousProbably = 1 SET @summary = @summary + 'probably '

		IF @VillousType = 1 SET @summary = @summary + 'benign '
		ELSE IF @VillousType = 2 SET @summary = @summary + 'malignant '

		IF @VillousQuantity > 1 SET @summary = @summary + 'villous tumours ' ELSE SET @summary = @summary + 'villous tumour ' 

		IF (@VillousQuantity > 0 AND @VillousLargest > 0) 
		BEGIN
			IF @VillousQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @VillousLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @VillousLargest) + 'mm) '
		END
	END

	------------------------------------------------------------------------------------------
	-------	TUMOUR: ULCERATIVE -------
	------------------------------------------------------------------------------------------
	IF @Ulcerative > 0
	BEGIN
		DECLARE @UlcerSummary VARCHAR(300) = ''
		IF @summary <> '' SET @summary = @summary + '##'

		IF @UlcerativeQuantity > 1 SET @UlcerSummary = @UlcerSummary + CONVERT(VARCHAR(20), @UlcerativeQuantity) + ' '
		
		IF @UlcerativeProbably = 1 SET @UlcerSummary = @UlcerSummary + 'probably '

		IF @UlcerativeType = 1 SET @UlcerSummary = @UlcerSummary + 'benign '
		ELSE IF @UlcerativeType = 2 SET @UlcerSummary = @UlcerSummary + 'malignant '

		IF @UlcerativeQuantity > 1 SET @UlcerSummary = @UlcerSummary + 'ulcerative tumours ' ELSE SET @UlcerSummary = @UlcerSummary + 'ulcerative tumour ' 

		IF LEFT(@UlcerSummary,1) = 'u' SET @UlcerSummary =  'An ' + @UlcerSummary
		ELSE IF ISNULL(@UlcerativeQuantity,0) <= 1 SET @UlcerSummary =  'A ' + @UlcerSummary

		IF (@UlcerativeQuantity > 0 AND @UlcerativeLargest > 0) 
		BEGIN
			IF @UlcerativeQuantity > 1
				SET @UlcerSummary = @UlcerSummary + '(largest ' + CONVERT(VARCHAR(20), @UlcerativeLargest) + 'mm) '
			ELSE
				SET @UlcerSummary = @UlcerSummary + '(' + CONVERT(VARCHAR(20), @UlcerativeLargest) + 'mm) '
		END

		SET @summary = @summary + @UlcerSummary
	END

	------------------------------------------------------------------------------------------
	-------	TUMOUR: STRICTURING -------
	------------------------------------------------------------------------------------------
	IF @Stricturing > 0
	BEGIN
		IF @summary <> '' SET @summary = @summary + '##'

		IF @StricturingQuantity > 1 SET @summary = @summary + CONVERT(VARCHAR(20), @StricturingQuantity) + ' '
		ELSE SET @summary = @summary + 'A '
		
		IF @StricturingProbably = 1 SET @summary = @summary + 'probably '

		IF @StricturingType = 1 SET @summary = @summary + 'benign '
		ELSE IF @StricturingType = 2 SET @summary = @summary + 'malignant '

		IF @StricturingQuantity > 1 SET @summary = @summary + 'stricturing tumours ' ELSE SET @summary = @summary + 'stricturing tumour ' 

		IF (@StricturingQuantity > 0 AND @StricturingLargest > 0) 
		BEGIN
			IF @StricturingQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @StricturingLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @StricturingLargest) + 'mm) '
		END
	END

	------------------------------------------------------------------------------------------
	-------	TUMOUR: POLYPOIDAL -------
	------------------------------------------------------------------------------------------
	IF @Polypoidal > 0
	BEGIN
		IF @summary <> '' SET @summary = @summary + '##'

		IF @PolypoidalQuantity > 1 SET @summary = @summary + CONVERT(VARCHAR(20), @PolypoidalQuantity) + ' '
		ELSE SET @summary = @summary + 'A '
		
		IF @PolypoidalProbably = 1 SET @summary = @summary + 'probably '

		IF @PolypoidalType = 1 SET @summary = @summary + 'benign '
		ELSE IF @PolypoidalType = 2 SET @summary = @summary + 'malignant '

		IF @PolypoidalQuantity > 1 SET @summary = @summary + 'polypoidal tumours ' ELSE SET @summary = @summary + 'polypoidal tumour ' 

		IF (@PolypoidalQuantity > 0 AND @PolypoidalLargest > 0) 
		BEGIN
			IF @PolypoidalQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @PolypoidalLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @PolypoidalLargest) + 'mm) '
		END
	END

	------------------------------------------------------------------------------------------
	-------	SUTURE GRANULOMA -------
	------------------------------------------------------------------------------------------
	IF @Granuloma > 0
	BEGIN
		IF @summary <> '' SET @summary = @summary + '##'

		IF @GranulomaQuantity > 1 SET @summary = @summary + CONVERT(VARCHAR(20), @GranulomaQuantity) + ' '
		ELSE SET @summary = @summary + 'A '
		
		IF @GranulomaQuantity > 1 SET @summary = @summary + 'granuloma tumours ' ELSE SET @summary = @summary + 'granuloma tumour ' 

		IF (@GranulomaQuantity > 0 AND @GranulomaLargest > 0) 
		BEGIN
			IF @GranulomaQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @GranulomaLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @GranulomaLargest) + 'mm) '
		END
	END

	------------------------------------------------------------------------------------------
	-------	DYSPLASTIC LESION -------
	------------------------------------------------------------------------------------------
	IF @Dysplastic > 0
	BEGIN
		IF @summary <> '' SET @summary = @summary + '##'

		IF @DysplasticQuantity > 1 SET @summary = @summary + CONVERT(VARCHAR(20), @DysplasticQuantity) + ' '
		ELSE SET @summary = @summary + 'A '
		
		IF @DysplasticQuantity > 1 SET @summary = @summary + 'dysplastic tumours ' ELSE SET @summary = @summary + 'dysplastic tumour ' 

		IF (@DysplasticQuantity > 0 AND @DysplasticLargest > 0) 
		BEGIN
			IF @DysplasticQuantity > 1
				SET @summary = @summary + '(largest ' + CONVERT(VARCHAR(20), @DysplasticLargest) + 'mm) '
			ELSE
				SET @summary = @summary + '(' + CONVERT(VARCHAR(20), @DysplasticLargest) + 'mm) '
		END

	END

	------------------------------------------------------------------------------------------
	-------	PNEUMATOSIS COLI -------
	------------------------------------------------------------------------------------------
	IF @PneumatosisColi > 0
		BEGIN
			IF @summary <> '' SET @summary = @summary + '##'

			SET @summary = @summary + 'pneumatosis coli '
		END
	END	
	
	------------------------------------------------------------------------------------------
	-------	POLYPS TATTOO ----------
	------------------------------------------------------------------------------------------
	IF @Tattooed > 0 
	BEGIN
		DECLARE @TattooTypeText varchar(50)

		SELECT @TattooType = MarkingType, @TattooedQty = MarkedQuantity FROM dbo.ERS_UpperGITherapeutics WHERE SiteId = @SiteID AND Marking = 1
		
		IF @summary <> '' SET @summary = @summary + '##'

		SET @summary = @summary + ' tattooed, '
		
		IF @TattooType IS NOT NULL AND @TattooType > 0
		BEGIN
			SELECT @TattooTypeText = ListItemText FROM dbo.ERS_Lists el WHERE el.ListDescription = 'Abno marking' AND el.ListItemNo = @TattooType AND ListItemText IS NOT NULL

			SET @summary = @summary + CASE WHEN @TattooedQty IS NOT NULL AND @TattooedQty > 0 THEN + CONVERT(varchar(5), @TattooedQty) ELSE '' END + ' marked using ' + @TattooTypeText
		END	
	END	
	ELSE IF @PreviouslyTattooed > 0
	BEGIN
		IF @summary <> '' SET @summary = @summary + '##'

		SET @summary = @summary + ' previously tattooed '
	END	


SET @summary = LTRIM(RTRIM(@summary))
SET @summary = REPLACE(@summary, '##', '. ')
SET @summary = REPLACE(@summary, ' ,', ',')
SET @summary = REPLACE(@summary, ' )', ')')
SET @summary = REPLACE(@summary, ' .', '.')

DECLARE @finalSummary VARCHAR(8000) =''
----Set first letter to upper after full stop.
SELECT @finalSummary = @finalSummary + COALESCE(dbo.fnFirstLetterUpper(item) + '. ', '') 
FROM dbo.fnSplitString(@summary, '.')

SET @summary = LTRIM(RTRIM(@finalSummary))
IF @None <> 1 SET @summary = LOWER(LEFT(@summary,1)) + RIGHT(@summary,LEN(@summary)-1)
IF RIGHT(@summary,1) = '.' SET @summary = LEFT(@summary, LEN(@summary)-1)

-- Finally, update the summary in Diverticulum table
UPDATE ERS_ColonAbnoLesions
SET Summary = @summary 
WHERE SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------293a Create Proc default_qa_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'procedure_default_qa_select','S';
GO

CREATE PROCEDURE [dbo].[procedure_default_qa_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON
DECLARE @ProcedureType INT, @CreatedDateTime Datetime
SELECT TOP(1) @ProcedureType = ProcedureType,@CreatedDateTime= CreatedOn  FROM [ERS_Procedures]  WHERE ProcedureID = @ProcedureID

SELECT
    ProcedureType,
	ManagementNone,
	PulseOximetry,
	IVAccess,
	IVAntibiotics,
	Oxygenation,
	OxygenationMethod,
	OxygenationFlowRate,
	ContinuousECG,
	BP,
	BPSystolic,
	BPDiastolic,
	ManagementOther,
	ManagementOtherText
FROM
	[ERS_QADefault] 
WHERE 
	ProcedureType = @ProcedureType AND [Datestamp] <= @CreatedDateTime


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------293b Create Proc default_qa_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'procedure_default_qa_save','S';
GO

CREATE PROCEDURE [dbo].[procedure_default_qa_save]
(
	@ProcedureID INT,
	@ManagementNone BIT,
	@PulseOximetry BIT,
	@IVAccess BIT,
	@IVAntibiotics BIT,
	@Oxygenation BIT,
	@OxygenationMethod TINYINT,
	@OxygenationFlowRate DECIMAL(6,2),
	@ContinuousECG BIT,
	@BP BIT,
	@BPSystolic DECIMAL(6,2),
	@BPDiastolic DECIMAL(6,2),
	@ManagementOther BIT,
	@ManagementOtherText NVARCHAR(1000),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
DECLARE @ProcedureType INT
SELECT TOP(1) @ProcedureType = ProcedureType FROM [ERS_Procedures]  WHERE ProcedureID = @ProcedureID

IF EXISTS(SELECT [DefaultQAID] FROM [ERS_QADefault] WHERE ProcedureType=@ProcedureType)
	BEGIN
		UPDATE [ERS_QADefault] 
		SET 	ManagementNone=@ManagementNone,
				PulseOximetry=@PulseOximetry,
				IVAccess = @IVAccess,
				IVAntibiotics = @IVAntibiotics,
				Oxygenation =@Oxygenation,
				OxygenationMethod =@OxygenationMethod,
				OxygenationFlowRate =@OxygenationFlowRate,
				ContinuousECG =@ContinuousECG,
				BP = @BP,
				BPSystolic = @BPSystolic,
				BPDiastolic = @BPDiastolic,
				ManagementOther = @ManagementOther,
				ManagementOtherText =@ManagementOtherText ,
				WhoUpdatedId = @LoggedInUserId,
				WhenUpdated = GETDATE()
		WHERE ProcedureType=@ProcedureType

	END
ELSE
	BEGIN
		INSERT INTO [ERS_QADefault] (
				ProcedureType,
				ManagementNone,
				PulseOximetry,
				IVAccess,
				IVAntibiotics,
				Oxygenation,
				OxygenationMethod,
				OxygenationFlowRate,
				ContinuousECG,
				BP,
				BPSystolic,
				BPDiastolic,
				ManagementOther,
				ManagementOtherText,
				WhoCreatedId,
				WhenCreated) 
			VALUES (
				@ProcedureType,
				@ManagementNone,
				@PulseOximetry,
				@IVAccess,
				@IVAntibiotics,
				@Oxygenation,
				@OxygenationMethod,
				@OxygenationFlowRate,
				@ContinuousECG,
				@BP,
				@BPSystolic,
				@BPDiastolic,
				@ManagementOther,
				@ManagementOtherText,
				@LoggedInUserId,
				GETDATE())
	END
END TRY


BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------294 Create Proc common_bowel_preparation_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_bowel_preparation_save','S';
GO

CREATE PROCEDURE [dbo].[common_bowel_preparation_save]
(
	@ProcedureID INT,
	@BowelPrepSettings bit,
	@OnNoBowelPrep BIT,
    @OnFormulation VARCHAR(500),
	@CO2Insufflation BIT,
    @OnRight int,
    @OnTransverse int,
    @OnLeft int,
    @OnTotalScore int,
    @OffNoBowelPrep bit,
    @OffFormulation varchar(500),
    @BowelPrepQuality tinyint
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
If @OnNoBowelPrep = 'true'
BEGIN
	set @OnFormulation = null
	set @CO2Insufflation = NULL
	set @OnRight = 0
	set @OnTransverse = 0
	set @OnLeft = 0
	set @OnTotalScore = 0
END
If @OffNoBowelPrep = 'true'
BEGIN
    set @OffFormulation = null
	set  @BowelPrepQuality = null
END
IF EXISTS(SELECT [BowelPrepID] FROM [ERS_BowelPreparation] WHERE ProcedureID = @ProcedureID)
	BEGIN
	 UPDATE [ERS_BowelPreparation]
		SET 
		[BowelPrepSettings] = @BowelPrepSettings,	
		[OnNoBowelPrep]= @OnNoBowelPrep,
		[OnFormulation] = @OnFormulation,
		[CO2Insufflation] = @CO2Insufflation,
		[OnRight] = @onright,
		[OnTransverse] = @OnTransverse,
		[OnLeft] = @OnLeft,
		[OnTotalScore] = @OnTotalScore,
		[OffNoBowelPrep]  = @OffNoBowelPrep,
		[OffFormulation] = @OffFormulation,
		[BowelPrepQuality] = @BowelPrepQuality
	WHERE ProcedureID=@ProcedureID
	END
ELSE
	BEGIN
	INSERT INTO [ERS_BowelPreparation] (
		ProcedureID,
		BowelPrepSettings,
		[OnNoBowelPrep],
		[OnFormulation],
		[CO2Insufflation],
		[OnRight],
		[OnTransverse],
		[OnLeft],
		[OnTotalScore],
		[OffNoBowelPrep],
		[OffFormulation],
		[BowelPrepQuality]) 
	VALUES (
		@ProcedureID,
		@BowelPrepSettings,
		@OnNoBowelPrep,
		@OnFormulation,
		@CO2Insufflation,
		@onright,
		@OnTransverse,
		@OnLeft,
		@OnTotalScore,
		@OffNoBowelPrep,
		@OffFormulation,
		@BowelPrepQuality)
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------294a Create Proc printreport_patient_info_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC dbo.DropIfExist 'printreport_patient_info_select', 'S';
GO

CREATE PROCEDURE [dbo].[printreport_patient_info_select]
(
	@ProcedureId INT,
	@EpisodeNo INT = 0,
       @PatientComboId VARCHAR(30) = NULL,
       @ProcedureType INT
)
AS

SET NOCOUNT ON

IF @ProcedureId IS NOT NULL AND @ProcedureId > 0
BEGIN

	DECLARE @PP_GPAddress VARCHAR(1000), @PP_GPName VARCHAR(1000)
	SELECT @PP_GPAddress =PP_GPAddress, @PP_GPName= PP_GPName FROM dbo.[ERS_ProceduresReporting] WHERE ProcedureId = @ProcedureId;

	SELECT 
			ISNULL(p.Title + ' ', '') + ISNULL(p.Forename1 + ' ', '') + ISNULL(p.Surname, '') AS PatientName, 
			ISNULL(p.Forename1, '') AS Forename,
			ISNULL(p.Surname, '') AS Surname,
			ISNULL(Gender, '') AS Gender,
			ISNULL(p.[DateOfBirth], '') AS DateOfBirth,
			ISNULL(p.[NHSNo],'') AS NHSNo, 
			ISNULL(p.[HospitalNumber], '') as CaseNoteNo, 
			ISNULL(p.[Address],'') AS [Address],
			ISNULL(REPLACE(R.PP_GPName, CHAR(44),'<br />'),'')  AS GPName,
			ISNULL(REPLACE(REPLACE(LTRIM(RTRIM(R.PP_GPAddress)), CHAR(13), '<br/>'), CHAR(10), '<br/>'),'<br/>') AS GPAddress,
			ISNULL(CONVERT(VARCHAR(11),pr.CreatedOn,106) + ' (' + CONVERT(VARCHAR(5),pr.CreatedOn,108) + ')','') AS ProcedureDate, 
			ISNULL(ps.ListItemText, '') AS PatientStatus, 
			ISNULL(oh.HospitalName,'') AS HospitalName,
			ISNULL(oh.ContactNumber,'') AS HospitalPhoneNumber,
			ISNULL(w.ListItemText,'') AS Ward
	FROM 
			ERS_VW_Patients p 
	INNER JOIN 
			ERS_Procedures pr ON p.[PatientId] = pr.PatientId 
	INNER JOIN 
			[ERS_ProceduresReporting] AS R ON pr.ProcedureId=R.ProcedureId
	LEFT JOIN 
			ERS_Lists ps ON pr.PatientStatus = ps.ListItemNo AND ps.ListDescription = 'Patient Status'
	LEFT JOIN 
			ERS_Lists w ON pr.Ward = w.ListItemNo AND w.ListDescription = 'Ward'
	INNER JOIN 
			ERS_OperatingHospitals oh ON pr.OperatingHospitalID = oh.OperatingHospitalId
	WHERE 
			pr.ProcedureId = @ProcedureId 
END

ELSE
BEGIN

       DECLARE @TableName VARCHAR(100) = (SELECT dbo.fnGetUGI_tablename(@ProcedureType,'procedure') 
										FROM [Episode]  
										WHERE CHARINDEX('1', [Status]) BETWEEN 1 AND 12 
										AND [Patient No] = @PatientComboId 
										AND [Episode No] = @EpisodeNo)

	DECLARE @SQL NVARCHAR(MAX) = 'DECLARE @HospId INT, @PP_RepDateAndTime VARCHAR(100), @PP_PatAddress VARCHAR(100), @PP_GP VARCHAR(1000), @HospName VARCHAR(50) '
	SET @SQL = @SQL + ' SELECT @HospId = [Operating Hospital ID], @PP_RepDateAndTime = [PP_RepDateAndTime], @PP_PatAddress = [PP_PatAddress], @PP_GP= ISNULL(PP_GP ,'''') FROM '
						+ @TableName +'  WHERE [Episode No] = ' + cast(@EpisodeNo as varchar(50))  
       
	SET @SQL = @SQL + ' SELECT @HospName = Name FROM [Operating Hospital] WHERE ID = @HospId '

	SET @SQL = @sql +  N'SELECT 
			ISNULL(p.Title,'''') + '' '' + ISNULL(p.Forename, '''') + '' '' + p.Surname AS PatientName, 
			ISNULL(p.Forename, '''') AS Forename,
			ISNULL(p.Surname, '''') AS Surname,
			ISNULL(Gender, '''') AS Gender,
			ISNULL([Date of Birth], '''') AS DateOfBirth, 
			ISNULL([NHS No],'''') AS NHSNo, 
			ISNULL([Case note no], '''') AS CaseNoteNo, 
			--ISNULL(REPLACE(REPLACE(p.[Address], CHAR(13),''), CHAR(10),''<br />''), '''') +  ISNULL(REPLACE(REPLACE(p.[Post code], CHAR(13),''''), CHAR(10),''''), '''') AS [Address],
			ISNULL(@PP_PatAddress,'''') AS [Address], 
			'''' AS GPName, --ISNULL(p.[GP Name], '''') AS GPName, 
			ISNULL(@PP_GP, '''') AS GPAddress, --ISNULL(p.[GP Address], '''') AS GPAddress,
			--LEFT(CONVERT(VARCHAR(30), e.[Procedure time], 113), 17) AS ProcedureDate, 
			--FORMAT(e.[Episode date], ''dd MMMM yyyy'', ''en-GB'') + FORMAT(e.[Procedure time], '' (HH:mm:ss)'', ''en-GB'') AS ProcedureDate, 
			--CONVERT(VARCHAR(11),e.[Episode date],106) + '' ('' + CONVERT(VARCHAR(5),e.[Procedure time],108) + '')'' AS ProcedureDate, 
			ISNULL(@PP_RepDateAndTime,'''') AS ProcedureDate, 
			ISNULL(ps.[List item text], '''') AS PatientStatus, 
			--ISNULL(p.Hospitals, '''') AS HospitalName,
			ISNULL(@HospName ,'''') AS HospitalName,
			'''' AS HospitalPhoneNumber,
			ISNULL(w.[List item text], '''') AS Ward
	FROM 
			Patient p 
	INNER JOIN
			Episode e ON p.[Combo ID] = e.[Patient No]
	LEFT JOIN 
			Lists ps ON p.[Patient Status 1] = ps.[List item no] AND ps.[List description] = ''PatientStatus''
	LEFT JOIN 
			Lists w ON p.Ward = w.[List item no] AND w.[List description] = ''Ward''
	WHERE 
			p.[Combo ID] = ''' + @PatientComboId + ''' AND
			e.[Episode No] = ' + CAST(@EpisodeNo AS VARCHAR(10))

	EXEC sp_executesql @SQL
END

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc printreport.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'usp_PrintReport','S';
GO

CREATE PROCEDURE [dbo].[usp_PrintReport]
(
	@ProcedureId INT,
	@Group VARCHAR(10),
	@EpisodeNo INT = 0,
    @PatientComboId VARCHAR(30) = NULL,
    @ProcedureType INT,
    @ColonType INT
)
AS

SET NOCOUNT ON

	CREATE TABLE #Summary_Main (NodeName VARCHAR(200), NodeSummary NVARCHAR(MAX) ,[Group] VARCHAR(10))

	INSERT INTO #Summary_Main
	EXEC usp_PrintReport_Select @ProcedureId, @Group, @EpisodeNo, @PatientComboId, @ProcedureType, @ColonType
	
	--FOR EUS-HPB
	IF @Group = 'LS' AND @EpisodeNo > 0 AND @ProcedureType = 7 -- ONLY for EUS-HPB (ERCP Report should include OGD, upper tract findings)
	BEGIN
		CREATE TABLE #Summary_UpperTract (NodeName VARCHAR(200), NodeSummary NVARCHAR(MAX) ,[Group] VARCHAR(10))

		INSERT INTO #Summary_UpperTract
		EXEC usp_PrintReport_Select @ProcedureId, @Group, @EpisodeNo, @PatientComboId, 1, @ColonType

		IF (SELECT COUNT(*) FROM #Summary_UpperTract WHERE LTRIM(RTRIM(NodeSummary)) <> '') > 0
		BEGIN
			INSERT INTO #Summary_Main
			SELECT '', '<br /><u style="color:#bf4040;font-weight:bold;">Within the limitations of a side-viewing scope the following upper tract findings were observed.</u>', @Group
			UNION ALL
			SELECT * FROM #Summary_UpperTract
		END
		DROP TABLE #Summary_UpperTract
	END

	SELECT * FROM #Summary_Main WHERE NodeSummary IS NOT NULL

	DROP TABLE #Summary_Main

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------294b Create Proc printreport_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'usp_PrintReport_Select','S';
GO

CREATE PROCEDURE [dbo].[usp_PrintReport_Select]
(
	@ProcedureId INT,
	@Group VARCHAR(10),
	@EpisodeNo INT = 0,
       @PatientComboId VARCHAR(30) = NULL,
       @ProcedureType INT,
       @ColonType INT
)
AS

SET NOCOUNT ON

	DECLARE @SQLString	NVARCHAR(MAX),
			@FieldName	VARCHAR(150),
			@NodeName	VARCHAR(50),
			@TableName	VARCHAR(50),
			@Condition	VARCHAR(100),
			@ReportStyle SMALLINT,
			@ExecQuery	BINARY = 0,
			@IncludeUGI BIT = 0;

	DECLARE @Procedure_Reporting_TableJoinText VARCHAR(255);
	select @EpisodeNo=(CASE WHEN dbo.fnShouldIncludeUGI()=1 THEN @EpisodeNo ELSE 0 END);

	CREATE TABLE #Summary (NodeName VARCHAR(200), NodeSummary NVARCHAR(MAX) ,[Group] VARCHAR(10))
	CREATE TABLE #xmlmap ([FieldName] [varchar](50), [NodeName] [varchar](50), [Group] [varchar](10), [Active] [smallint], [OrderID] [int])

	--DECLARE @ProcedureTypeId INT
	--SELECT @ProcedureTypeId = ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureId

IF @Group = 'AD'
	INSERT INTO #xmlmap
	SELECT FieldName, NodeName, [Group], Active, OrderID
	FROM ERS_XMLMap 
	WHERE [FieldName] IN ('PP_Site_Legend', 'PP_SpecimenTaken')
	ORDER BY OrderID
ELSE IF @Group='Premed'
       INSERT INTO #xmlmap
       SELECT FieldName, NodeName, [Group], Active, OrderID 
	   FROM ERS_XMLMap WHERE [FieldName]='PP_Premed' AND [Group]='RS'
ELSE
	INSERT INTO #xmlmap
	SELECT FieldName, NodeName, [Group], Active, OrderID
	FROM ERS_XMLMap 
	WHERE [Group] = @Group AND [FieldName] NOT IN ('PP_Site_Legend', 'PP_SpecimenTaken')
	ORDER BY OrderID

	IF @ProcedureId IS NOT NULL AND @ProcedureId > 0
		BEGIN
			SET @TableName = '[ERS_Procedures]'
			SET @Procedure_Reporting_TableJoinText = '  AS P LEFT JOIN dbo.ERS_ProceduresReporting AS PR ON P.ProcedureId = PR.ProcedureId '
			SET @Condition = 'P.ProcedureId = @ProcedureId'
		END
	ELSE IF @EpisodeNo > 0
		BEGIN
			   SELECT TOP 1 @TableName = LTRIM(RTRIM(dbo.fnGetUGI_tablename(@ProcedureType,'procedure')))
			FROM [Episode] 
			WHERE CHARINDEX('1', [Status]) BETWEEN 1 AND 8 AND [Patient No] = @PatientComboId AND [Episode No] = @EpisodeNo
			SET @Condition = '[Patient No] = @PatientComboId AND [Episode No] = @EpisodeNo'
			   IF @ColonType >= 0 SET @Condition = @Condition + ' AND [Procedure type] = ' +CAST( @ColonType as varchar(50))
		END

	DECLARE report_cursor CURSOR FOR 
	SELECT FieldName FROM #xmlmap ORDER BY OrderID ASC

	OPEN report_cursor 
	FETCH NEXT FROM report_cursor INTO @FieldName

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT @NodeName = NodeName, @Group = [Group] FROM #xmlmap WHERE FieldName = @FieldName
	
		IF @ProcedureId IS NOT NULL AND @ProcedureId > 0
		BEGIN
			IF @FieldName = 'Endoscribe comments' SET @FieldName = 'EndoscribeComments'
			ELSE IF @FieldName = 'Procedure date' SET @FieldName = 'CreatedOn'
			ELSE IF @FieldName = 'Time of procedure' SET @FieldName = 'CreatedOn'
			ELSE IF @FieldName = 'PP2_CompiledOn' SET @FieldName = 'ModifiedOn'
			ELSE IF @FieldName = 'PP2_SiteData' SET @FieldName = 'PP_Site_Legend'
			--ELSE IF @FieldName = 'PP_MainReportBody' SET @FieldName = 'Summary'		
		END

		IF @FieldName = 'PP_Premed' AND @ProcedureType = 10 --Bronchoscopy
			SET @NodeName = 'Sedation and anaesthesia'

		--IF [Report Style] = 1 -> New style report, select from PP2 field
		IF @TableName <> '[ERS_Procedures]' AND @EpisodeNo > 0 AND @FieldName = 'PP_MainReportBody'
				SET @FieldName = 'CASE WHEN ISNULL([Report Style],0) = 0 THEN PP_MainReportBody ELSE PP2_MainReportBody END'
		ELSE IF @FieldName = 'PP_MainReportBody' AND @ProcedureId > 0 SET @FieldName = 'PR.Summary'
		ELSE IF @FieldName = 'Resected colon no' AND @ProcedureId > 0 SET @FieldName = 'ResectedColonNo'	
		ELSE
			SET @FieldName = '[' + @FieldName + ']'
	
		SET @SQLString = 'INSERT INTO #Summary ' + 
							' SELECT ''' + @NodeName + ''', ' + @FieldName + ', ' + '''' + @Group + '''' +
							' FROM ' + @TableName + 
							CASE WHEN @ProcedureId>0 THEN @Procedure_Reporting_TableJoinText ELSE '' END +
							' WHERE ' + @Condition;
	
		--PP_Therapies (Therapeutic procedures) should be displayed for UGI old style report only, else should be part of the site
		IF @TableName <> '[ERS_Procedures]' AND @EpisodeNo > 0 
		BEGIN
			IF @FieldName IN ('[PP_Therapies]', '[PP_SpecimenTaken]' )
				SET @SQLString = @SQLString + ' AND ISNULL([Report Style],0) = 0'
			--PP2_SiteData (Site Data) should not be displayed for UGI old style report
			ELSE IF @FieldName = '[PP2_SiteData]'
				SET @SQLString = @SQLString + ' AND ISNULL([Report Style],0) = 1'
		END 

		SET @ExecQuery = 
			CASE 
				WHEN @FieldName = '[PP_NPSAalert]' AND @TableName <> '[Upper GI Procedure]' THEN 0
				WHEN @FieldName = '[PP_ResectedColon]' AND @EpisodeNo > 0 THEN 0
				WHEN @FieldName = '[Resected colon no]' AND @TableName <> '[Colon Procedure]' THEN 0
				WHEN @FieldName = '[PP_Coding]' AND @TableName <> '[ERS_Procedures]' THEN 0
				WHEN @FieldName = '[Report style]' AND @TableName = '[ERS_Procedures]' THEN 0
				WHEN LEFT(@FieldName,10) = '[PP2_Patho' AND @TableName = '[ERS_Procedures]' THEN 0
				ELSE 1
			END

		--print @sqlstring
		IF @ExecQuery = 1 
		BEGIN
			EXEC sp_executesql @SQLString,
				N'@ProcedureId INT, @EpisodeNo INT, @PatientComboId VARCHAR(30)',
				@ProcedureId, @EpisodeNo, @PatientComboId
		END

		FETCH NEXT FROM report_cursor INTO @FieldName
	END

	CLOSE report_cursor
	DEALLOCATE report_cursor

	IF @EpisodeNo > 0 --UGI
	BEGIN
		UPDATE #Summary SET NodeSummary = REPLACE(NodeSummary,char(13),'<BR />') WHERE NodeName in ('Report', 'Indications', 'Advice/comments') 
		--UPDATE #Summary SET NodeSummary = REPLACE(NodeSummary,'<br><b>','<b>') WHERE NodeName in ('Site Data')
		UPDATE #Summary SET NodeSummary = REPLACE(NodeSummary,'</b>','</b><BR />') WHERE NodeName in ('Site Data') 
		--UPDATE #Summary SET NodeSummary = REPLACE(NodeSummary,char(13),'<BR />&nbsp;&nbsp;') WHERE NodeName in ('Site Data') 
		--UPDATE #Summary SET NodeSummary = REPLACE(NodeSummary,'<BR />&nbsp;&nbsp;<b>','<BR /><b>') WHERE NodeName in ('Site Data') 
	END 

	IF EXISTS(SELECT TOP 1 NodeName FROM #Summary WHERE NodeName = 'InstForCare')
	BEGIN 
		UPDATE #Summary SET NodeName = (SELECT TOP 1 NodeSummary FROM #Summary WHERE NodeName = 'InstForCareHeading')
			,NodeSummary = dbo.fnFirstLetterUpper(NodeSummary)
		WHERE NodeName = 'InstForCare'

		DELETE #Summary WHERE NodeName = 'InstForCareHeading'
	END

	--Append NPSA alert to end of report section
	IF (SELECT COUNT(*) FROM #Summary WHERE NodeName = 'Report') > 0
	BEGIN
		DECLARE @NPSAalert NVARCHAR(MAX) 
		IF @EpisodeNo > 0
			SELECT @NPSAalert=CONVERT(NVARCHAR(MAX),[PP_NPSAalert]) FROM  [Upper GI Procedure] WHERE [Patient No] = @PatientComboId AND [Episode No] = @EpisodeNo
		ELSE IF @ProcedureId IS NOT NULL AND @ProcedureId > 0
			SELECT @NPSAalert=CONVERT(NVARCHAR(MAX),[PP_NPSAalert]) FROM [ERS_ProceduresReporting] WHERE ProcedureId = @ProcedureId

		IF ISNULL(@NPSAalert,'') <> ''
			UPDATE #Summary
			SET NodeSummary = NodeSummary + '<table style="border: 1px solid red;border-radius:10px;-moz-border-radius:10px;-webkit-border-radius:10px;width:95%;"><tr><td style="padding:10px;color:red;">' + @NPSAalert + '</td><td style="width:5%;padding:5px;"><img src="/Images/icons/alert.png" style="vertical-align:middle; padding:0px 2px 0px 2px;" /></td></tr></table>'
			WHERE NodeName = CASE WHEN @EpisodeNo > 0 THEN 'Site Data' ELSE 'Report' END
	END

	SELECT * FROM #Summary WHERE NodeSummary IS NOT NULL

	DROP TABLE #xmlmap
	DROP TABLE #Summary

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------294c Create Proc printreport_photos_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'printreport_photos_select','S';
GO

CREATE PROCEDURE [dbo].[printreport_photos_select]
(
	@OperatingHospitalID SMALLINT,
	@ProcedureId INT,
	@EpisodeNo INT = 0,
	@PatientComboId VARCHAR(30) = NULL,
       @ProcedureType TINYINT,
       @ColonType INT = -1
)
AS

SET NOCOUNT ON

--Dependency : sites_select
SET @ColonType = dbo.fnGetPhotoProcedureType(@ProcedureType)
DECLARE @Photos TABLE (RowId INT, PhotoUrl VARCHAR(500), PhotoTitle VARCHAR(MAX), SortedSiteNo INT)
DECLARE @SiteIdentification TINYINT;

SELECT @SiteIdentification = ISNULL(SiteIdentification,0) FROM ERS_SystemConfig WHERE OperatingHospitalID = @OperatingHospitalID

IF @EpisodeNo > 0
BEGIN
	
	DECLARE @SQL NVARCHAR(MAX), @PP_Site_Legend VARCHAR(MAX), @fldSiteNo VARCHAR(20), @RowID INT, @SiteNo INT, @LegendID INT = 0;

	IF EXISTS(SELECT * FROM sys.columns WHERE Name = N'Sorted Site No' AND Object_ID = Object_ID(N'Photos'))
		SET @fldSiteNo = '[Sorted Site No]'
	ELSE
		SET @fldSiteNo = '[Site No]'

	SET @SQL = N'SELECT 
		ROW_NUMBER() OVER (ORDER BY s.' + @fldSiteNo + ') AS RowId,
		[File name] AS PhotoUrl,
		dbo.fnFirstLetterUpper(s.[Region text]) AS PhotoTitle, s.' + @fldSiteNo + ' AS SortedSiteNo
	 FROM Photos p JOIN ' + dbo.fnGetUGI_tablename(@ProcedureType,'sites') + 
	's ON p.[Site No] = s.[Site No] AND p.[Patient No] = s.[Patient No] AND p.[Episode No] = s.[Episode No] ' +
	' WHERE p.[Episode No] = ' + CONVERT(VARCHAR,@EpisodeNo) + 
       ' AND p.[Patient No] = ''' + @PatientComboId + '''' 
       IF @ColonType >= 0  SET @SQL = @SQl + ' AND p.[Procedure Type] = ' + CONVERT(VARCHAR,@ColonType)
       SET @SQL =@SQL +
	' UNION ALL SELECT 0 AS RowID, 
		'''' AS PhotoUrl,
		PP_Site_Legend AS PhotoTitle,
		0 AS SortedSiteNo
	 FROM ' + dbo.fnGetUGI_tablename(@ProcedureType,'procedure') + 
	' WHERE [Episode No] = ' + CONVERT(VARCHAR,@EpisodeNo) + 
	' AND [Patient No] = ''' + @PatientComboId + '''' 
       
	--print @SQL
	INSERT INTO @Photos EXECUTE (@SQL)

	SET @PP_Site_Legend  = (SELECT PhotoTitle FROM @Photos WHERE RowId = 0 AND PhotoTitle IS NOT NULL)

	--For old style report in UGI
	IF (CHARINDEX('<b>',@PP_Site_Legend)=0) 
	BEGIN
		DECLARE @ch varchar(10) 
		WHILE (CHARINDEX(':',@PP_Site_Legend)>0) 
		BEGIN
			SET @ch = SUBSTRING(@PP_Site_Legend,CHARINDEX(':', @PP_Site_Legend)-1 ,CHARINDEX(':', @PP_Site_Legend))
			SET @PP_Site_Legend = REPLACE(@PP_Site_Legend,@ch,'<b>' + REPLACE(@ch,':','|  </b>'))
		END
		SET @PP_Site_Legend = REPLACE(@PP_Site_Legend,'|',':')
	END

	IF NOT @PP_Site_Legend  IS NULL 
	BEGIN  
		SET @PP_Site_Legend  = REPLACE(@PP_Site_Legend,'<b>','|')

		IF OBJECT_ID('tempdb..#tmpLegend') IS NOT NULL DROP TABLE #tmpLegend 
		SELECT * INTO #tmpLegend FROM dbo.fnSplitString(@PP_Site_Legend, '|') 

		DELETE FROM @Photos WHERE RowId = 0
              DELETE FROM #tmpLegend WHERE Item not like '%(photographed)%'

		WHILE (SELECT COUNT(*) From @Photos WHERE SortedSiteNo > 0) > 0
		BEGIN
			SELECT TOP 1 @RowID = RowID,  @SiteNo = SortedSiteNo FROM @Photos WHERE SortedSiteNo > 0

                     SET @LegendID = (SELECT TOP 1 ID FROM #tmpLegend WHERE Id > @LegendID)

			UPDATE @Photos SET PhotoTitle = (SELECT TOP 1 REPLACE(REPLACE(Item,'</b>',''),'(photographed)','') FROM #tmpLegend WHERE Id = @LegendID)
			WHERE SortedSiteNo = @SiteNo

			UPDATE @Photos SET SortedSiteNo = 0 WHERE SortedSiteNo = @SiteNo
		END
		DROP TABLE #tmpLegend
	END

	--IF @fldSiteNo = '[Site No]'
       --     UPDATE @Photos
       --     SET PhotoTitle = 'Site ' + CASE WHEN @SiteIdentification = 0 THEN dbo.fnGetSiteTitle(RowId) ELSE CONVERT(VARCHAR,RowId) END + ': ' + ISNULL(PhotoTitle, '')
	--ELSE
       --     UPDATE @Photos
       --     SET PhotoTitle = 'Site ' + CASE WHEN @SiteIdentification = 0 THEN dbo.fnGetSiteTitle(PhotoNo) ELSE CONVERT(VARCHAR,SortedSiteNo) END + ': ' + ISNULL(PhotoTitle, '')
END

ELSE
BEGIN
	INSERT INTO @Photos
	SELECT 
		ROW_NUMBER() OVER (ORDER BY a.PhotoId) AS RowId,
		PhotoName AS PhotoUrl, 
		ISNULL(b.SiteDescription, 'No site associated (Attached to the report)') AS PhotoTitle,
		0 AS SortedSiteNo
	FROM [ERS_Photos] a 
	LEFT JOIN 
		(SELECT SiteId, 
			'Site ' + CONVERT(VARCHAR(5), SiteNo) + 
			' (' + 
			CASE AntPos WHEN 1 THEN 'Anterior' WHEN 2 THEN 'Posterior' WHEN 3 THEN 'Anterior/Posterior' END + 
			' IN ' + r.Region + 
			')' AS SiteDescription 
		FROM ERS_Sites s 
		JOIN ERS_Regions r ON s.RegionId = r.RegionId 
		WHERE ProcedureId = @ProcedureId) b ON a.SiteId=b.SiteId 
	WHERE ProcedureId = @ProcedureId
	AND PhotoName NOT LIKE '%.mp4' --Exclude videos as this is for printing 
END

SELECT *
FROM @Photos
WHERE RowID >= CASE 
		WHEN @EpisodeNo > 0	-- UGI
			THEN 1  
		ELSE 0				-- ERS
		END


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------294d Create Proc printreport_specimens_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'printreport_specimens_select','S';
GO

CREATE PROCEDURE [dbo].[printreport_specimens_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

DECLARE 
       @procType INT,
       @siteIdentification TINYINT,
       @siteId INT, 
       @siteNo INT,
       @siteTitle VARCHAR(3)
DECLARE 
       @SpecimensSummary TABLE (
              SiteId INT,
              LabRequestReportName VARCHAR(200),
              SpecimenKey VARCHAR(1000),
              Specimen VARCHAR(2000))

SELECT @procType = ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureId
SELECT @siteIdentification = ISNULL(SiteIdentification,0) FROM ERS_SystemConfig WHERE OperatingHospitalID = (SELECT OperatingHospitalID FROM ERS_Procedures WHERE ProcedureId = @ProcedureId)


       SELECT s.SiteNo, Case @procType WHEN 1 THEN ISNULL(m.Area,'') ELSE '' END AS RegionSection, sp.*
       INTO #specimens
       FROM ERS_UpperGISpecimens sp
       JOIN ERS_Sites s ON sp.SiteId = s.SiteId
       JOIN ERS_Regions r ON s.RegionId = r.RegionId
       LEFT JOIN ERS_AbnormalitiesMatrixUpperGI m ON r.Region = m.Region AND m.ProcedureType = @procType
       LEFT JOIN [ERS_AbnormalitiesMatrixERCP] n ON r.Region = n.Region AND n.ProcedureType = @procType
       LEFT JOIN [ERS_AbnormalitiesMatrixColon] o ON r.Region = o.Region AND o.ProcedureType = @procType
       WHERE s.ProcedureId = @ProcedureId 

UPDATE #specimens SET RegionSection = CASE RegionSection WHEN 'Oesophagus' THEN 'oesophageal' WHEN 'Stomach' THEN 'gastric' WHEN 'Duodenum' THEN 'duodenal' ELSE '' END


DECLARE Site_Cursor CURSOR FOR
SELECT SiteId, SiteNo FROM #specimens ORDER BY SiteNo
       
OPEN Site_Cursor
FETCH NEXT FROM Site_Cursor INTO @siteId , @siteNo

WHILE @@FETCH_STATUS = 0
BEGIN
       SET @siteTitle = CASE WHEN @siteIdentification = 0 THEN dbo.fnGetSiteTitle(@siteNo) ELSE CONVERT(VARCHAR,@siteNo) END

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Cytology', 
              CONVERT(VARCHAR, @siteId) + 'Brush', 
              LOWER(RegionSection) + ' brushings for cytology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND BrushCytology > 0
              
       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'BiopsyHistology', 
              CONVERT(VARCHAR,BiopsyQtyHistology) + ' ' + LOWER(RegionSection) + CASE WHEN BiopsyQtyHistology > 1 THEN ' biopsies' ELSE ' biopsy' END + ' for histology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND BiopsyQtyHistology > 0

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Microbiology', 
              CONVERT(VARCHAR, @siteId) + 'BiopsyMicrobiology', 
              CONVERT(VARCHAR,BiopsyQtyMicrobiology) + ' ' + LOWER(RegionSection) + CASE WHEN BiopsyQtyMicrobiology > 1 THEN ' biopsies' ELSE ' biopsy' END + ' for microbiology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND Biopsy = 1 AND BiopsyQtyMicrobiology > 0
              
       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Virology', 
              CONVERT(VARCHAR, @siteId) + 'BiopsyVirology', 
              CONVERT(VARCHAR,BiopsyQtyVirology) + ' ' + LOWER(RegionSection) + CASE WHEN BiopsyQtyVirology > 1 THEN ' biopsies' ELSE ' biopsy' END + ' for virology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND Biopsy = 1 AND BiopsyQtyVirology > 0
       
       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'Polypectomy', 
              CONVERT(VARCHAR,PolypectomyQty) + ' ' + LOWER(RegionSection) + CASE WHEN PolypectomyQty > 1 THEN ' polyps' ELSE ' polyp' END + ' for histology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND Polypectomy = 1 AND PolypectomyQty > 0

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'HotBiopsy', 
              LOWER(RegionSection) + ' hot biopsy for histology from (' + LOWER(@siteTitle) + ')' + CASE WHEN HotBiopsyDistance > 0 THEN ' at ' + CONVERT(VARCHAR, HotBiopsyDistance) + 'cm' ELSE '' END
       FROM #specimens 
       WHERE SiteId = @siteId AND HotBiopsy = 1
       
       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'NeedleAspirateHistology', 
              LOWER(RegionSection) + ' needle aspirate for histology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND NeedleAspirate = 1 AND NeedleAspirateHistology = 1

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'NeedleAspirateMicrobiology', 
              LOWER(RegionSection) + ' needle aspirate for microbiology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND NeedleAspirate = 1 AND NeedleAspirateMicrobiology = 1

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'NeedleAspirateVirology', 
              LOWER(RegionSection) + ' needle aspirate for virology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND NeedleAspirate = 1 AND NeedleAspirateVirology = 1

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Microbiology', 
              CONVERT(VARCHAR, @siteId) + 'GastricWashing', 
              'gastric washing for microbiology from (' + LOWER(@siteTitle) + ')'
       FROM #specimens 
       WHERE SiteId = @siteId AND GastricWashing = 1

       FETCH NEXT FROM Site_Cursor INTO @siteId, @siteNo
END
CLOSE Site_Cursor;
DEALLOCATE Site_Cursor;

IF OBJECT_ID('tempdb..#specimens') IS NOT NULL DROP TABLE #specimens 
SELECT * FROM @SpecimensSummary 

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------294e Create Proc common_bowelprep_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_bowelprep_summary_update','S';
GO

CREATE PROCEDURE [dbo].[common_bowelprep_summary_update]
(
	@ProcedureId INT
)
AS
SET NOCOUNT ON
DECLARE		
	@OnNoBowelPrep bit,
    @OnFormulation int,
    @onright int,
    @OnTransverse int,
    @OnLeft int,
    @OnTotalScore int,
	@OffNoBowelPrep bit,
    @OffFormulation int,
    @BowelPrepQuality int,
	@Summary varchar(5000),
	@BowelSettings bit

	SELECT 
		@OnNoBowelPrep = OnNoBowelPrep,
        @OnFormulation = cast(OnFormulation as int),
		@onright =onright,
		@OnTransverse =OnTransverse ,
		@OnLeft  = OnLeft,
		@OnTotalScore = OnTotalScore,
		@OffNoBowelPrep = OffNoBowelPrep,
		@OffFormulation = cast(OffFormulation as int),
		@BowelPrepQuality = BowelPrepQuality,
		@BowelSettings = BowelPrepSettings
	FROM
		[ERS_BowelPreparation]
	WHERE
		ProcedureId = @ProcedureId

	--SELECT @BowelSettings = s.[BostonBowelPrepScale] FROM [ERS_SystemConfig] as s LEFT JOIN [ERS_Procedures] as p ON s.[HospitalID] = p.[OperatingHospitalID] WHERE p.[ProcedureId] = @ProcedureID
	SET @Summary = ''

	IF @BowelSettings = 1
		BEGIN
		IF @OnNoBowelPrep = 1
			BEGIN
			SET @Summary =  'No bowel preparation.'
			END
		ELSE
			BEGIN
			SET @Summary = '<b><font color=''#0072c6''>Bowel Preparation</font></b><br/>'
			IF @OnFormulation > 0 SET @Summary = @Summary +  (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Bowel_Preparation' AND [ListItemNo] = @OnFormulation ) + '<br />'
			SET @Summary = @Summary + 'Boston Bowel Prep Total Score ' +  cast( @OnTotalScore as varchar(10))
			END
		END
	ELSE
		BEGIN
		IF @OffNoBowelPrep = 1
			BEGIN
			SET @Summary = 'No bowel preparation.'
			END
		ELSE
			BEGIN
				SET @Summary = "Bowel preparation"
				IF @OffFormulation > 0 SET @Summary = @Summary + ' with ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Bowel_Preparation' AND [ListItemNo] = @OffFormulation)
				DECLARE @Quality VARCHAR(50)
				SELECT @Quality	= ListItemText FROM ERS_Lists WHERE ListDescription = 'Bowel_Preperation_Quality' AND ListItemNo = @BowelPrepQuality
				IF (@Quality IS NOT NULL)
				BEGIN
					SET @Summary = @Summary + ' was ' + LOWER(@Quality) + '.'
				END
			END
		END

	UPDATE  [ERS_BowelPreparation] SET Summary = @Summary WHERE ProcedureID=@ProcedureId
	UPDATE [ERS_ProceduresReporting] SET [PP_Bowel_Prep] = @Summary WHERE ProcedureID=@ProcedureId
	EXEC procedure_summary_update @ProcedureId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------294f Create Proc printreport_header_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'printreport_header_select','S';
GO

CREATE PROCEDURE [dbo].[printreport_header_select]
(
	@OperatingHospitalID SMALLINT,
	@ProcedureId INT=0,
	@EpisodeNo INT = 0,
	@PatientComboId VARCHAR(30) = NULL,
	@ProcedureType TINYINT,
	@EnableNHSType BIT = 0
)
AS

SET NOCOUNT ON

       DECLARE @RepHeader TABLE (ReportHeading VARCHAR(150), ReportSubHeading VARCHAR(150), ReportTrustType VARCHAR(150), OpHosp VARCHAR(150), ReportHeader varchar(500) )
       DECLARE @SQL NVARCHAR(MAX)

       IF @ProcedureId > 0
              BEGIN
              IF @EnableNHSType = 0
                     BEGIN
						 SET @SQL = N'SELECT ISNULL(p.PP_RepHead, '') AS ReportHeading
									,ISNULL(p.PP_RepSubHead, '') AS ReportSubHeading
									,'' AS ReportTrustType
									,ISNULL(p.PP_OpHosp, '') AS OpHosp
									,ISNULL((SELECT pt.[ReportHeader] FROM ERS_ProcedureTypes AS pt WHERE [ProcedureTypeId] = '+ CONVERT(VARCHAR,@ProcedureType) +'),''REPORT'') AS ReportHeader
								FROM ERS_ProceduresReporting p
								WHERE p.[ProcedureId] = ' + CONVERT(VARCHAR,@ProcedureId )
                     END
              ELSE
                     BEGIN
						 SET @SQL = N'SELECT  ISNULL(s.[ReportHeading],o.[HospitalName]) AS ReportHeading ,
											 ISNULL(s.[ReportSubHeading],'''') AS ReportSubHeading, 
											 ISNULL(s.[ReportTrustType], ''NHS Trust'') AS ReportTrustType ,
											 '''' AS OpHosp, ISNULL((SELECT top(1) [ReportHeader] FROM ERS_ProcedureTypes WHERE [ProcedureTypeId]= '+ CONVERT(VARCHAR,@ProcedureType) +'),''REPORT'') AS ReportHeader
							   FROM [ERS_OperatingHospitals] o,[ERS_SystemConfig] s 
							   WHERE o.OperatingHospitalID = ' + CONVERT(VARCHAR,@OperatingHospitalID)
                     END
                     INSERT INTO @RepHeader EXECUTE (@SQL)
                     SELECT * FROM @RepHeader
              END
       ELSE
              BEGIN
                     IF @EnableNHSType = 0
                     BEGIN
                           SET @SQL = N'SELECT ISNULL(p.PP_RepHead,'''') AS ReportHeading, ISNULL(p.PP_RepSubHead,'''') AS ReportSubHeading, 
                                                '''' AS ReportTrustType, ISNULL(p.PP_OpHosp,'''') AS OpHosp, ISNULL(p.[PP_RepType],''REPORT'') AS ReportHeader 
                            FROM ' + dbo.fnGetUGI_tablename(@ProcedureType,'procedure') + ' p
                           WHERE p.[Episode No] = ' + CONVERT(VARCHAR,@EpisodeNo) + 
                           ' AND p.[Patient No] = ''' + @PatientComboId + '''' 
                     END
                     ELSE
                     BEGIN
                           SET @SQL = N'SELECT  ISNULL(s.[ReportHeading],o.[HospitalName]) AS ReportHeading ,
                                         ISNULL(s.[ReportSubHeading],'''') AS ReportSubHeading, 
                                         ISNULL(s.[ReportTrustType], ''NHS Trust'') AS ReportTrustType ,
                                         '''' AS OpHosp, ISNULL((SELECT top(1) [ReportHeader] FROM ERS_ProcedureTypes WHERE [ProcedureTypeId]= '+ CONVERT(VARCHAR,@ProcedureType) +'),''REPORT'') AS ReportHeader
                           FROM [ERS_OperatingHospitals] o,[ERS_SystemConfig] s 
                           WHERE o.OperatingHospitalID = ' + CONVERT(VARCHAR,@OperatingHospitalID) + ' AND s.OperatingHospitalId = ' + CONVERT(VARCHAR,@OperatingHospitalID)
                     END
                     --print @SQL
                     INSERT INTO @RepHeader EXECUTE (@SQL)
                     SELECT * FROM @RepHeader
              END
GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------295 Create Proc additional_notes_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'additional_notes_select','S';
GO

CREATE PROCEDURE [dbo].[additional_notes_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT 
	s.SiteId,
	ISNULL(AdditionalNotes,'') AS AdditionalNotes
FROM 
	ERS_Sites s 
JOIN
	ERS_Procedures p ON s.ProcedureId = p.ProcedureId
WHERE 
	s.SiteId = @SiteId
	
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------Create Proc usp_GetDiagram.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'usp_GetDiagram','S';
GO

CREATE PROCEDURE [dbo].[usp_GetDiagram]
(
	@ProcedureTypeId INT,
	@DiagramNumber INT,
	@height INT=0,
	@width INT=0,
	@getRegionPaths bit = 0
)
AS

SET NOCOUNT ON

DECLARE @diagramId INTEGER

	IF @DiagramNumber = 2 AND @ProcedureTypeId = (SELECT ProcedureTypeId FROM ERS_ProcedureTypes WHERE ProcedureType = 'Bronchoscopy')
		SET @diagramId = (SELECT DiagramId FROM ERS_Diagrams WHERE Name = 'Broncho2')
	ELSE
		SET @diagramId = (SELECT TOP 1 DiagramId FROM ERS_Regions WHERE ProcedureType = CASE WHEN @ProcedureTypeId = 6 THEN 1 --Diagram is the same for EUS-OGD (6) and OGD (1)	
																								WHEN @ProcedureTypeId = 7 THEN 2 --Diagram is the same for EUS-HPB (7) and ERCP (2)	
																								ELSE @ProcedureTypeId END) 

	IF @getRegionPaths = 1 
	BEGIN
		SELECT r.RegionId, r.ProcedureType, r.Region, dbo.fnGetFactoredPath(r.Path,@height,@width,d.Height,d.Width) AS Path, is3D 
		FROM ERS_Regions r 
		JOIN ERS_Diagrams d ON r.DiagramId = d.DiagramId 
		WHERE ProcedureType = @ProcedureTypeId 
		AND r.DiagramId = @DiagramId 
	END
	ELSE
	BEGIN
		SELECT * FROM ERS_Diagrams WHERE DiagramId = @diagramId
	END

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------295a Create Proc additional_notes_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'additional_notes_save','S';
GO

CREATE PROCEDURE [dbo].[additional_notes_save]
(
	@SiteId INT,
	@AdditionalNotes VARCHAR(max),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT

BEGIN TRANSACTION

BEGIN TRY

	UPDATE s
	SET s.AdditionalNotes = @AdditionalNotes,
		WhoUpdatedId = @LoggedInUserId,
		WhenUpdated = GETDATE()
	FROM ERS_Sites AS s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId 
	WHERE 
		SiteId = @SiteId

	
	SELECT @proc_id = p.ProcedureId
	FROM ERS_Sites s
	JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE SiteId = @SiteId

	IF ISNULL(@AdditionalNotes,'') = '' 
		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Additional notes'
	ELSE
		INSERT INTO ERS_RecordCount ([ProcedureId], [SiteId], [Identifier],[RecordCount])
		VALUES (@proc_id, @SiteId, 'Additional notes', 1)

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------296 Create Proc common_consultant_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_consultant_save','S';
GO

CREATE PROCEDURE [dbo].[common_consultant_save]
(
	@ConsultantID INT,
	@Title varchar(10),
	@Forename varchar(100),
	@Surname varchar(100),
	@GroupID int,
	@AllHospitals tinyint,
	@GMCCode varchar(10),
	@HospitalList varchar(100),
	@LoggedInUserId int
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	Declare @Hospital varchar(20) = null
	IF @ConsultantID IS NULL OR @ConsultantID=0
		BEGIN
		INSERT INTO [ERS_Consultant]([Title],[Forename],[Surname],[GroupID],[AllHospitals],[GMCCode],WhoCreatedId, WhenCreated) VALUES(@Title,@Forename,@Surname,@GroupID,@AllHospitals,@GMCCode,@LoggedInUserId,GETDATE())
		SET @ConsultantID = (SELECT SCOPE_IDENTITY())
		IF @AllHospitals = 0 AND @HospitalList is not null
			BEGIN			    
			WHILE LEN(@HospitalList) > 0
				BEGIN
				IF PATINDEX('%|%',@HospitalList) > 0
					BEGIN
					SET @Hospital = SUBSTRING(@HospitalList, 0, PATINDEX('%|%',@HospitalList))
					IF  @Hospital IS NOT NULL AND NOT EXISTS(SELECT 1 FROM [ERS_ConsultantsHospital] WHERE [HospitalID] = @Hospital AND [ConsultantID] = @ConsultantID )
						BEGIN
						INSERT INTO [ERS_ConsultantsHospital] ([ConsultantID],[HospitalID], WhoCreatedId, WhenCreated) VALUES(@consultantid,@Hospital,@LoggedInUserId, GETDATE())
						END
					SET @HospitalList = SUBSTRING(@HospitalList, LEN(@Hospital + '|') + 1, LEN(@HospitalList))
					END
				ELSE
					BEGIN
					SET @Hospital = @HospitalList
					SET @HospitalList = NULL
					IF  @Hospital IS NOT NULL AND NOT EXISTS(SELECT 1 FROM [ERS_ConsultantsHospital] WHERE [HospitalID] = @Hospital AND [ConsultantID] = @ConsultantID )
						BEGIN
						INSERT INTO [ERS_ConsultantsHospital] ([ConsultantID],[HospitalID], WhoCreatedId, WhenCreated) VALUES(@consultantid,@Hospital,@LoggedInUserId, GETDATE())
						END
					END
				END
			END
		END
	ELSE
		BEGIN
		UPDATE [ERS_Consultant] SET Title = @Title,Forename = @Forename,Surname = @Surname, GroupID = @GroupID, AllHospitals = @AllHospitals,GMCCode = @GMCCode, WhoUpdatedId = @LoggedInUserId, WhenUpdated = GETDATE() WHERE ConsultantID = @ConsultantID
		DELETE FROM [ERS_ConsultantsHospital] WHERE ConsultantID   = @ConsultantID
		IF @AllHospitals = 0 AND @HospitalList is not null
			BEGIN			
		   	WHILE LEN(@HospitalList) > 0
				BEGIN
				IF PATINDEX('%|%',@HospitalList) > 0
					BEGIN
					SET @Hospital = SUBSTRING(@HospitalList, 0, PATINDEX('%|%',@HospitalList))
					IF  @Hospital IS NOT NULL AND NOT EXISTS(SELECT 1 FROM [ERS_ConsultantsHospital] WHERE [HospitalID] = @Hospital AND [ConsultantID] = @ConsultantID )
						BEGIN
						INSERT INTO [ERS_ConsultantsHospital] ([ConsultantID],[HospitalID],WhoCreatedId,WhenCreated) VALUES(@consultantid,@Hospital,@LoggedInUSerId,GETDATE())
						END
					SET @HospitalList = SUBSTRING(@HospitalList, LEN(@Hospital + '|') + 1, LEN(@HospitalList))
					END
				ELSE
					BEGIN
					SET @Hospital = @HospitalList
					SET @HospitalList = NULL
					IF  @Hospital IS NOT NULL AND NOT EXISTS(SELECT 1 FROM [ERS_ConsultantsHospital] WHERE [HospitalID] = @Hospital AND [ConsultantID] = @ConsultantID )
						BEGIN
						INSERT INTO [ERS_ConsultantsHospital] ([ConsultantID],[HospitalID],WhoCreatedId,WhenCreated) VALUES(@consultantid,@Hospital,@LoggedInUserId,GETDATE())
						END
					END
				END
			END
		END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------296a Create Proc common_consultant_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_consultant_select','S';
GO

CREATE PROCEDURE [dbo].[common_consultant_select]
(
	@OperatingHospitalId INT
	,@Field VARCHAR(200)
	,@FieldValue VARCHAR(200)
	,@Suppressed TINYINT = -1
)
AS
SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	DECLARE @SQL NVARCHAR(MAX) = ''

	IF @Field IS NULL SET @Field = ''
	IF @FieldValue IS NULL SET @FieldValue = ''
	
	SET @SQL = CASE WHEN @FieldValue <> '' AND @Field = ''
					THEN '(c.[Surname]	LIKE ''%'		+ @FieldValue + '%'' 
						OR c.[Forename] LIKE ''%'	+ @FieldValue + '%'' 
						OR c.[Title]	LIKE ''%'		+ @FieldValue + '%'' 
						OR g.[GroupName] LIKE ''%'	+ @FieldValue + '%'') '
					WHEN @Field = 'SURNAME' AND @FieldValue <> '' THEN 'c.[Surname]		LIKE ''%'	+ @FieldValue + '%'' '
					WHEN @Field = 'NAME'	AND @FieldValue <> '' THEN 'c.[Forename]	LIKE ''%'	+ @FieldValue + '%'' '
					WHEN @Field = 'TITLE'	AND @FieldValue <> '' THEN 'c.[Title]		LIKE ''%'	+ @FieldValue + '%'' '
					WHEN @Field = 'GROUP'	AND @FieldValue <> '' THEN 'g.[GroupName]	LIKE ''%'	+ @FieldValue + '%'' ' 
					WHEN @Field = 'GROUPID'	AND @FieldValue <> '' THEN 'g.[GroupID]		= '''		+ @FieldValue + ''' ' 
					ELSE ''
				END
	IF @Suppressed IS NOT NULL
	BEGIN
		IF @SQL <> '' SET @SQL = @SQL + ' AND '
		SET @SQL = @SQL + ' c.[Suppressed] = ' + CONVERT(VARCHAR, @Suppressed) 
	END

	IF @SQL <> '' SET @SQL = ' WHERE ' + @SQL  

	SET @SQL = '
	SELECT c.[ConsultantID]
		,LTRIM(RTRIM((SELECT ISNULL(c.[Title], '''') + '' '' + ISNULL(c.[Forename], '''')))) AS NAME
		,LTRIM(RTRIM((SELECT ISNULL(c.[Title], '''') + '' '' + ISNULL(c.[Forename], '''') + '' '' + ISNULL(c.[Surname], '''')))) AS FULLNAME
		,c.[Surname]
		,g.[GroupName]
		,(SELECT CASE (
						SELECT CASE (SELECT AllHospitals
									FROM [ERS_Consultant]
									WHERE [ConsultantID] = c.ConsultantID)
								WHEN 1 THEN -1
								ELSE COUNT(ConsultantsHospitalID)
                     END
						FROM ERS_ConsultantsHospital
						WHERE [ConsultantID] = c.[ConsultantID]
						)
					WHEN - 1 THEN ''(All hospitals)''
                     WHEN 0 THEN ''(Unspecified)''
					WHEN 1 THEN (
								SELECT h.[HospitalName]
								FROM [ERS_ReferralHospitals] h
								LEFT JOIN ERS_ConsultantsHospital ch ON h.[HospitalID] = ch.[HospitalID]
								WHERE ch.ConsultantID = c.ConsultantID
								)
                     ELSE ''(Multiple hospitals)''
                     END
			) AS Hospital
		,CASE WHEN ISNULL(c.[Suppressed], 0) = 0
					THEN ''No''
				ELSE ''Yes''
				END AS Suppressed
                     FROM [ERS_Consultant] c  
	LEFT JOIN [ERS_ConsultantGroup] g ON c.[GroupID] = g.[GroupID]
	' + @SQL + '
	ORDER BY 
			CASE WHEN ((SELECT TOP 1 SortReferringConsultantBy FROM ERS_SystemConfig WHERE OperatingHospitalId = ' + convert(nvarchar,@OperatingHospitalId) + ') = 1) THEN c.SortOrder END DESC,
			c.Surname'

	EXEC sp_executesql @sql 

END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------296b Create Proc common_consultant_suppress_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_consultant_suppress_select','S';
GO

CREATE PROCEDURE [dbo].[common_consultant_suppress_select]
(
	@Field varchar(200),
	@FieldValue varchar(200)
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
       IF @Field is not null AND @FieldValue is not null AND @Field <> '' AND @FieldValue<>''
              BEGIN
              IF @Field='SURNAME' 
                     BEGIN
                     SELECT c.[ConsultantID] , 
                  LTRIM(RTRIM((SELECT ISNULL(c.[Title],'') + ' ' + ISNULL(c.[Forename] , '')))) as  Name,
                     c.[Surname], 
                     g.[GroupName],    
                     (SELECT CASE (SELECT CASE(SELECT AllHospitals FROM [ERS_Consultant] WHERE [ConsultantID] = c.ConsultantID) WHEN 1 THEN -1 ELSE COUNT(ConsultantsHospitalID) END FROM  ERS_ConsultantsHospital WHERE [ConsultantID]= c.[ConsultantID])
                     WHEN -1 THEN '(All hospitals)'
                     WHEN 0 THEN '(Unspecified)'
                     WHEN 1 THEN (SELECT h.[HospitalName] FROM  [ERS_ReferralHospitals] h LEFT JOIN ERS_ConsultantsHospital ch ON h.[HospitalID] = ch.[HospitalID] WHERE ch.ConsultantID=c.ConsultantID)
                     ELSE '(Multiple hospitals)'
                 END) AS Hospital,
                     CASE WHEN c.[Suppressed]=0 OR c.[Suppressed] IS NULL THEN 'No' ELSE 'Yes' END AS Suppressed 
                     FROM [ERS_Consultant] c  
                     LEFT JOIN [ERS_ConsultantGroup] g 
                     ON c.[GroupID] = g.[GroupID] WHERE c.[Surname] LIKE '%' + @FieldValue + '%' AND  c.[Suppressed]=0 OR c.[Suppressed] IS NULL
                     END
                     IF @Field='NAME' 
                     BEGIN
                     SELECT c.[ConsultantID] , 
                  LTRIM(RTRIM((SELECT ISNULL(c.[Title],'') + ' ' + ISNULL(c.[Forename] , '')))) as  Name,
                     c.[Surname], 
                     g.[GroupName],    
                     (SELECT CASE (SELECT CASE(SELECT AllHospitals FROM [ERS_Consultant] WHERE [ConsultantID] = c.ConsultantID) WHEN 1 THEN -1 ELSE COUNT(ConsultantsHospitalID) END FROM  ERS_ConsultantsHospital WHERE [ConsultantID]= c.[ConsultantID])
                     WHEN -1 THEN '(All hospitals)'
                     WHEN 0 THEN '(Unspecified)'
                     WHEN 1 THEN (SELECT h.[HospitalName] FROM  [ERS_ReferralHospitals] h LEFT JOIN ERS_ConsultantsHospital ch ON h.[HospitalID] = ch.[HospitalID] WHERE ch.ConsultantID=c.ConsultantID)
                     ELSE '(Multiple hospitals)'
                 END) AS Hospital,
                     CASE WHEN c.[Suppressed]=0 OR c.[Suppressed] IS NULL THEN 'No' ELSE 'Yes' END AS Suppressed 
                     FROM [ERS_Consultant] c  
                     LEFT JOIN [ERS_ConsultantGroup] g 
                     ON c.[GroupID] = g.[GroupID] WHERE  LTRIM(RTRIM((SELECT ISNULL(c.[Title],'') + ' ' + ISNULL(c.[Forename] , '')))) LIKE '%' + @FieldValue + '%' AND  c.[Suppressed]=0 OR c.[Suppressed] IS NULL
                     END
                     IF @Field='GROUP' 
                     BEGIN
                     SELECT c.[ConsultantID] , 
                  LTRIM(RTRIM((SELECT ISNULL(c.[Title],'') + ' ' + ISNULL(c.[Forename] , '')))) as  Name,
                     c.[Surname], 
                     g.[GroupName],   
                     (SELECT CASE (SELECT CASE(SELECT AllHospitals FROM [ERS_Consultant] WHERE [ConsultantID] = c.ConsultantID) WHEN 1 THEN -1 ELSE COUNT(ConsultantsHospitalID) END FROM  ERS_ConsultantsHospital WHERE [ConsultantID]= c.[ConsultantID])
                     WHEN -1 THEN '(All hospitals)'
                     WHEN 0 THEN '(Unspecified)'
                     WHEN 1 THEN (SELECT h.[HospitalName] FROM  [ERS_ReferralHospitals] h LEFT JOIN ERS_ConsultantsHospital ch ON h.[HospitalID] = ch.[HospitalID] WHERE ch.ConsultantID=c.ConsultantID)
                     ELSE '(Multiple hospitals)'
                 END) AS Hospital,
                     CASE WHEN c.[Suppressed]=0 OR c.[Suppressed] IS NULL THEN 'No' ELSE 'Yes' END AS Suppressed 
                     FROM [ERS_Consultant] c  
                     LEFT JOIN [ERS_ConsultantGroup] g 
                     ON c.[GroupID] = g.[GroupID] WHERE g.[GroupName]LIKE '%' + @FieldValue + '%' AND  c.[Suppressed]=0 OR c.[Suppressed] IS NULL
                     END
              END
       ELSE
              BEGIN
              SELECT c.[ConsultantID] , 
          LTRIM(RTRIM((SELECT ISNULL(c.[Title],'') + ' ' + ISNULL(c.[Forename] , '')))) as  Name,
              c.[Surname], 
              g.[GroupName],   
                     (SELECT CASE (SELECT CASE(SELECT AllHospitals FROM [ERS_Consultant] WHERE [ConsultantID] = c.ConsultantID) WHEN 1 THEN -1 ELSE COUNT(ConsultantsHospitalID) END FROM  ERS_ConsultantsHospital WHERE [ConsultantID]= c.[ConsultantID])
                     WHEN -1 THEN '(All hospitals)'
                     WHEN 0 THEN '(Unspecified)'
                     WHEN 1 THEN (SELECT h.[HospitalName] FROM  [ERS_ReferralHospitals] h LEFT JOIN ERS_ConsultantsHospital ch ON h.[HospitalID] = ch.[HospitalID] WHERE ch.ConsultantID=c.ConsultantID)
                     ELSE '(Multiple hospitals)'
                 END) AS Hospital,
              CASE WHEN c.[Suppressed]=0 OR c.[Suppressed] IS NULL THEN 'No' ELSE 'Yes' END AS Suppressed 
              FROM [ERS_Consultant] c  
              LEFT JOIN [ERS_ConsultantGroup] g 
              ON c.[GroupID] = g.[GroupID] WHERE c.[Suppressed]=0 OR c.[Suppressed] IS NULL
       END

END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------296c Create Proc common_hospital_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_hospital_save','S';
GO

CREATE PROCEDURE [dbo].[common_hospital_save]
(
	@HospitalName varchar(100)
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	IF NOT EXISTS(SELECT 1 FROM [ERS_ReferralHospitals] WHERE[HospitalName] = @HospitalName )
	BEGIN
	INSERT INTO [ERS_ReferralHospitals] ([HospitalName]) VALUES (@HospitalName)
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------296d Create Proc common_speciality_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_speciality_save','S';
GO

CREATE PROCEDURE [dbo].[common_speciality_save]
(
	@GroupName varchar(100)
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	IF NOT EXISTS(SELECT 1 FROM [ERS_ConsultantGroup]  WHERE [GroupName] = @GroupName )
	BEGIN
	INSERT INTO [ERS_ConsultantGroup] ([GroupName]) VALUES (@GroupName)
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------297 Create Proc common_phraselibrary_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'common_phraselibrary_save','S';
GO

CREATE PROCEDURE [dbo].[common_phraselibrary_save]
(
	@UserName varchar(50),
	@PhraseCategory varchar(50),
	@Phrase varchar(8000),
	@OperatingHospitalId INT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
DECLARE @UserID int
SELECT @UserID = UserID FROM [ERS_Users] WHERE Username = @UserName
SET @UserID = ISNULL(@UserID,0)

IF NOT EXISTS(SELECT 1 FROM [ERS_PhraseLibrary] WHERE UserID = @UserID  AND PhraseCategory = @PhraseCategory AND Phrase = @Phrase) --AND @User IS NOT NUll
	BEGIN
	INSERT INTO [ERS_PhraseLibrary] (UserID,PhraseCategory,Phrase,OperatingHospitalId,WhoCreatedId,WhenCreated) VALUES (@UserID, @PhraseCategory, @Phrase,@OperatingHOspitalId,@LoggedInUserId,GETDATE());
	SELECT @@IDENTITY AS 'Identity';
	END	
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------297a Create Proc UpdateProcedureStaff.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'usp_UpdateProcedureStaff', 'S';
GO
CREATE PROCEDURE [dbo].[usp_UpdateProcedureStaff]
(
	@ProcedureID		AS INT,
	@ListType			AS INT,
	@ListConsultant		AS VARCHAR(24),
	@Endoscopist1		AS VARCHAR(24),
	@Endoscopist1Role	AS INT, 
	@Endoscopist2		AS VARCHAR(24),
	@Endoscopist2Role	AS INT,
	@Nurse1				AS VARCHAR(24),
	@Nurse2				AS VARCHAR(24),
	@Nurse3				AS VARCHAR(24),
	@LoggedInUserId		AS INT

)
AS
BEGIN TRANSACTION
BEGIN TRY
	DECLARE @ppEndos VARCHAR(2000), @GPName varchar(255), @GPAddress varchar(max)

	UPDATE ERS_Procedures 
		SET 
			  ListType			= @ListType
			, ListConsultant	= @ListConsultant
			, Endoscopist1		= @Endoscopist1
			, Endo1Role			= @Endoscopist1Role
			, Endoscopist2		= @Endoscopist2
			, Endo2Role			= @Endoscopist2Role
			, Nurse1			= @Nurse1
			, Nurse2			= @Nurse2
			, Nurse3			= @Nurse3 
			, WhoUpdatedId		= @LoggedInUserId
			, WhenUpdated		= GETDATE()
	WHERE ProcedureId = @ProcedureId;

	SET @ppEndos = ''
       IF @ListConsultant > 0 SELECT @ppEndos = @ppEndos + '$$' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @ListConsultant
       IF @Endoscopist1 > 0 SELECT @ppEndos = @ppEndos + '$$' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Endoscopist1
       IF @Endoscopist2 > 0 SELECT @ppEndos = @ppEndos + '$$' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Endoscopist2
       IF @Nurse1 > 0 OR @Nurse2 > 0 OR @Nurse3 > 0 
       BEGIN
              SELECT @ppEndos = @ppEndos + '$$' + 'Nurses: '
              IF @Nurse1 > 0 SELECT @ppEndos = @ppEndos + '##' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Nurse1
              IF @Nurse2 > 0 SELECT @ppEndos = @ppEndos + '##' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Nurse2
              IF @Nurse3 > 0 SELECT @ppEndos =  @ppEndos + '##' + Title + ' ' + Forename + ' ' + Surname FROM ERS_Users WHERE UserID = @Nurse3
       END
       IF CHARINDEX('$$', @ppEndos) > 0 SET @ppEndos = REPLACE(STUFF(@ppEndos, charindex('$$', @ppEndos), 2, ''), '$$', '<br/>')
       IF CHARINDEX('##', @ppEndos) > 0 SET @ppEndos = REPLACE(STUFF(@ppEndos, charindex('##', @ppEndos), 2, ''), '##', '<br/>')
       
       SELECT @GPName = ISNULL(p.GPName,''), @GPAddress = ISNULL(p.GPAddress,'')
	   FROM ERS_VW_PatientswithGP p 
			LEFT JOIN  ERS_Procedures pr ON p.PatientId= pr.PatientId 
	   WHERE pr.ProcedureId = @ProcedureId;

       UPDATE ERS_ProceduresReporting SET PP_Endos = @ppEndos, PP_GPName = @GPName, PP_GPAddress = @GPAddress WHERE ProcedureId = @ProcedureId;

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------298 Create Proc diagnoses_control_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'diagnoses_control_save','S';
GO


CREATE PROCEDURE [dbo].[diagnoses_control_save]
(
       @SiteID int, 
       @DiagnosesMatrixCode varchar(50),
	   @Value varchar(50)
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	DECLARE @DiagCount int, @ProcedureID int,  @Region varchar(50), @ProcedureType int, @MatrixSection varchar(50),
		@SiteNo int, @XCoordinate int

	SELECT @ProcedureID =p.ProcedureID, @ProcedureType = p.ProcedureType, @SiteNo = SiteNo, @XCoordinate=XCoordinate
	FROM ers_sites s INNER JOIN ers_procedures p ON s.ProcedureId = p.ProcedureId 
	WHERE SiteId = @SiteID

	--Change the @DiagnosesMatrixCode if procedure type is 2 (ERCP) for Duodenum
	IF @ProcedureType = 2 AND RIGHT(@DiagnosesMatrixCode,2) <> 'P2'
	BEGIN 
		SET @DiagnosesMatrixCode = STUFF(@DiagnosesMatrixCode, LEN(@DiagnosesMatrixCode) - 1, 2, 'P2')
	END

	--Check for correct Procedure Type
	IF NOT EXISTS (SELECT 1 FROM ERS_DiagnosesMatrix WHERE ProcedureTypeID = @ProcedureType AND Code = @DiagnosesMatrixCode) GOTO RETURN_NULL

	IF @ProcedureType IN (3,4,5)   ---------- Colonoscopy, Sigmoidscopy, Proctoscopy ----------------------
	BEGIN
		SET @Region=(select x.Region from [ERS_AbnormalitiesMatrixColon] x inner join ERS_Regions r on x.region = r.Region AND r.ProcedureType= x.ProcedureType inner join ers_sites s on r.RegionId = s.RegionId where s.SiteId = @siteID )
		SET @MatrixSection= 'Colon'

		--ColonicPolyp (D12P3) should not be in region 'Rectum'
		--RectalPolyp (D4P3) should be in region 'Rectum'
		IF @DiagnosesMatrixCode IN ('D12P3') AND @Region = 'Rectum'		SET @ProcedureID = NULL
		ELSE IF @DiagnosesMatrixCode IN ('D4P3') AND @Region <> 'Rectum'		SET @ProcedureID = NULL
		ELSE IF @DiagnosesMatrixCode = 'D8P3' AND @Region = 'Rectum'	SET @DiagnosesMatrixCode = 'D13P3' -- D8P3 for 'Malignant colonic tumour', D13P3 for Malignant rectal tumour
		ELSE IF @DiagnosesMatrixCode = 'D5P3' AND @ProcedureType = 4	SET @DiagnosesMatrixCode = 'S5P3' --Sigmo code is S5P3
		ELSE IF @DiagnosesMatrixCode = 'D1P3' AND @ProcedureType = 4	SET @DiagnosesMatrixCode = 'S1P3'
		ELSE IF @DiagnosesMatrixCode IN ('D6P3') 
			BEGIN
				IF @SiteNo = -77	AND @XCoordinate >= 17		SET @DiagnosesMatrixCode = 'D11P3' -- D6P3 for 'Benign colonic tumour', D11P3 for Benign rectal tumour
				ELSE IF @SiteNo > 0 AND @Region = 'Rectum'		SET @DiagnosesMatrixCode = 'D11P3' -- D6P3 for 'Benign colonic tumour', D11P3 for Benign rectal tumour
			END
		ELSE IF @DiagnosesMatrixCode IN ('D15P3') 
			BEGIN
				IF @SiteNo = -77	AND @XCoordinate >= 17		SET @ProcedureID = NULL -- By distance, "Redundant anterior rectal mucosa" should be in region 'Rectum' and rectal is if the site is < 17 cm
				ELSE IF @SiteNo > 0 AND @Region <> 'Rectum'		SET @ProcedureID = NULL -- Redundant anterior rectal mucosa (D15P3) should be in region 'Rectum'
			END
		ELSE IF @DiagnosesMatrixCode IN ('D80P3') 
			BEGIN
				IF @SiteNo = -77	AND @XCoordinate >= 17		SET @DiagnosesMatrixCode = 'D83P3' -- By distance, D80P3 for 'Rectal ulcer(s)', D83P3 for 'Colonic ulcer(s)'
				ELSE IF @SiteNo > 0 AND @Region <> 'Rectum'		SET @DiagnosesMatrixCode = 'D83P3'   --D80P3 for 'Rectal ulcer(s)', D83P3 for 'Colonic ulcer(s)'
			END	
	END
	ELSE IF @ProcedureType IN (1, 6)	--------------- Gastroscopy, EUS (OGD) ------------------------
	BEGIN
		SET @Region = (
			SELECT x.area
			FROM ERS_AbnormalitiesMatrixUpperGI x
			INNER JOIN ERS_Regions r ON x.region = r.Region AND x.ProcedureType = r.ProcedureType AND x.ProcedureType =  @ProcedureType
			INNER JOIN ers_sites s ON r.RegionId = s.RegionId AND SiteId = @siteid  
		)
		--SET @Region = (select x.area from ERS_AbnormalitiesMatrixUpperGI x inner join ERS_Regions r on x.region = r.Region inner join ers_sites s on r.RegionId = s.RegionId where SiteId =@siteid)
		IF @DiagnosesMatrixCode = 'D20P1' AND @Region <> 'Oesophagus'	SET @DiagnosesMatrixCode = 'D61P1'
		SET @MatrixSection= ISNULL((SELECT top(1)  Section FROM [ERS_DiagnosesMatrix] WHERE ProcedureTypeID = @ProcedureType AND Code=@DiagnosesMatrixCode),@Region)

		--Varices (D30P1) should be in region 'Oesophagus'
		--StomachVarices (D47P1) should be in region 'Stomach'
		--TelangiectasiaAngioma (D59P1) should be in region 'Duodenum'
		IF @DiagnosesMatrixCode = 'D30P1' AND @Region <> 'Oesophagus'		SET @ProcedureID = NULL
		ELSE IF @DiagnosesMatrixCode = 'D31P1' AND @Region <> 'Oesophagus'	SET @ProcedureID = NULL
		ELSE IF @DiagnosesMatrixCode = 'D47P1' AND @Region <> 'Stomach'		SET @ProcedureID = NULL
		ELSE IF @DiagnosesMatrixCode = 'D59P1' AND @Region <> 'Duodenum'	SET @ProcedureID = NULL
	END
	ELSE IF @ProcedureType IN (2, 7)	------------ ERCP, EUS(HPB) --------------------------
	BEGIN
		SET @Region = (
			SELECT x.area
			FROM ERS_AbnormalitiesMatrixERCP x
			INNER JOIN ERS_Regions r ON x.region = r.Region AND x.ProcedureType = r.ProcedureType AND x.ProcedureType =  @ProcedureType
			INNER JOIN ers_sites s ON r.RegionId = s.RegionId AND SiteId = @siteid  
		)
		--SET @Region = (select x.area from ERS_AbnormalitiesMatrixERCP x inner join ERS_Regions r on x.region = r.Region inner join ers_sites s on r.RegionId = s.RegionId where SiteId =@siteid)
		SET @MatrixSection= ISNULL((SELECT top(1)  Section FROM [ERS_DiagnosesMatrix] WHERE ProcedureTypeID = @ProcedureType AND Code=@DiagnosesMatrixCode),@Region)
	END

	IF @ProcedureID IS NULL GOTO RETURN_NULL

	IF LOWER(@Value) NOT IN ('true', '1') SET @Value = 'False'

	IF @Value = 'False'
	BEGIN
		DELETE FROM [ERS_Diagnoses] WHERE ProcedureID = @ProcedureID AND MatrixCode= @DiagnosesMatrixCode AND (SiteId = @siteid OR ISNULL(@siteid,'') = '')
	END
	ELSE
	BEGIN
		UPDATE [ERS_Diagnoses] SET [Value] = @Value, Region = @MatrixSection 
		WHERE ProcedureID = @ProcedureID AND MatrixCode= @DiagnosesMatrixCode
		AND (SiteId = @siteid OR ISNULL(@siteid,'') = '')

		IF @@ROWCOUNT=0 
		BEGIN
			--No records found in ERS_Diagnoses when updating, go ahead and insert it
			INSERT INTO [ERS_Diagnoses] (ProcedureID, SiteID, MatrixCode, [Value], [Region]) 
			VALUES (@ProcedureID, @SiteID, @DiagnosesMatrixCode,@Value,@MatrixSection) 
		END
	END

	EXEC ogd_diagnoses_summary_update @ProcedureID

	RETURN_NULL:
END TRY

BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

    IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------298d Create Proc otherdata_ercp_diagnoses_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'otherdata_ercp_diagnoses_save', 'S';
GO

CREATE PROCEDURE [dbo].[otherdata_ercp_diagnoses_save]
(
	@ProcedureID INT,
	@DuodenumNotEntered BIT,
    @DuodenumNormal BIT,
    @Duodenum2ndPartNotEntered BIT,
	@WholePancreatic BIT,
	@PapillaeNormal BIT,
	@Stenosed BIT,
	@ERCP_TumourBenign BIT,
	@ERCP_TumourMalignant BIT,
	@PancreasNormal BIT,
	@Annulare BIT,
	@DuctInjury BIT,
	@PanStentOcclusion BIT,
	@IPMT BIT,
	@PancreaticAndBiliaryOther VARCHAR(MAX),
	@BiliaryNormal BIT,
	@AnastomicStricture BIT,
	@Haemobilia BIT,
	@Cholelithiasis BIT,
	@FistulaLeak BIT,
	@Mirizzi BIT,
	@CalculousObstruction BIT,
	@Occlusion BIT,
	@GallBladderTumour BIT,
	@StentOcclusion BIT,
	@NormalDucts BIT,
	@Suppurative BIT,
	@BiliaryLeakSite BIT,
	@BiliaryLeakSiteVal VARCHAR(MAX),
	@IntrahepaticTumourProbable BIT,
	@IntrahepaticTumourPossible BIT,
	@ExtrahepaticNormal BIT,
	@ExtrahepaticLeakSite BIT,
	@ExtrahepaticLeakSiteVal VARCHAR(MAX),
	@BeningPancreatitis BIT,
	@BeningPseudocyst BIT,
	@BeningPrevious BIT,
	@BeningSclerosing BIT,
	@BeningProbable BIT,
	@MalignantGallbladder BIT,
	@MalignantMetastatic BIT,
	@MalignantCholangiocarcinoma BIT,
	@MalignantPancreatic BIT,
	@MalignantProbable BIT,
	@BiliaryOther VARCHAR(MAX),
	@WholeOther VARCHAR(MAX)
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	DELETE
	FROM [ERS_Diagnoses]
	WHERE ProcedureID = @ProcedureID AND IsOtherData = 1

	IF (ISNULL(@WholePancreatic,0) = 1) --Whole pancreatic and biliary system normal 
	BEGIN
		INSERT INTO [ERS_Diagnoses] (ProcedureID, MatrixCode, Value, Region, IsOtherData)
		SELECT @ProcedureId, 'D32P2', CONVERT(VARCHAR(MAX),@WholePancreatic), 'Pancreas', 1
		UNION
		SELECT @ProcedureId, 'D50P2', CONVERT(VARCHAR(MAX),@DuodenumNotEntered), 'Duodenum', 1 WHERE @DuodenumNotEntered = 1 
		UNION
		SELECT @ProcedureId, 'D51P2', CONVERT(VARCHAR(MAX),@DuodenumNormal), 'Duodenum', 1 WHERE @DuodenumNormal = 1 
		UNION
		SELECT @ProcedureId, 'D52P2', CONVERT(VARCHAR(MAX),@Duodenum2ndPartNotEntered), 'Duodenum', 1 WHERE @Duodenum2ndPartNotEntered = 1 
	END
	ELSE
	BEGIN
		INSERT INTO [ERS_Diagnoses] (ProcedureID, MatrixCode, Value, Region, IsOtherData)
		SELECT @ProcedureId, 'D50P2', CONVERT(VARCHAR(MAX),@DuodenumNotEntered), 'Duodenum', 1 WHERE @DuodenumNotEntered = 1 
		UNION
		SELECT @ProcedureId, 'D51P2', CONVERT(VARCHAR(MAX),@DuodenumNormal), 'Duodenum', 1 WHERE @DuodenumNormal = 1 
		UNION
		SELECT @ProcedureId, 'D52P2', CONVERT(VARCHAR(MAX),@Duodenum2ndPartNotEntered), 'Duodenum', 1 WHERE @Duodenum2ndPartNotEntered = 1 
		UNION
		SELECT @ProcedureId, 'D32P2', CONVERT(VARCHAR(MAX),@WholePancreatic), 'Pancreatic', 1 WHERE @WholePancreatic = 1
		UNION	
		SELECT @ProcedureId, 'D33P2', CONVERT(VARCHAR(MAX),@PapillaeNormal), 'Papillae', 1 WHERE @PapillaeNormal = 1
		UNION	
		SELECT @ProcedureId, 'D41P2', CONVERT(VARCHAR(MAX),@Stenosed), 'Papillae', 1 WHERE @Stenosed = 1
		UNION	
		SELECT @ProcedureId, 'D45P2', CONVERT(VARCHAR(MAX),@ERCP_TumourBenign), 'Papillae', 1 WHERE @ERCP_TumourBenign = 1
		UNION	
		SELECT @ProcedureId, 'D65P2', CONVERT(VARCHAR(MAX),@ERCP_TumourMalignant), 'Papillae', 1 WHERE @ERCP_TumourMalignant = 1
		UNION	
		SELECT @ProcedureId, 'D67P2', CONVERT(VARCHAR(MAX),@PancreasNormal), 'Pancreas', 1 WHERE @PancreasNormal = 1
		UNION	
		SELECT @ProcedureId, 'D68P2', CONVERT(VARCHAR(MAX),@Annulare), 'Pancreas', 1 WHERE @Annulare = 1
		UNION	
		SELECT @ProcedureId, 'D69P2', CONVERT(VARCHAR(MAX),@DuctInjury), 'Pancreas', 1 WHERE @DuctInjury = 1
		UNION	
		SELECT @ProcedureId, 'D74P2', CONVERT(VARCHAR(MAX),@PanStentOcclusion), 'Pancreas', 1 WHERE @PanStentOcclusion = 1
		UNION	
		SELECT @ProcedureId, 'D75P2', CONVERT(VARCHAR(MAX),@IPMT), 'Pancreas', 1 WHERE @IPMT = 1
		UNION	
		SELECT @ProcedureId, 'PancreaticOther', CONVERT(VARCHAR(MAX),@PancreaticAndBiliaryOther), 'Pancreas', 1 WHERE ISNULL(@PancreaticAndBiliaryOther,'') <> ''
		UNION	
		SELECT @ProcedureId, 'D138P2', CONVERT(VARCHAR(MAX),@BiliaryNormal), 'Biliary', 1 WHERE @BiliaryNormal = 1
		UNION	
		SELECT @ProcedureId, 'D140P2', CONVERT(VARCHAR(MAX),@AnastomicStricture), 'Biliary', 1 WHERE @AnastomicStricture = 1
		--UNION	
		--SELECT @ProcedureId, 'D155P2', CONVERT(VARCHAR(MAX),@CysticDuct), 'Biliary', 1 WHERE @CysticDuct = 1
		UNION	
		SELECT @ProcedureId, 'D170P2', CONVERT(VARCHAR(MAX),@Haemobilia), 'Biliary', 1 WHERE @Haemobilia = 1
		UNION	
		SELECT @ProcedureId, 'D185P2', CONVERT(VARCHAR(MAX),@Cholelithiasis), 'Biliary', 1 WHERE @Cholelithiasis = 1
		UNION	
		SELECT @ProcedureId, 'D145P2', CONVERT(VARCHAR(MAX),@FistulaLeak), 'Biliary', 1 WHERE @FistulaLeak = 1
		UNION	
		SELECT @ProcedureId, 'D160P2', CONVERT(VARCHAR(MAX),@Mirizzi), 'Biliary', 1 WHERE @Mirizzi = 1
		UNION	
		SELECT @ProcedureId, 'D175P2', CONVERT(VARCHAR(MAX),@CalculousObstruction), 'Biliary', 1 WHERE @CalculousObstruction = 1
		--UNION	
		--SELECT @ProcedureId, 'D190P2', CONVERT(VARCHAR(MAX),@GallBladder), 'Biliary', 1 WHERE @GallBladder = 1
		UNION	
		SELECT @ProcedureId, 'D150P2', CONVERT(VARCHAR(MAX),@Occlusion), 'Biliary', 1 WHERE @Occlusion = 1
		--UNION	
		--SELECT @ProcedureId, 'D165P2', CONVERT(VARCHAR(MAX),@CommonDuct), 'Biliary', 1 WHERE @CommonDuct = 1
		UNION	
		SELECT @ProcedureId, 'D180P2', CONVERT(VARCHAR(MAX),@GallBladderTumour), 'Biliary', 1 WHERE @GallBladderTumour = 1
		UNION	
		SELECT @ProcedureId, 'D195P2', CONVERT(VARCHAR(MAX),@StentOcclusion), 'Biliary', 1 WHERE @StentOcclusion = 1
		UNION	
		SELECT @ProcedureId, 'D198P2', CONVERT(VARCHAR(MAX),@NormalDucts), 'Intrahepatic', 1 WHERE @NormalDucts = 1
		UNION	
		SELECT @ProcedureId, 'D210P2', CONVERT(VARCHAR(MAX),@Suppurative), 'Intrahepatic', 1 WHERE @Suppurative = 1
		UNION	
		SELECT @ProcedureId, 'D220P2', CONVERT(VARCHAR(MAX),@BiliaryLeakSite), 'Intrahepatic', 1 WHERE @BiliaryLeakSite = 1
		UNION	
		SELECT @ProcedureId, 'BiliaryLeakSiteVal', CONVERT(VARCHAR(MAX),@BiliaryLeakSiteVal), 'Intrahepatic', 1 WHERE ISNULL(@BiliaryLeakSiteVal,'') <> ''
		UNION	
		SELECT @ProcedureId, 'D242P2', CONVERT(VARCHAR(MAX),@IntrahepaticTumourProbable), 'Intrahepatic', 1 WHERE @IntrahepaticTumourProbable = 1
		UNION	
		SELECT @ProcedureId, 'D243P2', CONVERT(VARCHAR(MAX),@IntrahepaticTumourPossible), 'Intrahepatic', 1 WHERE @IntrahepaticTumourPossible = 1
		UNION	
		SELECT @ProcedureId, 'D265P2', CONVERT(VARCHAR(MAX),@ExtrahepaticNormal), 'Extrahepatic', 1 WHERE @ExtrahepaticNormal = 1
		UNION	
		SELECT @ProcedureId, 'D280P2', CONVERT(VARCHAR(MAX),@ExtrahepaticLeakSite), 'Extrahepatic', 1 WHERE @ExtrahepaticLeakSite = 1
		UNION	
		SELECT @ProcedureId, 'ExtrahepaticLeakSiteVal', CONVERT(VARCHAR(MAX),@ExtrahepaticLeakSiteVal), 'Extrahepatic', 1 WHERE ISNULL(@ExtrahepaticLeakSiteVal,'') <> ''
		UNION	
		SELECT @ProcedureId, 'D305P2', CONVERT(VARCHAR(MAX),@BeningPancreatitis), 'Extrahepatic', 1 WHERE @BeningPancreatitis = 1
		UNION	
		SELECT @ProcedureId, 'D310P2', CONVERT(VARCHAR(MAX),@BeningPseudocyst), 'Extrahepatic', 1 WHERE @BeningPseudocyst = 1
		UNION	
		SELECT @ProcedureId, 'D315P2', CONVERT(VARCHAR(MAX),@BeningPrevious), 'Extrahepatic', 1 WHERE @BeningPrevious = 1
		UNION	
		SELECT @ProcedureId, 'D320P2', CONVERT(VARCHAR(MAX),@BeningSclerosing), 'Extrahepatic', 1 WHERE @BeningSclerosing = 1
		UNION	
		SELECT @ProcedureId, 'D330P2', CONVERT(VARCHAR(MAX),@BeningProbable), 'Extrahepatic', 1 WHERE @BeningProbable = 1
		UNION	
		SELECT @ProcedureId, 'D340P2', CONVERT(VARCHAR(MAX),@MalignantGallbladder), 'Extrahepatic', 1 WHERE @MalignantGallbladder = 1
		UNION	
		SELECT @ProcedureId, 'D345P2', CONVERT(VARCHAR(MAX),@MalignantMetastatic), 'Extrahepatic', 1 WHERE @MalignantMetastatic = 1
		UNION	
		SELECT @ProcedureId, 'D350P2', CONVERT(VARCHAR(MAX),@MalignantCholangiocarcinoma), 'Extrahepatic', 1 WHERE @MalignantCholangiocarcinoma = 1
		UNION	
		SELECT @ProcedureId, 'D355P2', CONVERT(VARCHAR(MAX),@MalignantPancreatic), 'Extrahepatic', 1 WHERE @MalignantPancreatic = 1
		UNION	
		SELECT @ProcedureId, 'D335P2', CONVERT(VARCHAR(MAX),@MalignantProbable), 'Extrahepatic', 1 WHERE @MalignantProbable = 1
		UNION	
		SELECT @ProcedureId, 'BiliaryOther', CONVERT(VARCHAR(MAX),@BiliaryOther), 'Biliary', 1 WHERE ISNULL(@BiliaryOther,'') <> ''
		UNION	
		SELECT @ProcedureId, 'WholeOther', CONVERT(VARCHAR(MAX),@WholeOther), 'ERCP_Diagnoses', 1 WHERE ISNULL(@WholeOther,'') <> ''

	END

	EXEC ercp_diagnoses_summary_update @ProcedureId;

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------298c Create Proc otherdata_visualisation_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------


EXEC DropIfExist 'Otherdata_Visualisation_Summary_Update', 'S';
GO

CREATE PROCEDURE [dbo].[Otherdata_Visualisation_Summary_Update]
(
	@ProcedureID	AS INT
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	DECLARE
		@AccessVia					int,
		@AccessViaOtherText			varchar(500),
		@MajorPapillaBile			smallint ,
		@MajorPapillaBileReason		varchar(50) ,
		@MajorPapillaPancreatic		smallint ,
		@MajorPapillaPancreaticReason varchar(50) ,
		@MinorPapilla				smallint ,
		@MinorPapillaReason			varchar(50) ,
		@HepatobiliaryNotVisualised bit ,
		@HepatobiliaryWholeBiliary	bit ,
		@ExceptBileDuct				bit ,
		@ExceptGallBladder			bit ,
		@ExceptCommonHepaticDuct	bit ,
		@ExceptRightHepaticDuct		bit ,
		@ExceptLeftHepaticDuct		bit ,
		@HepatobiliaryAcinarFilling bit ,
		@HepatobiliaryLimitedBy		smallint ,
		@HepatobiliaryLimitedByOtherText varchar(500) ,
		@PancreaticNotVisualised	bit ,
		@PancreaticDivisum			bit ,
		@PancreaticWhole			bit ,
		@ExceptAccesoryPancreatic	bit ,
		@ExceptMainPancreatic		bit ,
		@ExceptUncinate				bit ,
		@ExceptHead					bit ,
		@ExceptNeck					bit ,
		@ExceptBody					bit ,
		@ExceptTail					bit ,
		@PancreaticAcinar			bit ,
		@PancreaticLimitedBy		smallint ,
		@PancreaticLimitedByOtherText varchar(500) ,
		@HepatobiliaryFirst			smallint ,
		@HepatobiliaryFirstML		varchar(50) ,
		@HepatobiliarySecond		smallint ,
		@HepatobiliarySecondML		varchar(50) ,
		@HepatobiliaryBalloon		bit ,
		@PancreaticFirst			smallint ,
		@PancreaticFirstML			varchar(50) ,
		@PancreaticSecond			smallint ,
		@PancreaticSecondML			varchar(50) ,
		@PancreaticBalloon			bit;

		SELECT 
			@AccessVia						= AccessVia,
			@AccessViaOtherText				= AccessViaOtherText,
			@MajorPapillaBile				= COALESCE(MajorPapillaBile_ER, MajorPapillaBile),
			@MajorPapillaBileReason			= COALESCE(MajorPapillaBileReason_ER, MajorPapillaBileReason),
			@MajorPapillaPancreatic			= COALESCE(MajorPapillaPancreatic_ER, MajorPapillaPancreatic),
			@MajorPapillaPancreaticReason	= COALESCE(MajorPapillaPancreaticReason_ER, MajorPapillaPancreaticReason),
			@MinorPapilla					= COALESCE(MinorPapilla_ER, MinorPapilla),
			@MinorPapillaReason				= COALESCE(MinorPapillaReason_ER, MinorPapillaReason),
			@HepatobiliaryNotVisualised		= HepatobiliaryNotVisualised,
			@HepatobiliaryWholeBiliary		= HepatobiliaryWholeBiliary,
			@ExceptBileDuct					= ExceptBileDuct,
			@ExceptGallBladder				= ExceptGallBladder,
			@ExceptCommonHepaticDuct		= ExceptCommonHepaticDuct,
			@ExceptRightHepaticDuct			= ExceptRightHepaticDuct,
			@ExceptLeftHepaticDuct			= ExceptLeftHepaticDuct,
			@HepatobiliaryAcinarFilling		= HepatobiliaryAcinarFilling,
			@HepatobiliaryLimitedBy			= HepatobiliaryLimitedBy,
			@HepatobiliaryLimitedByOtherText = HepatobiliaryLimitedByOtherText,
			@PancreaticNotVisualised		= PancreaticNotVisualised,
			@PancreaticDivisum				= PancreaticDivisum,
			@PancreaticWhole				= PancreaticWhole,
			@ExceptAccesoryPancreatic		= ExceptAccesoryPancreatic,
			@ExceptMainPancreatic			= ExceptMainPancreatic,
			@ExceptUncinate					= ExceptUncinate,
			@ExceptHead						= ExceptHead,
			@ExceptNeck						= ExceptNeck,
			@ExceptBody						= ExceptBody,
			@ExceptTail						= ExceptTail,
			@PancreaticAcinar				= PancreaticAcinar,
			@PancreaticLimitedBy			= PancreaticLimitedBy,
			@PancreaticLimitedByOtherText	= PancreaticLimitedByOtherText,
			@HepatobiliaryFirst				= HepatobiliaryFirst,
			@HepatobiliaryFirstML			= HepatobiliaryFirstML,
			@HepatobiliarySecond			= HepatobiliarySecond,
			@HepatobiliarySecondML			= HepatobiliarySecondML,
			@HepatobiliaryBalloon			=HepatobiliaryBalloon,
			@PancreaticFirst				= PancreaticFirst,
			@PancreaticFirstML				= PancreaticFirstML,
			@PancreaticSecond				= PancreaticSecond,
			@PancreaticSecondML				= PancreaticSecondML,
			@PancreaticBalloon				= PancreaticBalloon

		FROM [ERS_Visualisation] 
		WHERE ProcedureID = @ProcedureId;

        DECLARE @A varchar(2000)='', @B varchar(2000)='' , @C varchar(2000)='', @AR1 varchar(2000)='', @AR2 varchar(2000)=''
        DECLARE @C1 varchar(500) =''
        DECLARE @Reasons1 varchar(2000)='', @Reasons2 varchar(2000) ='', @Reasons3 varchar(2000), @Reasons4 varchar(2000)
        DECLARE @tmp1 TABLE(Val VARCHAR(MAX))
        DECLARE @tmp2 TABLE(Val VARCHAR(MAX))
        DECLARE @NoHepExcept bit=0,  @NoPanExcept bit =0

        IF @AccessVia > 0 
            BEGIN
            IF ISNULL(@AccessViaOtherText,0) > 0 SET @A = ISNULL((SELECT ListItemText + '. ' FROM ERS_Lists where ListDescription='ERCP other access point' AND  ListItemNo = ISNULL(@AccessViaOtherText,0)  AND LOWER(ListItemText) <> '(none)'),'') 
            END
        SET @B='Cannulation via the major papilla to the bile and pancreatic ducts was unsuccessful '

        IF @MajorPapillaBile =1 AND @MajorPapillaPancreatic =1
        BEGIN
            SET @A = @A + 'Cannulation via the major papilla to the bile and pancreatic ducts was successful '
            SET @B= ''    
            DECLARE @CannDev VARCHAR(50) = ''               
            IF ISNULL(@MajorPapillaBileReason,'')<>'' SET @B = ISNULL((SELECT ISNULL(ListItemText,'') FROM ERS_Lists where ListDescription='ERCP via major to bile successful using' AND  ListItemNo = ISNULL(@MajorPapillaBileReason,0) AND LOWER(ListItemText) <> '(none)'),'')
            IF @B <> '' IF LEFT(@B, 1) IN ('a','e','i','o','u') SET @B= 'an ' + @B ELSE SET @B= 'a '+ @B
            IF LEN(LTRIM(RTRIM(@B)))  > 0 SET @CannDev = 'using ' + @B
            DECLARE @B1 varchar(50) =''

            IF ISNULL(@MajorPapillaPancreaticReason,'')<>'' SET @B1 = ISNULL((SELECT ISNULL(ListItemText,'') FROM ERS_Lists where ListDescription='ERCP via major to pancreatic successful using' AND  ListItemNo = ISNULL(@MajorPapillaPancreaticReason,0) AND LOWER(ListItemText) <> '(none)'),'')
            IF @B1 <> '' IF LEFT(@B1, 1) IN ('a','e','i','o','u') SET @B1= 'an ' + @B1 ELSE SET @B1= 'a '+ @B1
            IF LEN(LTRIM(RTRIM(@B1)))  > 0
                    BEGIN
                    IF LEN(@CannDev)>0
                            BEGIN 
                            IF LTRIM(RTRIM(@B)) <> LTRIM(RTRIM(@B1)) SET @CannDev = @CannDev + ' and  ' + @B1
                            END
                    ELSE IF @B1 <> '' SET @CannDev = 'using '+ @B1
                    END
            IF LEN(LTRIM(RTRIM(@CannDev)))>0 SET @A = @A + @CannDev + '. '
            ELSE SET @A = LTRIM(RTRIM(@A)) + '. '
        END
        ELSE IF @MajorPapillaBile =3 AND @MajorPapillaPancreatic =3
        BEGIN
            SET @A = @A + 'Cannulation via the major papilla to the bile and pancreatic ducts was not attempted. '
        END
        ELSE
        BEGIN
            SET @Reasons1 = ISNULL((SELECT ISNULL(ListItemText,'') FROM ERS_Lists where ListDescription='ERCP via major to bile successful using' AND  ListItemNo = ISNULL(@MajorPapillaBileReason,0) AND LOWER(ListItemText) <> '(none)'),'')
            SET @Reasons2 = ISNULL((SELECT ISNULL(ListItemText,'') FROM ERS_Lists where ListDescription='ERCP via major to pancreatic successful using' AND  ListItemNo = ISNULL(@MajorPapillaPancreaticReason,0) AND LOWER(ListItemText) <> '(none)'),'')
            IF @MajorPapillaBile =4 AND @MajorPapillaPancreatic =4 AND @Reasons1 = @Reasons2 
                    BEGIN
                    IF ISNULL(@MajorPapillaBileReason,0)=0 AND ISNULL(@MajorPapillaBileReason,0)=0 SET @A = @A + @B
                    ELSE SET @A = @A + LTRIM(RTRIM(@B)) + ', limited by ' + @Reasons1
                    SET @A = LTRIM(RTRIM(@A) ) + '. '
                    END
            ELSE
                    BEGIN
                    DECLARE @CAN varchar(1000)='', @AndBut varchar(50)=''
                    SET @B= 'Cannulation via the major papilla to the bile duct was '
                    SET @C= ''
                    SET @AndBut='and'
                    IF (@MajorPapillaBile=1 AND (@MajorPapillaPancreatic=4 OR @MajorPapillaPancreatic=2 )) OR ( @MajorPapillaPancreatic=1 AND (@MajorPapillaBile=4 OR @MajorPapillaBile=2)) SET @AndBut='but'
                    IF @MajorPapillaBile =1
                            BEGIN
                            SET @C= @B + 'successful'
                            SET @B=''
                            SET @B= ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via major to bile successful using' AND  ListItemNo = ISNULL(@MajorPapillaBileReason,0) AND LOWER(ListItemText) <> '(none)'),'')
                            IF @B<>'' IF LEFT(@B, 1) IN ('a','e','i','o','u') SET @C= @C + ' using an ' + @B ELSE SET @C= @C + ' using a ' + @B
                            END
                    ELSE IF @MajorPapillaBile =3 SET @C= @B + 'not attempted'
                    ELSE IF @MajorPapillaBile =4
                            BEGIN
                            SET @Reasons1=ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via major to bile unsuccessful due to' AND  ListItemNo = ISNULL(@MajorPapillaBileReason,0) AND LOWER(ListItemText) <> '(none)'),'')
                            IF @Reasons1='' SET @C = @B + 'unsuccessful'
                            ELSE 
                                BEGIN 
                                SET @C= @B + 'unsuccessful due to ' + @Reasons1
                                SET @CAN = ' cannulation '
                                END
                            END
                    ELSE IF @MajorPapillaBile =2
                            BEGIN
                            SET @Reasons1=ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via major to bile partially successful reason' AND  ListItemNo = ISNULL(@MajorPapillaBileReason,0) AND LOWER(ListItemText) <> '(none)'),'')
                            IF @Reasons1='' SET @C = @B + 'partially successful'
                            ELSE 
                                BEGIN 
                                SET @C= @B + 'partially successful due to ' + @Reasons1
                                SET @CAN = ' cannulation '
                                END
                            END

                            DECLARE @Comma varchar(50)=''
                            IF @C ='' SET @B = 'cannulation via the major papilla to pancreatic duct was '
                            ELSE 
                                BEGIN
                                SET @Reasons1 = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via major to bile unsuccessful due to' AND  ListItemNo = ISNULL(@MajorPapillaBileReason,0) AND LOWER(ListItemText) <> '(none)'),'')
                                SET @Reasons2 = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via major to pancreatic unsuccessful due to' AND  ListItemNo = ISNULL(@MajorPapillaPancreatic,0) AND LOWER(ListItemText) <> '(none)'),'')
                                IF (@MajorPapillaBile=1 AND @MajorPapillaPancreatic=1) AND (@Reasons1 <>'' AND @Reasons2 <> '') SET @CAN = ' also ' + @CAN
                                SET @B = @AndBut + @CAN + ' to the pancreatic duct was '
                                SET @Comma = ', '
                                END
                    IF @MajorPapillaPancreatic=1
                            BEGIN
                            SET @C= @C + @Comma + @B + 'successful '
                            SET @B = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via major to pancreatic successful using' AND  ListItemNo = ISNULL(@MajorPapillaPancreaticReason,0) AND LOWER(ListItemText) <> '(none)'),'')
                            IF ISNULL(@MajorPapillaBileReason,0) >0  IF LEFT(@B, 1) IN ('a','e','i','o','u') SET @C= @C + ' using an ' + @B + ' ' ELSE SET @C= @C + ' using a ' + @B + ' '
                            END
                    ELSE IF @MajorPapillaPancreatic=3 SET @C= @C + @Comma + @B + 'not attempted '
                    ELSE IF @MajorPapillaPancreatic=3
                            BEGIN
                            SET @Reasons1 = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via major to pancreatic unsuccessful due to' AND  ListItemNo = ISNULL(@MajorPapillaPancreaticReason,0) AND LOWER(ListItemText) <> '(none)'),'')
                            IF @Reasons1 <>'' SET @C= @C + @Comma + @B + 'unsuccessful '
                            ELSE SET @C= @C + @Comma + @B + 'unsuccessful due to ' + @Reasons1
                            END
                    ELSE IF @MajorPapillaPancreatic=2
                            BEGIN
                            SET @Reasons1 = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via major to pancreatic partially successful reason' AND  ListItemNo = ISNULL(@MajorPapillaPancreaticReason,0) AND LOWER(ListItemText) <> '(none)'),'')
                            IF @Reasons1 ='' SET @C = @C + @Comma + @B + 'partially successful'
                            ELSE 
                                BEGIN
                                SET @C = @C + @Comma + @B + 'partially successful due to ' + @Reasons1
                                SET @CAN = ' cannulation '
                                END
                            END
                            IF @C<>'' SET @A = @A + LTRIM(RTRIM(@C)) + '. '
                    END    
        END

		--PRINT 'Value of @A before @MinorPapilla: ' + @A;	--## Debugger!

        IF @MinorPapilla=1
        BEGIN
			SET @A = @A + 'Cannulation via the minor papilla was successful '
			SET @B =  ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via minor successful using to' AND  ListItemNo = ISNULL(@MinorPapillaReason,0) AND LOWER(ListItemText) <> '(none)'),'')
			IF @B <> '' IF LEFT(@B, 1) IN ('a','e','i','o','u') SET @A= @A + ' using an ' + @B  ELSE SET @A= @A + ' using a ' + @B 
			SET @A = LTRIM(RTRIM(@A)) + '.'
        END
        ELSE IF @MinorPapilla=4
        BEGIN
            SET @B ='Cannulation via the minor papilla was unsuccessful ' 
            SET @Reasons1 = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via minor unsuccessful due to' AND  ListItemNo = ISNULL(@MinorPapillaReason,0) AND LOWER(ListItemText) <> '(none)'),'')
            IF @Reasons1 = '' SET @A = @A + @B
            ELSE SET @A = @A + @B + 'due to ' + @Reasons1
            SET @A = LTRIM(RTRIM(@A)) + '.'
        END
        ELSE IF @MinorPapilla=2
        BEGIN
            SET @B = 'Cannulation via the minor papilla was partially successful '
            SET @Reasons1 = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP via minor partially successful reason' AND  ListItemNo = ISNULL(@MinorPapillaReason,0) AND LOWER(ListItemText) <> '(none)'),'')
            IF @Reasons1 = '' SET @A = @A + @B
            ELSE SET @A = @A + @B + 'due to ' + @Reasons1
            SET @A = LTRIM(RTRIM(@A)) + '.'
        END

		IF @A <> '' SET @A = dbo.fnFirstLetterUpper(@A)
		IF @ExceptBileDuct = 1 INSERT INTO @tmp1 (Val) VALUES('common bile duct')
		IF @ExceptGallBladder= 1 INSERT INTO @tmp1 (Val) VALUES('gall bladder')
		IF @ExceptCommonHepaticDuct = 1 INSERT INTO @tmp1 (Val) VALUES('common hepatic duct')
		IF @ExceptRightHepaticDuct = 1 INSERT INTO @tmp1 (Val) VALUES('right hepatic duct')
		IF @ExceptLeftHepaticDuct = 1 INSERT INTO @tmp1 (Val) VALUES('left hepatic duct')

		IF @ExceptAccesoryPancreatic = 1 INSERT INTO @tmp2 (Val) VALUES('accessory pancreatic duct')
		IF @ExceptMainPancreatic = 1 INSERT INTO @tmp2 (Val) VALUES('main pancreatic duct')
		IF @ExceptUncinate = 1 INSERT INTO @tmp2 (Val) VALUES('uncinate process')
		IF @ExceptHead  = 1 INSERT INTO @tmp2 (Val) VALUES('head')
		IF @ExceptNeck  = 1 INSERT INTO @tmp2 (Val) VALUES('neck')
		IF @ExceptBody  = 1 INSERT INTO @tmp2 (Val) VALUES('body')
		IF @ExceptTail  = 1 INSERT INTO @tmp2 (Val) VALUES('tail')

		IF (SELECT COUNT(Val) FROM @tmp1)=0 SET @NoHepExcept = 1
		IF (SELECT COUNT(Val) FROM @tmp1)=0 SET @NoPanExcept = 1

		SET @Reasons1 = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP extent of visualisation limited by other' AND  ListItemNo = ISNULL(@HepatobiliaryLimitedByOtherText,0) AND LOWER(ListItemText) <> '(none)'),'')
		SET @Reasons2 = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP extent of visualisation limited by other' AND  ListItemNo = ISNULL(@PancreaticLimitedByOtherText,0) AND LOWER(ListItemText) <> '(none)'),'')

		SET @AndBut = 'and '

		DECLARE @XMLlist1 XML, @XMLlist2 XML
		SET @XMLlist1 = (SELECT Val FROM @tmp1 FOR XML  RAW, ELEMENTS, TYPE)
		SET @AR1 =     dbo.fnBuildString(@XMLlist1)
       
		SET @XMLlist2 = (SELECT Val FROM @tmp2 FOR XML  RAW, ELEMENTS, TYPE)
		SET @AR2 = dbo.fnBuildString(@XMLlist2) 

		IF @HepatobiliaryNotVisualised = 1 AND @PancreaticNotVisualised= 1
        BEGIN
            SEt @B = 'Neither the biliary nor pancreatic systems were visualised '
            IF @HepatobiliaryLimitedBy = 1 AND @PancreaticLimitedBy= 1 SET @A = @A + @B + 'due to insufficient contrast. '
            ELSE IF (@HepatobiliaryLimitedBy = 2 AND @PancreaticLimitedBy= 2) AND  (@Reasons1 = @Reasons2)
                    BEGIN
                    IF @Reasons1='' SET @A = @A + @B + '. '
                    ELSE SET @A = @A + @B + 'due to ' + @Reasons1 + '. '
                    END
            ELSE IF @HepatobiliaryLimitedBy<> @PancreaticLimitedBy
            BEGIN
            SET @A = @A + 'The biliary system was not visualised '
            IF @HepatobiliaryLimitedBy= 1 SET @A = @A + 'due to insufficient contrast '
            IF @HepatobiliaryLimitedBy= 2 AND @Reasons1<>'' SET @A = @A + 'due to ' + @Reasons1 + ' '
            SET @A = @A + 'nor was the pancreatic system visualised '
            IF @PancreaticLimitedBy = 1 SET @A = @A + 'due to insufficient contrast '
            IF @PancreaticLimitedBy = 2 AND @Reasons2<>'' SET @A = @A + ' due to ' + @Reasons2 + ' '
            SET @A = @A   + '. '
            END
            ELSE IF ISNULL(@HepatobiliaryLimitedBy,0)=0 AND ISNULL(@PancreaticLimitedBy,0)=0 SET @A = @A + LTRIM(RTRIM(@B)) + '. '
		END
		ELSE IF ISNULL(@HepatobiliaryNotVisualised,0) <>1 AND @PancreaticNotVisualised= 1
        BEGIN
            SET @B=''
            IF @HepatobiliaryWholeBiliary=1
                    BEGIN
                    SET @B = '<br/>Visualisation: The whole biliary system '
                    IF @NoHepExcept=1 SET @A = @A + @B
                    ELSE 
                        BEGIN            
							SET @A = @A + @B + 'except the ' + @AR1
							IF @HepatobiliaryLimitedBy =1 SET @A = @A + ', limited by insufficient contrast '
							IF @HepatobiliaryLimitedBy =2 SET @A = @A + ', limited by ' + @Reasons1 + ' '
                        END
                    END
                    IF @B <> ''
                        BEGIN
                        SET @B='but not the pancreatic system '
                        SET @Comma = ', '
                        END
                    ELSE
                        BEGIN
                        SET @B= '<br/>Visualisation: The pancreatic system was not visualised '
                        SET @Comma = ''
                        END
            IF @PancreaticLimitedBy= 1 SET @B = @B + 'due to insufficient contrast '
            IF @PancreaticLimitedBy= 2 AND @Reasons2<>'' SET @B = @B + ' due to ' + @Reasons2 + ' '
            SET @A = LTRIM(RTRIM(@A)) + @Comma + LTRIM(RTRIM(@B)) + '. '
        END
              
		ELSE IF ISNULL(@HepatobiliaryNotVisualised,0) =1 AND ISNULL(@PancreaticNotVisualised,0)<>1
        BEGIN
            DECLARE @Vis varchar(50)=''
            SET @B = 'the biliary system was not visualised '
            SET @AndBut ='but '
            IF @HepatobiliaryLimitedBy = 1
                    BEGIN
                    SET @B = @B + 'due to insufficient contrast '
                    SET @Vis = '<br/>Visualisation: '
                    END
            IF @HepatobiliaryLimitedBy = 2 AND @Reasons1 <> ''
                    BEGIN
                    SET @B = @B + 'due to ' + @Reasons1 + ' '
                    SET @Vis = '<br/>Visualisation: '
                    END
            SET @C = @AndBut + 'the whole pancreatic system '      
            SET @C1 = @AndBut + 'the pancreas divisum '
            IF @PancreaticWhole=1 OR @PancreaticDivisum=1
                    BEGIN
                    IF @PancreaticDivisum= 1 SET @C = @C1
                    IF @NoPanExcept= 1 SET @C = @C + 'was '
                    ELSE
                        BEGIN
                        SET @Vis = '<br/>Visualisation: '

                        SET @C = @C + @B + 'except the ' + @AR2 + ' was'
                        IF @PancreaticLimitedBy = 1 SET @C = @C + ', limited by insufficient contrast '
                        IF @PancreaticLimitedBy =2 AND @Reasons2<>'' SET @C = @C + ', limited by '+ @Reasons2 + ' '
                        END
                    END
            IF @Vis ='' SET @B = dbo.fnFirstLetterUpper(@B)
            SET @A = @A + @Vis + @B + @C + '.'
        END
		ELSE IF ISNULL(@HepatobiliaryNotVisualised,0) <>1 AND ISNULL(@PancreaticNotVisualised,0)<>1
        BEGIN
            SET @B= 'the whole biliary system '
            SET @C = 'the whole pancreatic system '
            SET @C1 = 'the pancreas divisum '
            IF ISNULL(@HepatobiliaryWholeBiliary,0)=1 AND (ISNULL(@PancreaticWhole,0)=1 OR ISNULL(@PancreaticDivisum,0)=1)
            BEGIN
                IF @PancreaticDivisum=1 SET @C = @C1
                IF ISNULL(@NoHepExcept,0) = 1 AND ISNULL(@NoPanExcept,0)=1
                BEGIN
                    IF @PancreaticWhole = 1 SET @A = @A + 'The complete biliary and pancreatic systems were visualised '
                    ELSE SET @A = @A + 'The complete biliary and pancreas divisum were visualised '
                END
                ELSE IF ISNULL(@NoHepExcept,0) = 1 AND ISNULL(@NoPanExcept,0)<>1
                BEGIN
                    SET @A = @A + '<br/>Visualisation: ' + @B + 'and ' + @C + 'except the ' + @AR2 + ' was visualised'
                    IF @PancreaticLimitedBy=1 SET @A = @A + ', limited by insufficient contrast '
                    IF @PancreaticLimitedBy=2 AND @Reasons2 <>'' SET @A = @A + ', limited by ' + @Reasons2+ ' '
                END
                ELSE IF ISNULL(@NoHepExcept,0) <>1 AND ISNULL(@NoPanExcept,0)=1
                BEGIN
					SET @A= @A + '<br/>Visualisation: ' + @B +'except the '+ @AR1 + ' '
					IF @HepatobiliaryLimitedBy=1 SET @A = LTRIM(RTRIM(@A)) + ', limited by insufficient contrast'
					IF @HepatobiliaryLimitedBy=2 AND @Reasons1 <>'' SET @A = LTRIM(RTRIM(@A)) + ', limited by ' + @Reasons1
					SET @A = LTRIM(RTRIM(@A)) + ', and '+ @C
				END
                ELSE IF ISNULL(@NoHepExcept,0) <>1 AND ISNULL(@NoPanExcept,0)<>1
                BEGIN
                    SET @A = @A + '<br/>Visualisation: ' + @B + 'except the '+ @AR1 + ' '
                    IF @HepatobiliaryLimitedBy=1 SET @A = LTRIM(RTRIM(@A)) + ', limited by insufficient contrast'
                    IF @HepatobiliaryLimitedBy=2 AND @Reasons1 <>'' SET @A = LTRIM(RTRIM(@A)) + ', limited by ' + @Reasons1+ ' '
                    SET @A = LTRIM(RTRIM(@A)) + ', and '+ @C + 'except the '+ @AR2
                    IF @PancreaticLimitedBy=1 SET @A = @A + ', limited by insufficient contrast '
                    IF @PancreaticLimitedBy=2 AND @Reasons2 <>'' SET @A = @A + ', limited by ' + @Reasons2
                END
                SET @A = LTRIM(RTRIM(@A)) + '. '
			END
            ELSE IF ISNULL(@HepatobiliaryWholeBiliary,0)=1 AND ISNULL(@PancreaticWhole,0)<>1 AND ISNULL(@PancreaticDivisum,0)<>1
            BEGIN
				SET @A = @A + '<br/>Visualisation: ' + @B
				IF @NoHepExcept=1 SET @A = @A + ' '
				ELSE 
				BEGIN
					SET @A = @A + 'except the '+ @AR1 + ' '
					IF @HepatobiliaryLimitedBy=1 SET @A = @A + ', limited by insufficient contrast, '
					IF @HepatobiliaryLimitedBy=2 AND @Reasons1<>'' SET @A = @A + ', limited by ' + @Reasons1 + ', '                         
				END
				SET @A = @A + 'but not the pancreatic system. '
            END
            ELSE IF ISNULL(@HepatobiliaryWholeBiliary,0)<>1 AND (ISNULL(@PancreaticWhole,0)=1 OR ISNULL(@PancreaticDivisum,0)=1)
            BEGIN
				SET @A = @A + '<br/>Visualisation: The biliary system was not visualised '
				IF @NoPanExcept=1 SET @A = @A + 'but ' + @c + 'was '
				ELSE 
				BEGIN
					SET @A = @A +'but ' + @c +' except the ' + @AR2 + ' was'
					IF @PancreaticLimitedBy=1 SET @A = @A + ', limited by insufficient contrast '
					IF @PancreaticLimitedBy=2 AND @Reasons2 <>'' SET @A = @A + ', limited by ' + @Reasons2
				END
				SET @A = LTRIM(RTRIM(@A)) + '. '
			END
            --ELSE IF ISNULL(@HepatobiliaryWholeBiliary,0)<>1 AND ISNULL(@PancreaticWhole,0)<>1 AND ISNULL(@PancreaticDivisum,0)<>1
                    --BEGIN
                    --SET @A = @A + 'Neither the biliary nor the pancreatic systems were visualised.'
            --END
        END
                     
		IF @HepatobiliaryAcinarFilling    = 1 AND @PancreaticAcinar=1  SET @A = @A + 'There was evidence of acinar filling of the liver and the pancreas. '
		ELSE IF @HepatobiliaryAcinarFilling      = 1 AND @PancreaticAcinar<>1 SET @A = @A + 'There was evidence of acinar filling of the liver. '
		ELSE IF @HepatobiliaryAcinarFilling      <> 1 AND @PancreaticAcinar=1 SET @A = @A  +'There was evidence of acinar filling of the pancreas. '
       
		DELETE FROM @tmp1
		DELETE FROM @tmp2
		SET @AR1= ''
		SET @AR2 = ''
		DECLARE @Vol varchar(500)='', @CM varchar(500)=''

		IF ISNULL(@HepatobiliaryFirstML,0) > 0 SET @Vol = ISNULL(@HepatobiliaryFirstML,0) + ' ml'
		IF ISNULL(@HepatobiliaryFirst,0) > 0 SET @CM = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP contrast media used' AND  ListItemNo = ISNULL(@HepatobiliaryFirst,0) AND LOWER(ListItemText) <> '(none)'),'')
		IF @CM <>'' OR ISNULL(@HepatobiliaryFirstML,'')<>'' INSERT INTO @tmp1 (VAl) VALUES (@Vol+ (CASE WHEN (@Vol)<>'' THEN ' ' + @CM ELSE @CM END ))

		SET @Vol='' ; SET @CM= ''

		IF ISNULL(@HepatobiliarySecondML,0) > 0 SET @Vol = ISNULL(@HepatobiliarySecondML,0) + ' ml'
		IF ISNULL(@HepatobiliarySecond,0) > 0 SET @CM = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP contrast media used' AND  ListItemNo = ISNULL(@HepatobiliarySecond,0) AND LOWER(ListItemText) <> '(none)'),'')
		IF @CM <>'' OR ISNULL(@HepatobiliarySecondML,'')<>'' INSERT INTO @tmp1 (VAl) VALUES (@Vol+ (CASE WHEN (@Vol)<>'' THEN ' ' + @CM ELSE @CM END ))

		SET @Vol='' ; SET @CM= ''


		IF ISNULL(@PancreaticFirstML,0) > 0 SET @Vol = ISNULL(@PancreaticFirstML,0) + ' ml'
		IF ISNULL(@PancreaticFirst,0) > 0 SET @CM = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP contrast media used' AND  ListItemNo = ISNULL(@PancreaticFirst,0) AND LOWER(ListItemText) <> '(none)'),'')
		IF @CM <>'' OR ISNULL(@PancreaticFirstML,'')<>'' INSERT INTO @tmp2 (VAl) VALUES (@Vol+ (CASE WHEN (@Vol)<>'' THEN ' ' + @CM ELSE @CM END ))

		SET @Vol='' ; SET @CM= ''

		IF ISNULL(@PancreaticSecondML,0) > 0 SET @Vol = ISNULL(@PancreaticSecondML,0) + ' ml'
		IF ISNULL(@PancreaticSecond,0) > 0 SET @CM = ISNULL((SELECT ListItemText FROM ERS_Lists where ListDescription='ERCP contrast media used' AND  ListItemNo = ISNULL(@PancreaticSecond,0) AND LOWER(ListItemText) <> '(none)'),'')
		IF @CM <>'' OR ISNULL(@PancreaticSecondML,'')<>'' INSERT INTO @tmp2 (VAl) VALUES (@Vol+ (CASE WHEN (@Vol)<>'' THEN ' ' + @CM ELSE @CM END ))

		SET @B=''
		SET @C = ''

		
		IF @HepatobiliaryBalloon= 1 SET @B = '(occlusion cholangiography) '
		IF     @PancreaticBalloon = 1 SET @C = '(occlusion pancreatography) '

		SET @A = LTRIM(RTRIM(@A))

		DECLARE @XMLlist01 XML, @ic1 int=0
		SET @ic1 = ISNULL((SELECT Count(Val) FROM @tmp1 WHERE LTRIM(RTRIM(Val))<> ''),0)
		SET @XMLlist01 = (SELECT Val FROM @tmp1 FOR XML  RAW, ELEMENTS, TYPE)
		SET @AR1 = dbo.fnBuildString(@XMLlist01)
       

		DECLARE @XMLlist02 XML, @ic2 int=0
		SET @ic2 = ISNULL((SELECT Count(Val) FROM @tmp2 WHERE LTRIM(RTRIM(Val))<> ''),0)
		SET @XMLlist02 = (SELECT Val FROM @tmp2 FOR XML  RAW, ELEMENTS, TYPE)
		SET @AR2 = dbo.fnBuildString(@XMLlist02)
       
		IF @ic1> 0 AND @ic2>0
        BEGIN
			SET @A = @A  + ' Contrast media used: hepatobiliary; ' + @AR1 + ' ' + @B
			SET @A = LTRIM(RTRIM(@A)) + ': pancreatic; ' + @AR2 + ' ' + @C
			SET @A = LTRIM(RTRIM(@A)) + '. '
        END    
		ELSE IF @ic1> 0 AND @ic2=0
        BEGIN
            SET @A = @A  + ' Contrast media used: hepatobiliary; ' + @AR1 + ' ' + @B
            SET @A = LTRIM(RTRIM(@A)) + '. '
        END
		ELSE IF @ic1= 0 AND @ic2>0
        BEGIN
            SET @A = @A + ' Contrast media used: pancreatic; ' + @AR2 + ' ' + @C
            SET @A = LTRIM(RTRIM(@A)) + '. '
        END

	 UPDATE  [ERS_Visualisation] SET Summary = @A WHERE ProcedureID=@ProcedureID;
	 EXEC [procedure_summary_update] @ProcedureID;
END TRY


BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------298b Create Proc otherdata_visualisation_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
/* ##--Implemented in the Entity Framework
EXEC DropIfExist  'otherdata_visualisation_save', 'S';
GO

CREATE PROCEDURE [dbo].[otherdata_visualisation_save]
(
                     @Id int,
					 @ProcedureID int,
					 @CarriedOutRole AS INT,
                     @AccessVia int,
                     @AccessViaOtherText varchar(500),
                     @MajorPapillaBile smallint ,
                     @MajorPapillaBileReason varchar(50) ,
                     @MajorPapillaPancreatic smallint ,
                     @MajorPapillaPancreaticReason varchar(50) ,
                     @MinorPapilla smallint ,
                     @MinorPapillaReason varchar(50) ,
                     @HepatobiliaryNotVisualised bit ,
                     @HepatobiliaryWholeBiliary bit ,
                     @ExceptBileDuct bit ,
                     @ExceptGallBladder bit ,
                     @ExceptCommonHepaticDuct bit ,
                     @ExceptRightHepaticDuct bit ,
                     @ExceptLeftHepaticDuct bit ,
                     @HepatobiliaryAcinarFilling bit ,
                     @HepatobiliaryLimitedBy smallint ,
                     @HepatobiliaryLimitedByOtherText varchar(500) ,
                     @PancreaticNotVisualised bit ,
                     @PancreaticDivisum bit ,
                     @PancreaticWhole bit ,
                     @ExceptAccesoryPancreatic bit ,
                     @ExceptMainPancreatic bit ,
                     @ExceptUncinate bit ,
                     @ExceptHead bit ,
                     @ExceptNeck bit ,
                     @ExceptBody bit ,
                     @ExceptTail bit ,
                     @PancreaticAcinar bit ,
                     @PancreaticLimitedBy smallint ,
                     @PancreaticLimitedByOtherText varchar(500) ,
                     @HepatobiliaryFirst smallint ,
                     @HepatobiliaryFirstML varchar ,
                     @HepatobiliarySecond smallint ,
                     @HepatobiliarySecondML varchar(50) ,
                     @HepatobiliaryBalloon bit ,
                     @PancreaticFirst smallint ,
                     @PancreaticFirstML varchar(50) ,
                     @PancreaticSecond smallint ,
                     @PancreaticSecondML varchar(50) ,
                     @PancreaticBalloon bit,
					 @Abandoned bit 
)
AS
BEGIN TRY
	IF @Id>0  --## Any RecordId is passed- means record Exist, so now UPDATE the Record
       BEGIN 
		BEGIN TRANSACTION
              UPDATE [ERS_Visualisation] 
              SET 
                     AccessVia=@AccessVia ,
                     AccessViaOtherText=@AccessViaOtherText,
                     MajorPapillaBile=@MajorPapillaBile,
                     MajorPapillaBileReason=@MajorPapillaBileReason,
                     MajorPapillaPancreatic = @MajorPapillaPancreatic ,
                     MajorPapillaPancreaticReason=@MajorPapillaPancreaticReason,
                     MinorPapilla=@MinorPapilla,
                     MinorPapillaReason=@MinorPapillaReason,
                     HepatobiliaryNotVisualised=@HepatobiliaryNotVisualised,
                     HepatobiliaryWholeBiliary=@HepatobiliaryWholeBiliary,
                     ExceptBileDuct=@ExceptBileDuct,
                     ExceptGallBladder =@ExceptGallBladder ,
                     ExceptCommonHepaticDuct=@ExceptCommonHepaticDuct ,
                     ExceptRightHepaticDuct =@ExceptRightHepaticDuct ,
                     ExceptLeftHepaticDuct=@ExceptLeftHepaticDuct ,
                     HepatobiliaryAcinarFilling=@HepatobiliaryAcinarFilling ,
                     HepatobiliaryLimitedBy=@HepatobiliaryLimitedBy,
                     HepatobiliaryLimitedByOtherText=@HepatobiliaryLimitedByOtherText,
                     PancreaticNotVisualised=@PancreaticNotVisualised ,
                     PancreaticDivisum =@PancreaticDivisum ,
                     PancreaticWhole=@PancreaticWhole ,
                     ExceptAccesoryPancreatic=@ExceptAccesoryPancreatic ,
                     ExceptMainPancreatic=@ExceptMainPancreatic ,
                     ExceptUncinate=@ExceptUncinate ,
                     ExceptHead =@ExceptHead ,
                     ExceptNeck =@ExceptNeck ,
                     ExceptBody=@ExceptBody ,
                     ExceptTail=@ExceptTail ,
                     PancreaticAcinar=@PancreaticAcinar ,
                     PancreaticLimitedBy=@PancreaticLimitedBy ,
                     PancreaticLimitedByOtherText=@PancreaticLimitedByOtherText ,
                     HepatobiliaryFirst=@HepatobiliaryFirst ,
                     HepatobiliaryFirstML=@HepatobiliaryFirstML,
                     HepatobiliarySecond=@HepatobiliarySecond ,
                     HepatobiliarySecondML=@HepatobiliarySecondML,
                     HepatobiliaryBalloon=@HepatobiliaryBalloon ,
                     PancreaticFirst=@PancreaticFirst ,
                     PancreaticFirstML=@PancreaticFirstML,
                     PancreaticSecond=@PancreaticSecond ,
                     PancreaticSecondML=@PancreaticSecondML,
                     PancreaticBalloon =@PancreaticBalloon,
					 Abandoned =@Abandoned
					 WHERE ProcedureID=@ProcedureID;
					
			EXEC otherdata_visualisation_summary_update @ProcedureID	--## Need to Pass ProcedureId to execute '[procedure_summary_update]'

       COMMIT TRANSACTION
	   END
	ELSE
       BEGIN
			BEGIN TRANSACTION
              INSERT INTO [ERS_Visualisation]  (
                           ProcedureID,
                           AccessVia,
                           AccessViaOtherText,
                           MajorPapillaBile  ,
                           MajorPapillaBileReason ,
                           MajorPapillaPancreatic  ,
                           MajorPapillaPancreaticReason ,
                           MinorPapilla  ,
                           MinorPapillaReason ,
                           HepatobiliaryNotVisualised ,
                           HepatobiliaryWholeBiliary  ,
                           ExceptBileDuct ,
                           ExceptGallBladder ,
                           ExceptCommonHepaticDuct ,
                           ExceptRightHepaticDuct ,
                           ExceptLeftHepaticDuct ,
                           HepatobiliaryAcinarFilling ,
                           HepatobiliaryLimitedBy  ,
                           HepatobiliaryLimitedByOtherText ,
                           PancreaticNotVisualised ,
                           PancreaticDivisum ,
                           PancreaticWhole ,
                           ExceptAccesoryPancreatic ,
                           ExceptMainPancreatic ,
                           ExceptUncinate ,
                           ExceptHead ,
                           ExceptNeck ,
                           ExceptBody ,
                           ExceptTail ,
                           PancreaticAcinar ,
                           PancreaticLimitedBy  ,
                           PancreaticLimitedByOtherText ,
                           HepatobiliaryFirst  ,
                           HepatobiliaryFirstML ,
                           HepatobiliarySecond  ,
                           HepatobiliarySecondML ,
                           HepatobiliaryBalloon ,
                           PancreaticFirst  ,
                           PancreaticFirstML ,
                           PancreaticSecond  ,
                           PancreaticSecondML ,
                           PancreaticBalloon,
						   Abandoned
                           ) 
                     VALUES (
                           @ProcedureID,
                           @AccessVia ,
                           @AccessViaOtherText,
                           @MajorPapillaBile  ,
                           @MajorPapillaBileReason ,
                           @MajorPapillaPancreatic  ,
                           @MajorPapillaPancreaticReason ,
                           @MinorPapilla  ,
                           @MinorPapillaReason ,
                           @HepatobiliaryNotVisualised,
                           @HepatobiliaryWholeBiliary,
                           @ExceptBileDuct ,
                           @ExceptGallBladder ,
                           @ExceptCommonHepaticDuct ,
                           @ExceptRightHepaticDuct ,
                           @ExceptLeftHepaticDuct ,
                           @HepatobiliaryAcinarFilling ,
                           @HepatobiliaryLimitedBy  ,
                           @HepatobiliaryLimitedByOtherText ,
                           @PancreaticNotVisualised ,
                           @PancreaticDivisum ,
                           @PancreaticWhole ,
                           @ExceptAccesoryPancreatic ,
                           @ExceptMainPancreatic ,
                           @ExceptUncinate ,
                           @ExceptHead ,
                           @ExceptNeck ,
                           @ExceptBody ,
                           @ExceptTail ,
                           @PancreaticAcinar ,
                           @PancreaticLimitedBy  ,
                           @PancreaticLimitedByOtherText ,
                           @HepatobiliaryFirst  ,
                           @HepatobiliaryFirstML ,
                           @HepatobiliarySecond  ,
                           @HepatobiliarySecondML ,
                           @HepatobiliaryBalloon ,
                           @PancreaticFirst  ,
                           @PancreaticFirstML ,
                           @PancreaticSecond  ,
                           @PancreaticSecondML ,
                           @PancreaticBalloon,
						   @Abandoned)

					EXEC otherdata_visualisation_summary_update @ProcedureID	--## Need to Pass ProcedureId to execute '[procedure_summary_update]'

					--## For the first time- New VisualisationRecord
					BEGIN
						 INSERT INTO ERS_RecordCount ([ProcedureId],[SiteId],[Identifier],[RecordCount])
												VALUES (@ProcedureId,NULL,   'Visualisation', 1);
					 END
			COMMIT TRANSACTION
       END
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION;

    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
END CATCH

GO
*/
--------------------------------------------------------------------------------------------------------------------
-------------------------------------298e Create Proc otherdata_colon_diagnoses_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'otherdata_colon_diagnoses_save','S';
GO

CREATE PROCEDURE [dbo].[otherdata_colon_diagnoses_save]
(
	@ProcedureID INT,
	@ColonNormal BIT,
	@ColonRestNormal BIT,
	--@Colitis BIT,
	--@Ileitis BIT,
	--@Proctitis BIT,
	@ColitisType VARCHAR(15),
	--@ColitisExtent VARCHAR(15),
	@ColonList VARCHAR(1500),
	--@ColonOtherDiagnosis VARCHAR(MAX),
	--@MayoScore VARCHAR(15),
	--@SEScore VARCHAR(15),
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	DELETE
	FROM [ERS_Diagnoses]
	WHERE ProcedureID = @ProcedureID AND IsOtherData = 1

	INSERT INTO [ERS_Diagnoses] (ProcedureID, MatrixCode, Value, Region, IsOtherData, WhoCreatedId, WhenCreated)
	SELECT @ProcedureId, [item], CONVERT(VARCHAR(MAX),'True'), 'Colon', 1, @LoggedInUserId, GETDATE() FROM dbo.fnSplitString(@ColonList,',')
	UNION
	SELECT @ProcedureId, 'ColonNormal', CONVERT(VARCHAR(MAX),@ColonNormal), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColonNormal = 1 
	UNION
	SELECT @ProcedureId, 'ColonRestNormal', CONVERT(VARCHAR(MAX),@ColonRestNormal), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColonRestNormal = 1 
	UNION
	--SELECT @ProcedureId, 'Colitis', CONVERT(VARCHAR(MAX),@Colitis), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @Colitis = 1 
	--UNION
	--SELECT @ProcedureId, 'Ileitis', CONVERT(VARCHAR(MAX),@Ileitis), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @Ileitis = 1 
	--UNION
	--SELECT @ProcedureId, 'Proctitis', CONVERT(VARCHAR(MAX),@Proctitis), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @Proctitis = 1 
	--UNION
	SELECT @ProcedureId, 'ColitisType', CONVERT(VARCHAR(MAX),@ColitisType), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColitisType <> '' 
	--UNION
	--SELECT @ProcedureId, 'ColitisExtent', CONVERT(VARCHAR(MAX),@ColitisExtent), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColitisExtent <> '' AND @ColitisExtent <> '0'
	--UNION
	--SELECT @ProcedureId, 'ColonOtherDiagnosis', CONVERT(VARCHAR(MAX),@ColonOtherDiagnosis), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColonOtherDiagnosis <> '' 
	--UNION
	--SELECT @ProcedureId, 'MayoScore', CONVERT(VARCHAR(MAX),@MayoScore), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @MayoScore <> ''  AND @MayoScore <> '0'
	--UNION
	--SELECT @ProcedureId, 'SEScore', CONVERT(VARCHAR(MAX),@SEScore), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @SEScore <> '' AND @SEScore <> '0'

	EXEC ogd_diagnoses_summary_update @ProcedureId;

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------298f Create Proc otherdata_ogd_diagnoses_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'otherdata_ogd_diagnoses_save','S';
GO

CREATE PROCEDURE [dbo].[otherdata_ogd_diagnoses_save]
(
	@ProcedureID INT,
	@OverallNormal BIT,
    --@OesophagusNormal BIT,
    @OesophagusNotEntered BIT,
    @OesoList VARCHAR(1500),
    @StomachNotEntered BIT,
    --@StomachNormal BIT,
    @stomachList VARCHAR(1500),
    @DuodenumNotEntered BIT,
    @Duodenum2ndPartNotEntered BIT,
    --@DuodenumNormal BIT,
    @DuoList VARCHAR(1500)
    --@OesophagusOtherDiagnosis VARCHAR(MAX),
    --@StomachOtherDiagnosis VARCHAR(MAX),
    --@DuodenumOtherDiagnosis VARCHAR(MAX)
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	DELETE
	FROM [ERS_Diagnoses]
	WHERE ProcedureID = @ProcedureID AND IsOtherData = 1

	IF (ISNULL(@OverallNormal,0) = 1) --Whole upper gastro-intestinal tract normal 
	BEGIN
		INSERT INTO [ERS_Diagnoses] (ProcedureID, MatrixCode, Value, Region, IsOtherData)
		SELECT @ProcedureId, 'OverallNormal', CONVERT(VARCHAR(MAX),@OverallNormal), '', 1 
	END
	ELSE
	BEGIN
		INSERT INTO [ERS_Diagnoses] (ProcedureID, MatrixCode, Value, Region, IsOtherData)
		--SELECT @ProcedureId, [item], CONVERT(VARCHAR(MAX),'True'), 'Oesophagus', 1 FROM dbo.fnSplitString(@OesoList,',')
		--		WHERE ISNULL(@OesophagusNotEntered,0) = 0 AND ISNULL(@OesophagusNormal,0) = 0
		--UNION
		--SELECT @ProcedureId, [item], CONVERT(VARCHAR(MAX),'True'), 'Stomach', 1 FROM dbo.fnSplitString(@stomachList,',')
		--		WHERE ISNULL(@StomachNotEntered,0) = 0 AND ISNULL(@StomachNormal,0) = 0
		--UNION
		--SELECT @ProcedureId, [item], CONVERT(VARCHAR(MAX),'True'), 'Duodenum', 1 FROM dbo.fnSplitString(@DuoList,',')
		--		WHERE ISNULL(@DuodenumNotEntered,0) = 0 AND ISNULL(@DuodenumNormal,0) = 0
		--UNION
		SELECT @ProcedureId, 'OesophagusNotEntered', CONVERT(VARCHAR(MAX),@OesophagusNotEntered), 'Oesophagus', 1 WHERE @OesophagusNotEntered = 1 
		--UNION
		--SELECT @ProcedureId, 'OesophagusNormal', CONVERT(VARCHAR(MAX),@OesophagusNormal), 'Oesophagus', 1 WHERE @OesophagusNormal = 1 
		--UNION
		--SELECT @ProcedureId, 'OesophagusOtherDiagnosis', CONVERT(VARCHAR(MAX),@OesophagusOtherDiagnosis), 'Oesophagus', 1 WHERE ISNULL(@OesophagusOtherDiagnosis,'') <> '' 
		UNION
		SELECT @ProcedureId, 'StomachNotEntered', CONVERT(VARCHAR(MAX),@StomachNotEntered), 'Stomach', 1 WHERE @StomachNotEntered = 1 
		--UNION
		--SELECT @ProcedureId, 'StomachNormal', CONVERT(VARCHAR(MAX),@StomachNormal), 'Stomach', 1 WHERE @StomachNormal = 1 
		--UNION
		--SELECT @ProcedureId, 'StomachOtherDiagnosis', CONVERT(VARCHAR(MAX),@StomachOtherDiagnosis), 'Stomach', 1 WHERE ISNULL(@StomachOtherDiagnosis,'') <> '' 
		UNION
		SELECT @ProcedureId, 'DuodenumNotEntered', CONVERT(VARCHAR(MAX),@DuodenumNotEntered), 'Duodenum', 1 WHERE @DuodenumNotEntered = 1 
		--UNION
		--SELECT @ProcedureId, 'DuodenumNormal', CONVERT(VARCHAR(MAX),@DuodenumNormal), 'Duodenum', 1 WHERE @DuodenumNormal = 1 
		--UNION
		--SELECT @ProcedureId, 'DuodenumOtherDiagnosis', CONVERT(VARCHAR(MAX),@DuodenumOtherDiagnosis), 'Duodenum', 1 WHERE ISNULL(@DuodenumOtherDiagnosis,'') <> '' 
		UNION
		SELECT @ProcedureId, 'Duodenum2ndPartNotEntered', CONVERT(VARCHAR(MAX),@Duodenum2ndPartNotEntered), 'Duodenum', 1 
					WHERE ISNULL(@Duodenum2ndPartNotEntered,'') <> '' AND ISNULL(@DuodenumNotEntered,0) = 0 --AND ISNULL(@DuodenumNormal,0) = 0

	END

	EXEC ogd_diagnoses_summary_update @ProcedureId;

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;



GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------298g Create Proc otherdata_diagnoses_Summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'otherdata_diagnoses_Summary_update','S';
GO

CREATE PROCEDURE [dbo].[otherdata_diagnoses_Summary_update]
(
@ProcedureID int
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	DECLARE 
	@DuodenumNormal bit,
	@Angiodysplasia bit,
	@Diverticulum bit,
	@Duodenitis bit,
	@Polyp bit,
	@Tumour bit,
	@Ulcer bit,
	@WholePancreatic bit,
	@PapillaeNormal bit,
	@ImpactedStone bit,
	@Inflamed bit,
	@Periampullary bit,
	@Stenosed bit,
	@PapillaeTumour bit,
	@PapillaeTumourType smallint,
	@PancreasNormal bit,
	@PancreaticStone bit,
	@Fistula bit,
	@Acute bit,
	@Chronic bit,
	@MinimalChange bit,
	@CommunicatingCyst bit,
	@NoncommunicatingCyst bit,
	@PseudocystCyst bit,
	@Dilatation bit,
	@NoObvious bit,
	@Stricture bit,
	@ProbablyMalignant bit,
	@Cystadenoma bit,
	@TumourOther bit,
	@TumourOtherText varchar(200),
	@PancreaticAndBiliaryOther varchar(500),
	@BiliaryNormal bit,
	@AnastomicStricture bit,
	@CysticDuct bit,
	@Haemobilia bit,
	@Cholelithiasis bit,
	@FistulaLeak bit,
	@Mirizzi bit,
	@CalculousObstruction bit,
	@GallBladder bit,
	@Occlusion bit,
	@CommonDuct bit,
	@GallBladderTumour bit,
	@StentOcclusion bit,
	@NormalDucts bit,
	@PolycysticLiver bit,
	@Cirrhosis bit,
	@Sclerosing bit,
	@HydratedCyst bit,
	@Suppurative bit,
	@LiverAbscess bit,
	@CaroliDisease bit,
	@BiliaryLeakSite bit,
	@BiliaryLeakSiteType int,
	@IntrahepaticTumour bit,
	@IntrahepaticTumourType int,
	@Cholangiocarcinoma bit,
	@Metastatic bit,
	@ExternalCompression bit,
	@HepatocellularCarcinoma bit,
	@ExtrahepaticNormal bit,
	@CholedochalCyst bit,
	@PostCholecystectomy bit,
	@DilatedDuct bit,
	@ExtrahepaticLeakSite bit,
	@ExtrahepaticLeakSiteText int,
	@ExtrahepaticTumour bit,
	@ExtrahepaticTumourType int,
	@ExtrahepaticProbable bit,
	@BeningPancreatitis bit,
	@BeningPseudocyst bit,
	@BeningPrevious bit,
	@BeningSclerosing bit,
	@BeningProbable bit,
	@MalignantGallbladder bit,
	@MalignantMetastatic bit,
	@MalignantCholangiocarcinoma bit,
	@MalignantPancreatic bit,
	@MalignantProbable bit,
	@BiliaryOther varchar(500),
	@WholeOther smallint

    SELECT 
        @DuodenumNormal=DuodenumNormal,
        @Angiodysplasia=Angiodysplasia,
        @Diverticulum=Diverticulum,
        @Duodenitis=Duodenitis,
        @Polyp=Polyp,
        @Tumour=Tumour,
        @Ulcer=Ulcer,
        @WholePancreatic=WholePancreatic,
        @PapillaeNormal=PapillaeNormal,
        @ImpactedStone=ImpactedStone,
        @Inflamed=Inflamed,
        @Periampullary=Periampullary,
        @Stenosed=Stenosed,
        @PapillaeTumour=PapillaeTumour,
        @PapillaeTumourType=PapillaeTumourType,
        @PancreasNormal=PancreasNormal,
        @PancreaticStone=PancreaticStone,
        @Fistula=Fistula,
        @Acute=Acute,
        @Chronic=Chronic,
        @MinimalChange=MinimalChange,
        @CommunicatingCyst=CommunicatingCyst,
        @NoncommunicatingCyst=NoncommunicatingCyst,
        @PseudocystCyst=PseudocystCyst,
        @Dilatation=Dilatation,
        @NoObvious=NoObvious,
        @Stricture=Stricture,
        @ProbablyMalignant=ProbablyMalignant,
        @Cystadenoma=Cystadenoma,
        @TumourOther=TumourOther,
        @TumourOtherText=TumourOtherText,
        @PancreaticAndBiliaryOther=PancreaticAndBiliaryOther,
        @BiliaryNormal=BiliaryNormal,
        @AnastomicStricture=AnastomicStricture,
        @CysticDuct=CysticDuct,
        @Haemobilia=Haemobilia,
        @Cholelithiasis=Cholelithiasis,
        @FistulaLeak=FistulaLeak,
        @Mirizzi=Mirizzi,
        @CalculousObstruction=CalculousObstruction,
        @GallBladder=GallBladder,
        @Occlusion=Occlusion,
        @CommonDuct=CommonDuct,
        @GallBladderTumour=GallBladderTumour,
        @StentOcclusion=StentOcclusion,
        @NormalDucts=NormalDucts,
        @PolycysticLiver=PolycysticLiver,
        @Cirrhosis=Cirrhosis,
        @Sclerosing=Sclerosing,
        @HydratedCyst=HydratedCyst,
        @Suppurative=Suppurative,
        @LiverAbscess=LiverAbscess,
        @CaroliDisease=CaroliDisease,
        @BiliaryLeakSite=BiliaryLeakSite,
        @BiliaryLeakSiteType=BiliaryLeakSiteType,
        @IntrahepaticTumour=IntrahepaticTumour,
        @IntrahepaticTumourType=IntrahepaticTumourType,
        @Cholangiocarcinoma=Cholangiocarcinoma,
        @Metastatic=Metastatic,
        @ExternalCompression=ExternalCompression,
        @HepatocellularCarcinoma=HepatocellularCarcinoma,
        @ExtrahepaticNormal=ExtrahepaticNormal,
        @CholedochalCyst=CholedochalCyst,
        @PostCholecystectomy=PostCholecystectomy,
        @DilatedDuct=DilatedDuct,
        @ExtrahepaticLeakSite=ExtrahepaticLeakSite,
        @ExtrahepaticLeakSiteText=ExtrahepaticLeakSiteText,
        @ExtrahepaticTumour=ExtrahepaticTumour,
        @ExtrahepaticTumourType=ExtrahepaticTumourType,
        @ExtrahepaticProbable=ExtrahepaticProbable,
        @BeningPancreatitis=BeningPancreatitis,
        @BeningPseudocyst=BeningPseudocyst,
        @BeningPrevious=BeningPrevious,
        @BeningSclerosing=BeningSclerosing,
        @BeningProbable=BeningProbable,
        @MalignantGallbladder=MalignantGallbladder,
        @MalignantMetastatic=MalignantMetastatic,
        @MalignantCholangiocarcinoma=MalignantCholangiocarcinoma,
        @MalignantPancreatic=MalignantPancreatic,
        @MalignantProbable=MalignantProbable,
        @BiliaryOther=BiliaryOther,
        @WholeOther=WholeOther 
        FROM [ERS_ERCPDiagnoses] WHERE ProcedureID=@ProcedureID

        DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
       
           
		DECLARE @A varchar(1000)=''
		IF @PapillaeNormal = 1 INSERT INTO @tmpDiv (Val) VALUES('normal')
		IF @ImpactedStone = 1 INSERT INTO @tmpDiv (Val) VALUES('impacted stone')
		IF @Inflamed = 1 INSERT INTO @tmpDiv (Val) VALUES('inflamed')                                  
		IF @Stenosed = 1 INSERT INTO @tmpDiv (Val) VALUES('stenosed')

        IF @PapillaeTumour = 1
        BEGIN
			IF @PapillaeTumourType = 1 INSERT INTO @tmpDiv (Val) VALUES('probably benign tumour')
			ELSE IF @PapillaeTumourType = 2 INSERT INTO @tmpDiv (Val) VALUES('probably malignant tumour')
			ELSE INSERT INTO @tmpDiv (Val) VALUES('tumour')
        END

        IF @Periampullary =1
        BEGIN
            INSERT INTO @tmpDiv (Val) VALUES('periampullary diverticulum')
        END

        IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
        BEGIN
			DECLARE @XMLlist XML
            SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
            SET @A = dbo.fnBuildString(@XMLlist)
            DELETE FROM @tmpDiv
        END 
        DELETE FROM @tmpDiv 
        IF @A <> '' SET @A ='AMPULLA.' + dbo.fnFirstLetterUpper(@A) + '.' + '</br>'
                                  
        DELETE FROM @tmpDiv

        IF @PancreasNormal = 1 INSERT INTO @tmpDiv (Val) VALUES('normal')
        IF @PancreaticStone =1  INSERT INTO @tmpDiv (Val) VALUES('pancreatic stone')
        IF @Fistula = 1 INSERT INTO @tmpDiv (Val) VALUES('pancreatic fistula')

        DECLARE @B varchar(1000)=''
        IF @Acute = 1 SET @B='acute '

        IF @Chronic = 1 
        BEGIN
			IF @B<>'' SET @B = @B +'and chronic ' ELSE SET @B= @B +'chronic '
			IF @MinimalChange = 1 SET @B= @B +'(minimal change) '
        END

        IF @B <> ''  INSERT INTO @tmpDiv (Val) VALUES(@B + 'pancreatitis')

        SET @B =''
        DECLARE @C varchar(1000)=''
        IF @CommunicatingCyst =1 OR @NoncommunicatingCyst=1 OR @PseudocystCyst=1
        BEGIN
			IF @PseudocystCyst=1 SET @B= 'pseudocyst '
			ELSE SET @B='cyst '
        END
        IF @CommunicatingCyst =1 SET @C='communicating '
        IF @NoncommunicatingCyst =1
        BEGIN
			IF @C= ''  SET @C ='noncommunicating '
			ELSE SET @C= @C + 'and noncommunicating '
        END
        IF @C <>'' SET @C = @C + 'with the pancreatic duct'
        SET @B = @B + @C

        IF @B <> '' INSERT INTO @tmpDiv (Val) VALUES(@B)
                                  
        SET @B='' 
        SET @C= ''
        IF @Stricture = 1 SET @B='stricture '

        IF @Dilatation =1
        BEGIN
			IF @B='' SET @B= 'dilatation ' ELSE SET @B='and dilatation '
        END

        IF @B<> ''
        BEGIN
			SET @B= 'ductal '+@B
			IF @NoObvious =1 SET @B = @B + 'with no obvious cause'
        END

        IF @B <> '' INSERT INTO @tmpDiv (Val) VALUES(@B)
                                  
        SET @B=''
        SET @C= ''

        DECLARE @A1 varchar(50)='' , @A2 varchar(50) ='', @A3 varchar(50) =''

        IF @ProbablyMalignant = 1 SET @A1='probably malignant tumour'
        IF @Cystadenoma = 1 SET @A2 ='cystadenoma'
        IF @TumourOther = 1
        BEGIN
			IF @TumourOtherText IS NOT NULL AND LTRIM(RTRIM(@TumourOtherText)) <> '' SET @A3 = LTRIM(RTRIM(@TumourOtherText))
        END

        IF @TumourOther=1 AND @A3<>''
		BEGIN
			IF @ProbablyMalignant<>1 AND @Cystadenoma<> 1 SET @B= 'tumour ('+ @A3+ ') '
			ELSE
			BEGIN
                IF @ProbablyMalignant=1 AND @Cystadenoma<>1 SET @B = @A1 + ' (' +@A3+ ') '
				ELSE
                BEGIN
					DECLARE @XMLlist1 XML                                               
					SELECT * INTO #T FROM (select Val=@A1 union select Val=@A2 union select Val=@A3) AS TA
					SET @XMLlist1 = (SELECT Val FROM #T FOR XML  RAW, ELEMENTS, TYPE)
					SET @B = dbo.fnBuildString(@XMLlist1)                                             
					DROP TABLE #T
                END
			END
		END
		ELSE
        BEGIN
			IF @ProbablyMalignant=1 AND @Cystadenoma<>1 SET @B=@A1
			IF @ProbablyMalignant <>1 AND @Cystadenoma = 1 SET @B= @A2
			IF @ProbablyMalignant=1 AND @Cystadenoma=1 SET @B = @A1 + ' and ' + @A2
		END

		IF @B <> '' INSERT INTO @tmpDiv (Val) VALUES(@B)

        IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
        BEGIN
			DECLARE @XMLlist2 XML
			SET @XMLlist2 = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @B = dbo.fnBuildString(@XMLlist2)
			DELETE FROM @tmpDiv                                     
                                           
			SET @B =dbo.fnFirstLetterUpper(@B)
			SET @A = @A + 'PANCREAS. ' + @B +'.'
			SET @B = ISNULL(@PancreaticAndBiliaryOther,'')
			IF @B <>  '' SET @A = @A + ' ' + dbo.fnFirstLetterUpper(@B) + '.'
			SET @A = @A + '<br/>'
        END  
        ELSE
        BEGIN
			SET @B = ISNULL(@PancreaticAndBiliaryOther,'')
            IF @B <> '' SET @A = @A + 'PANCREAS. ' + @B + '. <br/>'
        END
        DELETE FROM @tmpDiv

		DECLARE @BilStr Varchar(1000)
		IF @BiliaryNormal=1 
		BEGIN
			SET @BilStr= 'Normal'
			IF @PostCholecystectomy = 1 SET @BilStr = @BilStr + ' (post cholecystectomy)'
		END
		ELSE 
        BEGIN
			IF @Cholelithiasis=1 INSERT INTO @tmpDiv (Val) VALUES('cholelithiasis')
			IF @CalculousObstruction=1 INSERT INTO @tmpDiv (Val) VALUES('calculous obstruction of the cystic duct')
			IF @FistulaLeak=1 INSERT INTO @tmpDiv (Val) VALUES('fistula')
		END

		DECLARE @cDuct bit = 0     
		IF @CommonDuct = 1 
        BEGIN
			INSERT INTO @tmpDiv (Val) VALUES('common duct stone')
			SET @cDuct = 1
        END
    ----for stones please complete
    --IF @cDuct =0 
    --     BEGIN
    --     DECLARE @Stones varchar(50)

    --     END
		IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
        BEGIN
			DECLARE @XMLlist3 XML
            SET @XMLlist3 = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
            SET @B = dbo.fnBuildString(@XMLlist3)
            DELETE FROM @tmpDiv
        END 
        DELETE FROM @tmpDiv
		SET @BilStr= dbo.fnFirstLetterUpper(@B) + '.'
		--Cirrhosis,                             
		--Suppurative,     
		  
		IF @NormalDucts = 1 INSERT INTO @tmpDiv (Val) VALUES(@BilStr +'Normal intrahepatic ducts. ')     
		ELSE
        BEGIN
			IF @Cirrhosis = 1 INSERT INTO @tmpDiv (Val) VALUES('cirrhosis')      
            IF @HydratedCyst = 1 INSERT INTO @tmpDiv (Val) VALUES('hydated cyst')      
            IF @LiverAbscess = 1 INSERT INTO @tmpDiv (Val) VALUES('Liver abscess')
            IF @BiliaryLeakSite =1 
            BEGIN
				IF ISNULL(@BiliaryLeakSiteType,0)>0 INSERT INTO @tmpDiv (Val) VALUES('biliary leak' + ' (' +(select ISNULL(ListItemText,'') from ERS_Lists where ListDescription='Intrahepatic biliary leak site' AND  ListItemNo = ISNULL(@BiliaryLeakSiteType,0)) + ')')
				ELSE INSERT INTO @tmpDiv (Val) VALUES('intrahepatic biliary leak')
            END    
                     
            IF @PolycysticLiver =1     INSERT INTO @tmpDiv (Val) VALUES('polycystic liver disease')     
            IF @Sclerosing =1    INSERT INTO @tmpDiv (Val) VALUES('sclerosing cholangitis')
            IF @CaroliDisease =1       INSERT INTO @tmpDiv (Val) VALUES('Caroli''s disease')
            IF @IntrahepaticTumour = 1
            BEGIN
                DECLARE @tTable TABLE (Val varchar(500))
                SET @A2=''
                SET @B=''
                IF ISNULL(@IntrahepaticTumourType,0) = 1 SET @B='probable '
                ELSE IF ISNULL(@IntrahepaticTumourType,0) = 2 SET @B='possible '
                IF @Cholangiocarcinoma=1 INSERT INTO @tTable (Val) VALUES('cholangiocarcinoma')
                IF @Metastatic=1 INSERT INTO @tTable (Val) VALUES('metastatic intrahepatic')
                IF @ExternalCompression=1 INSERT INTO @tTable (Val) VALUES('external compression (metastases)')
                IF @HepatocellularCarcinoma=1 INSERT INTO @tTable (Val) VALUES('hepatocellular carcinoma')
                           
                IF (SELECT COUNT(Val) FROM @tTable) > 0 
                BEGIN
					DECLARE @XMLlist4 XML
                    SET @XMLlist4 = (SELECT Val FROM @tTable FOR XML  RAW, ELEMENTS, TYPE)
                    SET @B = @B +  dbo.fnBuildString(@XMLlist4)
                    DELETE FROM @tTable
                END 
                ELSE SET @B= @B + 'tumour'

                INSERT INTO @tmpDiv (Val) VALUES(@B)
                DELETE FROM @tTable
            END
            IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
            BEGIN
				DECLARE @XMLlist5 XML= (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)                                        
				SET @BilStr = @BilStr + 'Intrahepatic: ' + dbo.fnBuildString(@XMLlist5)                                                      
            END 
            DELETE FROM @tmpDiv
        END     
		      
        IF @ExtrahepaticNormal=1
        BEGIN
			SET @BilStr = @BilStr + 'Extrahepatic ducts normal'
			IF @PostCholecystectomy= 1 SET @BilStr = @BilStr + ' (post cholecystectomy). '
			ELSE SET @BilStr = @BilStr + '. '
        END           
        ELSE
        BEGIN
			IF @PostCholecystectomy=1 INSERT INTO @tmpDiv (Val) VALUES('post cholecystectomy')
			IF @CholedochalCyst=1 INSERT INTO @tmpDiv (Val) VALUES('choledochal cyst')
			IF @DilatedDuct=1 INSERT INTO @tmpDiv (Val) VALUES('dilated duct')
			IF @ExtrahepaticLeakSite=1
			BEGIN
				IF ISNULL(@ExtrahepaticLeakSiteText,0)>0 INSERT INTO @tmpDiv (Val) VALUES('biliary leak' +' (' + (select ISNULL(ListItemText,'') from ERS_Lists where ListDescription='Extrahepatic biliary leak site' AND  ListItemNo = ISNULL(@ExtrahepaticLeakSiteText,0)) +') ')
				ELSE INSERT INTO @tmpDiv (Val) VALUES('extrahepatic biliary leak')
			END
            IF @ExtrahepaticTumour=1
            BEGIN
				DECLARE @iTable TABLE (Val varchar(500))
                SET @B=''
                IF @ExtrahepaticTumourType =1 
                BEGIN
					IF @BeningPancreatitis=1 INSERT INTO @iTable (Val) VALUES('pancreatitis')
					IF @BeningPseudocyst=1 INSERT INTO @iTable (Val) VALUES('a pseudocyst')
					IF @BeningPrevious=1 INSERT INTO @iTable (Val) VALUES('previous surgery')
					IF @BeningSclerosing=1 INSERT INTO @iTable (Val) VALUES('sclerosing cholangitis')
					DECLARE @istr varchar(1000), @iCount int
					SET @iCount = (SELECT COUNT(Val) FROM @iTable)
					IF @iCount > 0 
					BEGIN
						DECLARE @XMLlist6 XML= (SELECT Val FROM @iTable FOR XML  RAW, ELEMENTS, TYPE)                                     
						SET @istr = dbo.fnBuildString(@XMLlist6)                                                 
					END 
					DELETE FROM @iTable
					IF ISNULL(@ExtrahepaticProbable,0) <> 1 AND ISNULL(@BeningProbable,0) <> 1
                    BEGIN
						IF @iCount >1 SET @B = 'stricture due to ' + @istr
						ELSE SET @B = 'benign stricture'
                    END
                    ELSE IF ISNULL(@ExtrahepaticProbable,0) = 1 AND ISNULL(@BeningProbable,0) <> 1
                    BEGIN
						SET @B= 'stricture: probably benign'
						IF @iCount > 1 SET @B = @B + ', ' + @istr
                    END
                    ELSE IF ISNULL(@ExtrahepaticProbable,0) <> 1 AND ISNULL(@BeningProbable,0) = 1
                    BEGIN
						SET @B= 'stricture: benign'
						IF @iCount > 1 SET @B = @B + ', probably ' + @istr
                    END
                    ELSE IF ISNULL(@ExtrahepaticProbable,0) = 1 AND ISNULL(@BeningProbable,0) = 1
                    BEGIN
						SET @B= 'stricture: probably benign'
						IF @iCount > 1 SET @B = @B + ', probably ' + @istr
                    END
                END
                ELSE IF @ExtrahepaticTumourType =2
                BEGIN
					IF @MalignantGallbladder=1 INSERT INTO @iTable (Val) VALUES('gallbladder carcinoma')
					IF @MalignantMetastatic=1 INSERT INTO @iTable (Val) VALUES('metastatic carcinoma')
					IF @MalignantCholangiocarcinoma=1 INSERT INTO @iTable (Val) VALUES('cholangiocarcinoma')
					IF @MalignantPancreatic=1 INSERT INTO @iTable (Val) VALUES('pancreatic carcinoma')
					DECLARE @oStr varchar(1000), @oCount int
					SET @oCount = (SELECT COUNT(Val) FROM @iTable)
					IF @oCount > 0 
                    BEGIN
                        DECLARE @XMLlist7 XML= (SELECT Val FROM @iTable FOR XML  RAW, ELEMENTS, TYPE)                                     
                        SET @ostr = dbo.fnBuildString(@XMLlist7)                                                 
                    END 
                    DELETE FROM @iTable
                    IF ISNULL(@ExtrahepaticProbable,0) <> 1 AND ISNULL(@MalignantProbable,0) <> 1
                    BEGIN
						IF @oCount > 1 SET @B = 'stricture due to ' + @ostr
						ELSE SET @B ='malignant stricture'
                    END
                    ELSE IF ISNULL(@ExtrahepaticProbable,0) = 1 AND ISNULL(@MalignantProbable,0) <> 1
                    BEGIN
						SET @B= 'stricture: probably malignant'
						IF @oCount > 1 SET @B = @B + ', ' + @ostr                                   
                    END
                    ELSE IF ISNULL(@ExtrahepaticProbable,0) <> 1 AND ISNULL(@MalignantProbable,0) = 1
                    BEGIN
						SET @B= 'stricture: malignant'
						IF @oCount > 1 SET @B = @B + ', probably ' + @ostr                                       
                    END
                    ELSE IF ISNULL(@ExtrahepaticProbable,0) = 1 AND ISNULL(@MalignantProbable,0) = 1
                    BEGIN
						SET @B= 'stricture: probably malignant'
						IF @oCount > 1 SET @B = @B + ', probably ' + @ostr                                       
                    END
                END 
                ELSE SET @B ='stricture'

                INSERT INTO @tmpDiv (Val) VALUES(@B)
            END

            IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
            BEGIN
				DECLARE @XMLlist8 XML= (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)                                        
				SET @BilStr = @BilStr + 'Extrahepatic: ' + dbo.fnBuildString(@XMLlist8)                                                      
            END 
            DELETE FROM @tmpDiv
        END         
		  
		IF @BilStr <>'' AND  @BilStr <>'.'
        BEGIN
			SET @A = @A + 'BILIARY. ' + @BilStr
			SET @B= ISNULL(@BiliaryOther,'')
			IF @B <> '' 
			BEGIN 
				SET @B = dbo.fnFirstLetterUpper(@B)
				SET @A = @A + ' ' + @B  + '.'
			END
			SET @A = @A + '<br/>'
        END
		ELSE
        BEGIN
			SET @B= ISNULL(@BiliaryOther,'')
			IF @B<>''
            BEGIN
				SET @B = dbo.fnFirstLetterUpper(@B)
				SET @A = @A + 'BILIARY. ' + @B  + '.' + '<br/>'
            END
        END

		IF @DuodenumNormal = 1 INSERT INTO @tmpDiv (Val) VALUES('normal')
		IF @Angiodysplasia = 1 INSERT INTO @tmpDiv (Val) VALUES('angiodysplasia')
		IF @Tumour = 1 INSERT INTO @tmpDiv (Val) VALUES('tumour')
		IF @Diverticulum = 1 INSERT INTO @tmpDiv (Val) VALUES('diverticulum')
		IF @Duodenitis = 1 INSERT INTO @tmpDiv (Val) VALUES('duodenitis')
		IF @Polyp = 1 INSERT INTO @tmpDiv (Val) VALUES('polyp')
		IF @Ulcer = 1 INSERT INTO @tmpDiv (Val) VALUES('ulcer')
              
		IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			DECLARE @XMLlist9 XML= (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)                                       
			SET @B = dbo.fnFirstLetterUpper( dbo.fnBuildString(@XMLlist9) )      
			SET @A = @A + 'DUODENUM. ' + @B + '.'    + '<br/>'                         
       END 
       DELETE FROM @tmpDiv  

		IF ISNULL(@WholeOther,0) >0
		BEGIN
		   SET @B= LTRIM(RTRIM((select ISNULL(ListItemText,'') from ERS_Lists where ListDescription='ERCP other diagnoses' AND  ListItemNo = ISNULL(@WholeOther,0))))
		   SET @B = dbo.fnAddFullStop(dbo.fnFirstLetterUpper(@B)) + '<br/>'
		   SET @A = @A +@B
		END  

		IF @A <> '' UPDATE ERS_ERCPDiagnoses SET Summary = @A
		UPDATE ERS_ProceduresReporting  SET PP_Diagnoses = @A WHERE ProcedureId = @ProcedureId
		EXEC procedure_summary_update @procedureID

END TRY

BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO

--------------------------------------------------------------------------------------------------------------------
---------------------------------------- Create Trigger TR_EUSAbnoMediastinal ------------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'TR_EUSAbnoMediastinal', 'TR';
GO

CREATE TRIGGER TR_EUSAbnoMediastinal
ON ERS_EUSAbnoMediastinal
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId FROM INSERTED
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC abnormalities_mediastinal_summary_update @site_id
	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------301 Create Trigger TR_UpperGIAbnoGastritis_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoGastritis_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoGastritis_Insert
ON ERS_UpperGIAbnoGastritis
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @Erosive VARCHAR(10), @Gastritis VARCHAR(10), @NonErosive VARCHAR(10)
	SELECT @site_id=SiteId,
			@Erosive = (CASE WHEN (FlatErosive=1 OR RaisedErosive=1) THEN 'True' ELSE 'False' END),
			@NonErosive = (CASE WHEN [None] = 0 AND (FlatErosive=0 OR RaisedErosive=0) THEN 'True' ELSE 'False' END),
			@Gastritis = (CASE WHEN (Erythematous=1 OR FlatErosive=1 OR RaisedErosive=1 OR Atrophic=1 OR Haemorrhagic=1 OR Reflux=1 
										OR RugalHyperplastic=1 OR Vomiting=1 OR PromAreaeGastricae=1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_gastritis_summary_update @site_id
	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D49P1', @Gastritis			-- 'Gastritis'
	EXEC diagnoses_control_save @site_id, 'D39P1', @Erosive				-- 'Erosive'
	EXEC diagnoses_control_save @site_id, 'D84P1', @NonErosive			-- 'Non Erosive'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------302 Create Trigger TR_UpperGIAbnoGastritis_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoGastritis_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoGastritis_Delete
ON ERS_UpperGIAbnoGastritis
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D39P1', 'False'			-- 'Erosions'
	EXEC diagnoses_control_save @site_id, 'D49P1', 'False'			-- 'Gastritis'
	EXEC diagnoses_control_save @site_id, 'D84P1', 'False'			-- 'Non Erosive'

	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------303 Create Trigger TR_UpperGIAbnoGastricUlcer_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoGastricUlcer_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoGastricUlcer_Insert
	ON ERS_UpperGIAbnoGastricUlcer
	AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @StomachUlcer VARCHAR(10), @MultipleUlcers VARCHAR(10)
	SELECT @site_id=SiteId,
			@StomachUlcer = (CASE WHEN (Ulcer=1 AND (UlcerNumber=1 OR UlcerNumber is null)) THEN 'True' ELSE 'False' END),
			@MultipleUlcers = (CASE WHEN (Ulcer=1 AND UlcerNumber > 1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_gastric_ulcer_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D51P1', @StomachUlcer			-- 'StomachUlcer'
	EXEC diagnoses_control_save @site_id, 'D42P1', @MultipleUlcers			-- 'MultipleUlcers'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------304 Create Trigger TR_UpperGIAbnoGastricUlcer_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoGastricUlcer_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoGastricUlcer_Delete
ON ERS_UpperGIAbnoGastricUlcer
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D51P1', 'False'			-- 'StomachUlcer'
	EXEC diagnoses_control_save @site_id, 'D42P1', 'False'			-- 'MultipleUlcers'

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------309 Create Trigger TR_UpperGISpecimens_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGISpecimens_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGISpecimens_Insert
ON ERS_UpperGISpecimens
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM INSERTED

	EXEC specimens_ogd_summary_update @site_id
	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------310 Create Trigger TR_UpperGISpecimens_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGISpecimens_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGISpecimens_Delete
ON ERS_UpperGISpecimens
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------311 Create Trigger TR_ERCP_Specimens_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERCP_Specimens_Insert', 'TR';
GO

--CREATE TRIGGER TR_ERCP_Specimens_Insert
--ON [ERCP Specimens]
--AFTER INSERT, UPDATE 
--AS 
--	--DECLARE @PatientNo VARCHAR(50)
--	--DECLARE @EpisodeNo INT
--	--DECLARE @SiteNo INT
--	DECLARE @site_id INT

--	--SELECT @PatientNo=[Patient No], @EpisodeNo=[Episode No], @SiteNo=[Site No] FROM INSERTED
--	SELECT @site_id=SiteId FROM INSERTED

--	--TODO - IMplement the actual summary here

--	EXEC sites_summary_update @site_id

--GO

----update [ERCP Specimens] set [site no] =1 where [Patient No]='GIYYYY000001' and [Episode no] = 1494
--GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------312 Create Trigger TR_ERCP_Specimens_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERCP_Specimens_Delete', 'TR';
GO

--CREATE TRIGGER TR_ERCP_Specimens_Delete
--ON [ERCP Specimens]
--AFTER DELETE
--AS 
--	--DECLARE @PatientNo VARCHAR(50)
--	--DECLARE @EpisodeNo INT
--	--DECLARE @SiteNo INT
--	DECLARE @site_id INT

--	--SELECT @PatientNo=[Patient No], @EpisodeNo=[Episode No], @SiteNo=[Site No] FROM DELETED
--	SELECT @site_id=SiteId FROM DELETED

--	EXEC sites_summary_update @site_id

--GO

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------313 Create Trigger TR_Colon_Specimens_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Colon_Specimens_Insert', 'TR';
GO

--CREATE TRIGGER TR_Colon_Specimens_Insert
--ON [Colon Specimens]
--AFTER INSERT, UPDATE 
--AS 
--	--DECLARE @PatientNo VARCHAR(50)
--	--DECLARE @EpisodeNo INT
--	--DECLARE @SiteNo INT
--	DECLARE @site_id INT

--	--SELECT @PatientNo=[Patient No], @EpisodeNo=[Episode No], @SiteNo=[Site No] FROM INSERTED
--	SELECT @site_id=SiteId FROM INSERTED

--	--TODO - IMplement the actual summary here

--	EXEC sites_summary_update @site_id

--GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------314 Create Trigger TR_Colon_Specimens_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Colon_Specimens_Delete', 'TR';
GO

--CREATE TRIGGER TR_Colon_Specimens_Delete
--ON [Colon Specimens]
--AFTER DELETE
--AS 
--	--DECLARE @PatientNo VARCHAR(50)
--	--DECLARE @EpisodeNo INT
--	--DECLARE @SiteNo INT
--	DECLARE @site_id INT

--	--SELECT @PatientNo=[Patient No], @EpisodeNo=[Episode No], @SiteNo=[Site No] FROM DELETED
--	SELECT @site_id=SiteId FROM DELETED

--	EXEC sites_summary_update @site_id

--GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------315 Create Trigger TR_Upper_GI_Therapeutic_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Upper_GI_Therapeutic_Insert', 'TR';
GO

CREATE TRIGGER TR_Upper_GI_Therapeutic_Insert
ON ERS_UpperGITherapeutics
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT,
			@TherapeuticId AS INT,
			@MarkingType AS INT,
			@MarkedQty AS INT,
			@MarkedBy AS INT;
	SELECT	@TherapeuticId=Id, @site_id=SiteId, @MarkingType=i.MarkingType, @MarkedQty=i.MarkedQuantity, @MarkedBy=i.CarriedOutRole FROM INSERTED i;

	--update lesions table with tattoo marking details if different
	IF EXISTS(SELECT 1 FROM dbo.ERS_ColonAbnoLesions ecal WHERE ecal.SiteId=@site_id AND (ecal.TattooType IS NOT NULL AND ecal.TattooType <> @MarkingType) AND (ecal.TattooedQuantity IS NOT NULL AND ecal.TattooedQuantity <> @MarkedQty))
	BEGIN
		UPDATE dbo.ERS_ColonAbnoLesions
		SET
			dbo.ERS_ColonAbnoLesions.TattooType = @MarkingType,
			dbo.ERS_ColonAbnoLesions.TattooedQuantity = @MarkedQty,
			dbo.ERS_ColonAbnoLesions.TattooedBy = @MarkedBy
		WHERE
			dbo.ERS_ColonAbnoLesions.SiteId = @site_id
	END

	EXEC therapeutics_ogd_summary_update @TherapeuticId, @site_id;
	EXEC sites_summary_update @site_id;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------316 Create Trigger TR_Upper_GI_Therapeutic_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Upper_GI_Therapeutic_Delete', 'TR';
GO

CREATE TRIGGER TR_Upper_GI_Therapeutic_Delete
ON ERS_UpperGITherapeutics
AFTER DELETE
AS 
	--DECLARE @PatientNo VARCHAR(50)
	--DECLARE @EpisodeNo INT
	--DECLARE @SiteNo INT
	DECLARE @site_id INT

	--SELECT @PatientNo=[Patient No], @EpisodeNo=[Episode No], @SiteNo=[Site No] FROM DELETED
	SELECT @site_id=SiteId FROM DELETED

	EXEC ogd_kpi_stricture_perforation @site_id --Update perforation text in QA for OGD KPI

	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------317 Create Trigger TR_ERCP_Therapeutic_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERCP_Therapeutic_Insert', 'TR';
GO

CREATE TRIGGER TR_ERCP_Therapeutic_Insert
ON ERS_ERCPTherapeutics
AFTER INSERT, UPDATE 
AS 

	DECLARE @site_id INT,
			@TherapeuticId as INT

	SELECT @TherapeuticId=id, @site_id=SiteId FROM INSERTED

	EXEC ogd_kpi_stricture_perforation @site_id --Update perforation text in QA for OGD KPI

	EXEC therapeutics_ercp_summary_update @TherapeuticId, @site_id
	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------318 Create Trigger TR_ERCP_Therapeutic_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERCP_Therapeutic_Delete', 'TR';
GO

CREATE TRIGGER TR_ERCP_Therapeutic_Delete
ON ERS_ERCPTherapeutics
AFTER DELETE
AS 
	DECLARE @site_id INT

	SELECT @site_id=SiteId FROM DELETED

	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------319 Create Trigger TR_Colon_Therapeutic_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Colon_Therapeutic_Insert', 'TR';
GO

--CREATE TRIGGER TR_Colon_Therapeutic_Insert
--ON [Colon Therapeutic]
--AFTER INSERT, UPDATE 
--AS 
--	--DECLARE @PatientNo VARCHAR(50)
--	--DECLARE @EpisodeNo INT
--	--DECLARE @SiteNo INT
--	DECLARE @site_id INT

--	--SELECT @PatientNo=[Patient No], @EpisodeNo=[Episode No], @SiteNo=[Site No] FROM INSERTED
--	SELECT @site_id=SiteId FROM INSERTED

--	--TODO - IMplement the actual summary here

--	EXEC sites_summary_update @site_id

--GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------320 Create Trigger TR_Colon_Therapeutic_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Colon_Therapeutic_Delete', 'TR';
GO

--CREATE TRIGGER TR_Colon_Therapeutic_Delete
--ON [Colon Therapeutic]
--AFTER DELETE
--AS 
--	--DECLARE @PatientNo VARCHAR(50)
--	--DECLARE @EpisodeNo INT
--	--DECLARE @SiteNo INT
--	DECLARE @site_id INT

--	--SELECT @PatientNo=[Patient No], @EpisodeNo=[Episode No], @SiteNo=[Site No] FROM DELETED
--	SELECT @site_id=SiteId FROM DELETED

--	EXEC sites_summary_update @site_id

--GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------321 Create Trigger TR_UpperGIAbnoLumen_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoLumen_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoLumen_Insert
ON ERS_UpperGIAbnoLumen
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM INSERTED

	EXEC abnormalities_lumen_summary_update @site_id
	EXEC sites_summary_update @site_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------322 Create Trigger TR_UpperGIAbnoLumen_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoLumen_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoLumen_Delete
ON ERS_UpperGIAbnoLumen
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------323 Create Trigger TR_UpperGIAbnoMalignancy_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoMalignancy_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoMalignancy_Insert
ON ERS_UpperGIAbnoMalignancy
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @Cancer VARCHAR(10)
	SELECT @site_id=SiteId,
			@Cancer = (CASE WHEN (EarlyCarcinoma=1 OR AdvCarcinoma=1 OR Lymphoma=1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_malignancy_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D48P1', @Cancer			-- 'Cancer'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------324 Create Trigger TR_UpperGIAbnoMalignancy_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoMalignancy_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoMalignancy_Delete
ON ERS_UpperGIAbnoMalignancy
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D48P1', 'False'			-- 'Cancer'
	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------325 Create Trigger TR_UpperGIAbnoPostSurgery_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoPostSurgery_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoPostSurgery_Insert
ON ERS_UpperGIAbnoPostSurgery
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @PostSurgical VARCHAR(10)
	SELECT @site_id=SiteId,
			@PostSurgical = (CASE WHEN (PreviousSurgery=1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_postsurgery_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D45P1', @PostSurgical			-- 'PostSurgical'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------326 Create Trigger TR_UpperGIAbnoPostSurgery_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoPostSurgery_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoPostSurgery_Delete
ON ERS_UpperGIAbnoPostSurgery
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D45P1', 'False'			-- 'PostSurgical'

	DELETE FROM ERS_RecordCount 
	WHERE SiteId = @site_id
	AND Identifier = 'Post Surgery'

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------327 Create Trigger TR_UpperGIAbnoPolyps_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoPolyps_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoPolyps_Insert
ON ERS_UpperGIAbnoPolyps
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @Polyp VARCHAR(10), @TumorBenign VARCHAR(10), @TumorMalignant VARCHAR(10)
	SELECT @site_id=SiteId,
			@Polyp = (CASE WHEN (Sessile=1 OR Pedunculated=1 OR Submucosal=1) THEN 'True' ELSE 'False' END),
			@TumorBenign = (CASE WHEN (Sessile=1 OR Pedunculated=1 OR Submucosal=1) AND SessileBenignType > 0 THEN 'True' ELSE 'False' END),
			@TumorMalignant = (CASE WHEN (Sessile=1 OR Pedunculated=1 OR Submucosal=1) AND SessileBenignType = 0 THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_polyps_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D40P1', @Polyp			-- 'Polyp'
	EXEC diagnoses_control_save @site_id, 'D86P1', @TumorBenign		-- 'Tumor Benign'
	EXEC diagnoses_control_save @site_id, 'D87P1', @TumorMalignant	-- 'Tumor Malignant'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------328 Create Trigger TR_UpperGIAbnoPolyps_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoPolyps_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoPolyps_Delete
ON ERS_UpperGIAbnoPolyps
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D40P1', 'False'			-- 'Polyp'
	EXEC diagnoses_control_save @site_id, 'D86P1', 'False'			-- 'Tumor Benign'
	EXEC diagnoses_control_save @site_id, 'D87P1', 'False'			-- 'Tumor Malignant'
	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------329 Create Trigger TR_UpperGIIndications_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIIndications_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIIndications_Insert
ON ERS_UpperGIIndications
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC ogd_indications_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------330 Create Trigger TR_UpperGIExtentOfIntubation_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIExtentOfIntubation_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIExtentOfIntubation_Insert
ON ERS_UpperGIExtentOfIntubation
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC ogd_extentofintubation_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------331 Create Trigger TR_UpperGIDiagnoses_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIDiagnoses_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIDiagnoses_Insert
ON ERS_UpperGIDiagnoses
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC ogd_diagnoses_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------332 Create Trigger TR_UpperGIQA_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIQA_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIQA_Insert
ON ERS_UpperGIQA
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC ogd_qa_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------332a Create Trigger TR_Visualisation.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Visualisation', 'TR';
GO

CREATE TRIGGER TR_Visualisation
ON ERS_Visualisation
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC otherdata_visualisation_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------333 Create Trigger TR_UpperGIFollowUp_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIFollowUp_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIFollowUp_Insert
ON ERS_UpperGIFollowUp
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC ogd_followup_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------334 Create Trigger TR_UpperGIAbnoDeformity_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoDeformity_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoDeformity_Insert
ON ERS_UpperGIAbnoDeformity
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @PyloricStenosis VARCHAR(10), @TumorSubmucosal VARCHAR(10)
	SELECT @site_id=SiteId,
			@PyloricStenosis = (CASE WHEN (DeformityType=4) THEN 'True' ELSE 'False' END),
			@TumorSubmucosal = (CASE WHEN (DeformityType=6) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_deformity_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D50P1', @PyloricStenosis			-- 'PyloricStenosis'
	EXEC diagnoses_control_save @site_id, 'D88P1', @TumorSubmucosal			-- 'Tumor Submucosal'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------335 Create Trigger TR_UpperGIAbnoDeformity_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoDeformity_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoDeformity_Delete
ON ERS_UpperGIAbnoDeformity
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D50P1', 'False'				-- 'PyloricStenosis'
	EXEC diagnoses_control_save @site_id, 'D88P1', 'False'				-- 'Tumor Submucosal'

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------336 Create Trigger TR_UpperGIAbnoVarices_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoVarices_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoVarices_Insert
ON ERS_UpperGIAbnoVarices
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @Varices VARCHAR(10), @VaricesBleeding VARCHAR(10), @StomachVarices VARCHAR(10)
	SELECT @site_id=SiteId, 
			@Varices = (CASE WHEN Grading > 0 AND ISNULL(Bleeding,0) <= 1 THEN 'True' ELSE 'False' END),
			@VaricesBleeding = (CASE WHEN Grading > 0 AND Bleeding > 1 THEN 'True' ELSE 'False' END),
			@StomachVarices = (CASE WHEN Grading > 0 THEN 'True' ELSE 'False' END) 
	FROM INSERTED

	EXEC abnormalities_varices_summary_update @site_id
	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D30P1', @Varices				-- 'Varices'
	EXEC diagnoses_control_save @site_id, 'D31P1', @VaricesBleeding		-- 'VaricesBleeding'
	EXEC diagnoses_control_save @site_id, 'D47P1', @StomachVarices		-- 'StomachVarices'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------337 Create Trigger TR_UpperGIAbnoVarices_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoVarices_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoVarices_Delete
ON ERS_UpperGIAbnoVarices
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D30P1', 'False'			-- 'Varices'
	EXEC diagnoses_control_save @site_id, 'D31P1', 'False'			-- 'VaricesBleeding'
	EXEC diagnoses_control_save @site_id, 'D47P1', 'False'			-- 'StomachVarices'
	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------338 Create Trigger TR_CommonAbnoVascularLesions.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_CommonAbnoVascularLesions','TR';
GO

CREATE TRIGGER [dbo].[TR_CommonAbnoVascularLesions]
ON [dbo].[ERS_CommonAbnoVascularLesions]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Telangiectasia VARCHAR(10) = 'False', @Angioma VARCHAR(10) = 'False', 
			@StomachTelangiectasia VARCHAR(10) = 'False', @PortalHypertensiveGastropathy VARCHAR(10) = 'False', 
			@TelangiectasiaAngioma VARCHAR(10) = 'False', @Angiodysplasia VARCHAR(10) = 'False', 
			@Action CHAR(1) = 'I' , @DieulafoyLesion VARCHAR(10) = 'False'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@Telangiectasia = (CASE WHEN ([Type] = 1 AND [Area] = 'Oesophagus') THEN 'True' ELSE 'False' END),
				@Angioma = (CASE WHEN ([Type] = 2 OR [Type] = 3 OR [Type] = 4) THEN 'True' ELSE 'False' END),
				@StomachTelangiectasia = (CASE WHEN ([Type]=1 AND [Area]='Stomach') THEN 'True' ELSE 'False' END),
				@PortalHypertensiveGastropathy = (CASE WHEN ([Type]=5) THEN 'True' ELSE 'False' END),
				@TelangiectasiaAngioma = (CASE WHEN ( Area='Duodenum' AND ([Type] = 1 OR [Type] = 2 OR [Type] = 3 OR [Type] = 4)) THEN 'True' ELSE 'False' END),
				@Angiodysplasia = (CASE WHEN ([Type] BETWEEN 2 AND 5) THEN 'True' ELSE 'False' END),
				@DieulafoyLesion = (CASE WHEN [Type] > 0 AND [Area] = 'Stomach' THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_vascular_lesions_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	IF ISNULL((SELECT p.ProcedureType FROM ers_sites s 
		INNER JOIN ers_procedures p ON s.ProcedureId = p.ProcedureId 
		WHERE SiteId = @site_id),0) = 2   --Check If ERCP (2), else proceed with OGD
	BEGIN
		EXEC diagnoses_control_save @site_id, 'D64P2', @Angiodysplasia					-- 'Angiodysplasia'
	END
	ELSE
	BEGIN
		EXEC diagnoses_control_save @site_id, 'D22P1', @Telangiectasia					-- 'Telangiectasia'
		EXEC diagnoses_control_save @site_id, 'D43P1', @Angioma							-- 'Angioma'
		EXEC diagnoses_control_save @site_id, 'D46P1', @StomachTelangiectasia			-- 'StomachTelangiectasia'
		EXEC diagnoses_control_save @site_id, 'D52P1', @PortalHypertensiveGastropathy	-- 'PortalHypertensiveGastropathy'
		EXEC diagnoses_control_save @site_id, 'D59P1', @TelangiectasiaAngioma			-- 'TelangiectasiaAngioma'
		EXEC diagnoses_control_save @site_id, 'D80P1', @DieulafoyLesion					-- 'Dieulafoy Lesion'
	END

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------339 Create Trigger TR_CommonAbnoVascularLesions_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'TR_CommonAbnoVascularLesions_Delete','TR';
GO

CREATE TRIGGER TR_CommonAbnoVascularLesions_Delete
ON ERS_CommonAbnoVascularLesions
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D22P1', 'False'		-- 'Telangiectasia'
	EXEC diagnoses_control_save @site_id, 'D43P1', 'False'		-- 'Angioma'
	EXEC diagnoses_control_save @site_id, 'D46P1', 'False'		-- 'StomachTelangiectasia'
	EXEC diagnoses_control_save @site_id, 'D52P1', 'False'		-- 'PortalHypertensiveGastropathy'
	EXEC diagnoses_control_save @site_id, 'D59P1', 'False'		-- 'TelangiectasiaAngioma'
	EXEC diagnoses_control_save @site_id, 'D80P1', 'False'		-- 'Dieulafoy Lesion'
	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------341 Create Proc ogd_premedication_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ogd_premedication_summary_update','S';
GO

CREATE PROCEDURE [dbo].[ogd_premedication_summary_update]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@DrugName NVARCHAR(50),
		@Dose NVARCHAR(15),
		@Units NVARCHAR(12),
		@DeliveryMethod NVARCHAR(25),
		@ProcedureTypeId INT

	SET @Summary = ''
	

	DECLARE cm CURSOR READ_ONLY FOR
	SELECT DrugName, CAST(Dose AS FLOAT), Units, DeliveryMethod  FROM ERS_UpperGIPremedication WHERE ProcedureId = @ProcedureId
	OPEN cm
	FETCH NEXT FROM cm INTO @DrugName, @Dose, @Units, @DeliveryMethod
	WHILE @@fetch_status = 0 
	BEGIN	
		--SET @summary = @summary + @DrugName + ' (' + @DeliveryMethod + ') ' + @Dose + ' ' + @Units + '<br />'
		IF @DrugName IN ('NoSedation')
		BEGIN
			SET @summary = @summary + 'No sedation/premedication'
		END
		ELSE IF @DrugName IN ('GeneralAnaesthetic')
		BEGIN
			SET @summary = @summary + 'General anaesthetic'
		END
		ELSE
		BEGIN
			SET @summary = @summary + @DrugName 
			IF @DeliveryMethod IS NOT NULL SET @summary = @summary + ' (' + @DeliveryMethod + ')'
			IF ISNULL(@Dose,0) > CONVERT(DECIMAL,0) AND @Units IS NOT NULL  SET @summary= @summary + ' '+ @Dose + ' '+ @Units	 
		END
		IF @summary<>''  SET @summary= @summary + '<br />'	
		FETCH NEXT FROM cm INTO @DrugName, @Dose, @Units, @DeliveryMethod
	END
	DEALLOCATE cm

	--PRINT @summary
	IF EXISTS(SELECT 1 FROM ERS_UpperGIPremedication_Summary WHERE ProcedureId = @ProcedureId)
	BEGIN
		DELETE FROM ERS_UpperGIPremedication_Summary WHERE ProcedureId = @ProcedureId
	END

	IF @summary <> ''
	BEGIN
		INSERT INTO ERS_UpperGIPremedication_Summary (ProcedureId, Summary)
		VALUES (@ProcedureId, @summary)
	END

	SELECT @ProcedureTypeId = ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureId

	IF @ProcedureTypeId = 10 --Bronchoscopy
	BEGIN
		SELECT @summary = @summary + ISNULL(summary, '')
		FROM ERS_BRT_BronchoDrugs 
		WHERE ProcedureId = @ProcedureId
		
		SET @summary = REPLACE(@summary, '<br /><br />', '<br />')
	END

	UPDATE ERS_ProceduresReporting
	SET PP_Premed = @summary
	WHERE ProcedureId = @ProcedureId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------340 Create Trigger TR_UpperGIPremedication_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIPremedication_Insert','TR';
GO

CREATE TRIGGER TR_UpperGIPremedication_Insert
ON ERS_UpperGIPremedication
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC ogd_premedication_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------340a Create Trigger TR_Sites_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_Sites_Insert','TR';
GO

CREATE TRIGGER TR_Sites_Insert
ON [dbo].[ERS_Sites]
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM INSERTED

	EXEC sites_summary_update @site_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------342 Create Trigger TR_UpperGIRx_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIRx_Insert','TR';
GO

CREATE TRIGGER TR_UpperGIRx_Insert
ON ERS_UpperGIRx
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM INSERTED

	EXEC ogd_rx_summary_update @procedure_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------343 Create Trigger TR_UpperGIAbnoHiatusHernia_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoHiatusHernia_Delete','TR';
GO

CREATE TRIGGER TR_UpperGIAbnoHiatusHernia_Delete
ON ERS_UpperGIAbnoHiatusHernia
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D20P1', 'False'		-- 'HiatusHernia Oesophagus'
	EXEC diagnoses_control_save @site_id, 'D61P1', 'False'		-- 'HiatusHernia Stomach'
	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------344 Create Trigger TR_UpperGIAbnoHiatusHernia_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoHiatusHernia_Insert','TR';
GO

CREATE TRIGGER TR_UpperGIAbnoHiatusHernia_Insert
ON ERS_UpperGIAbnoHiatusHernia
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @HiatusHernia VARCHAR(10)
	SELECT @site_id=SiteId, @HiatusHernia = (CASE WHEN Sliding=1 OR Paraoesophageal=1 THEN 'True' ELSE 'False' END) FROM INSERTED

	EXEC abnormalities_hiatus_hernia_summary_update @site_id
	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D20P1', @HiatusHernia	-- 'HiatusHernia'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------345 Create Trigger TR_UpperGIAbnoBarrett_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoBarrett_Insert','TR';
GO

CREATE TRIGGER TR_UpperGIAbnoBarrett_Insert
ON ERS_UpperGIAbnoBarrett
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @Summary VARCHAR(10)
	SELECT @site_id=SiteId FROM INSERTED

	EXEC abnormalities_Barrett_summary_update @site_id
	EXEC sites_summary_update @site_id

	SELECT @Summary = (CASE WHEN LEN(ISNULL(Summary,'')) > 0 THEN 'True' ELSE 'False' END) FROM ERS_UpperGIAbnoBarrett
	WHERE SiteId = @site_id

	EXEC diagnoses_control_save @site_id, 'D23P1', @Summary  --Barretts
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------346 Create Trigger TR_UpperGIAbnoBarrett_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoBarrett_Delete','TR';
GO

CREATE TRIGGER TR_UpperGIAbnoBarrett_Delete
ON ERS_UpperGIAbnoBarrett
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D23P1', 'False'  --Barretts
	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------347 Create Trigger TR_UpperGIAbnoOesophagitis_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoOesophagitis_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoOesophagitis_Insert
ON ERS_UpperGIAbnoOesophagitis
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @SuspectedCandida VARCHAR(10), @OesophagitisOther VARCHAR(10), @OesophagitisReflux VARCHAR(10)
	SELECT @site_id=SiteId, 
			@SuspectedCandida	= (CASE WHEN SuspectedCandida = 1 THEN 'True' ELSE 'False' END),
			@OesophagitisOther	= (CASE WHEN (MucosalAppearance > 1 OR Other = 1) THEN 'True' ELSE 'False' END),
			@OesophagitisReflux	= (CASE WHEN (Reflux = 1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_oesophagitis_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id , 'D27P1', @SuspectedCandida		-- 'Candida'
	EXEC diagnoses_control_save @site_id , 'D33P1', @OesophagitisOther		-- 'OesophagitisOther'
	EXEC diagnoses_control_save @site_id , 'D36P1', @OesophagitisReflux		-- 'OesophagitisReflux'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------348 Create Trigger TR_UpperGIAbnoOesophagitis_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoOesophagitis_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoOesophagitis_Delete
ON ERS_UpperGIAbnoOesophagitis
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D27P1', 'False'		-- 'Candida'
	EXEC diagnoses_control_save @site_id , 'D33P1', 'False'		-- 'OesophagitisOther'
	EXEC diagnoses_control_save @site_id , 'D36P1', 'False'		-- 'OesophagitisReflux'

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------349 Create Trigger TR_UpperGIAbnoMiscellaneous_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoMiscellaneous_Delete', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoMiscellaneous_Delete
ON ERS_UpperGIAbnoMiscellaneous
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC ogd_kpi_stricture_perforation @site_id --Update perforation text in QA for OGD KPI

	EXEC diagnoses_control_save @site_id, 'D32P1', 'False'		-- 'Diverticulum'
	EXEC diagnoses_control_save @site_id, 'D35P1', 'False'		-- 'Foreignbody'
	EXEC diagnoses_control_save @site_id, 'D24P1', 'False'		-- 'MaloryWeissTear'
	EXEC diagnoses_control_save @site_id, 'D28P1', 'False'		-- 'MotilityDisorder'
	EXEC diagnoses_control_save @site_id, 'D21P1', 'False'		-- 'Stricture'
	EXEC diagnoses_control_save @site_id, 'D25P1', 'False'		-- 'TumourBenign'
	EXEC diagnoses_control_save @site_id, 'D29P1', 'False'		-- 'TumourProbablyBenign'
	EXEC diagnoses_control_save @site_id, 'D34P1', 'False'		-- 'TumourMalignant'
	EXEC diagnoses_control_save @site_id, 'D37P1', 'False'		-- 'TumourProbablyMalignant'
	EXEC diagnoses_control_save @site_id, 'D26P1', 'False'		-- 'Ulcer'
	EXEC diagnoses_control_save @site_id, 'D38P1', 'False'		-- 'Web'
	EXEC diagnoses_control_save @site_id, 'D71P1', 'False'		-- 'SchatzkiRing'
	EXEC diagnoses_control_save @site_id, 'D67P1', 'False'		-- 'ExtrinsicCompression'
	EXEC diagnoses_control_save @site_id, 'D69P1', 'False'		-- 'Pharyngeal Pouch'
	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------350 Create Trigger TR_UpperGIAbnoMiscellaneous_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_UpperGIAbnoMiscellaneous_Insert', 'TR';
GO

CREATE TRIGGER TR_UpperGIAbnoMiscellaneous_Insert
ON ERS_UpperGIAbnoMiscellaneous
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @Diverticulum VARCHAR(10), @Foreignbody VARCHAR(10), @MaloryWeissTear VARCHAR(10), 
			@MotilityDisorder VARCHAR(10), @Stricture VARCHAR(10), @TumourBenign VARCHAR(10), @TumourProbablyBenign VARCHAR(10),
			@TumourMalignant VARCHAR(10), @TumourProbablyMalignant VARCHAR(10), @Ulcer VARCHAR(10), @Web VARCHAR(10), @SchatzkiRing VARCHAR(10), 
			@ExtrinsicCompression VARCHAR(10), @PharyngealPouch VARCHAR(10)

	SELECT @site_id=SiteId, 
			@Diverticulum = (CASE WHEN Diverticulum = 1 THEN 'True' ELSE 'False' END), 
			@Foreignbody = (CASE WHEN Foreignbody = 1 THEN 'True' ELSE 'False' END),
			@MaloryWeissTear = (CASE WHEN Mallory = 1 THEN 'True' ELSE 'False' END),
			@MotilityDisorder = (CASE WHEN MotilityDisorder = 1 THEN 'True' ELSE 'False' END),
			@Stricture = (CASE WHEN (Stricture = 1) THEN 'True' ELSE 'False' END),
			@TumourBenign = (CASE WHEN (Tumour = 1 AND TumourType = 1 AND TumourProbably <> 1) THEN 'True' ELSE 'False' END),
			@TumourProbablyBenign = (CASE WHEN (Tumour = 1 AND TumourType = 1 AND TumourProbably = 1) THEN 'True' ELSE 'False' END),
			@TumourMalignant = (CASE WHEN (Tumour = 1 AND TumourType = 2 AND TumourProbably <> 1) THEN 'True' ELSE 'False' END),
			@TumourProbablyMalignant = (CASE WHEN (Tumour = 1 AND TumourType = 2 AND TumourProbably = 1) THEN 'True' ELSE 'False' END),
			@Ulcer = (CASE WHEN (Ulceration = 1) THEN 'True' ELSE 'False' END),
			@Web = (CASE WHEN (Web = 1) THEN 'True' ELSE 'False' END),
			@SchatzkiRing = (CASE WHEN (SchatzkiRing = 1) THEN 'True' ELSE 'False' END),
			@ExtrinsicCompression = (CASE WHEN (ExtrinsicCompression = 1) THEN 'True' ELSE 'False' END),
			@PharyngealPouch = (CASE WHEN (Pharyngeal = 1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC ogd_kpi_stricture_perforation @site_id --Update perforation text in QA for OGD KPI

	EXEC abnormalities_miscellaneous_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D32P1', @Diverticulum			-- 'Diverticulum'
	EXEC diagnoses_control_save @site_id, 'D35P1', @Foreignbody				-- 'Foreignbody'
	EXEC diagnoses_control_save @site_id, 'D24P1', @MaloryWeissTear			-- 'MaloryWeissTear'
	EXEC diagnoses_control_save @site_id, 'D28P1', @MotilityDisorder		-- 'MotilityDisorder'
	EXEC diagnoses_control_save @site_id, 'D21P1', @Stricture				-- 'Stricture'
	EXEC diagnoses_control_save @site_id, 'D25P1', @TumourBenign			-- 'TumourBenign'
	EXEC diagnoses_control_save @site_id, 'D29P1', @TumourProbablyBenign	-- 'TumourProbablyBenign'
	EXEC diagnoses_control_save @site_id, 'D34P1', @TumourMalignant			-- 'TumourMalignant'
	EXEC diagnoses_control_save @site_id, 'D37P1', @TumourProbablyMalignant	-- 'TumourProbablyMalignant'
	EXEC diagnoses_control_save @site_id, 'D26P1', @Ulcer					-- 'Ulcer'
	EXEC diagnoses_control_save @site_id, 'D38P1', @Web						-- 'Web'
	EXEC diagnoses_control_save @site_id, 'D71P1', @SchatzkiRing			-- 'SchatzkiRing'
	EXEC diagnoses_control_save @site_id, 'D67P1', @ExtrinsicCompression	-- 'ExtrinsicCompression'
	EXEC diagnoses_control_save @site_id, 'D69P1', @PharyngealPouch			-- 'Pharyngeal Pouch
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------351 Create Trigger TR_CommonAbnoDiverticulum_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_CommonAbnoDiverticulum_Insert','TR';
GO
EXEC DropIfExist 'TR_CommonAbnoDiverticulum_Delete','TR';
GO

EXEC DropIfExist 'TR_CommonAbnoDiverticulum','TR';
GO

CREATE TRIGGER [dbo].[TR_CommonAbnoDiverticulum]
ON [dbo].[ERS_CommonAbnoDiverticulum]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Diverticulum VARCHAR(10) = 'False',
			@Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
			@Diverticulum = (CASE WHEN (Pseudodiverticulum = 1 OR Congenital1stPart = 1 OR Congenital2ndPart = 1 OR Other=1) THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_diverticulum_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D57P1', @Diverticulum					-- 'Diverticulum'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------352 Create Trigger TR_CommonAbnoTumour_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'TR_CommonAbnoTumour_Insert','TR';
GO
EXEC DropIfExist 'TR_CommonAbnoTumour_Delete','TR';
GO

EXEC DropIfExist 'TR_CommonAbnoTumour','TR';
GO

CREATE TRIGGER [dbo].[TR_CommonAbnoTumour]
ON [dbo].[ERS_CommonAbnoTumour]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @DuoPolyp VARCHAR(10) = 'False', @Tumour VARCHAR(10) = 'False',
			@ERCPTumour VARCHAR(10) = 'False', 
			@Action CHAR(1) = 'I',
			@DuoTumourBenign VARCHAR(10) = 'False', @DuoTumourMalignan VARCHAR(10) = 'False'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@DuoPolyp = (CASE WHEN ([Type] = 1) THEN 'True' ELSE 'False' END),
				@Tumour = (CASE WHEN ([Type] = 2) THEN 'True' ELSE 'False' END),
				@ERCPTumour = (CASE WHEN ([Type] IN (2,3)) THEN 'True' ELSE 'False' END),
				@DuoTumourBenign = (CASE WHEN ([Type] = 1) THEN 'True' ELSE 'False' END),
				@DuoTumourMalignan = (CASE WHEN ([Type] IN (2,4)) THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_tumour_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D58P1', @DuoPolyp			-- 'DuoPolyp'
	EXEC diagnoses_control_save @site_id, 'D55P1', @Tumour				-- 'Tumour'
	EXEC diagnoses_control_save @site_id, 'D55P2', @ERCPTumour			-- 'ERCP Tumour'
	EXEC diagnoses_control_save @site_id, 'D92P1', @DuoTumourBenign		-- 'Tumour Benign'
	EXEC diagnoses_control_save @site_id, 'D93P1', @DuoTumourMalignan		-- 'Tumour Benign'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------353 Create Trigger TR_CommonAbnoDuodenitis_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_CommonAbnoDuodenitis_Insert','TR';
GO
EXEC DropIfExist 'TR_CommonAbnoDuodenitis_Delete','TR';
GO

EXEC DropIfExist 'TR_CommonAbnoDuodenitis','TR';
GO

CREATE TRIGGER [dbo].[TR_CommonAbnoDuodenitis]
ON [dbo].[ERS_CommonAbnoDuodenitis]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Duodenitis VARCHAR(10) = 'False', @Erosive VARCHAR(10) = 'False', @NonErosive VARCHAR(10) = 'False',
			@Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@Duodenitis = (CASE WHEN (Duodenitis = 1) THEN 'True' ELSE 'False' END),
				@Erosive = (CASE WHEN (Erosions = 1) THEN 'True' ELSE 'False' END),
				@NonErosive = (CASE WHEN (Duodenitis = 1 AND Erosions = 0) THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_duodenitis_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D53P1', @Duodenitis					-- 'Duodenitis'
	EXEC diagnoses_control_save @site_id, 'D90P1', @Erosive						-- 'Erosive'
	EXEC diagnoses_control_save @site_id, 'D91P1', @NonErosive					-- 'Non Erosive'

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------354 Create Trigger TR_CommonAbnoDuodenalUlcer_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_CommonAbnoDuodenalUlcer_Insert','TR';
GO
EXEC DropIfExist 'TR_CommonAbnoDuodenalUlcer_Delete','TR';
GO

EXEC DropIfExist 'TR_CommonAbnoDuodenalUlcer','TR';
GO

CREATE TRIGGER [dbo].[TR_CommonAbnoDuodenalUlcer]
ON [dbo].[ERS_CommonAbnoDuodenalUlcer]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @DuoUlcer VARCHAR(10) = 'False',
			@DuoMultipleUlcer VARCHAR(10) = 'False',
			@Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@DuoUlcer = (CASE WHEN (Ulcer = 1 AND (Quantity=1 OR ISNULL(Quantity,0) = 0)) THEN 'True' ELSE 'False' END),
				@DuoMultipleUlcer = (CASE WHEN (Ulcer = 1 AND Quantity>1) THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_duodenal_ulcer_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D60P1', @DuoUlcer			-- 'DuoUlcer'
	EXEC diagnoses_control_save @site_id, 'D56P1', @DuoMultipleUlcer	-- 'DuoMultipleUlcer'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------355 Create Trigger TR_CommonAbnoScaring_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_CommonAbnoScaring','TR';
GO

CREATE TRIGGER [dbo].[TR_CommonAbnoScaring]
ON [dbo].[ERS_CommonAbnoScaring]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Scar VARCHAR(10) = 'False', @PylorusStenosis VARCHAR(10) = 'False',
			@Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@Scar = (CASE WHEN (DuodUlcerScar = 1) THEN 'True' ELSE 'False' END),
				@PylorusStenosis = (CASE WHEN (PyloricStenosis = 1) THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_scaring_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D54P1', @Scar			-- 'Scar'
	EXEC diagnoses_control_save @site_id, 'D50P1', @PylorusStenosis	-- 'Pylorus Stenosis'

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------356 Create Trigger TR_CommonAbnoAtrophic_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_CommonAbnoAtrophic_Insert', 'TR';
GO

CREATE TRIGGER TR_CommonAbnoAtrophic_Insert
ON ERS_CommonAbnoAtrophic
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM INSERTED

	EXEC abnormalities_atrophic_summary_update @site_id
	EXEC sites_summary_update @site_id
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------361 Create Trigger TR_CommonAbnoScaring_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_CommonAbnoScaring_Delete', 'TR';
GO

CREATE TRIGGER TR_CommonAbnoScaring_Delete
ON ERS_CommonAbnoScaring
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D54P1', 'False'			-- 'Scar'
	EXEC diagnoses_control_save @site_id, 'D50P1', 'False'			-- 'Pylorus Stenosis'
	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------362 Create Trigger TR_CommonAbnoAtrophic_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_CommonAbnoAtrophic_Delete', 'TR';
GO

CREATE TRIGGER TR_CommonAbnoAtrophic_Delete
ON ERS_CommonAbnoAtrophic
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------363 Create Trigger TR_ColonAbnoCalibre_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoCalibre_Insert', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoCalibre_Insert
ON ERS_ColonAbnoCalibre
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @StrictureInflammatory VARCHAR(10), @StrictureMalignant VARCHAR(10), @StricturePostoperative VARCHAR(10)
	SELECT @site_id=SiteId,
			@StrictureInflammatory = (CASE WHEN (Stricture=1 AND StrictureType=5) THEN 'True' ELSE 'False' END),
			@StrictureMalignant = (CASE WHEN (Stricture=1 AND StrictureType=4) THEN 'True' ELSE 'False' END),
			@StricturePostoperative = (CASE WHEN (Stricture=1 AND StrictureType=3) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_calibre_summary_update @site_id
	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D65P3', @StrictureInflammatory		-- 'StrictureInflammatory'
	EXEC diagnoses_control_save @site_id, 'D66P3', @StrictureMalignant			-- 'StrictureMalignant'
	EXEC diagnoses_control_save @site_id, 'D67P3', @StricturePostoperative		-- 'StricturePostoperative'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------364 Create Trigger TR_ColonAbnoCalibre_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoCalibre_Delete', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoCalibre_Delete
ON ERS_ColonAbnoCalibre
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D65P3', 'False'		-- 'StrictureInflammatory'
	EXEC diagnoses_control_save @site_id, 'D66P3', 'False'		-- 'StrictureMalignant'
	EXEC diagnoses_control_save @site_id, 'D67P3', 'False'		-- 'StricturePostoperative'
	EXEC sites_summary_update @site_id

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_ColonAbnoMiscellaneous_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoMiscellaneous_Insert', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoMiscellaneous_Insert
ON ERS_ColonAbnoMiscellaneous
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId
	FROM INSERTED

	EXEC abnormalities_colon_miscellaneous_summary_update @site_id
	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_ColonAbnoMiscellaneous_Delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoMiscellaneous_Delete', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoMiscellaneous_Delete
ON ERS_ColonAbnoMiscellaneous
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'infer_mucosa_diagnoses', 'S'
GO

CREATE PROCEDURE [dbo].[infer_mucosa_diagnoses]
(
	@SiteId INT,
	@LoggedInUserId INT
)
AS
-- =============================================
-- All the items which were under Diagnoses screen (as UGI) are being saved under this SP
-- Diagnoses been moved to Miscellaneous and Mucosa under Abnormalities, to be inferred and report under “Diagnoses” section of the report
-- =============================================

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	DECLARE @ProcedureID INT,
	@ColonNormal BIT,
	@ColonRestNormal BIT,
	@Colitis BIT,
	@Ileitis BIT,
	@Proctitis BIT,
	@ColitisType VARCHAR(15),
	@ColitisExtent VARCHAR(15),
	@ColonList VARCHAR(1500),
	--@ColonOtherDiagnosis VARCHAR(MAX),
	@MayoScore VARCHAR(15),
	@SEScore VARCHAR(15)

	select * from ers_sites
	
  	SELECT @ProcedureId = p.ProcedureId
	FROM ERS_Sites s
	JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE SiteId = @SiteId

	SELECT @ColonNormal = 1		FROM [ERS_Diagnoses] WHERE ProcedureID = @ProcedureID AND Value = '1' AND IsOtherData = 1 AND MatrixCode = 'ColonNormal'
	SELECT @ColonRestNormal = 1 FROM [ERS_Diagnoses] WHERE ProcedureID = @ProcedureID AND Value = '1' AND IsOtherData = 1 AND MatrixCode = 'ColonRestNormal'

	DELETE FROM [ERS_Diagnoses] WHERE ProcedureID = @ProcedureID AND IsOtherData = 1

	SELECT @ColonList = CASE WHEN [Crohn] = 1 THEN 'D70P3,' ELSE '' END +
      CASE WHEN [Fistula] = 1 THEN 'D71P3,' ELSE '' END +
      CASE WHEN [ForeignBody] = 1 THEN 'D72P3,' ELSE '' END +
      CASE WHEN [Lipoma] = 1 THEN 'D73P3,' ELSE '' END +
      CASE WHEN [Melanosis] = 1 THEN 'D74P3,' ELSE '' END +
      CASE WHEN [Parasites] = 1 THEN 'D75P3,' ELSE '' END +
      CASE WHEN [PneumatosisColi] = 1 THEN 'D76P3,' ELSE '' END +
      CASE WHEN [PolyposisSyndrome] = 1 THEN 'D77P3,' ELSE '' END +
      CASE WHEN [PostoperativeAppearance] = 1 THEN 'D78P3,' ELSE '' END +
      CASE WHEN [PseudoObstruction] = 1 THEN 'D9P3,' ELSE '' END 
	FROM ERS_ColonAbnoMiscellaneous
	WHERE SiteId = @SiteId

	select @ColonList
	IF ISNULL(@ColonList,'') <> ''
	BEGIN
		INSERT INTO [ERS_Diagnoses] (ProcedureID, MatrixCode, Value, Region, IsOtherData, WhoCreatedId, WhenCreated)
		SELECT @ProcedureId, [item], CONVERT(VARCHAR(MAX),'True'), 'Colon', 1, @LoggedInUserId, GETDATE() FROM dbo.fnSplitString(@ColonList,',')
	END

	SELECT @Colitis=[InflammatoryColitis]			,@Ileitis=[InflammatoryIleitis]			,@Proctitis=[InflammatoryProctitis]			,@ColitisType=[InflammatoryDisorder]
			,@ColitisExtent=[InflammatoryExtent]	,@MayoScore=[InflammatoryMayoScore]		,@SEScore=[InflammatorySESCrohn]
	FROM ERS_ColonAbnoMucosa
	WHERE SiteId = @SiteId


	INSERT INTO [ERS_Diagnoses] (ProcedureID, MatrixCode, SiteId, Value, Region, IsOtherData, WhoCreatedId, WhenCreated)
	--SELECT @ProcedureId, [item], CONVERT(VARCHAR(MAX),'True'), 'Colon', 1, @LoggedInUserId, GETDATE() FROM dbo.fnSplitString(@ColonList,',')
	--UNION
	SELECT @ProcedureId, 'ColonNormal', NULL, CONVERT(VARCHAR(MAX),@ColonNormal), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColonNormal = 1 
	UNION
	SELECT @ProcedureId, 'ColonRestNormal', NULL, CONVERT(VARCHAR(MAX),@ColonRestNormal), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColonRestNormal = 1 
	UNION
	SELECT @ProcedureId, 'Colitis', @SiteId, CONVERT(VARCHAR(MAX),@Colitis), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @Colitis = 1 
	UNION
	SELECT @ProcedureId, 'Ileitis', @SiteId, CONVERT(VARCHAR(MAX),@Ileitis), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @Ileitis = 1 
	UNION
	SELECT @ProcedureId, 'Proctitis', @SiteId, CONVERT(VARCHAR(MAX),@Proctitis), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @Proctitis = 1 
	UNION
	SELECT @ProcedureId, 'ColitisType', @SiteId, CONVERT(VARCHAR(MAX),@ColitisType), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColitisType <> '' 
	UNION
	SELECT @ProcedureId, 'ColitisExtent', @SiteId, CONVERT(VARCHAR(MAX),@ColitisExtent), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColitisExtent <> '' AND @ColitisExtent <> '0'
	UNION
	--SELECT @ProcedureId, 'ColonOtherDiagnosis', CONVERT(VARCHAR(MAX),@ColonOtherDiagnosis), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @ColonOtherDiagnosis <> '' 
	--UNION
	SELECT @ProcedureId, 'MayoScore', @SiteId, CONVERT(VARCHAR(MAX),@MayoScore), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @MayoScore <> ''  AND @MayoScore <> '0'
	UNION
	SELECT @ProcedureId, 'SEScore', @SiteId, CONVERT(VARCHAR(MAX),@SEScore), 'Colon', 1, @LoggedInUserId, GETDATE() WHERE @SEScore <> '' AND @SEScore <> '0'

	--EXEC ogd_diagnoses_summary_update @ProcedureId;

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------365 Create Triggers on ColonAbnoMucosa.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoMucosa_Insert', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoMucosa_Insert
ON ERS_ColonAbnoMucosa
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @RedundantRectal VARCHAR(10), @HasUlcer VARCHAR(10), @UserID as int
	SELECT @site_id=SiteId, 
		@RedundantRectal = (CASE WHEN (RedundantRectal=1) THEN 'True' ELSE 'False' END),
		@HasUlcer = (CASE WHEN (SmallUlcers=1 OR LargeUlcers=1 OR PleomorphicUlcers=1 OR SerpiginousUlcers=1 
								OR AphthousUlcers=1 OR ConfluentUlceration=1 OR DeepUlceration=1 OR SolitaryUlcer=1)
								THEN 'True' ELSE 'False' END),
		@UserID = (CASE WHEN ISNULL(WhoUpdatedId,0) = 0 THEN WhoCreatedId ELSE WhoUpdatedId END)
	FROM INSERTED

	EXEC abnormalities_mucosa_summary_update @site_id
	EXEC sites_summary_update @site_id

	EXEC infer_mucosa_diagnoses @site_id, @UserID

	EXEC diagnoses_control_save @site_id, 'D15P3', @RedundantRectal		-- 'Redundant anterior rectal mucosa'
	EXEC diagnoses_control_save @site_id, 'D80P3', @HasUlcer			-- 'Rectal ulcer(s)', D83P3 for 'Colonic ulcer(s)'
GO

--------------------

EXEC DropIfExist 'TR_ColonAbnoMucosa_Delete', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoMucosa_Delete
ON ERS_ColonAbnoMucosa
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D15P3', 'False'		-- 'Redundant anterior rectal mucosa'

	EXEC sites_summary_update @site_id

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------366 Create Triggers on ColonAbnoDiverticulum.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoDiverticulum_Insert', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoDiverticulum_Insert
ON ERS_ColonAbnoDiverticulum
AFTER INSERT, UPDATE 
AS 
	--If Mucosal Inflammation is switch ON, then whether the other attributes are on or off, the diagnosis is Diverticulitis. 
	--If Mucosal Inflammation is switched OFF then the other attributes (if ON) give a diagnosis of Diverticulosis.
	DECLARE @site_id INT, @Diverticulosis VARCHAR(10), @MucosalInflammation VARCHAR(10)
	SELECT @site_id=SiteId,
			@MucosalInflammation = (CASE WHEN (MucosalInflammation=1) THEN 'True' ELSE 'False' END),
			@Diverticulosis = (CASE WHEN (ISNULL(MucosalInflammation,0)=0 AND (CircMuscleHypertrophy=1 OR NarrowingTortuosity=1 OR Quantity>0)) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_colon_diverticulum_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D5P3', @MucosalInflammation		-- Diverticulitis
	EXEC diagnoses_control_save @site_id, 'D1P3', @Diverticulosis			-- 'Diverticulosis'
GO




EXEC DropIfExist 'TR_ColonAbnoDiverticulum_Delete', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoDiverticulum_Delete
ON ERS_ColonAbnoDiverticulum
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D5P3', 'False'		-- Diverticulitis
	EXEC diagnoses_control_save @site_id, 'D1P3', 'False'		-- 'Diverticulosis'

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------367 Create Proc abnormalities_colon_haemorrhage_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_haemorrhage_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_haemorrhage_save]
(
	@SiteId INT,
	@None BIT,
	@Artificial BIT,
	@Lesions BIT,
	@Melaena BIT,
	@Mucosal BIT,
	@Purpura BIT,
	@Transported BIT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	

	IF (@None = 0 AND @Artificial = 0 AND @Lesions = 0 AND @Melaena = 0 AND @Mucosal = 0 AND @Purpura = 0 AND @Transported = 0)
		BEGIN
		IF EXISTS (SELECT 1 FROM [ERS_ColonAbnoHaemorrhage] WHERE SiteId = @SiteId)
		BEGIN
			DELETE FROM [ERS_ColonAbnoHaemorrhage] 
			WHERE SiteId = @SiteId

			DELETE FROM ERS_RecordCount 
			WHERE SiteId = @SiteId
			AND Identifier = 'Haemorrhage'
		END
	END

	ELSE IF NOT EXISTS (SELECT 1 FROM [ERS_ColonAbnoHaemorrhage] WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO [ERS_ColonAbnoHaemorrhage] (
			SiteId,
			[None],
			Artificial,
			Lesions ,
			Melaena,
			Mucosal,
			Purpura,
			Transported,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Artificial,
			@Lesions,
			@Melaena,
			@Mucosal,
			@Purpura,
			@Transported,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Haemorrhage',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			[ERS_ColonAbnoHaemorrhage]
		SET 
			[None] = @None,
			Artificial = @Artificial,
			Lesions = @Lesions,
			Melaena = @Melaena,
			Mucosal = @Mucosal,
			Purpura = @Purpura,
			Transported = @Transported,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------367 Create Triggers on ColonAbnoLesions.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoLesions_Insert', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoLesions_Insert
ON ERS_ColonAbnoLesions
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @ColonicPolyp VARCHAR(10), @RectalPolyp VARCHAR(10), @ColorectalCancer VARCHAR(10), @BenignTumour VARCHAR(10),
			 @ProbablyMalignantTumour VARCHAR(10)
	SELECT @site_id=SiteId,
			@ColonicPolyp = (CASE WHEN (Sessile=1 OR Pedunculated=1) THEN 'True' ELSE 'False' END),
			@RectalPolyp = (CASE WHEN (Sessile=1 OR Pedunculated=1) THEN 'True' ELSE 'False' END),
			@ColorectalCancer = (CASE WHEN ((Submucosal=1  AND SubmucosalProbably<>1 AND SubmucosalType=2) OR (Villous=1 AND VillousProbably<>1 AND VillousType=2) OR 
				(Ulcerative=1 AND UlcerativeProbably<>1 AND UlcerativeType=2) Or (Stricturing=1 AND StricturingProbably<>1 AND StricturingType=2) 
				OR (Polypoidal=1 AND PolypoidalProbably<>1 AND PolypoidalType=2)) THEN 'True' ELSE 'False' END),
			@ProbablyMalignantTumour = (CASE WHEN ((Submucosal=1  AND SubmucosalProbably=1 AND SubmucosalType=2) OR (Villous=1 AND VillousProbably=1 AND VillousType=2) OR 
				(Ulcerative=1 AND UlcerativeProbably=1 AND UlcerativeType=2) Or (Stricturing=1 AND StricturingProbably=1 AND StricturingType=2) 
				OR (Polypoidal=1 AND PolypoidalProbably=1 AND PolypoidalType=2)) THEN 'True' ELSE 'False' END),
			@BenignTumour = (CASE WHEN ((Submucosal=1 AND SubmucosalType=1) OR (Villous=1 AND VillousType=1) OR 
				(Ulcerative=1 AND UlcerativeType=1) Or (Stricturing=1 AND StricturingType=1) 
				OR (Polypoidal=1 AND PolypoidalType=1)) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_colon_lesions_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D12P3', @ColonicPolyp			-- 'ColonicPolyp'
	EXEC diagnoses_control_save @site_id, 'D4P3', @RectalPolyp				-- 'RectalPolyp'
	EXEC diagnoses_control_save @site_id, 'D69P3', @ColorectalCancer		-- 'Colorectal cancer'
	EXEC diagnoses_control_save @site_id, 'D6P3', @BenignTumour				-- 'Benign colonic tumour'
	EXEC diagnoses_control_save @site_id, 'D8P3', @ProbablyMalignantTumour	-- 'Malignant colonic tumour'
GO




EXEC DropIfExist 'TR_ColonAbnoLesions_Delete', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoLesions_Delete
ON ERS_ColonAbnoLesions
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D12P3', 'False'	-- 'ColonicPolyp'
	EXEC diagnoses_control_save @site_id, 'D4P3', 'False'	-- 'RectalPolyp'
	EXEC diagnoses_control_save @site_id, 'D69P3', 'False'	-- 'Colorectal cancer'
	EXEC diagnoses_control_save @site_id, 'D6P3', 'False'	-- 'Benign colonic tumour'
	EXEC diagnoses_control_save @site_id, 'D11P3', 'False'	-- 'Benign rectal tumour'
	EXEC diagnoses_control_save @site_id, 'D8P3', 'False'	-- 'Malignant colonic tumour'
	EXEC diagnoses_control_save @site_id, 'D13P3', 'False'	-- 'Malignant rectal tumour'

	EXEC sites_summary_update @site_id

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------367a Create Proc abnormalities_colon_haemorrhage_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_haemorrhage_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_haemorrhage_summary_update]
(
	@SiteId INT
)
AS
SET NOCOUNT ON
	
DECLARE 
	@summary VARCHAR (8000),
	@tempsummary VARCHAR (1000),
	@None BIT,
	@Artificial BIT,
	@Lesions BIT,
	@Melaena BIT,
	@Mucosal BIT,
	@Purpura BIT,
	@Transported BIT,

	@procId INT,
	@procType INT,
	@region varchar(200)

SET @summary = ''
SET @tempsummary = ''

SELECT @procId = p.ProcedureId,@procType = p.ProcedureType, @region = Region
	FROM ERS_Sites s
	JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	JOIN ERS_Regions r ON s.RegionId = r.RegionId
	WHERE SiteId = @SiteId

SELECT 
	@None=[None],
	@Artificial =[Artificial],
	@Lesions =[Lesions],
	@Melaena =[Melaena],
	@Mucosal =[Mucosal],
	@Purpura =[Purpura],
	@Transported =[Transported]
FROM
	[ERS_ColonAbnoHaemorrhage]
WHERE
	SiteId = @SiteId

DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
DECLARE @XMLlist XML

IF @Artificial = 1 INSERT INTO @tmpDiv (Val) VALUES('artifactual bleeding') 
IF @Lesions = 1 INSERT INTO @tmpDiv (Val) VALUES('bleeding from lesions')
IF @Melaena = 1 
	BEGIN
		INSERT INTO @tmpDiv (Val) VALUES('melaena from the ileocaecal valve')
		--IF @procType=3 AND @region='Caecum' INSERT INTO @tmpDiv (Val) VALUES('melaena from Ileocecal valve')
		--ELSE INSERT INTO @tmpDiv (Val) VALUES('melaena')
	END
IF @Mucosal = 1 INSERT INTO @tmpDiv (Val) VALUES('mucosal bleeding')
IF @Purpura = 1 INSERT INTO @tmpDiv (Val) VALUES('purpura coli')
IF @Transported = 1 INSERT INTO @tmpDiv (Val) VALUES('transported blood')
IF @None = 1 INSERT INTO @tmpDiv (Val) VALUES('No haemorrhage')


IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary =  dbo.fnBuildString(@XMLlist)
			DELETE FROM @tmpDiv
		END

	--IF @Summary <> '' 
	--BEGIN
	--	SET @Summary = dbo.fnFirstLetterUpper(@Summary)
	--END

-- Finally, update the summary in Haemorrhage table
UPDATE ERS_ColonAbnoHaemorrhage 
SET Summary = @summary 
WHERE SiteId = @SiteId


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------367b Create Triggers on ColonAbnoHaemorrhage.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoHaemorrhage_Delete', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoHaemorrhage_Delete
ON ERS_ColonAbnoHaemorrhage
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC diagnoses_control_save @site_id, 'D84P3', 'False'		-- 'Haemorrhage'
	EXEC sites_summary_update @site_id

GO



EXEC DropIfExist 'TR_ColonAbnoHaemorrhage_Insert', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoHaemorrhage_Insert
ON ERS_ColonAbnoHaemorrhage
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @haemorrhage VARCHAR(10)
	SELECT @site_id=SiteId,
		@haemorrhage = (CASE WHEN (Artificial=1 OR Lesions=1 OR Melaena=1 OR Mucosal=1 OR Purpura=1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_colon_haemorrhage_summary_update @site_id
	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D84P3', @haemorrhage			-- 'Haemorrhage'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------368 Create Proc abnormalities_colon_vascularity_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_vascularity_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_vascularity_save]
(
	@SiteId INT,
	@None BIT,
	@Indistinct BIT,
	@Exaggerated BIT,
	@Attenuated BIT,
	@Telangeiectasia BIT,
	@TelangeiectasiaMultiple BIT,
	@TelangeiectasiaQuantity INT,
	@Angiodysplasia BIT,
	@AngiodysplasiaMultiple BIT,
	@AngiodysplasiaQuantity INT,
	@AngiodysplasiaSize INT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	

	IF (@None = 0 AND @Indistinct = 0 AND @Exaggerated = 0 AND @Attenuated = 0 AND @Telangeiectasia = 0 AND @Angiodysplasia = 0)

	BEGIN
		IF EXISTS (SELECT 1 FROM [ERS_ColonAbnoVascularity] WHERE SiteId = @SiteId)
		BEGIN
			DELETE FROM [ERS_ColonAbnoVascularity] 
			WHERE SiteId = @SiteId

			DELETE FROM ERS_RecordCount 
			WHERE SiteId = @SiteId
			AND Identifier = 'vascularity'
		END
	END

	ELSE IF NOT EXISTS (SELECT 1 FROM [ERS_ColonAbnovascularity] WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO [ERS_ColonAbnovascularity] (
		SiteId ,
		[None] ,
		Indistinct,
		Exaggerated,
		Attenuated,
		Telangeiectasia,
		TelangeiectasiaMultiple,
		TelangeiectasiaQuantity,
		Angiodysplasia,
		AngiodysplasiaMultiple,
		AngiodysplasiaQuantity,
		AngiodysplasiaSize,
		WhoCreatedId,
		WhenCreated) 
		VALUES (
		@SiteId,
		@None,
		@Indistinct,
		@Exaggerated,
		@Attenuated,
		@Telangeiectasia,
		@TelangeiectasiaMultiple,
		@TelangeiectasiaQuantity,
		@Angiodysplasia,
		@AngiodysplasiaMultiple,
		@AngiodysplasiaQuantity,
		@AngiodysplasiaSize,
		@LoggedInUserId,
		GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'vascularity',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			[ERS_ColonAbnovascularity]
		SET 

		SiteId =@SiteId,
	[None] = @None,
	Indistinct = @Indistinct,
	Exaggerated = @Exaggerated,
	 Attenuated = @Attenuated,
	Telangeiectasia = @Telangeiectasia,
	TelangeiectasiaMultiple = @TelangeiectasiaMultiple,
	TelangeiectasiaQuantity = @TelangeiectasiaQuantity,
	Angiodysplasia = @Angiodysplasia,
	AngiodysplasiaMultiple = @AngiodysplasiaMultiple,
	AngiodysplasiaQuantity = @AngiodysplasiaQuantity,
	AngiodysplasiaSize = @AngiodysplasiaSize,
	WhoUpdatedId = @LoggedInUserId,
	WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;



GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------368a Create Proc abnormalities_colon_vascularity_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_vascularity_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_vascularity_summary_update]
(
	@SiteId INT
)
AS
SET NOCOUNT ON
	
DECLARE 
	@summary VARCHAR (8000),
	@None BIT,
	@Indistinct BIT,
	@Exaggerated BIT,
	@Attenuated BIT,
	@Telangeiectasia BIT,
	@TelangeiectasiaMultiple BIT,
	@TelangeiectasiaQuantity INT,
	@Angiodysplasia BIT,
	@AngiodysplasiaMultiple BIT,
	@AngiodysplasiaQuantity INT,
	@AngiodysplasiaSize INT,

	@procId INT,
	@procType INT,
	@region varchar(200)

SET @summary = ''

SELECT @procId = p.ProcedureId,@procType = p.ProcedureType, @region = Region
	FROM ERS_Sites s
	JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	JOIN ERS_Regions r ON s.RegionId = r.RegionId
	WHERE SiteId = @SiteId

SELECT 
    @None = [None], 
	@Indistinct = [Indistinct],
	@Exaggerated = [Exaggerated],
	@Attenuated = [Attenuated],
	@Telangeiectasia = [Telangeiectasia],
	@TelangeiectasiaMultiple =[TelangeiectasiaMultiple],
	@TelangeiectasiaQuantity = [TelangeiectasiaQuantity],
	@Angiodysplasia =[Angiodysplasia],
	@AngiodysplasiaMultiple = [AngiodysplasiaMultiple],
	@AngiodysplasiaQuantity = [AngiodysplasiaQuantity],
	@AngiodysplasiaSize = [AngiodysplasiaSize]
FROM
	[ERS_ColonAbnoVascularity]
WHERE
	SiteId = @SiteId
	
DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
DECLARE @XMLlist XML	
DECLARE @temp varchar(1000)

IF @Indistinct = 1 INSERT INTO @tmpDiv (Val) VALUES('indistinct') 
IF @Exaggerated = 1 INSERT INTO @tmpDiv (Val) VALUES('exaggerated') 
IF @Attenuated= 1 INSERT INTO @tmpDiv (Val) VALUES('attenuated with neovascularisation') 

IF @Angiodysplasia = 1 
	BEGIN
		SET @temp=''
		IF @AngiodysplasiaMultiple=1
			BEGIN 
			SET @temp = @temp + 'multiple angiodysplasia'
			END
		IF  @AngiodysplasiaQuantity> 0
			BEGIN
			SET @temp = @temp + (CASE WHEN @AngiodysplasiaQuantity = 1 THEN '' ELSE Cast(@AngiodysplasiaQuantity as varchar(50))+' ' END)+ 'angiodysplasia' 
			END
		IF @AngiodysplasiaSize>0 
			BEGIN
			IF @temp =''  SET  @temp = 'angiodysplasia (largest ' + cast(@AngiodysplasiaSize as varchar(50)) + 'mm)'
			ELSE SET @temp= @temp + ' (largest ' + cast(@AngiodysplasiaSize as varchar(50)) + 'mm)'
			END
		IF @temp='' SET @temp= 'angiodysplasia'
		INSERT INTO @tmpDiv (Val) VALUES(@temp) 
	END

IF @Telangeiectasia = 1 
	BEGIN
	SET @temp = ''
		IF @TelangeiectasiaMultiple=1
		BEGIN 
			SET @temp= @temp + 'multiple telangiectasis' 
		END
		IF @TelangeiectasiaQuantity> 0
		BEGIN
			SET @temp= @temp + (CASE WHEN @TelangeiectasiaQuantity = 1 THEN 'telangiectasis' ELSE cast(@TelangeiectasiaQuantity as varchar(50))+' telangiectases' END)
		END
		IF @temp='' SET @temp= 'telangiectasis'
		INSERT INTO @tmpDiv (Val) VALUES(@temp) 
	END

IF @None = 1 INSERT INTO @tmpDiv (Val) VALUES('No vascular lesions') 

IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary =  dbo.fnBuildString(@XMLlist)
			DELETE FROM @tmpDiv
		END

	IF @Summary <> '' 
	BEGIN
		SET @Summary = dbo.fnFirstLetterUpper(@Summary)
	END

-- Finally, update the summary in vascularity table
UPDATE ERS_ColonAbnovascularity 
SET Summary = @summary 
WHERE SiteId = @SiteId



GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------368b Create Triggers on ColonAbnoVascularity.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoVascularity_Delete', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoVascularity_Delete
ON ERS_ColonAbnoVascularity
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	
	EXEC diagnoses_control_save @site_id, 'D64P3', 'False'		-- 'Angiodysplasia'
	EXEC diagnoses_control_save @site_id, 'D14P3', 'False'		-- 'ColonTelangiectasia'

	EXEC sites_summary_update @site_id

GO



EXEC DropIfExist 'TR_ColonAbnoVascularity_Insert', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoVascularity_Insert
ON ERS_ColonAbnoVascularity
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @Angiodysplasia VARCHAR(10), @ColonTelangiectasia VARCHAR(10)
	SELECT @site_id=SiteId,
			@Angiodysplasia = (CASE WHEN (Angiodysplasia=1) THEN 'True' ELSE 'False' END),
			@ColonTelangiectasia = (CASE WHEN (Telangeiectasia=1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_colon_vascularity_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D64P3', @Angiodysplasia			-- 'Angiodysplasia'
	EXEC diagnoses_control_save @site_id, 'D14P3', @ColonTelangiectasia		-- 'ColonTelangiectasia'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------369 Create Proc abnormalities_colon_perianallesions_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_perianallesions_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_perianallesions_save]
(
	@SiteId INT,
	@None BIT,
	@Haemorrhoids BIT,
	@FirstDegree BIT,
	@SecondDegree BIT,
	@ThirdDegree BIT,
	@Quantity INT,
	@PerianalSkin BIT,
	@PerianalCancer BIT,
	@PerianalWarts BIT,
	@HerpesSimplex BIT,
	@AnalFissure BIT,
	@Acute BIT,
	@Chronic BIT,
	@PerianalFistula BIT,
	@BandingPiles BIT,
	@BandingNum INT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT
DECLARE @Insert BIT = 0

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	

	IF (@None = 0 AND @Haemorrhoids = 0 AND @PerianalSkin = 0 AND @PerianalCancer = 0 AND @PerianalWarts = 0 AND @HerpesSimplex = 0  AND @AnalFissure = 0 AND @Acute = 0  AND @Chronic = 0 AND @PerianalFistula = 0)

	BEGIN
		IF EXISTS (SELECT 1 FROM [ERS_ColonAbnoperianallesions] WHERE SiteId = @SiteId)
		BEGIN
			DELETE FROM [ERS_ColonAbnoperianallesions] 
			WHERE SiteId = @SiteId

			DELETE FROM ERS_RecordCount 
			WHERE SiteId = @SiteId
			AND Identifier = 'perianal lesions'
		END
	END

	ELSE IF NOT EXISTS (SELECT 1 FROM [ERS_ColonAbnoperianallesions] WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO [ERS_ColonAbnoperianallesions] (
			SiteId ,
			[None] ,
			Haemorrhoids,
			FirstDegree,
			SecondDegree,
			ThirdDegree,
			Quantity,
			PerianalSkin,
			PerianalCancer,
			PerianalWarts,
			HerpesSimplex,
			AnalFissure,
			Acute,
			Chronic,
			PerianalFistula,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Haemorrhoids,
			@FirstDegree,
			@SecondDegree,
			@ThirdDegree,
			@Quantity,
			@PerianalSkin,
			@PerianalCancer,
			@PerianalWarts,
			@HerpesSimplex,
			@AnalFissure,
			@Acute,
			@Chronic,
			@PerianalFistula,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'perianal lesions',
			1)

		SET @Insert=1
	END

	ELSE
	BEGIN
		UPDATE 
			[ERS_ColonAbnoperianallesions]
		SET 
			SiteId =@SiteId,
			[None] = @None,
			Haemorrhoids = @Haemorrhoids,
			FirstDegree = @FirstDegree,
			SecondDegree = @SecondDegree,
			ThirdDegree = @ThirdDegree,
			Quantity = @Quantity,
			PerianalSkin = @PerianalSkin,
			PerianalCancer = @PerianalCancer,
			PerianalWarts = @PerianalWarts,
			HerpesSimplex = @HerpesSimplex,
			AnalFissure = @AnalFissure,
			Acute = @Acute,
			Chronic = @Chronic,
			PerianalFistula = @PerianalFistula,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId

		SET @Insert=1
	END

	--Save Banding Piles in ERS_UpperGITherapeutics
	IF (@Insert=1)
	BEGIN
		IF @FirstDegree = 1 OR @SecondDegree = 1 OR @ThirdDegree = 1 OR @Quantity > 0 
		BEGIN
			IF NOT EXISTS (SELECT 1 FROM ERS_UpperGITherapeutics WHERE SiteId = @SiteId)
			BEGIN
				INSERT INTO ERS_UpperGITherapeutics (SiteId,	BandingPiles,	BandingNum, CarriedOutRole, WhoCreatedId, WhenCreated) 
				VALUES (@SiteId,	@BandingPiles,	@BandingNum, 1, @LoggedInUserId, GETDATE())

				IF NOT EXISTS (SELECT 1 FROM ERS_RecordCount WHERE ProcedureId = @proc_id AND SiteId = @SiteId AND Identifier = 'Therapeutic Procedures')
				BEGIN
					INSERT INTO ERS_RecordCount ([ProcedureId],	[SiteId], [Identifier], [RecordCount])
					VALUES (@proc_id, @SiteId, 'Therapeutic Procedures', 1)
				END 
			END
			ELSE IF EXISTS (SELECT 1 FROM ERS_UpperGITherapeutics WHERE SiteId = @SiteId AND CarriedOutRole = 1)
			BEGIN
				UPDATE ERS_UpperGITherapeutics
				SET BandingPiles = @BandingPiles,						
					BandingNum = @BandingNum,
					WhoUpdatedId = @LoggedInUserId,
					WhenUpdated = GETDATE()
				WHERE 
					SiteId = @SiteId AND
					CarriedOutRole = 1
			END
			ELSE
			BEGIN
				UPDATE ERS_UpperGITherapeutics
				SET BandingPiles = @BandingPiles,						
					BandingNum = @BandingNum,
					WhoUpdatedId = @LoggedInUserId,
					WhenUpdated = GETDATE()
				WHERE 
					SiteId = @SiteId AND
					CarriedOutRole = 2
			END
		END
	END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------369a Create Proc abnormalities_colon_perianallesions_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_colon_perianallesions_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_colon_perianallesions_summary_update]
(
	@SiteId INT
)
AS
SET NOCOUNT ON
	
DECLARE 
	@summary VARCHAR (8000),
	@None BIT,
	@Haemorrhoids BIT,
	@FirstDegree BIT,
	@SecondDegree BIT,
	@ThirdDegree BIT,
	@Quantity INT,
	@PerianalSkin BIT,
	@PerianalCancer BIT,
	@PerianalWarts BIT,
	@HerpesSimplex BIT,
	@AnalFissure BIT,
	@Acute BIT,
	@Chronic BIT,
	@PerianalFistula BIT,

	@procId INT,
	@procType INT,
	@region varchar(200)

SET @summary = ''

SELECT @procId = p.ProcedureId,@procType = p.ProcedureType, @region = Region
	FROM ERS_Sites s
	JOIN ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	JOIN ERS_Regions r ON s.RegionId = r.RegionId
	WHERE SiteId = @SiteId

SELECT 
   @None =[None] ,
	@Haemorrhoids = [Haemorrhoids],
	@FirstDegree = [FirstDegree],
	@SecondDegree = [SecondDegree],
	@ThirdDegree = [ThirdDegree],
	@Quantity = [Quantity],
	@PerianalSkin = [PerianalSkin],
	@PerianalCancer = [PerianalCancer],
	@PerianalWarts = [PerianalWarts],
	@HerpesSimplex = [HerpesSimplex],
	@AnalFissure = [AnalFissure],
	@Acute = [Acute],
	@Chronic = [Chronic],
	@PerianalFistula = [PerianalFistula]
FROM
	[ERS_ColonAbnoperianallesions]
WHERE
	SiteId = @SiteId

DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
DECLARE @XMLlist XML	
DECLARE @temp varchar(1000)

IF @Haemorrhoids = 1 
	BEGIN
		SET @temp =''
		IF @Quantity>1 SET @temp = @temp + cast(@Quantity as varchar(50))+' haemorrhoids'
		ELSE SET @temp= @temp + 'haemorrhoid'
		IF @FirstDegree=1 SET @temp= @temp + ' (1st degree)'
		IF @SecondDegree=1 SET @temp= @temp + ' (2nd degree)'
		IF @ThirdDegree=1 SET @temp= @temp + ' (3rd degree)'
		INSERT INTO @tmpDiv (Val) VALUES(@temp)
	END

IF @PerianalSkin = 1 INSERT INTO @tmpDiv (Val) VALUES('skin tag') 
IF @PerianalCancer= 1 INSERT INTO @tmpDiv (Val) VALUES('perianal cancer') 
IF @PerianalWarts= 1 INSERT INTO @tmpDiv (Val) VALUES('perianal warts')  
IF @HerpesSimplex = 1 INSERT INTO @tmpDiv (Val) VALUES('herpes simplex') 

IF @AnalFissure =1
	BEGIN
	SET @temp =''
	IF  @AnalFissure = 1 AND @Chronic = 1 AND @Acute = 1  SET @temp  = @temp  + 'acute and chronic anal fissure'
	ELSE IF @AnalFissure = 1 AND @Acute = 1 SET @temp  = @temp  + 'acute anal fissure'
	ELSE IF  @AnalFissure = 1 AND @Chronic = 1 SET @temp  = @temp  + 'chronic anal fissure'
	ELSE IF  @AnalFissure = 1  SET @temp = @temp  + 'anal fissure'
	INSERT INTO @tmpDiv (Val) VALUES(@temp)
	END

IF @PerianalFistula= 1 INSERT INTO @tmpDiv (Val) VALUES('perianal fistula') 


IF @None = 1 INSERT INTO @tmpDiv (Val) VALUES('No peri-anal lesions') 

IF (SELECT COUNT(Val) FROM @tmpDiv) > 0 
		BEGIN
			SET @XMLlist = (SELECT Val FROM @tmpDiv FOR XML  RAW, ELEMENTS, TYPE)
			SET @summary =  dbo.fnBuildString(@XMLlist)
			DELETE FROM @tmpDiv
		END

	IF @Summary <> '' 
	BEGIN
		SET @Summary = dbo.fnFirstLetterUpper(@Summary)
	END

-- Finally, update the summary in perianallesions table
UPDATE ERS_ColonAbnoperianallesions 
SET Summary = @summary 
WHERE SiteId = @SiteId

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------369b Create Triggers on ColonAbnoPerianalLesions.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ColonAbnoPerianalLesions_Delete', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoPerianalLesions_Delete
ON ERS_ColonAbnoPerianalLesions
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED
	EXEC diagnoses_control_save @site_id, 'D68P3', 'False'		-- 'ColonAnalFissure'
	EXEC diagnoses_control_save @site_id, 'D7P3', 'False'		-- 'ColonHaemorrhoids'
	--Colonoscopy
	EXEC diagnoses_control_save @site_id, 'D81P3', 'False'		-- 'PerianalCancer'
	EXEC diagnoses_control_save @site_id, 'D82P3', 'False'		-- 'PerianalFistula'
	--Sigmoidscopy
	EXEC diagnoses_control_save @site_id, 'S81P3', 'False'		-- 'PerianalCancer'
	EXEC diagnoses_control_save @site_id, 'S82P3', 'False'		-- 'PerianalFistula'
	EXEC sites_summary_update @site_id

GO



EXEC DropIfExist 'TR_ColonAbnoPerianalLesions_Insert', 'TR';
GO

CREATE TRIGGER TR_ColonAbnoPerianalLesions_Insert
ON ERS_ColonAbnoPerianalLesions
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @ColonAnalFissure VARCHAR(10), @ColonHaemorrhoids VARCHAR(10),
			@PerianalCancer VARCHAR(10), @PerianalFistula VARCHAR(10)
	SELECT @site_id=SiteId,
			@ColonAnalFissure = (CASE WHEN (AnalFissure=1) THEN 'True' ELSE 'False' END),
			@ColonHaemorrhoids = (CASE WHEN (Haemorrhoids=1) THEN 'True' ELSE 'False' END),
			@PerianalCancer = (CASE WHEN (PerianalCancer=1) THEN 'True' ELSE 'False' END),
			@PerianalFistula = (CASE WHEN (PerianalFistula=1) THEN 'True' ELSE 'False' END)
	FROM INSERTED

	EXEC abnormalities_colon_perianallesions_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D68P3', @ColonAnalFissure		-- 'ColonAnalFissure'
	EXEC diagnoses_control_save @site_id, 'D7P3', @ColonHaemorrhoids		-- 'ColonHaemorrhoids'
	--Colonoscopy
	EXEC diagnoses_control_save @site_id, 'D81P3', @PerianalCancer		-- 'PerianalCancer'
	EXEC diagnoses_control_save @site_id, 'D82P3', @PerianalFistula		-- 'PerianalFistula'
	--Sigmoidscopy
	--EXEC diagnoses_control_save @site_id, 'S81P3', @PerianalCancer		-- 'PerianalCancer'
	EXEC diagnoses_control_save @site_id, 'S82P3', @PerianalFistula		-- 'PerianalFistula'
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------370a Create Proc colon_extent_limiting_factors_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'colon_extent_limiting_factors_summary_update','S';
GO

CREATE PROCEDURE [dbo].[colon_extent_limiting_factors_summary_update]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON
	
DECLARE 
	@RectalExam bit,
	@Retroflexion bit,
	@InsertionVia tinyint,
	@InsertionTo tinyint,
	@SpecificDistanceCm tinyint,
	@InsertionConfirmedBy int,
	@InsertionLimitedBy int,
	@DifficultiesEncountered int,
	@IleocecalValve bit,
	@TransIllumination bit,
	@IlealIntubation bit,
	@AppendicularOrifice bit,
	@TriRadiateCaecalFold bit,
	@DigitalPressure bit,
	@DegreeOfConfidence bit,
	@Positively bit,
	@WithReasonableConfidence bit,
	@TimeToCaecumMin tinyint,
	@TimeToCaecumSec tinyint,
	@TimeForWithdrawalMin tinyint,
	@TimeForWithdrawalSec tinyint
	
SELECT 
    @RectalExam = RectalExam  ,
	@Retroflexion= Retroflexion ,
	@InsertionVia = InsertionVia ,
	@InsertionTo = InsertionTo,
	@SpecificDistanceCm = SpecificDistanceCm ,
	@InsertionConfirmedBy = InsertionConfirmedBy,
	@InsertionLimitedBy = InsertionLimitedBy,
	@DifficultiesEncountered = DifficultiesEncountered,
	@IleocecalValve = IleocecalValve ,
	@TransIllumination= TransIllumination,
	@IlealIntubation= IlealIntubation,
	@AppendicularOrifice= AppendicularOrifice,
	@TriRadiateCaecalFold=TriRadiateCaecalFold  ,
	@DigitalPressure= DigitalPressure,
	@DegreeOfConfidence=DegreeOfConfidence ,
	@Positively= Positively,
	@WithReasonableConfidence = WithReasonableConfidence ,
	@TimeToCaecumMin= TimeToCaecumMin,
	@TimeToCaecumSec= TimeToCaecumSec,
	@TimeForWithdrawalMin= TimeForWithdrawalMin,
	@TimeForWithdrawalSec=TimeForWithdrawalSec 
FROM
	[ERS_ColonExtentOfIntubation]
WHERE
	ProcedureID = @ProcedureID
	
DECLARE @tmpDiv TABLE(Val VARCHAR(MAX))
DECLARE @XMLlist XML	
DECLARE @temp varchar(1000)
DECLARE @ScopeType varchar(50), @summary varchar(5000) =''
DECLARE @A varchar(5000), @B VARCHAR(5000), @Rectal varchar(500), @Retro varchar(500),@InsertionPoint varchar(50), @ProcType int



SET @Rectal =''
SET @A =''
SET @Retro = ''

SET @ProcType = (SELECT  ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureID)

	IF @ProcType = 4 
		BEGIN
		SET @ScopeType = 'sigmoidoscope'
		END
	 ELSE 
		BEGIN 
		SET @ScopeType = 'colonoscope'
		END

	IF @RectalExam = 1 
		BEGIN
		SET @Rectal = 'A digital rectal examination was performed.'
		END
		ELSE 
		BEGIN
		SET @Rectal = 'A digital rectal examination was not performed.'
		END

	IF @Retroflexion = 1 SET @Retro = 'The scope was retroflexed in the rectum.'

	IF @InsertionTo= 6
		BEGIN
		SET @A = @A +  'There was complete insertion of the '  + @ScopeType
		END
		ELSE
		BEGIN
		SET @A = @A + 'The ' + @ScopeType +  ' was inserted'
		END
		
	SET @B= ''

	IF @InsertionTo= 1
	BEGIN
	IF @SpecificDistanceCm > 0 SET @B = ' to ' +  cast(@SpecificDistanceCm as varchar(50))  + 'cm'
	ELSE SET @B=''
	END

	IF @InsertionVia = 1 SET @A = @A + ' via the anus'  + @B
	IF @InsertionVia = 2 SET @A = @A + ' via colostomy'  + @B
	IF @InsertionVia = 3 SET @A = @A + ' via loop colostomy'  + @B
	IF @InsertionVia = 4 SET @A = @A + ' via caecostomy'  + @B
	IF @InsertionVia = 5 SET @A = @A + ' via ileostomy'  + @B

SET @InsertionPoint =''

IF @InsertionTo <> 1 AND @InsertionTo <> 6 
	BEGIN
	IF @InsertionTo = 10 SET @InsertionPoint = 'rectum'
	IF @InsertionTo = 14 SET @InsertionPoint = 'recto-sigmoid'
	IF @InsertionTo = 17 SET @InsertionPoint = 'distal sigmoid'
	IF @InsertionTo = 3 SET @InsertionPoint = 'proximal sigmoid'
	IF @InsertionTo = 7 SET @InsertionPoint = 'distal descending'
	IF @InsertionTo = 11 SET @InsertionPoint = 'proximal descending'	
	IF @InsertionTo = 15 SET @InsertionPoint = 'splenic flexure'
	IF @InsertionTo = 18 SET @InsertionPoint = 'distal transverse'
	IF @InsertionTo = 4 SET @InsertionPoint = 'mid transverse'
	IF @InsertionTo = 8 SET @InsertionPoint = 'proximal transverse'
	IF @InsertionTo = 12 SET @InsertionPoint = 'hepatic flexure'
	IF @InsertionTo = 16 SET @InsertionPoint = 'distal ascending'
	IF @InsertionTo = 19 SET @InsertionPoint = 'proximal ascending'	
	IF @InsertionTo = 5 SET @InsertionPoint = 'caecum'	
	IF @InsertionTo = 9 SET @InsertionPoint = 'terminal ileum'	
	IF @InsertionTo = 13 SET @InsertionPoint = 'neo-terminal ileum'
	IF @InsertionTo = 30 SET @InsertionPoint = 'anastomosis'
	IF @InsertionTo = 31 SET @InsertionPoint = 'ileo-colon anastomosis'
	IF @InsertionTo = 32 SET @InsertionPoint = 'pouch'
	END

IF @InsertionPoint <> '' SET @A = @A + ' to the ' + @InsertionPoint

IF charindex( 'to the',@A)  = 0 AND charindex( 'via the',@A)  = 0 SET @A = ''

SET @B = ''

IF @InsertionConfirmedBy > 0 SET @B = 'insertion confirmed by ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Colon_Extent_Insertion_Comfirmed_By' AND [ListItemNo] = @InsertionConfirmedBy)
IF @InsertionLimitedBy > 0 
	BEGIN
	IF LEN(@B) >0  SET @B = @B + ' and limited by ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Colon_Extent_Insertion_Limited_By' AND [ListItemNo] = @InsertionlimitedBy)
	ELSE SET @B = 'insertion limited by ' + (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Colon_Extent_Insertion_Limited_By' AND [ListItemNo] = @InsertionlimitedBy)
	END

IF LEN(@B) > 0
	BEGIN
	IF LEN(@A) <= 0 SET @A = @B
	ELSE SET @A = @A + ', ' + @B
	END

DECLARE @c varchar(1000)
SET @c = ''

IF @IleocecalValve = 1 SET @c ='the ileocecal valve'
IF @TransIllumination = 1 
BEGIN
IF @c<> '' SET @c = @c + ', transillumination'
ELSE SET @c = 'transillumination'
END
IF @IlealIntubation= 1
BEGIN
IF @c<> '' SET @c = @c + ', ileal intubation' 
ELSE SET @c = 'ileal intubation' 
END
IF @AppendicularOrifice =1 
BEGIN
IF @c<> '' SET @c = @c + ', the appendicular orifice'
ELSE SET @c = 'the appendicular orifice'
END
IF @TriRadiateCaecalFold = 1 
BEGIN
IF @c<> '' SET @c = @c + ', the tri-radiate caecal fold'
ELSE SET @c = 'the tri-radiate caecal fold'
END
IF @DigitalPressure= 1 
BEGIN
IF @c<> '' SET @c = @c + ', digital pressure'
ELSE SET @c = 'digital pressure'
END

IF CHARINDEX(',', @c) > 0 SET @c = Reverse(Stuff(Reverse(@c), CharIndex(',',Reverse(@c)),1,'dna '))  

--Add full stop 
SET @A = RTrim(LTRIM(@A))
IF @A <> ''  AND (@A NOT LIKE '%.')  SET @A= @A +'.'

Declare @Which varchar(500) = ' The caecum'
IF @A <> ''
BEGIN
IF @A LIKE '%caecum.' 
	BEGIN
	SET @A = LEFT(@A,LEN(@A)-1) + ','
	SET @which = ' which'
	END
END

IF @DegreeOfConfidence= 1
	BEGIN
	IF @Positively = 1 SET @A = @A + @which + ' was identified positively'
	IF @WithReasonableConfidence = 1  SET @A = @A + @Which +' was identified with reasonable confidence'
	IF LEN(@c) >0 SET @A = @A + ' by ' + @c
	END
ELSE
	BEGIN
	IF LEN(@c) >0 SET @A = @A  + ' The caecum was indentified by ' + @c
	END

--Add full stop 
SET @A = RTrim(LTRIM(@A))
IF @A <> ''  AND (@A NOT LIKE '%.')  SET @A= @A +'.'

IF @DifficultiesEncountered > 0 SET @A = @A + ' Difficulties encountered: '+ (SELECT [ListItemText] FROM ERS_Lists WHERE ListDescription = 'Colon_Extent_Difficulty_Encountered' AND [ListItemNo] = @DifficultiesEncountered)

--Add full stop 
SET @A = RTrim(LTRIM(@A))
IF @A <> ''  AND (@A NOT LIKE '%.')  SET @A= @A +'.'

IF @Rectal <> '' SET @summary = @summary + @Rectal

IF @A <> ''
BEGIN
IF @summary <> '' SET @summary = @summary + ' ' + @A
ELSE SET @summary = @A
END

IF @Retro  <> ''
BEGIN
IF @summary <> '' SET @summary = @summary + ' ' + @Retro 
ELSE SET @summary = @Retro 
END

IF @Summary <> '' 
	BEGIN
		SET @Summary = dbo.fnFirstLetterUpper(@Summary)
	END

-- Finally, update the summary in ERS_ColonExtentOfIntubation table
UPDATE ERS_ColonExtentOfIntubation 
SET Summary = @summary 
WHERE procedureID = @ProcedureID

EXEC [procedure_summary_update] @procedureID

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------370b Create Proc colon_extent_limiting_factors_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'colon_extent_limiting_factors_select','S';
GO

CREATE PROCEDURE [dbo].[colon_extent_limiting_factors_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

  SELECT [ProcedureId]
      ,(SELECT ProcedureType FROM ERS_Procedures WHERE Procedureid =@ProcedureId) as ProcedureType
      ,[RectalExam]
      ,[Retroflexion]
      ,[InsertionVia]
      ,[InsertionTo]
	  ,[SpecificDistanceCm]
      ,[InsertionConfirmedBy]
      ,[InsertionLimitedBy]
      ,[DifficultiesEncountered]
      ,[IleocecalValve]
      ,[TransIllumination]
      ,[IlealIntubation]
      ,[AppendicularOrifice]
      ,[TriRadiateCaecalFold]
      ,[DigitalPressure]
      ,[DegreeOfConfidence]
      ,[Positively]
      ,[WithReasonableConfidence]
      ,[TimeToCaecumMin]
      ,[TimeToCaecumSec]
      ,[TimeForWithdrawalMin]
      ,[TimeForWithdrawalSec]
	  ,[TimeToCaecumMin_Photo]
      ,[TimeToCaecumSec_Photo]
      ,[TimeForWithdrawalMin_Photo]
      ,[TimeForWithdrawalSec_Photo]
	  ,[Abandoned]
	  ,[NED_RectalExam]
      ,[NED_Retroflexion]
      ,[NED_InsertionTo]
      ,[NED_SpecificDistanceCm]
      ,[NED_InsertionConfirmedBy]
      ,[NED_InsertionLimitedBy]
      ,[NED_DifficultiesEncountered]
      ,[NED_IleocecalValve]
      ,[NED_TransIllumination]
      ,[NED_IlealIntubation]
      ,[NED_AppendicularOrifice]
      ,[NED_TriRadiateCaecalFold]
      ,[NED_DigitalPressure]
      ,[NED_DegreeOfConfidence]
      ,[NED_Positively]
      ,[NED_WithReasonableConfidence]
      ,[NED_TimeToCaecumMin]
      ,[NED_TimeToCaecumSec]
      ,[NED_TimeForWithdrawalMin]
      ,[NED_TimeForWithdrawalSec]
      ,[NED_Abandoned]
      ,[ICVDistance]
      ,[NumberLoops]
      ,[Summary]
  FROM [dbo].[ERS_ColonExtentOfIntubation]
  WHERE ProcedureId = @ProcedureId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------370c Create Proc colon_extent_limiting_factors_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'colon_extent_limiting_factors_save','S';
GO

CREATE PROCEDURE [dbo].[colon_extent_limiting_factors_save]
(
    @ProcedureId int,
	@RectalExam bit,
	@Retroflexion bit,
	@InsertionVia tinyint,
	@InsertionTo tinyint,
	@SpecificDistanceCm tinyint,
	@InsertionConfirmedBy int,
	@InsertionLimitedBy int,
	@DifficultiesEncountered int,
	@IleocecalValve bit,
	@TransIllumination bit,
	@IlealIntubation bit,
	@AppendicularOrifice bit,
	@TriRadiateCaecalFold bit,
	@DigitalPressure bit,
	@DegreeOfConfidence bit,
	@Positively bit,
	@WithReasonableConfidence bit,
	@TimeToCaecumMin tinyint,
	@TimeToCaecumSec tinyint,
	@TimeForWithdrawalMin tinyint,
	@TimeForWithdrawalSec tinyint,
	@Abandoned bit,
	@RectalExam_NED bit,
	@Retroflexion_NED bit,
	@InsertionTo_NED tinyint,
	@SpecificDistanceCm_NED tinyint,
	@InsertionConfirmedBy_NED int,
	@InsertionLimitedBy_NED int,
	@DifficultiesEncountered_NED int,
	@IleocecalValve_NED bit,
	@TransIllumination_NED bit,
	@IlealIntubation_NED bit,
	@AppendicularOrifice_NED bit,
	@TriRadiateCaecalFold_NED bit,
	@DigitalPressure_NED bit,
	@DegreeOfConfidence_NED bit,
	@Positively_NED bit,
	@WithReasonableConfidence_NED bit,
	@TimeToCaecumMin_NED tinyint,
	@TimeToCaecumSec_NED tinyint,
	@TimeForWithdrawalMin_NED tinyint,
	@TimeForWithdrawalSec_NED tinyint,
	@Abandoned_NED bit,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
			
	IF NOT EXISTS (SELECT 1 FROM [ERS_ColonExtentOfIntubation] WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_ColonExtentOfIntubation (
			ProcedureId ,
			RectalExam ,
			Retroflexion ,
			InsertionVia,
			InsertionTo,
			SpecificDistanceCm,
			InsertionConfirmedBy,
			InsertionLimitedBy,
			DifficultiesEncountered,
			IleocecalValve,
			TransIllumination,
			IlealIntubation,
			AppendicularOrifice,
			TriRadiateCaecalFold,
			DigitalPressure,
			DegreeOfConfidence,
			Positively,
			WithReasonableConfidence,
			TimeToCaecumMin,
			TimeToCaecumSec,
			TimeForWithdrawalMin,
			TimeForWithdrawalSec,
			Abandoned,
			NED_RectalExam ,
			NED_Retroflexion ,
			NED_InsertionTo,
			NED_SpecificDistanceCm,
			NED_InsertionConfirmedBy,
			NED_InsertionLimitedBy,
			NED_DifficultiesEncountered,
			NED_IleocecalValve,
			NED_TransIllumination,
			NED_IlealIntubation,
			NED_AppendicularOrifice,
			NED_TriRadiateCaecalFold,
			NED_DigitalPressure,
			NED_DegreeOfConfidence,
			NED_Positively,
			NED_WithReasonableConfidence,
			NED_TimeToCaecumMin,
			NED_TimeToCaecumSec,
			NED_TimeForWithdrawalMin,
			NED_TimeForWithdrawalSec,
			NED_Abandoned,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@ProcedureId ,
			@RectalExam ,
			@Retroflexion ,
			@InsertionVia,
			@InsertionTo,
			@SpecificDistanceCm,
			@InsertionConfirmedBy,
			@InsertionLimitedBy,
			@DifficultiesEncountered,
			@IleocecalValve,
			@TransIllumination,
			@IlealIntubation,
			@AppendicularOrifice,
			@TriRadiateCaecalFold,
			@DigitalPressure,
			@DegreeOfConfidence,
			@Positively,
			@WithReasonableConfidence,
			@TimeToCaecumMin,
			@TimeToCaecumSec,
			@TimeForWithdrawalMin,
			@TimeForWithdrawalSec,
			@Abandoned,
			@RectalExam_NED,
			@Retroflexion_NED,
			@InsertionTo_NED,
			@SpecificDistanceCm_NED,
			@InsertionConfirmedBy_NED,
			@InsertionLimitedBy_NED,
			@DifficultiesEncountered_NED,
			@IleocecalValve_NED,
			@TransIllumination_NED,
			@IlealIntubation_NED,
			@AppendicularOrifice_NED,
			@TriRadiateCaecalFold_NED,
			@DigitalPressure_NED,
			@DegreeOfConfidence_NED,
			@Positively_NED,
			@WithReasonableConfidence_NED,
			@TimeToCaecumMin_NED,
			@TimeToCaecumSec_NED,
			@TimeForWithdrawalMin_NED,
			@TimeForWithdrawalSec_NED,
			@Abandoned_NED,
			@LoggedInUserId,
			GETDATE())

	INSERT INTO ERS_RecordCount (
		[ProcedureId],
		[SiteId],
		[Identifier],
		[RecordCount]
	)
	VALUES (
		@ProcedureId,
		NULL,
		'Extent/Limiting factors',
		1)
	END
	
	--ELSE IF (@@CompletionStatus=0)
	--BEGIN
	--	DELETE FROM ERS_ColonExtentOfIntubation 
	--	WHERE ProcedureId = @ProcedureId

	--	DELETE FROM ERS_RecordCount 
	--	WHERE ProcedureId = @ProcedureId
	--	AND Identifier = 'Extent of Intubation'
	--END

	ELSE
	BEGIN
		UPDATE 
			ERS_ColonExtentOfIntubation
		SET 
			ProcedureId =	@ProcedureId ,
			RectalExam = @RectalExam ,
			Retroflexion = @Retroflexion ,
			InsertionVia = @InsertionVia,
			InsertionTo = @InsertionTo,
			SpecificDistanceCm = @SpecificDistanceCm,
			InsertionConfirmedBy = @InsertionConfirmedBy,
			InsertionLimitedBy = @InsertionLimitedBy,
			DifficultiesEncountered =@DifficultiesEncountered,
			IleocecalValve = @IleocecalValve,
			TransIllumination = @TransIllumination,
			IlealIntubation = @IlealIntubation,
			AppendicularOrifice = @AppendicularOrifice,
			TriRadiateCaecalFold = @TriRadiateCaecalFold,
			DigitalPressure = @DigitalPressure,
			DegreeOfConfidence = @DegreeOfConfidence,
			Positively = @Positively,
			WithReasonableConfidence = @WithReasonableConfidence,
			TimeToCaecumMin = @TimeToCaecumMin,
			TimeToCaecumSec = @TimeToCaecumSec,
			TimeForWithdrawalMin = @TimeForWithdrawalMin,
			TimeForWithdrawalSec = @TimeForWithdrawalSec,
			Abandoned = @Abandoned,
			NED_RectalExam = @RectalExam_NED ,
			NED_Retroflexion = @Retroflexion_NED ,
			NED_InsertionTo = @InsertionTo_NED,
			NED_SpecificDistanceCm = @SpecificDistanceCm_NED,
			NED_InsertionConfirmedBy = @InsertionConfirmedBy_NED,
			NED_InsertionLimitedBy = @InsertionLimitedBy_NED,
			NED_DifficultiesEncountered =@DifficultiesEncountered_NED,
			NED_IleocecalValve = @IleocecalValve_NED,
			NED_TransIllumination = @TransIllumination_NED,
			NED_IlealIntubation = @IlealIntubation_NED,
			NED_AppendicularOrifice = @AppendicularOrifice_NED,
			NED_TriRadiateCaecalFold = @TriRadiateCaecalFold_NED,
			NED_DigitalPressure = @DigitalPressure_NED,
			NED_DegreeOfConfidence = @DegreeOfConfidence_NED,
			NED_Positively = @Positively_NED,
			NED_WithReasonableConfidence = @WithReasonableConfidence_NED,
			NED_TimeToCaecumMin = @TimeToCaecumMin_NED,
			NED_TimeToCaecumSec = @TimeToCaecumSec_NED,
			NED_TimeForWithdrawalMin = @TimeForWithdrawalMin_NED,
			NED_TimeForWithdrawalSec = @TimeForWithdrawalSec_NED,
			NED_Abandoned = @Abandoned_NED,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			ProcedureId = @ProcedureId

		--Incase record has been updated from photos window
		IF NOT EXISTS(SELECT 1 FROM dbo.ERS_RecordCount erc WHERE erc.ProcedureId = @ProcedureId AND erc.Identifier = 'Extent/Limiting factors')
		BEGIN
			INSERT INTO ERS_RecordCount (
				[ProcedureId],
				[SiteId],
				[Identifier],
				[RecordCount]
			)
			VALUES (
				@ProcedureId,
				NULL,
				'Extent/Limiting factors',
				1)
		END
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------370d Create Trigger TR_ERS_Extent_Limiting_Factors_Insert.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERS_Extent_Limiting_Factors_Insert', 'TR';
GO

CREATE TRIGGER TR_ERS_Extent_Limiting_Factors_Insert
ON ERS_ColonExtentOfIntubation
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedureID INT
	SELECT @procedureID = procedureID FROM INSERTED

	EXEC colon_extent_limiting_factors_summary_update @procedureID
GO


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------371 Create Trigger TR_ERS_BowelPreparation.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERS_BowelPreparation', 'TR';
GO

CREATE TRIGGER TR_ERS_BowelPreparation
ON ERS_BowelPreparation
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedureID INT
	SELECT @procedureID = procedureID FROM INSERTED

	EXEC common_bowelprep_summary_update @procedureID

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------372 Create Trigger TR_ERSViewer_Users.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
IF (NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Users'))
BEGIN
	CREATE TABLE [dbo].[Users](
		[User_ID] [nvarchar](255) NOT NULL,
		[01] [nvarchar](255) NULL,		[02] [nvarchar](255) NULL,		[03] [nvarchar](255) NULL,		[04] [nvarchar](255) NULL,		[05] [nvarchar](255) NULL,
		[06] [nvarchar](255) NULL,		[07] [nvarchar](255) NULL,		[08] [nvarchar](255) NULL,		[09] [nvarchar](255) NULL,		[10] [nvarchar](255) NULL,
		[11] [nvarchar](255) NULL,		[12] [nvarchar](255) NULL,		[13] [nvarchar](255) NULL,		[14] [nvarchar](255) NULL,		[Photoalbum path] [nvarchar](255) NULL,
		[Preference set] [nvarchar](255) NULL,							[User configuration] [nvarchar](255) NULL,						[Option] [nvarchar](255) NULL,
		[Last] [nvarchar](255) NULL,	[Since] [nvarchar](255) NULL,	[Within] [nvarchar](255) NULL,	[Order] [nvarchar](255) NULL,	[Procedures] [nvarchar](255) NULL,
		[CaStatus] [nvarchar](255) NULL,								[Exclude closed] [nvarchar](255) NULL,							[Exclude dead patients] [nvarchar](255) NULL,
		[Report 01 date range] [nvarchar](255) NULL,					[Report 01 age range] [nvarchar](255) NULL,						[Report 01 order] [nvarchar](255) NULL,
		[Report 01 to include] [nvarchar](255) NULL,					[Report 02 date range] [nvarchar](255) NULL,					[Report 02 order] [nvarchar](255) NULL,
		[Report 02 to include] [nvarchar](255) NULL,					[QAU00] [nvarchar](255) NULL,	[QAU01] [nvarchar](255) NULL,	[QAU02] [nvarchar](255) NULL,									[QAU03] [nvarchar](255) NULL,			[QAU04] [nvarchar](255) NULL,
		[QAU05] [nvarchar](255) NULL,	[QAU06] [nvarchar](255) NULL,	[QAU07] [nvarchar](255) NULL,	[QAU08] [nvarchar](255) NULL,	[QAUCM] [nvarchar](255) NULL,
		[QAUFR] [nvarchar](255) NULL,	[QAUOT] [nvarchar](255) NULL,	[QAE00] [nvarchar](255) NULL,	[QAE01] [nvarchar](255) NULL,	[QAE02] [nvarchar](255) NULL,
		[QAE03] [nvarchar](255) NULL,	[QAE04] [nvarchar](255) NULL,	[QAE05] [nvarchar](255) NULL,	[QAE06] [nvarchar](255) NULL,	[QAE07] [nvarchar](255) NULL,
		[QAE08] [nvarchar](255) NULL,	[QAECM] [nvarchar](255) NULL,	[QAEFR] [nvarchar](255) NULL,	[QAEOT] [nvarchar](255) NULL,	[QAC00] [nvarchar](255) NULL,
		[QAC01] [nvarchar](255) NULL,	[QAC02] [nvarchar](255) NULL,	[QAC03] [nvarchar](255) NULL,	[QAC04] [nvarchar](255) NULL,	[QAC05] [nvarchar](255) NULL,
		[QAC06] [nvarchar](255) NULL,	[QAC07] [nvarchar](255) NULL,	[QAC08] [nvarchar](255) NULL,	[QACCM] [nvarchar](255) NULL,	[QACFR] [nvarchar](255) NULL,
		[QACOT] [nvarchar](255) NULL,	[QAP00] [nvarchar](255) NULL,	[QAP01] [nvarchar](255) NULL,	[QAP02] [nvarchar](255) NULL,	[QAP03] [nvarchar](255) NULL,
		[QAP04] [nvarchar](255) NULL,	[QAP05] [nvarchar](255) NULL,	[QAP06] [nvarchar](255) NULL,	[QAP07] [nvarchar](255) NULL,	[QAP08] [nvarchar](255) NULL,
		[QAPCM] [nvarchar](255) NULL,	[QAPFR] [nvarchar](255) NULL,	[QAPOT] [nvarchar](255) NULL,	[StartEndTimeStatus] [nvarchar](255) NULL,
		[15] [nvarchar](5) NULL,
	 CONSTRAINT [UGI_PK_Users] PRIMARY KEY CLUSTERED 
	([User_ID] ASC) ON [PRIMARY])
END


----------------------------------------------------------
EXEC DropIfExist 'TR_ERSViewer_Users', 'TR';
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TR_ERSViewer_Users] ON [dbo].[Users]
AFTER INSERT, DELETE, UPDATE
AS
BEGIN
	DECLARE @NInserted AS INT
	DECLARE @NDeleted AS INT
	DECLARE @User_ID NVARCHAR(255)

	SELECT @NInserted = Count(*) FROM Inserted

	SELECT @NDeleted = Count(*)	FROM Deleted

	IF @NInserted > 0 AND @NDeleted = 0
	BEGIN
		INSERT INTO [ERS_Users] (
			[RecordCReated]			,[LastUpdated]			,[ExpiresOn]			,[UserName]			,[Password]				,[PasswordExpiresOn]
			,[Title]				,[Forename]				,[Surname]				,[Initials]			,[Qualifications]		,[JobTitleID]
			,[AccessID]				,[AccessRights]			,[RoleID]				,[Description]		
			,[CanRunAK]				,[IsListConsultant]		,[IsEndoscopist1]		,[IsEndoscopist2]	,[IsAssistantOrTrainee]	,[IsNurse1]
			,[IsNurse2]				,[ResetPassword]		,[Suppressed]			,[LastOperatingHospital],[LoggedOn]
			,[LastLoggedIn]			,[UGI_UserID]
			)
		SELECT [RecordCReated] = GetDate()			,[LastUpdated] = GetDate()			,[ExpiresOn] = GetDate() + 365 * 5
			,[UserName] = [User_ID]					,[Password] = [02]					,[PasswordExpiresOn] = - NULL --Getdate()+30
			,[Title] = RTrim(SubString(CASE Len([01]) - Len(Replace([01], ' ', ''))
						WHEN 0 THEN ''
						WHEN 1 THEN ''
						WHEN 2THEN RTrim(SubString([01], 1, CharIndex(' ', [01], 1)))
						ELSE RTrim(SubString([01], 1, CharIndex(' ', [01], 1)))
						END + '          ', 1, 10))
			,[Forename] = CASE Len([01]) - Len(Replace([01], ' ', ''))
				WHEN 0 THEN ''
				WHEN 1 THEN SubString([01], 1, CharIndex(' ', [01], 1) - 1)
				WHEN 2 THEN RTrim(Replace(LTrim(Replace(LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), '')), '@', '')), SubString(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), ''), CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1, len(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), '')) - CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1), ''))
				ELSE ''
				END
			,[Surname] = CASE Len([01]) - Len(Replace([01], ' ', ''))
				WHEN 0 THEN [01]
				WHEN 1 THEN Replace([01], SubString([01], 1, CharIndex(' ', [01], 1) - 1), '')
				WHEN 2 THEN SubString(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), ''), CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1, len(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), '')) - CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1)
				ELSE ''
				END
			,[Initials] = CASE Len([01]) - Len(Replace([01], ' ', ''))
				WHEN 0 THEN SubString([01], 1, 1)
				WHEN 1 THEN SubString([01], 1, 1) + SubString(LTrim(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1) - 1), '')), 1, 1)
				WHEN 2 THEN SubString(LTrim(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1) - 1), '')), 1, 1) + SubString(SubString(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), ''), CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1, len(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), '')) - CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1), 1, 1)
				ELSE ''
				END
			,[Qualifications] = 'Imported'			,[JobTitleID] = 1					,[AccessID] = 1
			,[AccessRights] = 1
			,[RoleID] = CASE 
				WHEN ISNULL([07] % 2, 1) = 0 THEN (
											SELECT TOP 1 RoleID
											FROM ERS_Roles
											WHERE RoleName = 'System Administrators')
				ELSE (SELECT TOP 1 RoleID
						FROM ERS_Roles
						WHERE RoleName = 'Read Only')
				END
			,[Description] = [01]					
			,[CanRunAK] = 0							,[IsListConsultant] = 0				,[IsEndoscopist1] = 0
			,[IsEndoscopist2] = 0					,[IsAssistantOrTrainee] = 0			,[IsNurse1] = 0
			,[IsNurse2] = 0							,[ResetPassword] = 0				
			,[Suppressed] = 0						,[LastOperatingHospital] = 0		,[LoggedOn] = 0
			,[LastLoggedIn] = GetDate()				,[UGI_UserID] = [User_ID]
		FROM Inserted
	END
	ELSE
	BEGIN
		IF @NDeleted > 0 AND @NInserted = 0
		BEGIN
			SELECT @User_ID = [User_ID]
			FROM Deleted

			IF UPPER(@User_ID) = 'ADMIN'
				RAISERROR ('ADMIN user cannot be deleted',11,1)
			ELSE
				DELETE [ERS_Users] WHERE [UGI_UserID] = @User_ID
		END
		ELSE
		BEGIN
			IF UPDATE ([01]) OR UPDATE ([02]) OR UPDATE ([07]) 
			BEGIN
				UPDATE [ERS_Users]
				SET [Password] = [02]
					,[Title] = CASE Len([01]) - Len(Replace([01], ' ', ''))
						WHEN 0 THEN ''
						WHEN 1 THEN ''
						WHEN 2 THEN RTrim(SubString([01], 1, CharIndex(' ', [01], 1)))
						ELSE RTrim(SubString([01], 1, CharIndex(' ', [01], 1)))
						END
					,[Forename] = CASE Len([01]) - Len(Replace([01], ' ', ''))
						WHEN 0 THEN ''
						WHEN 1 THEN SubString([01], 1, CharIndex(' ', [01], 1) - 1)
						WHEN 2 THEN RTrim(Replace(LTrim(Replace(LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), '')), '@', '')), SubString(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), ''), CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1, len(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), '')) - CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1), ''))
						ELSE ''
						END
					,[Surname] = CASE Len([01]) - Len(Replace([01], ' ', ''))
						WHEN 0 THEN [01]
						WHEN 1 THEN Replace([01], SubString([01], 1, CharIndex(' ', [01], 1) - 1), '')
						WHEN 2 THEN SubString(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), ''), CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1, len(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), '')) - CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1)
						ELSE ''
						END
					,[RoleID] = CASE 
						WHEN ISNULL([07] % 2, 1) = 0
							THEN (SELECT TOP 1 RoleID
									FROM ERS_Roles
									WHERE RoleName = 'System Administrators')
						ELSE (SELECT TOP 1 RoleID
								FROM ERS_Roles
								WHERE RoleName = 'Read Only')
						END
					,[Initials] = CASE Len([01]) - Len(Replace([01], ' ', ''))
						WHEN 0 THEN SubString([01], 1, 1)
						WHEN 1 THEN SubString([01], 1, 1) + SubString(LTrim(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1) - 1), '')), 1, 1)
						WHEN 2 THEN SubString(LTrim(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1) - 1), '')), 1, 1) + SubString(SubString(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), ''), CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1, len(Replace([01], SubString([01], 1, CharIndex(' ', [01], 1)), '')) - CharIndex(' ', LTrim(Replace([01], RTrim(SubString([01], 1, CharIndex(' ', [01], 1))), ''))) + 1), 1, 1)
						ELSE ''
						END
				FROM [ERS_Users] D
				INNER JOIN Inserted U
				ON D.[UGI_UserID] = U.[User_ID]
			END
		END
	END
END


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------373 ERS_AuditLog.sql table------------------------------------- [ERS_AuditLog]
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_AuditLog](
	[Id]				[bigint] IDENTITY(1,1) NOT NULL,
	[ApplicationID]		[smallint] NOT NULL,
	[AppVersion]		[varchar](30) NOT NULL,
	[UserID]			[varchar](30) NOT NULL,
	[StationID]			[nvarchar](50) NOT NULL,
	[HospitalID]		[smallint] NOT NULL,
	[OperatingHospitalID] [smallint] NOT NULL,
	[DatabaseName]		[varchar](100) NOT NULL CONSTRAINT [ERS_AuditLog_DatabaseName] DEFAULT ((N'Gastro_DB')),
	[Datestamp]			[datetime] NULL CONSTRAINT [DF_ERS_AuditLog_DateStamp]		DEFAULT (GETDATE()),
 CONSTRAINT [PK_ERS_AuditLogNew] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------374 ERS_AuditLog_Details.sql table-------------------------------------
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_AuditLog_Details](
	[Id]			[bigint]	IDENTITY(1,1) NOT NULL,	
	[ProcedureID]	[int]		NULL,
	[PatientNo]		[nvarchar](12) NULL,	
	[MasterLogID]	[bigint]	NOT NULL,
	[EventType]		[smallint]	NOT NULL,
	[Category]		[smallint]	NULL,
	[EventDescription] [nvarchar](2000) NOT NULL,
	[DateStamp]		[datetime] NULL CONSTRAINT [DF_ERS_AuditLogDetails_DateStamp]  DEFAULT (GETDATE()),
 CONSTRAINT [PK_ERS_AuditLog_Id] PRIMARY KEY CLUSTERED 
([ID] ASC) ON [PRIMARY])
GO
ALTER TABLE [dbo].[ERS_AuditLog_Details]  WITH CHECK ADD  CONSTRAINT [FK_ERS_AuditLog_Details_ERS_AuditLog] FOREIGN KEY([MasterLogID])
REFERENCES [dbo].[ERS_AuditLog] ([Id])
GO
ALTER TABLE [dbo].[ERS_AuditLog_Details] CHECK CONSTRAINT [FK_ERS_AuditLog_Details_ERS_AuditLog]
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------Stored Proc: report_procedure_monthly.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'report_procedure_monthly','S';
GO
CREATE PROCEDURE [dbo].[report_procedure_monthly] (@ProcedureYear varchar(50))
AS
BEGIN
    CREATE TABLE #Months ([Month] varchar(10), [Count] int);
    CREATE TABLE #Val ([Type] varchar(20), [Month] varchar(10), [Count] int);
	DECLARE @includeUGI BIT = 0
	DECLARE @sql NVARCHAR(MAX) = ''

	IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Colon Procedure'))
		SET @includeUGI = 1

   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Jan', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Feb', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Mar', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Apr', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'May', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Jun', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Jul', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Aug', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Sep', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Oct', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Nov', 0 );
   INSERT INTO #Months( [Month], [Count] )  VALUES( 'Dec', 0 );

	SET @sql = '
       INSERT INTO #Val( [Type], [Month], [Count] )
                 SELECT [Type], [Month], SUM([Count])
                 FROM ('
	IF @includeUGI = 1 SET @sql = @sql + 
                 'SELECT ''Colon'' AS [Type], *
                              FROM #Months
                              UNION
                              SELECT ''Colon'' AS [Type], CONVERT(varchar(3), DATENAME(month, [Procedure date])) AS [Month], COUNT([Episode No]) AS [Count]
                              FROM [Colon Procedure]
                              WHERE YEAR([Procedure date]) = ' + CONVERT(VARCHAR,@ProcedureYear) + '
                              GROUP BY DATENAME(month, [Procedure date])
                        UNION ALL
                     SELECT ''UpperGI'' AS [Type], *
                                         FROM #Months
                                         UNION
                                         SELECT ''UpperGI'' AS [Type], CONVERT(varchar(3), DATENAME(month, [Procedure date])) AS [Month], COUNT([Episode No]) AS [Count]
                                         FROM [Upper GI Procedure]
                                         WHERE YEAR([Procedure date]) = ' + CONVERT(VARCHAR,@ProcedureYear) + '
                                         GROUP BY DATENAME(month, [Procedure date])                                  
                        UNION ALL
                     SELECT ''ERCP'' AS [Type], *
                              FROM #Months
                              UNION
                              SELECT ''ERCP'' AS [Type], CONVERT(varchar(3), DATENAME(month, [Procedure date])) AS [Month], COUNT([Episode No]) AS [Count]
                              FROM [ERCP Procedure]
                              WHERE YEAR([Procedure date]) = ' + CONVERT(VARCHAR,@ProcedureYear) + '
                              GROUP BY DATENAME(month, [Procedure date])
                           UNION ALL
                     SELECT ''EUS'' AS [Type], *
                              FROM #Months
                              UNION
                              SELECT ''EUS'' AS [Type], CONVERT(varchar(3), DATENAME(month, [Procedure date])) AS [Month], COUNT([Episode No]) AS [Count]
                              FROM [EUS procedure]
                              WHERE YEAR([Procedure date]) = ' + CONVERT(VARCHAR,@ProcedureYear) + '
                              GROUP BY DATENAME(month, [Procedure date])
                     UNION ALL
                     SELECT ''Others'' AS [Type], *
                              FROM #Months                             
                      UNION ALL'
	SET @sql = @sql + '                
                     SELECT CASE p.ProcedureType WHEN 1 THEN ''UpperGI'' WHEN 3 THEN ''Colon'' WHEN 2 THEN ''ERCP'' WHEN 6 THEN ''EUS'' WHEN 7 THEN ''EUS'' ELSE ''Others'' END AS [Type], CONVERT(varchar(3), DATENAME(month, p.[CreatedOn])) AS [Month], COUNT(p.ProcedureId) AS [Count]
                              FROM ERS_Procedures p
                              WHERE YEAR(p.[CreatedOn]) = ' + CONVERT(VARCHAR,@ProcedureYear) + ' AND IsActive = 1 
                              GROUP BY DATENAME(month, p.[CreatedOn]), p.ProcedureType                            
                 ) AS rp  GROUP BY rp.[Type], rp.[Month]
                 ORDER BY DATEPART(mm, CAST([MONTH]+'' 1900'' AS datetime)) ASC;'
	EXEC sp_executesql @sql 

	ALTER TABLE #Val ADD [cOrder] int 
	UPDATE #Val SET [cOrder] = (CASE [Type] WHEN 'UpperGI' THEN 1 WHEN 'Colon' THEN 2 WHEN 'ERCP' THEN 3 WHEN 'EUS' THEN 4 WHEN 'Others' THEN 10 ELSE 5 END)
	UPDATE #Val SET [Count] = NULL WHERE [Count] = 0;

	SELECT * FROM #Val   ORDER BY DATEPART(mm, CAST([MONTH]+' 1900' AS datetime)) , [cOrder];

	DROP TABLE #Val;

	IF( OBJECT_ID('tempdb..#Months') IS NOT NULL)
	BEGIN
		DROP TABLE #Months;
       END;
END;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------Stored Proc: report_procedure_yearly.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'report_procedure_yearly','S';
GO

CREATE PROCEDURE [dbo].[report_procedure_yearly] 
AS
BEGIN
	Create Table #Years(
		   [ProcedureYear] varchar(10),
		   [Count] int
	)
	Create Table #YearsResult(
		   [Type] varchar(50),
		   [ProcedureYear] varchar(10),
		   [Count] int
	)
	DECLARE @includeUGI BIT = 0
	DECLARE @sql NVARCHAR(MAX) = ''

	IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Colon Procedure'))
		SET @includeUGI = 1

	SET @sql = '
	INSERT INTO #Years
	SELECT DISTINCT(ProcYear.ProcedureYear), 0 as [Count] FROM ('
	IF @includeUGI = 1 SET @sql = @sql + 
		' select  year([Procedure date]) as ProcedureYear from [Colon Procedure] where 1=2 and year([Procedure date]) IS NOT NULL AND  [Procedure date] > DATEADD(year, -10, GetDate()) group by year([Procedure date]) union 
		select  year([Procedure date]) as ProcedureYear  from [Upper GI Procedure] where year([Procedure date]) IS NOT NULL AND  [Procedure date] > DATEADD(year, -10, GetDate()) group by year([Procedure date]) union 
		select  year([Procedure date]) as ProcedureYear  from [ERCP Procedure] where year([Procedure date]) IS NOT NULL AND  [Procedure date] > DATEADD(year, -10, GetDate()) group by year([Procedure date]) union 
		select  year([Procedure date]) as ProcedureYear  from [EUS procedure] where year([Procedure date]) IS NOT NULL AND  [Procedure date] > DATEADD(year, -10, GetDate()) group by year([Procedure date]) union'

	SET @sql = @sql + ' SELECT  year(CreatedOn) as ProcedureYear  FROM ERS_Procedures where year(CreatedOn) IS NOT NULL AND  CreatedOn > DATEADD(year, -10, GetDate()) AND IsActive=1 GROUP BY year(CreatedOn)'
	SET @sql = @sql + ' ) as ProcYear'

	EXEC sp_executesql @sql 

	SET @sql = '
	INSERT INTO #YearsResult
	SELECT [Type],[ProcedureYear], sum([Count]) as [Count] FROM ('

	IF @includeUGI = 1 SET @sql = @sql + 
		'Select ''Colon'' as [Type], * from #Years  union
		select ''Colon'' as [Type] , year([Procedure date]) as ProcedureYear, Count([Episode No]) as [Count] from [Colon Procedure] where year([Procedure date]) IS NOT NULL AND  [Procedure date] > DATEADD(year, -10, GetDate()) group by year([Procedure date])
		union all
		Select ''UpperGI'' as [Type], * from #Years  union
		select ''UpperGI'' as [Type] , year([Procedure date]) as ProcedureYear, Count([Episode No]) as [Count] from [Upper GI Procedure] where year([Procedure date]) IS NOT NULL AND  [Procedure date] > DATEADD(year, -10, GetDate()) group by year([Procedure date]) 
		union all
		Select ''ERCP'' as [Type], * from #Years  union
		select ''ERCP'' as [Type] , year([Procedure date]) as ProcedureYear, Count([Episode No]) as [Count] from [ERCP Procedure] where year([Procedure date]) IS NOT NULL AND  [Procedure date] > DATEADD(year, -10, GetDate()) group by year([Procedure date]) 
		union all
		Select ''EUS'' as [Type], * from #Years  union
		select ''EUS'' as [Type] , year([Procedure date]) as ProcedureYear, Count([Episode No]) as [Count] from [EUS procedure] where year([Procedure date]) IS NOT NULL AND  [Procedure date] > DATEADD(year, -10, GetDate()) group by year([Procedure date])
		UNION ALL
		SELECT ''Others'' as [Type], * FROM #Years
		UNION ALL '

	SET @sql = @sql + ' SELECT CASE ProcedureType WHEN 1 THEN ''UpperGI'' WHEN 3 THEN ''Colon'' WHEN 2 THEN ''ERCP'' WHEN 6 THEN ''EUS'' WHEN 7 THEN ''EUS'' ELSE ''Others'' END AS [Type], year(CreatedOn) as ProcedureYear, Count(ProcedureId) as [Count] FROM ERS_Procedures where year(CreatedOn) IS NOT NULL AND  CreatedOn > DATEADD(year, -10, GetDate()) AND IsActive=1 GROUP BY year(CreatedOn),(CASE ProcedureType WHEN 1 THEN ''UpperGI'' WHEN 3 THEN ''Colon'' WHEN 2 THEN ''ERCP'' WHEN 6 THEN ''EUS'' WHEN 7 THEN ''EUS'' ELSE ''Others'' END)'
	SET @sql = @sql + ') as S GROUP BY [Type],[ProcedureYear]'
	EXEC sp_executesql @sql 

	ALTER TABLE #YearsResult ADD [cOrder] int
	UPDATE #YearsResult SET [cOrder] = (CASE [Type] WHEN 'UpperGI' THEN 1 WHEN 'Colon' THEN 2 WHEN 'ERCP' THEN 3 WHEN 'EUS' THEN 4 WHEN 'Others' THEN 10 ELSE 5 END)
	UPDATE #YearsResult SET [Count] = NULL WHERE [Count]=0

	SELECT * from #YearsResult ORDER BY [ProcedureYear],[cOrder] 

	If(OBJECT_ID('tempdb..#Years') Is Not Null)
	Begin
		Drop Table #Years
	End
	If(OBJECT_ID('tempdb..#YearsResult') Is Not Null)
	Begin
		Drop Table #YearsResult
	End
END

GO

--################## StoredProc: report_ListAnalysis4
--------------------------------------------------------------------------------------------------------------------
-------------------------------------Sored Proc: report_summary_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'report_summary_select','S';
GO

CREATE PROCEDURE [dbo].[report_summary_select]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	DECLARE @ProcedureType INT
	DECLARE @SQLString NVARCHAR(MAX)
	DECLARE @FieldName VARCHAR(50)
	DECLARE @NodeName VARCHAR(50)
	
	CREATE TABLE #Summary (NodeName VARCHAR(200), NodeSummary NVARCHAR(MAX))

	SELECT @ProcedureType = p.ProcedureType
	FROM ERS_Procedures p
	WHERE p.ProcedureId = @ProcedureId
	
	SELECT *
	INTO #xmlmap
	FROM ERS_XMLMap 
	WHERE [Group] = 'LS' OR (NodeName  IN ('Premedication', 'Specimens Taken', 'Instrument'))
	AND NodeName NOT IN ('InstForCareHeading')
	ORDER BY OrderID

	DECLARE report_cursor CURSOR FOR 
	SELECT FieldName FROM #xmlmap

	OPEN report_cursor 
    FETCH NEXT FROM report_cursor INTO @FieldName

    WHILE @@FETCH_STATUS = 0
    BEGIN
		SELECT @NodeName = NodeName FROM #xmlmap WHERE FieldName = @FieldName
		
		IF @FieldName = 'Endoscribe comments' SET @FieldName = 'EndoscribeComments'
		SET @SQLString = 'INSERT INTO #Summary ' + 
							' SELECT ''' + @NodeName + ''', [' + @FieldName + '] ' +
							' FROM ERS_Procedures' + 
							' WHERE ProcedureId = @ProcedureId'
		
		--print @sqlstring
		IF EXISTS(SELECT * FROM sys.columns WHERE Name =  @FieldName AND Object_ID = Object_ID(N'ERS_Procedures'))
		BEGIN
			EXEC sp_executesql @SQLString,
			N'@ProcedureId INT',
			@ProcedureId
		END
		
		-- Special case for PEG care field
		IF @NodeName = 'InstForCare'
		BEGIN
			SET @SQLString = 'UPDATE #Summary ' + 
								' SET NodeName = (SELECT [' + (SELECT FieldName FROM ERS_XMLMap WHERE NodeName = 'InstForCareHeading') + '] ' +
								' FROM ERS_Procedures' + 
								' WHERE ProcedureId = @ProcedureId)' +
								' WHERE NodeName = ''InstForCare'''
								
			IF EXISTS(SELECT * FROM sys.columns WHERE Name =  @FieldName AND Object_ID = Object_ID(N'ERS_Procedures'))
			BEGIN
				EXEC sp_executesql @SQLString,
				N'@ProcedureId INT',
				@ProcedureId
			END
		END
		-- Special case END

		FETCH NEXT FROM report_cursor INTO @FieldName
	END

    CLOSE report_cursor
    DEALLOCATE report_cursor

	SELECT * FROM #Summary

	DROP TABLE #Summary
	DROP TABLE #xmlmap

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------375 broncho_flip_diagram.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'broncho_flip_diagram','S';
GO

CREATE PROCEDURE [dbo].[broncho_flip_diagram] (@ProcedureId INT)
AS
SET NOCOUNT ON

BEGIN TRANSACTION
BEGIN TRY

    UPDATE ERS_Procedures
    SET DiagramNumber = CASE DiagramNumber WHEN 1 THEN 2 WHEN 2 THEN 1 ELSE 1 END
    WHERE ProcedureId=@ProcedureId

    DECLARE @CX DECIMAL(8,2) = 85	 --X coordinate of the central point (the origin around which the site coor will be rotated)
    DECLARE @CY DECIMAL(8,2) = 104	 --Y coordinate of the central point 
    DECLARE @angle INT = 180		 --Angle of rotation 
    DECLARE @radians DECIMAL(8,2) = (PI()/180) * @angle;
    DECLARE @cos DECIMAL(8,2) = COS(@radians)
    DECLARE @sin DECIMAL(8,2) = SIN(@radians)

	UPDATE ERS_Sites
	SET XCoordinate = CONVERT(INT, (@cos * (XCoordinate - @CX)) + (@sin * (YCoordinate - @CY)) + @CX )
		,YCoordinate = CONVERT(INT, (@cos * (YCoordinate - @CY)) + (@sin * (XCoordinate - @CX)) + @CY )
	WHERE ProcedureId = @ProcedureId
	AND (RegionId BETWEEN 165 AND 181 OR RegionId BETWEEN 217 AND 233 OR RegionId BETWEEN 269 AND 285 OR RegionId BETWEEN 321 AND 337)

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH
IF @@TRANCOUNT > 0 COMMIT TRANSACTION;
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------376a Create Proc abnormalities_duct_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duct_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duct_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	[SiteId]
    ,[Normal]
    ,[Dilated]
    ,[DilatedLength]
    ,[DilatedType]
    ,[Stricture]
    ,[StrictureLen]
    ,[UpstreamDilatation]
    ,[CompleteBlock]
    ,[Smooth]
    ,[Irregular]
    ,[Shouldered]
    ,[Tortuous]
    ,[StrictureType]
	,[StrictureProbably]
    ,[Cholangiocarcinoma]
    ,[ExternalCompression]
    ,[Fistula]
    ,[FistulaQty]
    ,[Visceral]
    ,[Cutaneous]
    ,[FistulaComments]
    ,[Stones]
    ,[StonesMultiple]
    ,[StonesQty]
    ,[StonesSize]
    ,[Cysts]
    ,[CystsMultiple]
    ,[CystsQty]
    ,[CystsDiameter]
    ,[CystsSimple]
    ,[CystsRegular]
    ,[CystsIrregular]
    ,[CystsLoculated]
    ,[CystsCommunicating]
	,[CystsCholedochal]
    ,[CystsSuspectedType]
    ,[EUSProcType]
    ,[Summary]
FROM
	ERS_ERCPAbnoDuct
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------376b Create Proc abnormalities_duct_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duct_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duct_save]
(
	@SiteId INT,
	@Normal BIT,
	@Dilated BIT,
	@DilatedLength INT,
	@DilatedType TINYINT,
	@Stricture BIT,
	@StrictureLen DECIMAL(6,1),
	@UpstreamDilatation BIT,
	@CompleteBlock BIT,
	@Smooth BIT,
	@Irregular BIT,
	@Shouldered BIT,
	@Tortuous BIT,
	@StrictureType TINYINT,
	@StrictureProbably BIT,
	@Cholangiocarcinoma BIT,
	@ExternalCompression BIT,
	@Fistula BIT,
	@FistulaQty INT,
	@Visceral BIT,
	@Cutaneous BIT,
	@FistulaComments NVARCHAR(500),
	@Stones BIT,
	@StonesMultiple BIT,
	@StonesQty INT,
	@StonesSize DECIMAL(6,1),
	@Cysts BIT,
	@CystsMultiple BIT,
	@CystsQty INT,
	@CystsDiameter DECIMAL(6,1),
	@CystsSimple BIT,
	@CystsRegular BIT,
	@CystsIrregular BIT,
	@CystsLoculated BIT,
	@CystsCommunicating BIT,
	@CystsCholedochal BIT,
	@CystsSuspectedType TINYINT,
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT
DECLARE @region VARCHAR(200)

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType,
		@region = r.Region
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	JOIN
		ERS_Regions r ON s.RegionId = r.RegionId
	WHERE 
		SiteId = @SiteId
	
	
	IF (@Normal=0 AND @Dilated=0 AND @Stricture=0 AND @Fistula=0 AND @Stones=0 AND @Cysts=0)
	BEGIN
		DELETE FROM ERS_ERCPAbnoDuct 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = CASE WHEN @region = 'Gall Bladder' THEN 'Gall Bladder'
							 ELSE 'Duct'
						END
	END		

	ELSE IF NOT EXISTS (SELECT 1 FROM ERS_ERCPAbnoDuct WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_ERCPAbnoDuct (
			[SiteId]
           ,[Normal]
           ,[Dilated]
           ,[DilatedLength]
           ,[DilatedType]
           ,[Stricture]
           ,[StrictureLen]
           ,[UpstreamDilatation]
           ,[CompleteBlock]
           ,[Smooth]
           ,[Irregular]
           ,[Shouldered]
           ,[Tortuous]
           ,[StrictureType]
		   ,[StrictureProbably]
           ,[Cholangiocarcinoma]
           ,[ExternalCompression]
           ,[Fistula]
           ,[FistulaQty]
           ,[Visceral]
           ,[Cutaneous]
           ,[FistulaComments]
           ,[Stones]
           ,[StonesMultiple]
           ,[StonesQty]
           ,[StonesSize]
           ,[Cysts]
           ,[CystsMultiple]
           ,[CystsQty]
           ,[CystsDiameter]
           ,[CystsSimple]
           ,[CystsRegular]
           ,[CystsIrregular]
           ,[CystsLoculated]
           ,[CystsCommunicating]
		   ,[CystsCholedochal]
           ,[CystsSuspectedType]
		   ,[WhoCreatedId]
		   ,[WhenCreated]) 
		VALUES (
			@SiteId,
			@Normal,
			@Dilated,
			@DilatedLength,
			@DilatedType,
			@Stricture,
			@StrictureLen,
			@UpstreamDilatation,
			@CompleteBlock,
			@Smooth,
			@Irregular,
			@Shouldered,
			@Tortuous,
			@StrictureType,
			@StrictureProbably,
			@Cholangiocarcinoma,
			@ExternalCompression,
			@Fistula,
			@FistulaQty,
			@Visceral,
			@Cutaneous,
			@FistulaComments,
			@Stones,
			@StonesMultiple,
			@StonesQty,
			@StonesSize,
			@Cysts,
			@CystsMultiple,
			@CystsQty,
			@CystsDiameter,
			@CystsSimple,
			@CystsRegular,
			@CystsIrregular,
			@CystsLoculated,
			@CystsCommunicating,
			@CystsCholedochal,
			@CystsSuspectedType,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Duct',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_ERCPAbnoDuct
		SET 
			Normal = @Normal,
			Dilated = @Dilated,
			DilatedLength = @DilatedLength,
			DilatedType = @DilatedType,
			Stricture = @Stricture,
			StrictureLen = @StrictureLen,
			UpstreamDilatation = @UpstreamDilatation,
			CompleteBlock = @CompleteBlock,
			Smooth = @Smooth,
			Irregular = @Irregular,
			Shouldered = @Shouldered,
			Tortuous = @Tortuous,
			StrictureType = @StrictureType,
			StrictureProbably = @StrictureProbably,
			Cholangiocarcinoma = @Cholangiocarcinoma,
			ExternalCompression = @ExternalCompression,
			Fistula = @Fistula,
			FistulaQty = @FistulaQty,
			Visceral = @Visceral,
			Cutaneous = @Cutaneous,
			FistulaComments = @FistulaComments,
			Stones = @Stones,
			StonesMultiple = @StonesMultiple,
			StonesQty = @StonesQty,
			StonesSize = @StonesSize,
			Cysts = @Cysts,
			CystsMultiple = @CystsMultiple,
			CystsQty = @CystsQty,
			CystsDiameter = @CystsDiameter,
			CystsSimple = @CystsSimple,
			CystsRegular = @CystsRegular,
			CystsIrregular = @CystsIrregular,
			CystsLoculated = @CystsLoculated,
			CystsCommunicating = @CystsCommunicating,
			CystsCholedochal = @CystsCholedochal,
			CystsSuspectedType = @CystsSuspectedType,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------376c Create Proc abnormalities_duct_summary_update.sql--------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_duct_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_duct_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@tempsummary VARCHAR(1000),
		@tempsummary2 VARCHAR(1000),
		@Normal BIT,
		@Dilated BIT,
		@DilatedLength INT,
		@DilatedType TINYINT,
		@Stricture BIT,
		@StrictureLen DECIMAL(6,1),
		@UpstreamDilatation BIT,
		@CompleteBlock BIT,
		@Smooth BIT,
		@Irregular BIT,
		@Shouldered BIT,
		@Tortuous BIT,
		@StrictureType TINYINT,
		@StrictureProbably BIT,
		@Cholangiocarcinoma BIT,
		@ExternalCompression BIT,
		@Fistula BIT,
		@FistulaQty INT,
		@Visceral BIT,
		@Cutaneous BIT,
		@FistulaComments NVARCHAR(500),
		@Stones BIT,
		@StonesMultiple BIT,
		@StonesQty INT,
		@StonesSize DECIMAL(6,1),
		@Cysts BIT,
		@CystsMultiple BIT,
		@CystsQty INT,
		@CystsDiameter DECIMAL(6,1),
		@CystsSimple BIT,
		@CystsRegular BIT,
		@CystsIrregular BIT,
		@CystsLoculated BIT,
		@CystsCommunicating BIT,
		@CystsCholedochal BIT,
		@CystsSuspectedType TINYINT

	SELECT 
		@Normal=Normal,
		@Dilated=Dilated,
		@DilatedLength=DilatedLength,
		@DilatedType = DilatedType,
		@Stricture=Stricture,
		@StrictureLen=StrictureLen,
		@UpstreamDilatation=UpstreamDilatation,
		@CompleteBlock=CompleteBlock,
		@Smooth=Smooth,
		@Irregular=Irregular,
		@Shouldered=Shouldered,
		@Tortuous=Tortuous,
		@StrictureType=StrictureType,
		@StrictureProbably = StrictureProbably,
		@Cholangiocarcinoma=Cholangiocarcinoma,
		@ExternalCompression=ExternalCompression,
		@Fistula=Fistula,
		@FistulaQty=FistulaQty,
		@Visceral=Visceral,
		@Cutaneous=Cutaneous,
		@FistulaComments=FistulaComments,
		@Stones=Stones,
		@StonesMultiple=StonesMultiple,
		@StonesQty=StonesQty,
		@StonesSize=StonesSize,
		@Cysts=Cysts,
		@CystsMultiple=CystsMultiple,
		@CystsQty=CystsQty,
		@CystsDiameter=CystsDiameter,
		@CystsSimple=CystsSimple,
		@CystsRegular=CystsRegular,
		@CystsIrregular=CystsIrregular,
		@CystsLoculated=CystsLoculated,
		@CystsCommunicating=CystsCommunicating,
		@CystsCholedochal=CystsCholedochal,
		@CystsSuspectedType=CystsSuspectedType
	FROM
		ERS_ERCPAbnoDuct
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @Normal = 1
		SET @summary = @summary + 'normal'
	
	ELSE 
	BEGIN
		IF @Dilated = 1
		BEGIN
			IF ISNULL(@DilatedLength,0) > 0
				SET @summary = @summary + 'dilated to ' + CONVERT(VARCHAR(5), @DilatedLength) + 'mm'
			ELSE
				SET @summary = @summary + 'dilated ducts'

			IF @DilatedType = 1
				SELECT @summary = @summary + ' with no obvious cause'
			ELSE IF @DilatedType = 2
				SELECT @summary = @summary + ' due to post cholecystectomy'
		END

		IF @Stricture = 1 
		BEGIN
			SET @tempsummary = ''
			
			IF @StrictureType = 1
				SET @tempsummary = 'benign'
			ELSE IF @StrictureType = 2
			BEGIN
				IF @Cholangiocarcinoma = 1
					SET @tempsummary = 'cholangiocarcinoma'
				IF @ExternalCompression = 1
					IF @tempsummary = '' SET @tempsummary = 'external compression (metastases)'
					ELSE SET @tempsummary = @tempsummary + ' and external compression (metastases)'
				IF @Cholangiocarcinoma = 0 AND @ExternalCompression = 0
					SET @tempsummary = 'malignant'
			END
			IF @StrictureProbably = 1
				SET @tempsummary = 'probably ' + @tempsummary

			IF ISNULL(@StrictureLen, 0) > 0
				IF @tempsummary = '' SET @tempsummary = 'length ' + dbo.fnRemoveDecTrailingZeroes(@StrictureLen) + 'cm'
				ELSE SET @tempsummary = @tempsummary + ' length ' + dbo.fnRemoveDecTrailingZeroes(@StrictureLen) + 'cm'
			IF @Smooth = 1
				IF @tempsummary = '' SET @tempsummary = 'smooth'
				ELSE SET @tempsummary = @tempsummary + '$$ smooth'
			IF @Irregular = 1
				IF @tempsummary = '' SET @tempsummary = 'irregular'
				ELSE SET @tempsummary = @tempsummary + '$$ irregular'
			IF @Shouldered = 1
				IF @tempsummary = '' SET @tempsummary = 'shouldered'
				ELSE SET @tempsummary = @tempsummary + '$$ shouldered'
			IF @Tortuous = 1
				IF @tempsummary = '' SET @tempsummary = 'tortuous'
				ELSE SET @tempsummary = @tempsummary + '$$ tortuous'
			IF @CompleteBlock = 1
				IF @tempsummary = '' SET @tempsummary = 'complete block'
				ELSE SET @tempsummary = @tempsummary + '$$ complete block'
			IF @UpstreamDilatation = 1
				IF @tempsummary = '' SET @tempsummary = 'with upstream dilatation'
				ELSE SET @tempsummary = @tempsummary + '$$ with upstream dilatation'

			IF CHARINDEX('$$', @tempsummary) > 0 SET @tempsummary = STUFF(@tempsummary, len(@tempsummary) - charindex('$$', reverse(@tempsummary)), 2, ' and')
			SET @tempsummary = REPLACE(@tempsummary, '$$', ',')

			IF @tempsummary = '' SET @tempsummary = 'Stricture'
			ELSE SET @tempsummary = 'Stricture: ' + @tempsummary

			IF @summary = '' SET @summary = @tempsummary
			ELSE SET @summary = @summary + '. ' + @tempsummary
		END

		IF @Fistula = 1
		BEGIN
			SET @tempsummary = ''
			IF @Visceral = 1
				IF @tempsummary = '' SET @tempsummary = 'visceral'
				ELSE SET @tempsummary = @tempsummary + '$$ visceral'
			IF @Cutaneous = 1
				IF @tempsummary = '' SET @tempsummary = 'cutaneous'
				ELSE SET @tempsummary = @tempsummary + '$$ cutaneous'
			IF @FistulaComments <> ''
				IF @tempsummary = '' SET @tempsummary = @FistulaComments
				ELSE SET @tempsummary = @tempsummary + '$$ ' + @FistulaComments

			IF CHARINDEX('$$', @tempsummary) > 0 SET @tempsummary = STUFF(@tempsummary, len(@tempsummary) - charindex('$$', reverse(@tempsummary)), 2, ' and')
			SET @tempsummary = REPLACE(@tempsummary, '$$', ',')
			
			IF @FistulaQty > 0
				SET @tempsummary = CONVERT(VARCHAR, @FistulaQty) + ' ' + @tempsummary

			IF @tempsummary = '' SET @tempsummary = 'Fistula'
			ELSE SET @tempsummary = 'Fistula: ' + @tempsummary

			IF @summary = '' SET @summary = @tempsummary
			ELSE SET @summary = @summary + '. ' + @tempsummary
		END
		
		IF @Stones = 1
		BEGIN
			SET @tempsummary = ''
			IF @StonesQty = 1
			BEGIN
				SET @tempsummary = 'One $$stone'
				IF @StonesSize > 0
					SET @tempsummary = REPLACE(@tempsummary, '$$', CONVERT(VARCHAR, @StonesSize) + 'cm ')
				ELSE
					SET @tempsummary = REPLACE(@tempsummary, '$$', '')
			END

			ELSE
			BEGIN
				IF @StonesMultiple = 1
				SET @tempsummary = 'Multiple stones'
			ELSE IF @StonesQty > 1
				SET @tempsummary = CONVERT(VARCHAR, @StonesQty) + ' stones'
			ELSE 
				SET @tempsummary = 'Stones'
			
			IF @StonesSize > 0
				SET @tempsummary = @tempsummary + ' (largest ' + dbo.fnRemoveDecTrailingZeroes(@StonesSize) + 'cm)'
			END
			
			IF @summary = '' SET @summary = @tempsummary
			ELSE SET @summary = @summary + '. ' + @tempsummary
		END

		IF @Cysts = 1
		BEGIN
			SET @tempsummary = ''
			IF @CystsMultiple = 1
				SET @tempsummary = @tempsummary + ' multiple'
			ELSE IF @CystsQty > 0
				IF @CystsQty = 1
					SET @tempsummary = @tempsummary + ' one'
				ELSE
					SET @tempsummary = @tempsummary + ' ' + CONVERT(VARCHAR, @CystsQty)
			
			SET @tempsummary2 = ''
			IF @CystsSimple = 1
				SET @tempsummary2 = 'simple'
			IF @CystsRegular = 1
				IF @tempsummary2 = '' SET @tempsummary2 = 'regular'
				ELSE SET @tempsummary2 = @tempsummary2 + '$$ regular'
			IF @CystsIrregular = 1
				IF @tempsummary2 = '' SET @tempsummary2 = 'irregular'
				ELSE SET @tempsummary2 = @tempsummary2 + '$$ irregular'
			IF @CystsLoculated = 1
				IF @tempsummary2 = '' SET @tempsummary2 = 'loculated'
				ELSE SET @tempsummary2 = @tempsummary2 + '$$ loculated'
			IF CHARINDEX('$$', @tempsummary2) > 0 SET @tempsummary2 = STUFF(@tempsummary2, len(@tempsummary2) - charindex('$$', reverse(@tempsummary2)), 2, ' and')
			SET @tempsummary2 = REPLACE(@tempsummary2, '$$', ',')
			
			IF @tempsummary2 <> ''
				SET @tempsummary = @tempsummary + ' ' + @tempsummary2
				
			IF @CystsDiameter > 0
				IF @CystsQty = 1
					SET @tempsummary = @tempsummary + ' ' + dbo.fnRemoveDecTrailingZeroes(@CystsDiameter) + 'cm'
				ELSE
					SET @tempsummary = @tempsummary + ' (largest ' + dbo.fnRemoveDecTrailingZeroes(@CystsDiameter) + 'cm)'
			
			IF @CystsSuspectedType = 1 SET @tempsummary = @tempsummary + ' with suspected polycystic disease'
			ELSE IF @CystsSuspectedType = 2 SET @tempsummary = @tempsummary + ' with suspected hydatid cyst'
			ELSE IF @CystsSuspectedType = 3 SET @tempsummary = @tempsummary + ' with suspected liver abscess'

			IF @CystsCommunicating = 1
				SET @tempsummary = @tempsummary + ' and communicating with biliary duct'

			IF @CystsCholedochal = 1
				SET @tempsummary = @tempsummary + ' choledochal'
				
			IF @tempsummary = '' SET @tempsummary = 'Cysts'
			ELSE SET @tempsummary = 'Cysts:' + @tempsummary

			IF @summary = '' SET @summary = @tempsummary
			ELSE SET @summary = @summary + '. ' + @tempsummary
		END
	END

	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_ERCPAbnoDuct
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------376d Create Triggers on ERS_ERCPAbnoDuct---------------------------------------
--------------------------------------------------------------------------------------------------------------------


EXEC DropIfExist 'TR_ERCPAbnoDuct_Insert','TR';
GO
EXEC DropIfExist 'TR_ERCPAbnoDuct_Delete','TR';
GO

EXEC DropIfExist 'TR_ERCPAbnoDuct','TR';
GO

CREATE TRIGGER [dbo].[TR_ERCPAbnoDuct]
ON [dbo].[ERS_ERCPAbnoDuct]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, 
			@Dilated VARCHAR(10) = 'False', 
			@DilatedType VARCHAR(10) = 'False', @Stricture VARCHAR(10) = 'False', 
			@Fistula VARCHAR(10) = 'False', @Stones VARCHAR(10) = 'False',
			@Cysts VARCHAR(10) = 'False', 
			@CystsCommunicating VARCHAR(10) = 'False', @CystsNonCommunicating VARCHAR(10) = 'False',
			@CystsCholedochal VARCHAR(10) = 'False',
			@TumourCystadenoma VARCHAR(10) = 'False', @TumourProbablyMalignant VARCHAR(10) = 'False',
			@Cholangiocarcinoma VARCHAR(10) = 'False', @ExternalCompression VARCHAR(10) = 'False',
			@Polycystic VARCHAR(10) = 'False', @HydatidCyst VARCHAR(10) = 'False',
			@LiverAbscess VARCHAR(10) = 'False', @PostCholecystectomy VARCHAR(10) = 'False',
			@StrictureProbablyBenign VARCHAR(10) = 'False', @StrictureProbably VARCHAR(10) = 'False',
			@Action CHAR(1) = 'I', @Area varchar(50), @Region varchar(50)

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@Dilated = (CASE WHEN Dilated = 1 THEN 'True' ELSE 'False' END),
				@DilatedType = (CASE WHEN DilatedType = 1 THEN 'True' ELSE 'False' END),   --DilatedType -> No obvious cause
				@PostCholecystectomy = (CASE WHEN DilatedType = 2 THEN 'True' ELSE 'False' END),   --DilatedType -> Post cholecystectomy
				@Stricture = (CASE WHEN Stricture = 1 THEN 'True' ELSE 'False' END),
				@Fistula = (CASE WHEN Fistula = 1 THEN 'True' ELSE 'False' END),
				@Stones = (CASE WHEN Stones = 1 THEN 'True' ELSE 'False' END),
				@Cysts = (CASE WHEN Cysts = 1 THEN 'True' ELSE 'False' END),
				@CystsCommunicating = (CASE WHEN Cysts = 1 AND CystsCommunicating = 1 THEN 'True' ELSE 'False' END),
				@CystsNonCommunicating = (CASE WHEN Cysts = 1 AND CystsCommunicating = 0 THEN 'True' ELSE 'False' END),
				@CystsCholedochal = (CASE WHEN Cysts = 1 AND CystsCholedochal = 1 THEN 'True' ELSE 'False' END),
				@TumourCystadenoma = (CASE WHEN CystsSimple = 1 OR CystsRegular = 1 OR CystsIrregular = 1 OR CystsLoculated = 1 THEN 'True' ELSE 'False' END), --'Diagnosis cystadenoma 
				@TumourProbablyMalignant = (CASE WHEN Stricture = 1 AND StrictureType = 2 THEN 'True' ELSE 'False' END),
				@StrictureProbablyBenign = (CASE WHEN Stricture = 1 AND StrictureType = 1 THEN 'True' ELSE 'False' END),
				@StrictureProbably = (CASE WHEN Stricture = 1 AND StrictureProbably = 1 THEN 'True' ELSE 'False' END),
				@Cholangiocarcinoma = (CASE WHEN Cholangiocarcinoma = 1 THEN 'True' ELSE 'False' END),
				@ExternalCompression = (CASE WHEN ExternalCompression = 1 THEN 'True' ELSE 'False' END),
				@Polycystic = (CASE WHEN ISNULL(CystsSuspectedType,0) = 1 THEN 'True' ELSE 'False' END),
				@HydatidCyst = (CASE WHEN ISNULL(CystsSuspectedType,0) = 2 THEN 'True' ELSE 'False' END),
				@LiverAbscess = (CASE WHEN ISNULL(CystsSuspectedType,0) = 3 THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_duct_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	select @Area = x.area, @Region = x.Region from ERS_AbnormalitiesMatrixERCP x inner join ERS_Regions r on x.region = r.Region inner join ers_sites s on r.RegionId = s.RegionId where SiteId =@site_id

	    --Dim Hepatic() As String        = {"Left Hepatic Ducts", "Right Hepatic Ducts", "Left intra-hepatic ducts", "Right intra-hepatic ducts", "Right Hepatic Lobe", "Left Hepatic Lobe"}
        --Dim GallBladderReg() As String = {"Gall Bladder", "Common Bile Duct", "Common Hepatic Duct", "Cystic Duct", "Bifurcation"}

	IF (LOWER(@Area) = 'pancreas') --'Pancreas Regions
	BEGIN
		EXEC diagnoses_control_save @site_id, 'D70P2',	@Fistula			-- 'Fistula'

		IF @Dilated = 'True' AND @DilatedType = 'False' -- If "Dilated" is checked, diagnoses are "Chronic" and 'Dilatation'
		BEGIN
			EXEC diagnoses_control_save @site_id, 'D85P2', @Dilated				-- 'Chronic'   
			EXEC diagnoses_control_save @site_id, 'D110P2', @Dilated			-- 'Dilatation'   
			EXEC diagnoses_control_save @site_id, 'D115P2', 'False'				-- 'No obvious cause' 
		END
		ELSE IF @Dilated = 'True' AND @DilatedType = 'True'
		BEGIN
			EXEC diagnoses_control_save @site_id, 'D85P2', 'False'				-- 'Chronic'   
			EXEC diagnoses_control_save @site_id, 'D110P2', @Dilated			-- 'Dilatation'   
			EXEC diagnoses_control_save @site_id, 'D115P2', @DilatedType		-- 'No obvious cause' 
		END
		ELSE
		BEGIN --both @Dilated and @DilatedType false
			EXEC diagnoses_control_save @site_id, 'D85P2', 'False'				-- 'Chronic'   
			EXEC diagnoses_control_save @site_id, 'D110P2', 'False'				-- 'Dilatation'   
			EXEC diagnoses_control_save @site_id, 'D115P2', 'False'				-- 'No obvious cause' 
		END
			
		EXEC diagnoses_control_save @site_id, 'D120P2', @Stricture				-- 'Stricture'
		
		EXEC diagnoses_control_save @site_id, 'D95P2', @CystsCommunicating		-- Communicating
		EXEC diagnoses_control_save @site_id, 'D100P2', @CystsNonCommunicating	-- NonCommunicating
		EXEC diagnoses_control_save @site_id, 'D105P2', @CystsCholedochal		-- Pseudocyst
		EXEC diagnoses_control_save @site_id, 'D72P2',	@Stones					-- 'Pancreatic stone'
		EXEC diagnoses_control_save @site_id, 'D130P2',	@TumourCystadenoma		-- 'Cystadenoma'
		EXEC diagnoses_control_save @site_id, 'D125P2',	@TumourProbablyMalignant-- 'Probably malignant'

	END
------ DIAGNOSES FOR INTRAHEPATIC SITES i.e above the bifurcation --------------------------------------------------
	ELSE IF LOWER(@Region) IN ('right intra-hepatic ducts', 'right hepatic ducts', 'left intra-hepatic ducts', 'left hepatic ducts', 'right hepatic lobe', 'left hepatic lobe')
	BEGIN
		--Diagnosis probable tumour of type cholangiocarcinoma if patient has stricture that is probably malignant and is probably cholangiocarcinoma
		--Diagnosis probable tumour of type external compression (metastases) if patient has stricture that is probably malignant and is exibiting external compression (metastases)
		IF @Cholangiocarcinoma = 'True' OR @ExternalCompression = 'True'
		BEGIN
			EXEC diagnoses_control_save @site_id, 'D225P2', 'True'				-- 'Tumour'
			EXEC diagnoses_control_save @site_id, 'D242P2', 'True'				-- 'Probable'
			EXEC diagnoses_control_save @site_id, 'D245P2', @Cholangiocarcinoma	--Cholangiocarcinoma
			EXEC diagnoses_control_save @site_id, 'D255P2', @ExternalCompression--External compression
		END
		ELSE
		BEGIN --Both Cholangiocarcinoma & External compression not set
			EXEC diagnoses_control_save @site_id, 'D225P2', 'False'				-- 'Tumour'
			EXEC diagnoses_control_save @site_id, 'D242P2', 'False'				-- 'Probable'
			EXEC diagnoses_control_save @site_id, 'D245P2', 'False'				--Cholangiocarcinoma
			EXEC diagnoses_control_save @site_id, 'D255P2', 'False'				--External compression
		END

		EXEC diagnoses_control_save @site_id, 'D145P2',	@Fistula				-- 'Fistula'

		--Diagnosis polycystic liver disease if patient has suspected polycystic liver disease set in duct abnos...
		EXEC diagnoses_control_save @site_id, 'D200P2', @Polycystic				--Polycystic liver disease

		EXEC diagnoses_control_save @site_id, 'D235P2', @HydatidCyst			--Hydatid Cyst
		EXEC diagnoses_control_save @site_id, 'D240P2', @LiverAbscess			--Liver abscess
	END
------ DIAGNOSES FOR EXTRAHEPATIC SITES i.e below the bifurcation --------------------------------------------------
	ELSE IF LOWER(@Region) IN ('gall bladder', 'common bile duct', 'common hepatic duct', 'cystic duct', 'bifurcation') --'GallBladder and the regions close to it
	BEGIN
		EXEC diagnoses_control_save @site_id, 'D275P2', @Dilated				-- 'Dilated duct'
		EXEC diagnoses_control_save @site_id, 'D270P2', @CystsCholedochal		-- 'Choledochal cyst'
		EXEC diagnoses_control_save @site_id, 'D300P2', @PostCholecystectomy	-- 'Post cholecystectomy'
		EXEC diagnoses_control_save @site_id, 'D290P2', @Stricture				-- 'Stricture'
		
		EXEC diagnoses_control_save @site_id, 'D330P2', @StrictureProbablyBenign	-- 'Benign'
		EXEC diagnoses_control_save @site_id, 'D335P2', @TumourProbablyMalignant	-- 'Malignant'
		EXEC diagnoses_control_save @site_id, 'D325P2', @StrictureProbably			-- 'Extrahepatic probable'

		EXEC diagnoses_control_save @site_id, 'D145P2',	@Fistula				-- 'Fistula'
	END

	--Biliary : stone abnormalities
	IF LOWER(@Region) IN ('gall bladder') --Stones in Gall Bladder
	BEGIN
		EXEC diagnoses_control_save @site_id, 'D189P2', @Stones		-- Diagnosis : Stones in Gall Bladder
	END 
	ELSE IF LOWER(@Region) IN ('common bile duct', 'cystic duct')	-- Stones in cystic duct and/or common bile duct
	BEGIN
		EXEC diagnoses_control_save @site_id, 'D191P2', @Stones		-- Diagnosis : Stones in the bile duct		
	END
	ELSE IF LOWER(@Region) IN ('common hepatic duct', 'bifurcation', 'right intra-hepatic ducts', 'right hepatic ducts', 
								'left intra-hepatic ducts', 'left hepatic ducts') --'Stones in the common hepatic duct and/or bifurcation and/or left hepatic duct and/or left intra hepatic duct and/or right hepatic duct and/or right intra hepatic duct
	BEGIN
		EXEC diagnoses_control_save @site_id, 'D192P2', @Stones		-- Diagnosis : Stones in the hepatic duct	
	END
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------377a Create Proc abnormalities_parenchyma_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_parenchyma_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_parenchyma_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	Normal,
	Irregular,
	Dilated,
	SmallLakes,
	Strictures,
	Mass,
	MassType,
	MassProbably,
	Stones,
	SpideryDuctules,
	SpiderySuspection,
	MultiStrictures,
	MultiStricturesSuspection,
	EUSProcType,
	Summary
FROM
	ERS_ERCPAbnoParenchyma
WHERE 
	SiteId = @SiteId

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------377b Create Proc abnormalities_parenchyma_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_parenchyma_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_parenchyma_save]
(
	@SiteId INT,
	@Normal BIT,
	@Irregular BIT,
	@Dilated BIT,
	@SmallLakes BIT,
	@Strictures BIT,
	@Mass BIT,
	@MassType TINYINT,
	@MassProbably BIT,
	@Stones BIT,
	@SpideryDuctules BIT,
	@SpiderySuspection TINYINT,
	@MultiStrictures BIT,
	@MultiStricturesSuspection TINYINT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	
	
	IF (@Normal=0 AND @Irregular=0 AND @Dilated=0 AND @SmallLakes=0 AND @Strictures=0 AND @Mass=0 AND @Stones=0 AND @SpideryDuctules=0 AND @MultiStrictures=0)
	BEGIN
		DELETE FROM ERS_ERCPAbnoParenchyma 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Parenchyma'
	END		

	ELSE IF NOT EXISTS (SELECT 1 FROM ERS_ERCPAbnoParenchyma WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_ERCPAbnoParenchyma (
			SiteId,
			Normal,
			Irregular,
			Dilated,
			SmallLakes,
			Strictures,
			Mass,
			MassType,
			MassProbably,
			Stones,
			SpideryDuctules,
			SpiderySuspection,
			MultiStrictures,
			MultiStricturesSuspection,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@Normal,
			@Irregular,
			@Dilated,
			@SmallLakes,
			@Strictures,
			@Mass,
			@MassType,
			@MassProbably,
			@Stones,
			@SpideryDuctules,
			@SpiderySuspection,
			@MultiStrictures,
			@MultiStricturesSuspection,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Parenchyma',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_ERCPAbnoParenchyma
		SET 
			Normal = @Normal,
			Irregular = @Irregular,
			Dilated = @Dilated,
			SmallLakes = @SmallLakes,
			Strictures = @Strictures,
			Mass = @Mass,
			MassType = @MassType,
			MassProbably = @MassProbably,
			Stones = @Stones,
			SpideryDuctules = @SpideryDuctules,
			SpiderySuspection = @SpiderySuspection,
			MultiStrictures = @MultiStrictures,
			MultiStricturesSuspection = @MultiStricturesSuspection,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------377c Create Proc abnormalities_parenchyma_summary_update.sql--------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_parenchyma_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_parenchyma_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@Normal BIT,
		@Irregular BIT,
		@Dilated BIT,
		@SmallLakes BIT,
		@Strictures BIT,
		@Mass BIT,
		@MassType TINYINT,
		@MassProbably BIT,
		@Stones BIT,
		@SpideryDuctules BIT,
		@SpiderySuspection TINYINT,
		@MultiStrictures BIT,
		@MultiStricturesSuspection TINYINT

	SELECT 
		@Normal=Normal,
		@Irregular=Irregular,
		@Dilated=Dilated,
		@SmallLakes=SmallLakes,
		@Strictures=Strictures,
		@Mass=Mass,
		@MassType=MassType,
		@MassProbably=MassProbably,
		@Stones=Stones,
		@SpideryDuctules=SpideryDuctules,
		@SpiderySuspection=SpiderySuspection,
		@MultiStrictures=MultiStrictures,
		@MultiStricturesSuspection=MultiStricturesSuspection
	FROM
		ERS_ERCPAbnoParenchyma
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @Normal = 1
		SET @summary = @summary + 'normal'
	
	ELSE 
	BEGIN
		IF @Irregular = 1
			IF @summary = '' SET @summary = 'irregular ductules'
			ELSE SET @summary = @summary + '$$ irregular ductules'
		IF @Dilated = 1
			IF @summary = '' SET @summary = 'dilated ductules'
			ELSE SET @summary = @summary + '$$ dilated ductules'
		IF @SmallLakes = 1
			IF @summary = '' SET @summary = 'small lakes'
			ELSE SET @summary = @summary + '$$ small lakes'
		IF @Strictures = 1
			IF @summary = '' SET @summary = 'strictures'
			ELSE SET @summary = @summary + '$$ strictures'

		IF @Mass = 1
		BEGIN
			IF @MassType = 1
				IF @MassProbably = 1
					IF @summary = '' SET @summary = 'probable hepatoma'
					ELSE SET @summary = @summary + '$$ probable hepatoma'
				ELSE
					IF @summary = '' SET @summary = 'hepatoma'
					ELSE SET @summary = @summary + '$$ hepatoma'
			ELSE IF @MassType = 2
				IF @MassProbably = 1
					IF @summary = '' SET @summary = 'probable metastases'
					ELSE SET @summary = @summary + '$$ probable metastases'
				ELSE
					IF @summary = '' SET @summary = 'metastases'
					ELSE SET @summary = @summary + '$$ metastases'
			ELSE
				IF @summary = '' SET @summary = 'mass distorting anatomy'
				ELSE SET @summary = @summary + '$$ mass distorting anatomy'
		END
			
		IF @Stones = 1
			IF @summary = '' SET @summary = 'intrahepatic stones'
			ELSE SET @summary = @summary + '$$ intrahepatic stones'

		IF @SpideryDuctules = 1
			IF @SpiderySuspection = 1
				IF @summary = '' SET @summary = 'suspected cirrhosis'
				ELSE SET @summary = @summary + '$$ suspected cirrhosis'
			ELSE IF @SpiderySuspection = 2
				IF @summary = '' SET @summary = 'suspected polycystic liver disease'
				ELSE SET @summary = @summary + '$$ suspected polycystic liver disease'
			ELSE
				IF @summary = '' SET @summary = 'spidery stretched ductules'
				ELSE SET @summary = @summary + '$$ spidery stretched ductules'

		IF @MultiStrictures = 1
			IF @MultiStricturesSuspection = 1
				IF @summary = '' SET @summary = 'suspected sclerosing cholangitis'
				ELSE SET @summary = @summary + '$$ suspected sclerosing cholangitis'
			ELSE IF @MultiStricturesSuspection = 2
				IF @summary = '' SET @summary = 'suspected Caroli''s disease'
				ELSE SET @summary = @summary + '$$ suspected Caroli''s disease'
			ELSE
				IF @summary = '' SET @summary = 'multiple strictures/dilation'
				ELSE SET @summary = @summary + '$$ multiple strictures/dilation'
	
		IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and')
		SET @summary = REPLACE(@summary, '$$', ',')
	END

	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_ERCPAbnoParenchyma
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------377d Create Triggers on ERS_ERCPAbnoParenchyma---------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERCPAbnoParenchyma_Insert','TR';
GO
EXEC DropIfExist 'TR_ERCPAbnoParenchyma_Delete','TR';
GO
EXEC DropIfExist 'TR_ERCPAbnoParenchyma','TR';
GO

CREATE TRIGGER [dbo].[TR_ERCPAbnoParenchyma]
ON [dbo].[ERS_ERCPAbnoParenchyma]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Chronic VARCHAR(10) = 'False', @Polycystic VARCHAR(10) = 'False',
			@Sclerosing VARCHAR(10) = 'False', @Caroli VARCHAR(10) = 'False',
			@Cirrhosis VARCHAR(10) = 'False', @Hepatocellular VARCHAR(10) = 'False', 
			@Metastatic VARCHAR(10) = 'False', @MassProbably VARCHAR(10) = 'False', 
			@Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@Chronic = (CASE WHEN Irregular = 1 OR Dilated = 1 THEN 'True' ELSE 'False' END),
				@Polycystic = (CASE WHEN SpiderySuspection = 2 THEN 'True' ELSE 'False' END),
				@Cirrhosis = (CASE WHEN SpiderySuspection = 1 THEN 'True' ELSE 'False' END),
				@Sclerosing = (CASE WHEN ISNULL(MultiStricturesSuspection,0) = 1 THEN 'True' ELSE 'False' END),
				@Caroli =  (CASE WHEN ISNULL(MultiStricturesSuspection,0) = 2 THEN 'True' ELSE 'False' END),
				@Hepatocellular =  (CASE WHEN ISNULL(MassType,0) = 1 THEN 'True' ELSE 'False' END),
				@Metastatic =  (CASE WHEN ISNULL(MassType,0) = 2 THEN 'True' ELSE 'False' END),
				@MassProbably =  (CASE WHEN ISNULL(MassProbably,0) = 1 THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_parenchyma_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	--If EITHER of Irregular or Dilated are checked in the Parenchyma abnormalities, both Chronic and Minimal Change should appear
	EXEC diagnoses_control_save @site_id, 'D85P2', @Chronic			-- 'Chronic'
	EXEC diagnoses_control_save @site_id, 'D90P2', @Chronic			-- 'Minimal change'

	--has suspected polycystic liver disease set 
	EXEC diagnoses_control_save @site_id, 'D200P2', @Polycystic		--Polycystic liver disease
	EXEC diagnoses_control_save @site_id, 'D230P2', @Cirrhosis		--Cirrhosis
	EXEC diagnoses_control_save @site_id, 'D205P2', @Sclerosing		--Sclerosing cholangitis
	EXEC diagnoses_control_save @site_id, 'D215P2', @Caroli			--Caroli's disease
	 
	--Diagnosis hepatocellular carcinoma if probable hepatoma
	--Diagnosis metastatic intrahepatic if probable metastases
	IF @Hepatocellular = 'True' OR @Metastatic = 'True'
	BEGIN
		EXEC diagnoses_control_save @site_id, 'D225P2', 'True'				-- 'Tumour'
		EXEC diagnoses_control_save @site_id, 'D242P2', @MassProbably		-- 'Probable'

		IF @MassProbably <> 'True'
			EXEC diagnoses_control_save @site_id, 'D243P2', 'True'			-- 'Possible'	
		ELSE
			EXEC diagnoses_control_save @site_id, 'D243P2', False			-- 'Possible'

		EXEC diagnoses_control_save @site_id, 'D260P2', @Hepatocellular		--hepatocellular carcinoma
		EXEC diagnoses_control_save @site_id, 'D250P2', @Metastatic			--metastatic intrahepatic
	END
	ELSE
	BEGIN --Both hepatocellular carcinoma & metastatic not set
		EXEC diagnoses_control_save @site_id, 'D225P2', 'False'				-- 'Tumour'
		EXEC diagnoses_control_save @site_id, 'D242P2', 'False'				-- 'Probable'
		EXEC diagnoses_control_save @site_id, 'D243P2', False				-- 'Possible'
		EXEC diagnoses_control_save @site_id, 'D260P2', 'False'				--hepatocellular carcinoma
		EXEC diagnoses_control_save @site_id, 'D250P2', 'False'				--metastatic intrahepatic
	END


GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------378a Create Proc abnormalities_appearance_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_appearance_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_appearance_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	Normal,
	Bleeding,
	Suprapapillary,
	ImpactedStone,
	Patulous,
	Inflamed,
	Oedematous,
	PusExuding,
	Reddened,
	Tumour,
	Other,
	OtherText
FROM
	ERS_ERCPAbnoAppearance
WHERE 
	SiteId = @SiteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------378b Create Proc abnormalities_appearance_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_appearance_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_appearance_save]
(
	@SiteId INT,
	@Normal BIT,
	@Bleeding BIT,
	@Suprapapillary BIT,
	@ImpactedStone BIT,
	@Patulous BIT,
	@Inflamed BIT,
	@Oedematous BIT,
	@PusExuding BIT,
	@Reddened BIT,
	@Tumour BIT,
	@Other BIT,
	@OtherText NVARCHAR(500),
	@LoggedInUserId INT
)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	
	
	IF (@Normal=0 AND @Bleeding=0 AND @Suprapapillary=0 AND @ImpactedStone=0 AND @Patulous=0 AND @Inflamed=0 AND @Oedematous=0 AND @PusExuding=0 AND @Reddened=0 AND @Tumour=0 AND @Other=0)
	BEGIN
		DELETE FROM ERS_ERCPAbnoAppearance 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Appearance'
	END		

	ELSE IF NOT EXISTS (SELECT 1 FROM ERS_ERCPAbnoAppearance WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_ERCPAbnoAppearance (
			SiteId,
			Normal,
			Bleeding,
			Suprapapillary,
			ImpactedStone,
			Patulous,
			Inflamed,
			Oedematous,
			PusExuding,
			Reddened,
			Tumour,
			Other,
			OtherText,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@Normal,
			@Bleeding,
			@Suprapapillary,
			@ImpactedStone,
			@Patulous,
			@Inflamed,
			@Oedematous,
			@PusExuding,
			@Reddened,
			@Tumour,
			@Other,
			@OtherText,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Appearance',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_ERCPAbnoAppearance
		SET 
			Normal = @Normal,
			Bleeding = @Bleeding,
			Suprapapillary = @Suprapapillary,
			ImpactedStone = @ImpactedStone,
			Patulous = @Patulous,
			Inflamed = @Inflamed,
			Oedematous = @Oedematous,
			PusExuding = @PusExuding,
			Reddened = @Reddened,
			Tumour = @Tumour,
			Other = @Other,
			OtherText = @OtherText,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------378c Create Proc abnormalities_appearance_summary_update.sql--------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_appearance_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_appearance_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		--@Region VARCHAR(500),
		@Normal BIT,
		@Bleeding BIT,
		@Suprapapillary BIT,
		@ImpactedStone BIT,
		@Patulous BIT,
		@Inflamed BIT,
		@Oedematous BIT,
		@PusExuding BIT,
		@Reddened BIT,
		@Tumour BIT,
		@Other BIT,
		@OtherText NVARCHAR(500)

	SELECT 
		@Normal=Normal,
		@Bleeding=Bleeding,
		@Suprapapillary=Suprapapillary,
		@ImpactedStone=ImpactedStone,
		@Patulous=Patulous,
		@Inflamed=Inflamed,
		@Oedematous=Oedematous,
		@PusExuding=PusExuding,
		@Reddened=Reddened,
		@Tumour=Tumour,
		@Other=Other,
		@OtherText=OtherText
	FROM
		ERS_ERCPAbnoAppearance
	WHERE
		SiteId = @SiteId

	SET @Summary = ''
	
	--SELECT 
	--	@Region = CASE 
	--				WHEN Region LIKE '%Major%' THEN 'Major'
	--				WHEN Region LIKE '%Minor%' THEN 'Minor'
	--			  END
	--FROM ERS_Sites s 
	--JOIN ERS_Regions r ON s.RegionId = r.RegionId 
	--WHERE SiteId = @SiteId


	IF @Normal = 1
		SET @summary = @summary + 'normal'
	
	ELSE 
	BEGIN
		IF @Bleeding = 1
			IF @summary = '' SET @summary = 'bleeding'
			ELSE SET @summary = @summary + '$$ bleeding'
		IF @Suprapapillary = 1
			IF @summary = '' SET @summary = 'bulging suprapapillary bile duct'
			ELSE SET @summary = @summary + '$$ bulging suprapapillary bile duct'
		IF @ImpactedStone = 1
			IF @summary = '' SET @summary = 'impacted stone'
			ELSE SET @summary = @summary + '$$ impacted stone'
		IF @Patulous = 1
			IF @summary = '' SET @summary = 'patulous'
			ELSE SET @summary = @summary + '$$ patulous'
		IF @Inflamed = 1
			IF @summary = '' SET @summary = 'inflamed'
			ELSE SET @summary = @summary + '$$ inflamed'
		IF @Oedematous = 1
			IF @summary = '' SET @summary = 'oedematous'
			ELSE SET @summary = @summary + '$$ oedematous'
		IF @PusExuding = 1
			IF @summary = '' SET @summary = 'pus exuding'
			ELSE SET @summary = @summary + '$$ pus exuding'
		IF @Reddened = 1
			IF @summary = '' SET @summary = 'reddened'
			ELSE SET @summary = @summary + '$$ reddened'
		IF @Tumour = 1
		BEGIN
            --If tumour data is filled in Tumour screen, don't report tumour in Appearance screen
			--IF NOT EXISTS(SELECT 1 FROM ERS_ERCPAbnoTumour WHERE )
				IF @summary = '' SET @summary = 'tumour'
				ELSE SET @summary = @summary + '$$ tumour'
		END
		IF @Other = 1
			IF @OtherText <> ''
				IF @summary = '' SET @summary = @OtherText
				ELSE SET @summary = @summary + '$$ ' + @OtherText
			ELSE
				IF @summary = '' SET @summary = 'other'
				ELSE SET @summary = @summary + '$$ other'

		IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and')
		SET @summary = REPLACE(@summary, '$$', ',')
	END

	--IF @summary <> '' SET @summary = @Region + ': ' + @summary

	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_ERCPAbnoAppearance
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------378d Create Triggers on ERS_ERCPAbnoAppearance---------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERCPAbnoAppearance_Insert','TR';
GO
EXEC DropIfExist 'TR_ERCPAbnoAppearance_Delete','TR';
GO
EXEC DropIfExist 'TR_ERCPAbnoAppearance','TR';
GO


CREATE TRIGGER [dbo].[TR_ERCPAbnoAppearance]
ON [dbo].[ERS_ERCPAbnoAppearance]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @ImpactedStone VARCHAR(10) = 'False', 
			@Inflamed VARCHAR(10) = 'False', @Tumour VARCHAR(10) = 'False',  
			@Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@ImpactedStone = (CASE WHEN ImpactedStone=1 THEN 'True' ELSE 'False' END),
				--Ampulla inflamed if... appearance is Inflamed, reddened, oedenmatous or has pus exuding
				@Inflamed = (CASE WHEN Inflamed=1 OR PusExuding=1 OR Oedematous=1 OR Reddened=1 THEN 'True' ELSE 'False' END),
				@Tumour = (CASE WHEN Tumour=1 THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_appearance_summary_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D35P2', @ImpactedStone		-- 'Impacted stone'
	EXEC diagnoses_control_save @site_id, 'D37P2', @Inflamed			-- 'Inflamed'
	EXEC diagnoses_control_save @site_id, 'D43P2', @Tumour				-- 'Tumour'

GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------379a Create Proc abnormalities_diverticulum_ercp_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_diverticulum_ercp_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_diverticulum_ercp_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	Normal,
	Quantity,
	SizeOfLargest,
	Proximity
FROM
	ERS_ERCPAbnoDiverticulum
WHERE 
	SiteId = @SiteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------379b Create Proc abnormalities_diverticulum_ercp_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_diverticulum_ercp_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_diverticulum_ercp_save]
(
	@SiteId INT,
	@Normal BIT,
	@Quantity INT,
	@SizeOfLargest DECIMAL,
	@Proximity TINYINT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	
	
	IF (ISNULL(@Normal,0)=0 AND ISNULL(@Quantity,0)=0 AND ISNULL(@SizeOfLargest,0)=0 AND ISNULL(@Proximity,0)=0)
	BEGIN
		DELETE FROM ERS_ERCPAbnoDiverticulum 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Diverticulum'
	END		

	ELSE IF NOT EXISTS (SELECT 1 FROM ERS_ERCPAbnoDiverticulum WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_ERCPAbnoDiverticulum (
			SiteId,
			Normal,
			Quantity,
			SizeOfLargest,
			Proximity,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@Normal,
			@Quantity,
			@SizeOfLargest,
			@Proximity,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Diverticulum',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_ERCPAbnoDiverticulum
		SET 
			Normal = @Normal,
			Quantity = @Quantity,
			SizeOfLargest = @SizeOfLargest,
			Proximity = @Proximity,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------379c Create Proc abnormalities_diverticulum_summary_ercp_update.sql--------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_diverticulum_summary_ercp_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_diverticulum_summary_ercp_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		--@Region VARCHAR(500),
		@Normal BIT,
		@Quantity INT,
		@SizeOfLargest DECIMAL,
		@Proximity TINYINT

	SELECT 
		@Normal=Normal,
		@Quantity=Quantity,
		@SizeOfLargest=SizeOfLargest,
		@Proximity=Proximity
	FROM
		ERS_ERCPAbnoDiverticulum
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	--SELECT 
	--	@Region = CASE 
	--				WHEN Region LIKE '%Major%' THEN 'Major'
	--				WHEN Region LIKE '%Minor%' THEN 'Minor'
	--			  END
	--FROM ERS_Sites s 
	--JOIN ERS_Regions r ON s.RegionId = r.RegionId 
	--WHERE SiteId = @SiteId

	IF @Normal = 1
		SET @summary = @summary + 'No diverticula'
	
	ELSE 
	BEGIN
		IF ISNULL(@Quantity,0) = 0 AND ISNULL(@SizeOfLargest,0) > 0
			SET @Summary = 'diverticula (largest ' + CONVERT(VARCHAR, @SizeOfLargest) + 'mm)'

		ELSE IF ISNULL(@Quantity,0) = 1 AND ISNULL(@SizeOfLargest,0) = 0
			SET @Summary = 'one diverticulum '

		ELSE IF ISNULL(@Quantity,0) = 1 AND ISNULL(@SizeOfLargest,0) > 0
			SET @Summary = 'one ' + CONVERT(VARCHAR, @SizeOfLargest) + 'mm' + ' diverticulum'
     
		ELSE IF ISNULL(@Quantity,0) > 1 AND ISNULL(@SizeOfLargest,0) = 0
			SET @Summary = CONVERT(VARCHAR, @Quantity) + ' diverticula'
   
		ELSE IF ISNULL(@Quantity,0) > 1 AND ISNULL(@SizeOfLargest,0) > 0
			SET @Summary = CONVERT(VARCHAR, @Quantity) + ' diverticula (largest ' + CONVERT(VARCHAR, @SizeOfLargest) + 'mm)'

		IF @Proximity > 0
			IF @summary = '' SET @summary = 'diverticulum '
			ELSE SET @summary = @summary + ' '

			IF @Proximity = 1 SET @summary = @summary + 'greater than 5mm from the ampulla'
			ELSE IF @Proximity = 2 SET @summary = @summary + 'touching the ampulla'
			ELSE IF @Proximity = 3 SET @summary = @summary + 'with the ampulla within'
	END

	--IF @summary <> '' SET @summary = @Region + ': ' + @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_ERCPAbnoDiverticulum
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------379d Create Triggers on ERS_ERCPAbnoDiverticulum---------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERCPAbnoDiverticulum_Insert','TR';
GO
EXEC DropIfExist 'TR_ERCPAbnoDiverticulum_Delete','TR';
GO
EXEC DropIfExist 'TR_ERCPAbnoDiverticulum','TR';
GO

CREATE TRIGGER [dbo].[TR_ERCPAbnoDiverticulum]
ON [dbo].[ERS_ERCPAbnoDiverticulum]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Proximity VARCHAR(10) = 'False', 
			@Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
			@Proximity = (CASE WHEN Proximity IN (2,3) THEN 'True' ELSE 'False' END)   --if Proximity is "ampulla at edge" or "ampulla within diverticulum"
		FROM INSERTED

		EXEC abnormalities_diverticulum_summary_ercp_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D39P2', @Proximity		-- 'Periampullary diverticula'


GO


--------------------------------------------------------------------------------------------------------------------
-------------------------------------Create Proc first_ercp.sql---------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'first_ercp','S';
GO

CREATE Procedure [dbo].[first_ercp]
(
	@ProcedureId INT
)
AS 

DECLARE @FirstERCP AS TINYINT
	,@FirstERCPText AS VARCHAR(20) = ''
	,@PatientID INT

	SELECT TOP 1 @FirstERCP = FirstERCP, @PatientID = PatientID
	FROM ERS_Procedures
	WHERE ProcedureId = @ProcedureId

	IF @FirstERCP = 0 
		SET @FirstERCPText = 'Not first ERCP'
	ELSE IF @FirstERCP = 1
		SET @FirstERCPText = 'FIRST ERCP'
	ELSE IF @FirstERCP IS NULL
	BEGIN
		IF (dbo.fnShouldIncludeUGI() = 1)
		BEGIN
			--Check if patient has previously done ERCP in UGI
			IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'ERCP Procedure'))
			BEGIN
				IF EXISTS(SELECT TOP 1 1  FROM [ERCP Procedure]
							WHERE  [Patient No] = (SELECT [Combo ID] 
													FROM Patient 
													WHERE [Patient No] =  @PatientID)
							AND NOT PP2_CompiledOn IS NULL) 
					SET @FirstERCPText = 'Not first ERCP'
			END
		END

		--Check if patient has previously done ERCP in ERS
		IF @FirstERCPText <> 'Not first ERCP'
		BEGIN
			IF EXISTS (SELECT TOP 1 1 FROM ERS_Procedures ep
						WHERE ep.[PatientID] = @PatientID
						AND ep.[ProcedureType] = 2
						AND IsActive = 1
						AND ep.[ProcedureId] <> @ProcedureId)  
				SET @FirstERCPText = 'Not first ERCP'
		END
	END

	SELECT @FirstERCPText

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------380a Create Proc ercp_papillaryanatomy_select.sql---------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ercp_papillaryanatomy_select','S';
GO

CREATE PROCEDURE [dbo].[ercp_papillaryanatomy_select]
(
	@ProcedureId INT	
)
AS

SET NOCOUNT ON

SELECT
	MajorSiteLocation,
	MajorSize,
	MajorNoOfOpenings,
	MajorFloppy,
	MajorStenosed,
	MajorSurgeryNone,
	MajorEndoscopic,
	MajorEndoscopicSize,
	MajorOperative,
	MajorOperativeSize,
	MajorSphincteroplasty,
	MajorSphincteroplastySize,
	MajorCholedochoduodenostomy,
	MinorSiteLocation,
	MinorSize,
	MinorStenosed,
	MinorSurgeryNone,
	MinorEndoscopic,
	MinorEndoscopicSize,
	MinorOperative,
	MinorOperativeSize
FROM
	ERS_ERCPPapillaryAnatomy
WHERE 
	ProcedureId = @ProcedureId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------380b Create Proc ercp_papillaryanatomy_save.sql-----------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ercp_papillaryanatomy_save','S';
GO

CREATE PROCEDURE [dbo].[ercp_papillaryanatomy_save]
(
	@ProcedureId INT,
	@MajorSiteLocation TINYINT,
	@MajorSize TINYINT,
	@MajorNoOfOpenings TINYINT,
	@MajorFloppy BIT,
	@MajorStenosed BIT,
	@MajorSurgeryNone BIT,
	@MajorEndoscopic BIT,
	@MajorEndoscopicSize DECIMAL(6,1),
	@MajorOperative BIT,
	@MajorOperativeSize DECIMAL(6,1),
	@MajorSphincteroplasty BIT,
	@MajorSphincteroplastySize DECIMAL(6,1),
	@MajorCholedochoduodenostomy BIT,
	@MinorSiteLocation TINYINT,
	@MinorSize TINYINT,
	@MinorStenosed BIT,
	@MinorSurgeryNone BIT,
	@MinorEndoscopic BIT,
	@MinorEndoscopicSize DECIMAL(6,1),
	@MinorOperative BIT,
	@MinorOperativeSize DECIMAL(6,1),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	
	IF (@MajorSiteLocation=0 AND @MajorSize=0 AND @MajorNoOfOpenings=0 AND @MajorFloppy=0 AND @MajorStenosed=0 AND @MajorSurgeryNone=0 AND @MajorEndoscopic=0 AND @MajorOperative=0 AND @MajorSphincteroplasty=0 AND @MajorCholedochoduodenostomy=0 AND 
		@MinorSiteLocation=0 AND @MinorSize=0 AND @MinorStenosed=0 AND @MinorSurgeryNone=0 AND @MinorEndoscopic=0 AND @MinorOperative=0)
	BEGIN
		DELETE FROM ERS_ERCPPapillaryAnatomy 
		WHERE ProcedureId = @ProcedureId

		DELETE FROM ERS_RecordCount 
		WHERE ProcedureId = @ProcedureId
		AND Identifier = 'PapillaryAnatomy'
	END		

	ELSE IF NOT EXISTS (SELECT 1 FROM ERS_ERCPPapillaryAnatomy WHERE ProcedureId = @ProcedureId)
	BEGIN
		INSERT INTO ERS_ERCPPapillaryAnatomy (
			ProcedureId,
			MajorSiteLocation,
			MajorSize,
			MajorNoOfOpenings,
			MajorFloppy,
			MajorStenosed,
			MajorSurgeryNone,
			MajorEndoscopic,
			MajorEndoscopicSize,
			MajorOperative,
			MajorOperativeSize,
			MajorSphincteroplasty,
			MajorSphincteroplastySize,
			MajorCholedochoduodenostomy,
			MinorSiteLocation,
			MinorSize,
			MinorStenosed,
			MinorSurgeryNone,
			MinorEndoscopic,
			MinorEndoscopicSize,
			MinorOperative,
			MinorOperativeSize,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@ProcedureId,
			@MajorSiteLocation,
			@MajorSize,
			@MajorNoOfOpenings,
			@MajorFloppy,
			@MajorStenosed,
			@MajorSurgeryNone,
			@MajorEndoscopic,
			@MajorEndoscopicSize,
			@MajorOperative,
			@MajorOperativeSize,
			@MajorSphincteroplasty,
			@MajorSphincteroplastySize,
			@MajorCholedochoduodenostomy,
			@MinorSiteLocation,
			@MinorSize,
			@MinorStenosed,
			@MinorSurgeryNone,
			@MinorEndoscopic,
			@MinorEndoscopicSize,
			@MinorOperative,
			@MinorOperativeSize,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@ProcedureId,
			NULL,
			'PapillaryAnatomy',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_ERCPPapillaryAnatomy
		SET 
			MajorSiteLocation = @MajorSiteLocation,
			MajorSize = @MajorSize,
			MajorNoOfOpenings = @MajorNoOfOpenings,
			MajorFloppy = @MajorFloppy,
			MajorStenosed = @MajorStenosed,
			MajorSurgeryNone = @MajorSurgeryNone,
			MajorEndoscopic = @MajorEndoscopic,
			MajorEndoscopicSize = @MajorEndoscopicSize,
			MajorOperative = @MajorOperative,
			MajorOperativeSize = @MajorOperativeSize,
			MajorSphincteroplasty = @MajorSphincteroplasty,
			MajorSphincteroplastySize = @MajorSphincteroplastySize,
			MajorCholedochoduodenostomy = @MajorCholedochoduodenostomy,
			MinorSiteLocation = @MinorSiteLocation,
			MinorSize = @MinorSize,
			MinorStenosed = @MinorStenosed,
			MinorSurgeryNone = @MinorSurgeryNone,
			MinorEndoscopic = @MinorEndoscopic,
			MinorEndoscopicSize = @MinorEndoscopicSize,
			MinorOperative = @MinorOperative,
			MinorOperativeSize = @MinorOperativeSize,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			ProcedureId = @ProcedureId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------380c Create Proc ercp_papillaryanatomy_summary_update.sql-------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'ercp_papillaryanatomy_summary_update','S';
GO

CREATE PROCEDURE [dbo].[ercp_papillaryanatomy_summary_update]
(
	@ProcedureId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000) = '',
		@summarymajor VARCHAR(4000) = '',
		@summaryminor VARCHAR(4000) = '',
		@summarytemp VARCHAR(4000) = '',
		@MajorSiteLocation TINYINT,
		@MajorSize TINYINT,
		@MajorNoOfOpenings TINYINT,
		@MajorFloppy BIT,
		@MajorStenosed BIT,
		@MajorSurgeryNone BIT,
		@MajorEndoscopic BIT,
		@MajorEndoscopicSize DECIMAL,
		@MajorOperative BIT,
		@MajorOperativeSize DECIMAL,
		@MajorSphincteroplasty BIT,
		@MajorSphincteroplastySize DECIMAL,
		@MajorCholedochoduodenostomy BIT,
		@MinorSiteLocation TINYINT,
		@MinorSize TINYINT,
		@MinorStenosed BIT,
		@MinorSurgeryNone BIT,
		@MinorEndoscopic BIT,
		@MinorEndoscopicSize DECIMAL,
		@MinorOperative BIT,
		@MinorOperativeSize DECIMAL

	SELECT 
		@MajorSiteLocation=MajorSiteLocation,
		@MajorSize=MajorSize,
		@MajorNoOfOpenings=MajorNoOfOpenings,
		@MajorFloppy=MajorFloppy,
		@MajorStenosed=MajorStenosed,
		@MajorSurgeryNone=MajorSurgeryNone,
		@MajorEndoscopic=MajorEndoscopic,
		@MajorEndoscopicSize=MajorEndoscopicSize,
		@MajorOperative=MajorOperative,
		@MajorOperativeSize=MajorOperativeSize,
		@MajorSphincteroplasty=MajorSphincteroplasty,
		@MajorSphincteroplastySize=MajorSphincteroplastySize,
		@MajorCholedochoduodenostomy=MajorCholedochoduodenostomy,
		@MinorSiteLocation=MinorSiteLocation,
		@MinorSize=MinorSize,
		@MinorStenosed=MinorStenosed,
		@MinorSurgeryNone=MinorSurgeryNone,
		@MinorEndoscopic=MinorEndoscopic,
		@MinorEndoscopicSize=MinorEndoscopicSize,
		@MinorOperative=MinorOperative,
		@MinorOperativeSize=MinorOperativeSize
	FROM
		ERS_ERCPPapillaryAnatomy
	WHERE
		ProcedureId = @ProcedureId

	--IF @MajorSize = 1
	--	SET @summarymajor = 'normal'
	--ELSE 
	IF @MajorSize = 2
		SET @summarymajor = 'small'
	ELSE IF @MajorSize = 3
		SET @summarymajor = 'large'

	IF @MajorFloppy = 1
		IF @summarymajor <> '' SET @summarymajor = @summarymajor + '$$ floppy' ELSE SET @summarymajor = 'floppy'
	IF @MajorStenosed = 1
		IF @summarymajor <> '' SET @summarymajor = @summarymajor + '$$ stenosed' ELSE SET @summarymajor = 'stenosed'
	
	IF CHARINDEX('$$', @summarymajor) > 0 SET @summarymajor = STUFF(@summarymajor, len(@summarymajor) - charindex('$$', reverse(@summarymajor)), 2, ' and')
		SET @summarymajor = REPLACE(@summarymajor, '$$', ',')

	IF ISNULL(@MajorNoOfOpenings,0) = 2
		IF @summarymajor <> '' SET @summarymajor = @summarymajor + ' with two openings' ELSE SET @summarymajor = 'two openings'

	IF @MajorSiteLocation = 1
		IF @summarymajor <> '' SET @summarymajor = @summarymajor + ' in the 1st part of the duodenum' ELSE SET @summarymajor = 'in the 1st part of the duodenum'
	ELSE IF @MajorSiteLocation = 3
		IF @summarymajor <> '' SET @summarymajor = @summarymajor + ' in the 3rd part of the duodenum' ELSE SET @summarymajor = 'in the 3rd part of the duodenum'


	IF @MajorSurgeryNone = 1
		SET @summarytemp = 'no previous surgery'
	ELSE
	BEGIN 
		SET @summarytemp = ''

		IF @MajorEndoscopic = 1
		BEGIN
			SET @summarytemp = 'endoscopic sphincterotomy'
			IF ISNULL(@MajorEndoscopicSize,0) > 0 SET @summarytemp = @summarytemp + ' (' + CONVERT(varchar, @MajorEndoscopicSize) + ' mm)'
		END

		IF @MajorOperative = 1
		BEGIN
			IF @summarytemp <> '' SET @summarytemp = @summarytemp + '$$ operative sphincterotomy' ELSE SET @summarytemp = 'operative sphincterotomy'
			IF ISNULL(@MajorOperativeSize,0) > 0 SET @summarytemp = @summarytemp + ' (' + CONVERT(varchar, @MajorOperativeSize) + ' mm)'
		END

		IF @MajorSphincteroplasty = 1
		BEGIN
			IF @summarytemp <> '' SET @summarytemp = @summarytemp + '$$ sphincteroplasty' ELSE SET @summarytemp = 'sphincteroplasty'
			IF ISNULL(@MajorSphincteroplastySize,0) > 0 SET @summarytemp = @summarytemp + ' (' + CONVERT(varchar, @MajorSphincteroplastySize) + ' mm)'
		END

		IF @MajorCholedochoduodenostomy = 1
		BEGIN
			IF @summarytemp <> '' SET @summarytemp = @summarytemp + '$$ choledochoduodenostomy' ELSE SET @summarytemp = 'choledochoduodenostomy'
		END

		IF CHARINDEX('$$', @summarytemp) > 0 SET @summarytemp = STUFF(@summarytemp, len(@summarytemp) - charindex('$$', reverse(@summarytemp)), 2, ' and')
		SET @summarytemp = REPLACE(@summarytemp, '$$', ',')

		IF @summarytemp <> '' SET @summarytemp = 'previous ' + @summarytemp
	END
	
	
	
	IF @summarymajor <> '' 
		SET @summarymajor = @summarymajor +  ', with ' + @summarytemp
	ELSE
		SET @summarymajor = @summarytemp
	
	IF @summarymajor <> '' 
		SET @summarymajor = 'major; ' + @summarymajor


		
    IF @MinorSize = 2
		SET @summaryminor = 'small'
	ELSE IF @MinorSize = 3
		SET @summaryminor = 'large'


    IF @MinorStenosed = 1
		IF @summaryminor <> '' SET @summaryminor = @summaryminor + ' stenosed' ELSE SET @summaryminor = 'stenosed'
	
	IF @MinorSiteLocation = 1
		IF @summaryminor <> '' SET @summaryminor = @summaryminor + ' not present' ELSE SET @summaryminor = 'not present'
	ELSE IF @MinorSiteLocation = 2
		IF @summaryminor <> '' SET @summaryminor = @summaryminor + ' no attempt to visualise' ELSE SET @summaryminor = 'no attempt to visualise'
	ELSE IF @MinorSiteLocation = 3
		IF @summaryminor <> '' SET @summaryminor = @summaryminor + ' in the 1st part of the duodenum' ELSE SET @summaryminor = 'in the 1st part of the duodenum'
	--ELSE IF @MinorSiteLocation = 4
	--	IF @summaryminor <> '' SET @summaryminor = @summaryminor + ' in the 2nd part of the duodenum' ELSE SET @summaryminor = 'in the 2nd part of the duodenum'
	ELSE IF @MinorSiteLocation = 5
		IF @summaryminor <> '' SET @summaryminor = @summaryminor + ' in the 3rd part of the duodenum' ELSE SET @summaryminor = 'in the 3rd part of the duodenum'

    IF @MinorSurgeryNone = 1
		SET @summarytemp = 'no previous surgery'
	ELSE
	BEGIN 
		SET @summarytemp = ''

		IF @MinorEndoscopic = 1
		BEGIN
			SET @summarytemp = 'endoscopic sphincterotomy'
			IF ISNULL(@MinorEndoscopicSize,0) > 0 SET @summarytemp = @summarytemp + ' (' + CONVERT(varchar, @MinorEndoscopicSize) + ' mm)'
		END

		IF @MinorOperative = 1
		BEGIN
			IF @summarytemp <> '' SET @summarytemp = @summarytemp + ' and operative sphincterotomy' ELSE SET @summarytemp = 'operative sphincterotomy'
			IF ISNULL(@MinorOperativeSize,0) > 0 SET @summarytemp = @summarytemp + ' (' + CONVERT(varchar, @MinorOperativeSize) + ' mm)'
		END

		IF @summarytemp <> '' SET @summarytemp = 'previous ' + @summarytemp
	END
            
    IF @summarytemp <> '' and @summaryminor <> ''
		SET @summaryminor = @summaryminor +  ', with ' + @summarytemp
	ELSE
		SET @summaryminor = @summarytemp
	
	IF @summaryminor <> '' 
		SET @summaryminor = 'minor; ' + @summaryminor


	IF @summarymajor <> '' And @summaryminor <> '' And UPPER(@summarymajor) = UPPER(@summaryminor)
        SET @summary = 'major and minor papilla ' + @summarymajor + '.'
    ELSE
        If @summarymajor <> '' And @summaryminor = ''
            SET @summary = @summarymajor --+ '.'
        Else If @summarymajor = '' And @summaryminor <> ''
            SET @summary = @summaryminor --+ '.'
        Else If @summarymajor <> '' And @summaryminor <> ''
            SET @summary = RTRIM(@summarymajor) + ': ' + @summaryminor --+ '.'
	
	IF @summary <> '' 
		SET @summary = 'Papillary anatomy: ' + @summary
	
	-- Finally update the summary in abnormalities table
	UPDATE ERS_ERCPPapillaryAnatomy
	SET Summary = @summary 
	WHERE ProcedureId = @ProcedureId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------380d Create Triggers on ERS_ERCPPapillaryAnatomy---------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'TR_ERCPPapillaryAnatomy_Insert', 'TR';
GO

CREATE TRIGGER TR_ERCPPapillaryAnatomy_Insert
ON ERS_ERCPPapillaryAnatomy
AFTER INSERT, UPDATE 
AS 
	DECLARE @procedure_id INT, @FirstERCP BIT = 1

	SELECT @procedure_id=ProcedureId,
			--If any of the below is checked, FirstERCP is set to 0 (NOT FIRST ERCP)
			@FirstERCP = (CASE WHEN [MajorEndoscopic]=1 OR [MajorOperative]=1 OR [MajorSphincteroplasty]=1
							OR [MajorCholedochoduodenostomy]=1 OR [MinorEndoscopic]=1 OR [MinorOperative]=1 
						THEN 0 ELSE 1 END)
	FROM INSERTED;

	EXEC ercp_papillaryanatomy_summary_update @procedure_id
	EXEC procedure_summary_update @procedure_id

	--ERCP KPI   - If user does not make any selection and clik on Save, update FirstERCP to 1 
	UPDATE ERS_Procedures
	SET FirstERCP = @FirstERCP 
	WHERE [ProcedureId] = @procedure_id;
GO


EXEC DropIfExist 'TR_ERCPPapillaryAnatomy_Delete', 'TR';
GO

CREATE TRIGGER TR_ERCPPapillaryAnatomy_Delete
ON ERS_ERCPPapillaryAnatomy
AFTER DELETE
AS 
	DECLARE @procedure_id INT
	SELECT @procedure_id=ProcedureId FROM DELETED
	EXEC ercp_papillaryanatomy_summary_update @procedure_id
	EXEC procedure_summary_update @procedure_id
GO



--------------------------------------------------------------------------------------------------------------------
-------------------------------------381a Create Proc abnormalities_tumour_ercp_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_tumour_ercp_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_tumour_ercp_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	[None],
	Firm,
	Friable,
	Ulcerated,
	Villous,
	Polypoid,
	SubMucosal,
	Size
FROM
	ERS_ERCPAbnoTumour
WHERE 
	SiteId = @SiteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------381b Create Proc abnormalities_tumour_ercp_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'abnormalities_tumour_ercp_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_tumour_ercp_save]
(
	@SiteId INT,
	@None BIT,
	@Firm BIT,
	@Friable BIT,
	@Ulcerated BIT,
	@Villous BIT,
	@Polypoid BIT,
	@SubMucosal BIT,
	@Size DECIMAL(6,1),
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
	
	
	IF (@None=0 AND @Firm=0 AND @Friable=0 AND @Ulcerated=0 AND @Villous=0 AND @Polypoid=0 AND @SubMucosal=0)
	BEGIN
		DELETE FROM ERS_ERCPAbnoTumour 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Tumour'
	END		

	ELSE IF NOT EXISTS (SELECT 1 FROM ERS_ERCPAbnoTumour WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_ERCPAbnoTumour (
			SiteId,
			[None],
			Firm,
			Friable,
			Ulcerated,
			Villous,
			Polypoid,
			SubMucosal,
			Size,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Firm,
			@Friable,
			@Ulcerated,
			@Villous,
			@Polypoid,
			@SubMucosal,
			@Size,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Tumour',
			1)
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_ERCPAbnoTumour
		SET 
			[None] = @None,
			Firm = @Firm,
			Friable = @Friable,
			Ulcerated = @Ulcerated,
			Villous = @Villous,
			Polypoid = @Polypoid,
			SubMucosal = @SubMucosal,
			Size = @Size,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------381c Create Proc abnormalities_tumour_summary_ercp_update.sql--------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'abnormalities_tumour_summary_ercp_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_tumour_summary_ercp_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		--@Region VARCHAR(500),
		@None BIT,
		@Firm BIT,
		@Friable BIT,
		@Ulcerated BIT,
		@Villous BIT,
		@Polypoid BIT,
		@SubMucosal BIT,
		@Size DECIMAL(6,1)

	SELECT 
		@None=[None],
		@Firm=Firm,
		@Friable=Friable,
		@Ulcerated=Ulcerated,
		@Villous=Villous,
		@Polypoid=Polypoid,
		@SubMucosal=SubMucosal,
		@Size=Size
	FROM
		ERS_ERCPAbnoTumour
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	--SELECT 
	--	@Region = CASE 
	--				WHEN Region LIKE '%Major%' THEN 'Major'
	--				WHEN Region LIKE '%Minor%' THEN 'Minor'
	--			  END
	--FROM ERS_Sites s 
	--JOIN ERS_Regions r ON s.RegionId = r.RegionId 
	--WHERE SiteId = @SiteId

	IF @None = 1
		SET @summary = @summary + 'No tumour'
	
	ELSE 
	BEGIN
		IF @Firm = 1
			IF @summary = '' SET @summary = 'firm'
			ELSE SET @summary = @summary + '$$ firm'

		IF @Friable = 1
			IF @summary = '' SET @summary = 'friable'
			ELSE SET @summary = @summary + '$$ friable'

		IF @Ulcerated = 1
			IF @summary = '' SET @summary = 'ulcerated'
			ELSE SET @summary = @summary + '$$ ulcerated'

		IF @Villous = 1
			IF @summary = '' SET @summary = 'villous'
			ELSE SET @summary = @summary + '$$ villous'

		IF @Polypoid = 1
			IF @summary = '' SET @summary = 'polypoid'
			ELSE SET @summary = @summary + '$$ polypoid'

		IF @SubMucosal = 1
			IF @summary = '' SET @summary = 'sub mucosal'
			ELSE SET @summary = @summary + '$$ sub mucosal'

		IF ISNULL(@Size,0) > 0
			SET @Summary = @Summary + ' (size ' + CONVERT(VARCHAR,CAST(@Size AS FLOAT)) + 'mm)'		

		IF CHARINDEX('$$', @summary) > 0 SET @summary = STUFF(@summary, len(@summary) - charindex('$$', reverse(@summary)), 2, ' and')
		SET @summary = REPLACE(@summary, '$$', ',')
	END

	--IF @summary <> '' SET @summary = @Region + ': ' + @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_ERCPAbnoTumour
	SET Summary = @Summary 
	WHERE SiteId = @siteId

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------381d Create Triggers on ERS_ERCPAbnoTumour---------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'TR_ERCPAbnoTumour_Insert','TR';
GO
EXEC DropIfExist 'TR_ERCPAbnoTumour_Delete','TR';
GO

EXEC DropIfExist 'TR_ERCPAbnoTumour','TR';
GO

CREATE TRIGGER [dbo].[TR_ERCPAbnoTumour]
ON [dbo].[ERS_ERCPAbnoTumour]
AFTER INSERT, UPDATE, DELETE
AS 
	DECLARE @site_id INT, @Tumour VARCHAR(10) = 'False',  
			@Action CHAR(1) = 'I'

    IF EXISTS(SELECT * FROM DELETED) SET @Action = CASE WHEN EXISTS(SELECT * FROM INSERTED) THEN 'U' ELSE 'D' END

	-- INSERTED OR UPDATED
	IF @Action IN ('I', 'U') 
	BEGIN
		SELECT @site_id=SiteId,
				@Tumour = (CASE WHEN Firm=1 OR Friable=1 OR Ulcerated=1 OR Villous=1 
										OR Polypoid=1 OR SubMucosal=1 THEN 'True' ELSE 'False' END)
		FROM INSERTED

		EXEC abnormalities_tumour_summary_ercp_update @site_id
	END

	-- DELETED
	IF @Action = 'D'
	BEGIN
		SELECT @site_id=SiteId FROM DELETED
	END

	EXEC sites_summary_update @site_id

	EXEC diagnoses_control_save @site_id, 'D43P2', @Tumour				-- 'Tumour'

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------382 Create Proc country_label_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'country_label_select','S';
GO

CREATE Procedure [dbo].[country_label_select]
(
	@label NVARCHAR(50)
)
AS 
	
	DECLARE @labelText NVARCHAR(70) = ''
	DECLARE @CountryLabel VARCHAR(2) = (SELECT TOP(1) CountryLabel FROM ERS_SystemConfig)
	DECLARE @sql NVARCHAR(MAX) = 'SELECT TOP(1) @labelText = LabelText_' + @CountryLabel + ' FROM ERS_CountryLabels WHERE Label = ''' + @label + ''''
	
	EXEC sp_executesql @sql, N'@labelText VARCHAR(60) OUTPUT', @labelText OUTPUT

	SELECT @labelText

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc chart_get_procedure_years.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'chart_get_procedure_years','S';
GO

CREATE PROCEDURE [dbo].[chart_get_procedure_years]

AS
	SET NOCOUNT ON

	IF (
			EXISTS (
				SELECT 1
				FROM INFORMATION_SCHEMA.TABLES
				WHERE TABLE_SCHEMA = 'dbo'
					AND TABLE_NAME = 'Colon Procedure'
				)
			)
	BEGIN
		SELECT year([Procedure date]) AS ProcedureYear
		FROM [Colon Procedure]
		WHERE year([Procedure date]) IS NOT NULL
		GROUP BY year([Procedure date])
	
		UNION
	
		SELECT year([Procedure date]) AS ProcedureYear
		FROM [Upper GI Procedure]
		WHERE year([Procedure date]) IS NOT NULL
		GROUP BY year([Procedure date])
	
		UNION
	
		SELECT year([Procedure date]) AS ProcedureYear
		FROM [ERCP Procedure]
		WHERE year([Procedure date]) IS NOT NULL
		GROUP BY year([Procedure date])
	
		UNION
	
		SELECT year([Procedure date]) AS ProcedureYear
		FROM [EUS procedure]
		WHERE year([Procedure date]) IS NOT NULL
		GROUP BY year([Procedure date])

		IF @@ROWCOUNT = 0 SELECT 0 AS ProcedureYear
	END
	ELSE
		SELECT 0 AS ProcedureYear


GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------383 Create Proc usp_Procedure_Replicate.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
EXEC DropIfExist 'usp_Procedure_Replicate','S';
GO

CREATE PROCEDURE [dbo].[usp_Procedure_Replicate]
(
	@ProcedureID		INT,
	@ProcedureType		INT
)
AS

SET NOCOUNT ON

DECLARE @newProcId INT

BEGIN TRANSACTION

BEGIN TRY

			--,[ResectedColonNo]					,[IncludeProcNotes]
			--,[ProcedureNotes]						,[Video]						,[VideoNotes]					,[GPReportText]
			--,[TextEdited]							,[DiagramIncluded]				,[EndoscribeComments]			,[EndoscribePremedication]
			--,[MucosalJunctionAt]					,[NewCardia]					,[AbnoText]						,[PancreasDivisum]
			--,[BiliaryManometry]					,[PancreaticManometry]			,[ExportedToEPR]				,[ForcepType]
			--,[ForcepSerialNo]						,[ConsultantPresent]			,[AccountNo]					,[DNA]
			--,[DNACombined]						,[DNACreatedViaRC]				,[IsDirty]						,[ExportFileName]
			--,[ExportProducedOn]					,[Summary]						,[SummaryWithLinks]				,[PP_Therapies]
			--,[PP_SpecimenTaken]					,[PP_Rx]						,[PP_Followup]					,[PP_AdviceAndComments]
			--,[PP_EndoComments]					,[PP_InstForCareHeading]		,[PP_InstForCare]				,[TPP_MainReportBody]
			--,[TPP_Therapies]						,[TPP_SpecimenTaken]			,[PP_DNA]						,[PP_NPSAalert]
			--,[PP_BBPS]							,[PP_Site_Legend]				,[PP_AdviceAndComments_Initial]	,[PP_Followup_Initial]				
			--,[SurgicalSafetyCheckListCompleted]	,[NEDEnabled]					,[NEDExported]					,[PP_Bowel_Prep]									

	INSERT INTO [dbo].[ERS_Procedures]
           ([ProcedureType]							,[CreatedBy]					,[CreatedOn]					,[ModifiedOn]
			,[PatientId]					        ,[OperatingHospitalID]	        ,[DiagramNumber]				,[ListConsultant]
			,[Endoscopist1]							,[Endoscopist2]					,[Assistant]					,[Nurse1]
			,[Nurse2]								,[Nurse3]						,[Instrument1]					,[Instrument2]
			,[ReferralHospitalNo]					,[ReferralConsultantNo]			,[GPReferralFlag]				,[PatientStatus]
			,[Ward]									,[PatientType]					,[ReferralConsultantSpeciality]	
			,[PatientConsent]						,[GPCode]						,[CategoryListId]				,[EmergencyProcType]				
			,[GPPracticeCode]						,[ListType]						,[Endo1Role]					,[Endo2Role]					
			,[FormerProcedureId]					,[ImagePortId]					,[WhoCreatedId])
		SElECT 
			@ProcedureType							,p.[CreatedBy]					,p.[CreatedOn]					,GETDATE()
			,p.[PatientId]					        ,p.[OperatingHospitalID]	    ,p.[DiagramNumber]				,p.[ListConsultant]
			,p.[Endoscopist1]						,p.[Endoscopist2]				,p.[Assistant]					,p.[Nurse1]
			,p.[Nurse2]								,p.[Nurse3]						,p.[Instrument1]				,p.[Instrument2]
			,p.[ReferralHospitalNo]					,p.[ReferralConsultantNo]		,p.[GPReferralFlag]				,p.[PatientStatus]
			,p.[Ward]								,p.[PatientType]				,p.[ReferralConsultantSpeciality]	
			,p.[PatientConsent]						,p.[GPCode]						,p.[CategoryListId]				,p.[EmergencyProcType]
			,p.[GPPracticeCode]						,p.[ListType]					,p.[Endo1Role]					,p.[Endo2Role]					
			,@ProcedureID							,p.[ImagePortId]				,p.[WhoCreatedId]	
		FROM ERS_Procedures p 
		WHERE p.ProcedureId = @ProcedureID

	SET @newProcId = SCOPE_IDENTITY()

	--Copy ProceduresReporting (PP fields)
	INSERT INTO [dbo].[ERS_ProceduresReporting]
           ( [PP_PatAddress]						,[PP_RefHosp]					,[PP_CNN]						,[PP_RepDateAndTime]
			,[PP_RepType]							,[PP_GP]						,[PP_PatStatus]					,[PP_Ward]
			,[PP_RefCons]							,[PP_Endos]						,[PP_Instrument]				,[PP_Premed]
			,[PP_Indic]								,[PP_MainReportBody]			,[PP_Diagnoses]					,[PP_Endo1]						
			,[PP_CCRefCons]							,[PP_CCOther]					,[PP_CCPatient]					,[PP_RepHead]					
			,[PP_RepSubHead]						,[PP_OpHosp]					,[PP_Room_ID]					,[PP_Priority]					
			,[PP_GPName]							,[PP_GPAddress]
			,ProcedureId)
		SElECT 	
			 pr.[PP_PatAddress]						,pr.[PP_RefHosp]				,pr.[PP_CNN]					,pr.[PP_RepDateAndTime]
			,pr.[PP_RepType]						,pr.[PP_GP]						,pr.[PP_PatStatus]				,pr.[PP_Ward]
			,pr.[PP_RefCons]						,pr.[PP_Endos]					,pr.[PP_Instrument]				,pr.[PP_Premed]
			,pr.[PP_Indic]							,pr.[PP_MainReportBody]			,pr.[PP_Diagnoses]				,pr.[PP_Endo1]						
			,pr.[PP_CCRefCons]						,pr.[PP_CCOther]				,pr.[PP_CCPatient]				,pr.[PP_RepHead]					
			,pr.[PP_RepSubHead]						,pr.[PP_OpHosp]					,pr.[PP_Room_ID]				,pr.[PP_Priority]					
			,pr.[PP_GPName]							,pr.[PP_GPAddress]								
			,@newProcId
		FROM ERS_ProceduresReporting pr 
		WHERE pr.ProcedureId = @ProcedureID

	--Copy Premedication
	INSERT INTO ERS_UpperGIPremedication (ProcedureId, DrugNo, DrugName, Dose, Units, DeliveryMethod)
	SELECT @newProcId, DrugNo, DrugName, Dose, Units, DeliveryMethod
	FROM ERS_UpperGIPremedication
	WHERE ProcedureId = @ProcedureID

	IF @@ROWCOUNT > 0
	BEGIN
		INSERT INTO ERS_RecordCount ([ProcedureId], [SiteId], [Identifier], [RecordCount])
		VALUES (@newProcId, NULL, 'Premed', 1)

		EXEC ogd_premedication_summary_update @newProcId
	END 

	--Copy QA (Management & Sedation/Comfort score)
	INSERT INTO ERS_UpperGIQA (
		[ProcedureId]			,[NoNotes]			,[ReferralLetter]					,[ManagementNone]		,[PulseOximetry]
		,[IVAccess]				,[IVAntibiotics]	,[Oxygenation]						,[OxygenationMethod]	,[OxygenationFlowRate]
		,[ContinuousECG]		,[BP]				,[BPSystolic]						,[BPDiastolic]			,[ManagementOther]
		,[ManagementOtherText]	,[PatSedation]      ,[PatSedationAsleepResponseState]   ,[PatDiscomfortNurse]	,[PatDiscomfortEndo])
	SELECT 
		@newProcId				,[NoNotes]			,[ReferralLetter]					,[ManagementNone]		,[PulseOximetry]
		,[IVAccess]				,[IVAntibiotics]	,[Oxygenation]						,[OxygenationMethod]	,[OxygenationFlowRate]
		,[ContinuousECG]		,[BP]				,[BPSystolic]						,[BPDiastolic]			,[ManagementOther]
		,[ManagementOtherText]	,[PatSedation]      ,[PatSedationAsleepResponseState]   ,[PatDiscomfortNurse]	,[PatDiscomfortEndo]
	FROM ERS_UpperGIQA
	WHERE ProcedureId = @ProcedureID

	IF @@ROWCOUNT > 0
	BEGIN
		INSERT INTO ERS_RecordCount ([ProcedureId], [SiteId], [Identifier], [RecordCount])
		VALUES (@newProcId, NULL, 'QA', 1)

		EXEC ogd_qa_summary_update @newProcId
	END 

	SELECT @newProcId AS ProcedureId

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

-----------------------------------------------
TRUNCATE TABLE [ERS_Consultant] 
IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Consultant'))
BEGIN
	SET IDENTITY_INSERT [ERS_Consultant] ON
	  INSERT INTO [ERS_Consultant] (
		[ConsultantID]		,[Forename]			,[Surname]		,[GroupID]      
		,[UsageCount]		,[AllHospitals]     ,[IsExtCons]	,[ExtConsHospitalID]      
		,[ExtConsDeptID]	,[GMCCode]			,[Suppressed])
	  SELECT 
		[Consultant No]		,[Initials]			,ISNULL([Surname],'')		,[Group No]
		,[Count]			
		,CASE WHEN [Hospital number] = -1 THEN 1 ELSE [Hospital number] END
		,[Is ext cons]	,[Ext cons hospital ID]
		,[Ext cons Dept ID]	,[GMC code]			
		,CASE WHEN [Suppressed] = -1 THEN 1 WHEN [Suppressed] = 1 THEN 1 ELSE 0 END
	  FROM [Consultant] ORDER BY [Consultant No]
	SET IDENTITY_INSERT [ERS_Consultant] OFF
END 

---------------
TRUNCATE TABLE [ERS_ConsultantGroup]  
IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Consultant Group'))
BEGIN
	SET IDENTITY_INSERT [ERS_ConsultantGroup] ON
		INSERT INTO [ERS_ConsultantGroup] ([GroupID], [GroupName])
		SELECT [Group No], ISNULL([Group],'') FROM [Consultant Group] ORDER BY [Group No]
	SET IDENTITY_INSERT [ERS_ConsultantGroup] OFF
END
---------------
TRUNCATE TABLE [ERS_ReferralHospitals]  
IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Referral Hospitals'))
BEGIN
	SET IDENTITY_INSERT [ERS_ReferralHospitals] ON
		INSERT INTO [ERS_ReferralHospitals] ([HospitalID],	[HospitalName]
			  ,[DefaultHospital],	[Suppressed])
		SELECT [Number],	ISNULL([Hospital],''),	
				CASE WHEN [Default] = -1 THEN 1 WHEN [Default] = 1 THEN 1 ELSE 0 END,
				CASE WHEN [Suppressed] = -1 THEN 1 WHEN [Suppressed] = 1 THEN 1 ELSE 0 END
			  FROM [Referral Hospitals] ORDER BY [Number]
	SET IDENTITY_INSERT [ERS_ReferralHospitals] OFF
END
---------------
IF ((SELECT COUNT(*) FROM [ERS_OperatingHospitals]) <= 0)
BEGIN
	--TRUNCATE TABLE [ERS_OperatingHospitals]  
	IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Operating Hospital'))
	BEGIN
		INSERT INTO [ERS_OperatingHospitals] ([HospitalName])
		SELECT ISNULL([NAME],'')  FROM [Operating Hospital] ORDER BY [ID]
	END
END
---------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF (EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'users'))
	AND (SELECT OverwriteUsers FROM #variables) = 1 
BEGIN
	--INSERT USERS
	Insert Into [ERS_Users] ([RecordCReated],[LastUpdated],[ExpiresOn],[UserName],[Password],[PasswordExpiresOn],[Title],[Forename],[Surname],[Initials],[Qualifications]
	,[JobTitleID],[AccessID],[AccessRights],[RoleID],[Description],[CanRunAK],[IsListConsultant],[IsEndoscopist1],[IsEndoscopist2],[IsAssistantOrTrainee]
	,[IsNurse1],[IsNurse2],[ResetPassword],[Suppressed],[LastOperatingHospital],[LoggedOn],[LastLoggedIn],[UGI_UserID])
	Select [RecordCReated]=GetDate(),[LastUpdated]=GetDate(),[ExpiresOn]=GetDate()+365*5,[UserName]=[User_ID],[Password]=[02],[PasswordExpiresOn]=NULL  --Getdate()+30
	,[Title]=
	RTrim(SubString(Case Len([01])-Len(Replace([01],' ','')) 
		When 0 Then ''
		When 1 Then ''
		When 2 Then RTrim(SubString([01] ,1,CharIndex(' ',[01],1)))
	Else RTrim(SubString([01] ,1,CharIndex(' ',[01],1))) End+'          ',1,10))
	,[Forename]=Case Len([01])-Len(Replace([01],' ','')) When 0 Then ''
	When 1 Then SubString([01],1,CharIndex(' ',[01],1)-1)
	When 2 Then RTrim(Replace(LTrim(Replace(LTrim(Replace([01],RTrim(SubString([01] ,1,CharIndex(' ',[01],1))),'')),'@','')),SubString(Replace([01],SubString([01],1,CharIndex(' ',[01],1)),''),CharIndex(' ',LTrim(Replace([01],RTrim(SubString([01] ,1,CharIndex(' ',[01],1))),'')))+1,len(Replace([01],SubString([01],1,CharIndex(' ',[01],1)),''))-CharIndex(' ',LTrim(Replace([01],RTrim(SubString([01] ,1,CharIndex(' ',[01],1))),'')))+1),''))
	Else '' End
	,[Surname]=Case Len([01])-Len(Replace([01],' ','')) When 0 Then [01]
	When 1 Then Replace([01],SubString([01],1,CharIndex(' ',[01],1)-1),'')
	When 2 Then SubString(Replace([01],SubString([01],1,CharIndex(' ',[01],1)),''),CharIndex(' ',LTrim(Replace([01],RTrim(SubString([01] ,1,CharIndex(' ',[01],1))),'')))+1,len(Replace([01],SubString([01],1,CharIndex(' ',[01],1)),''))-CharIndex(' ',LTrim(Replace([01],RTrim(SubString([01] ,1,CharIndex(' ',[01],1))),'')))+1)
	Else
	'' End
	,[Initials]=Case Len([01])-Len(Replace([01],' ','')) When 0 Then SubString([01],1,1)
	When 1 Then SubString([01],1,1)+SubString(LTrim(Replace([01],SubString([01],1,CharIndex(' ',[01],1)-1),'')),1,1)
	When 2 Then SubString(LTrim(Replace([01],SubString([01],1,CharIndex(' ',[01],1)-1),'')),1,1)+SubString(SubString(Replace([01],SubString([01],1,CharIndex(' ',[01],1)),''),CharIndex(' ',LTrim(Replace([01],RTrim(SubString([01] ,1,CharIndex(' ',[01],1))),'')))+1,len(Replace([01],SubString([01],1,CharIndex(' ',[01],1)),''))-CharIndex(' ',LTrim(Replace([01],RTrim(SubString([01] ,1,CharIndex(' ',[01],1))),'')))+1),1,1)
	Else '' End
	,[Qualifications]='Imported'
	,[JobTitleID]=1,[AccessID]=1,[AccessRights]=1
	,[RoleID] = CASE WHEN ISNULL([07] % 2,1) = 0 
						THEN (SELECT TOP 1 RoleID FROM ERS_Roles WHERE RoleName = 'System Administrators')
						ELSE (SELECT TOP 1 RoleID FROM ERS_Roles WHERE RoleName = 'Read Only')
				END
	,[Description]=[01],[CanRunAK]=0,[IsListConsultant]=0,[IsEndoscopist1]=0,[IsEndoscopist2]=0,[IsAssistantOrTrainee]=0
	,[IsNurse1]=0,[IsNurse2]=0
	,[ResetPassword]=0,[Suppressed]=0,[LastOperatingHospital]=0,[LoggedOn]=0,[LastLoggedIn]=GetDate(),[UGI_UserID]=[User_ID] 
	From users
	Where [User_ID] <> 'admin'
END
----------------------------
GO



-- ############################################################################################################################
-- #####################		Stored Proc: usp_rep_ConsultantSelectAll							###########################
-- ############################################################################################################################
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Description:	A Common stored proc to list the Consultants- by Type- All, or either Endoscopist, List Consultant, Nurse or Traineee!!
-- =============================================
EXEC DropIfExist 'usp_rep_ConsultantSelectByType','S';
GO
CREATE PROCEDURE dbo.usp_rep_ConsultantSelectByType
(
	@ConsultantType AS VARCHAR(20) = 'all'
	, @HideInactiveConsultants AS BIT = 0	-- ## Initially Show all, unless reqested!
)
AS
BEGIN
	SET NOCOUNT ON;
	
	Declare @Consultant VARCHAR(20) = LOWER(@ConsultantType);
    WITH AllConsultants AS(	-- This CTE will make the primary list - with Operators Only- Consultants and Nurses! On the later SELECT atatement- you can do further filer on Consulant OR Nurse!
	select -- ERS Consultants!
		  U.UserId
		, Surname + 
				CASE WHEN ISNULL(Forename,'') = '' THEN '' 
						ELSE ', ' + Forename	
				END	AS Consultant	
		, U.JobTitleID					AS TitleId
		, IsNull(T.Description, '')		AS Consultant_Title
		, IsListConsultant
		, IsNull(IsEndoscopist1,0)	AS IsEndoscopist1
		, IsNUll(IsEndoscopist2,0)	AS IsEndoscopist2
		, IsAssistantOrTrainee
		, IsNull(IsNurse1,0)		AS IsNurse1
		, IsNull(IsNurse2,0)		AS IsNurse2
	FROM  dbo.ERS_Users AS U
		LEFT JOIN [dbo].[ERS_JobTitles] AS T ON	 U.JobTitleID = T.JobTitleID
		    WHERE ((@HideInactiveConsultants= 0 AND 1=1) /*OR (@HideInactiveConsultants=1 AND U.Active = 1)*/ )
			  AND ( ISNULL(U.IsListConsultant, 0)	= 1 OR
					ISNULL(U.IsEndoscopist1, 0)		= 1 OR
					ISNULL(U.IsEndoscopist2, 0)		= 1 OR
					ISNULL(U.IsAssistantOrTrainee, 0)=1 OR
					ISNULL(U.IsNurse1, 0)			= 1 OR
					ISNULL(U.IsNurse2, 0)			= 1 
					)
	)
	Select * 
	from AllConsultants AS Con
	Where 1=1
		AND 
			(
			(@Consultant='all'						AND (1=1)) 	-- Select All Endoscopist/Nurses
				OR
			((@Consultant LIKE '%list%')			AND ( Con.IsListConsultant = 1))
				OR 
			((@Consultant LIKE '%endoscopist1%')	AND ( Con.IsEndoscopist1 = 1))
				OR 
			((@Consultant LIKE '%endoscopist2%')	AND ( Con.IsEndoscopist2 = 1))
				OR
			((@Consultant LIKE '%assistant%')		AND ( Con.IsAssistantOrTrainee = 1))
				OR 
			((@Consultant LIKE '%nurse1%')			AND ( Con.IsNurse1 = 1))
				OR 			  
			((@Consultant LIKE '%nurse2')			AND ( Con.IsNurse2 = 1))			
			)
		AND (@HideInactiveConsultants=0 /*AND Con.IsActive = 1*/)
	ORDER BY Consultant
	END 
GO

-- =============================================
-- Description:	This will Update the user selection for the 'Reason' - Procedure NOT Carried out..
--				Need to update in Legacy table-"Episode" or in the new 2 Tables-> [ERS_Procedures] AND [ERS_ProceduresReporting] (for PP Fields)
--				SOME 'ReasonCode': 1) Patient DNA, 2) Patient Cancelled, 3) Hospital Cancelled!
-- =============================================
EXEC DropIfExist 'usp_ProcedureNotCarriedOut_UpdateReason','S';
GO

CREATE PROCEDURE dbo.usp_ProcedureNotCarriedOut_UpdateReason
(
	  @ProcedureId	AS INT
	, @DNA_ReasonId	AS TINYINT
	, @PP_DNA		AS VARCHAR(100)=''
)
AS
BEGIN
	SET NOCOUNT ON;
	
	BEGIN -- UPDATE RECORDS IN TWO TABLE-> ERS_Procedures, and ERS_ProceduresReporting
		UPDATE dbo.ERS_Procedures
		   SET 
			   DNA = @DNA_ReasonId
		 WHERE ProcedureId = @ProcedureId;

		--## Now the ERS_ProceduresReporting Table- For the PP fields!
		BEGIN		
			UPDATE dbo.ERS_ProceduresReporting
			   SET 
				   PP_DNA = @PP_DNA
			 WHERE ProcedureId = @ProcedureId;

			IF @@ROWCOUNT=0 
				BEGIN
				-- Means No Records found in the dbo.ERS_ProceduresReporting table. So- Insert/Create the record.
					INSERT INTO dbo.ERS_ProceduresReporting (ProcedureId, PP_DNA) VALUES (@ProcedureId, @PP_DNA);
				END
			ELSE 
				RETURN 1; --## UPDATE OPERATION WAS SUCCESSFULL.. ITS WONDERFUL... SO- GO AWAY NOW!
		END
		
		SELECT '1' Success; --## Just for the EntityFrame work StoredProc usage! They need this Lollypop!
	END 

END 

GO
-- =============================================
-- Description:	Simply select the 'List Item' from the Table..
--				This is capable of Updating any field specified in the Parameter list!
-- =============================================
EXEC DropIfExist 'usp_ERS_List_UpdateValue','S';
GO

CREATE PROCEDURE dbo.usp_ERS_List_UpdateValue
	  @ListId			AS INT
	, @ListDescription	AS VARCHAR(100) = NULL
	, @NewListItemValue AS VARCHAR(100) = NULL
	, @IsSuppressed		AS BIT = NULL
	,@LoggedInUserId	AS INT
AS
BEGIN
	SET NOCOUNT ON;
	UPDATE [dbo].[ERS_Lists]
	   SET [ListDescription]= CASE WHEN @ListDescription	IS NULL THEN [ListDescription]	ELSE @ListDescription END
		 , [ListItemText]	= CASE WHEN @NewListItemValue	IS NULL THEN [ListItemText]		ELSE @NewListItemValue END
		 , [Suppressed]		= CASE WHEN @IsSuppressed		IS NULL THEN [Suppressed]		ELSE @IsSuppressed END
		 , [WhoUpdatedId] = @LoggedInUserId
		 , [WhenUpdated] = GETDATE()
	 WHERE [dbo].[ERS_Lists].ListId = @ListId;

	 IF @@ROWCOUNT>0 
		RETURN 1;
	ELSE 
		RETURN 0;

END
GO
-- =============================================
-- Description:	This will INSERT a new Ward in the Ward table!
-- =============================================
EXEC DropIfExist 'usp_Ward_Insert','S';
GO

CREATE PROCEDURE dbo.usp_Ward_Insert
	@WardName as VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;
        DECLARE @listItemNo INT;
        SELECT @listItemNo = MAX(ListItemNo) FROM ERS_Lists WHERE ListDescription = 'Ward';

        INSERT INTO		
				ERS_Lists (ListDescription, ListItemNo,			ListItemText, Suppressed)
					VALUES ('Ward',			@listItemNo + 1,	@WardName,		0)
END
GO



----######################################################################
--							Database Triggers 
----######################################################################
EXEC DropIfExist 'tr_Procedures_InsteadOfDelete','TR';
GO
-- =============================================
-- Description:	This will stop any DELETE Execution command on ERS_Procedures- trying to DELETE any record. 
--				It will simply make the record as [IsActive]=False
-- =============================================

CREATE TRIGGER dbo.tr_Procedures_InsteadOfDelete
			ON dbo.ERS_Procedures 
	INSTEAD OF DELETE
AS 
BEGIN
	DECLARE @ProcedureId AS INT;	
	SELECT @ProcedureId = DELETED.ProcedureId FROM DELETED;

     UPDATE dbo.ERS_Procedures
		SET IsActive=0
	  WHERE ProcedureId= @ProcedureId;
END
GO



--################## NED EXPORT Objects ############################


--########### Indication Types ######################

CREATE TABLE [dbo].[ERS_IndicationTypes](
	[Id]			[int] IDENTITY(0,1)	NOT NULL,
	[Indication]	[varchar](128)		NOT NULL,
	[NedName]		[varchar](128)		NULL,
	[Category]		[varchar](128)		NULL,
 CONSTRAINT [ERS_IndicationsTypes.PK.IndicationId] PRIMARY KEY CLUSTERED (	[Id] ASC));

INSERT INTO [dbo].[ERS_IndicationTypes]
					 ([Indication], [NedName])     
			Values   (N'None', N'None')
					,(N'Other', N'Other')
					,(N'Abdominal pain', N'Abdominal pain')
					,(N'Abnormality on CT / barium', N'Abnormality on CT / barium')
					,(N'Anaemia', N'Anaemia')
					,(N'', N'Barretts oesophagus')
					,(N'', N'Diarrhoea')
					,(N'', N'Dyspepsia')
					,(N'', N'Dysphagia')
					,(N'', N'Haematemesis')
					,(N'', N'Heartburn / reflux')
					,(N'', N'Melaena')
					,(N'', N'Nausea / vomiting')
					,(N'', N'Odynophagia')
					,(N'', N'PEG change')
					,(N'', N'PEG placement')
					,(N'', N'PEG removal')
					,(N'', N'Positive TTG / EMA')
					,(N'', N'Stent change')
					,(N'', N'Stent placement')
					,(N'', N'Stent removal')
					,(N'Ulcer healing', N'Follow up of gastric ulcer')
					,(N'', N'Varices surveillance / screening')
					,(N'', N'Weight loss')
					,(N'Bowel Ca Screening', N'BCSP')
					,(N'', N'Abdominal mass')
					,(N'', N'Abnormal sigmoidoscopy')
					,(N'', N'Chronic alternating diarrhoea / constipation')
					,(N'', N'Colorectal cancer - follow up')
					,(N'', N'Constipation - acute')
					,(N'', N'Constipation - chronic')
					,(N'', N'Defaecation disorder')
					,(N'', N'Diarrhoea - acute')
					,(N'', N'Diarrhoea - chronic')
					,(N'', N'Diarrhoea - chronic with blood')
					,(N'', N'FHx of colorectal cancer')
					,(N'', N'FOB +''ve')
					,(N'', N'IBD assessment / surveillance')
					,(N'', N'Polyposis syndrome')
					,(N'', N'PR bleeding - altered blood')
					,(N'', N'PR bleeding - anorectal')
					,(N'', N'Previous / known polyps')
					,(N'', N'Tumour assessment')
					,(N'', N'Abnormal liver enzymes')
					,(N'', N'Acute pancreatitis')
					,(N'', N'Ampullary mass')
					,(N'', N'Bile duct injury')
					,(N'', N'Bile duct leak')
					,(N'', N'Cholangitis')
					,(N'', N'Chronic pancreatitis')
					,(N'', N'Gallbladder mass')
					,(N'', N'Gallbladder polyp')
					,(N'', N'Hepatobiliary mass')
					,(N'', N'Jaundice')
					,(N'', N'Pancreatic mass')
					,(N'', N'Pancreatic pseudocyst')
					,(N'', N'Pancreatobiliary pain')
					,(N'', N'Papillary dysfunction')
					,(N'', N'Pre lap choledocholithiasis')
					,(N'', N'Primary sclerosing cholangitis')
					,(N'', N'Purulent cholangitis')
					,(N'', N'Stent dysfunction')
					,(N'ColonAbdominalMass', N'Abdominal mass')
					,(N'ColonAbdominalPain', N'Abdominal pain')
					,(N'ColonAbnormalBariumEnema', N'Abnormality on CT / barium')
					,(N'ColonAbnormalCTScan', N'Abnormality on CT / barium')
					,(N'ColonAbnormalSigmoidoscopy', N'Abnormal sigmoidoscopy')
					,(N'ColonAlterBowelHabit', NULL)
					,(N'ColonAnaemia', N'Anaemia')
					,(N'ColonAnaemiaType', NULL)
					,(N'ColonAssessment', NULL)
					,(N'ColonAssessmentType', N'IBD assessment / surveillance')
					,(N'ColonBleedAnorectal', N'PR bleeding - anorectal')
					,(N'ColonBleedAltered', N'PR bleeding - altered blood')
					,(N'ColonBowelCancerScreening', N'BCSP')
					,(N'ColonCarcinoma', N'Colorectal cancer - follow up')
					,(N'ColonColonicObstruction', NULL)
					,(N'ColonDysplasia', NULL)
					,(N'ColonFamily', N'FHx of colorectal cancer')
					,(N'ColonFamilyAdditionalText', NULL)
					,(N'ColonFamilyType', NULL)
					,(N'ColonFOBT', N'FOB +''ve')
					,(N'ColonMelaena', N'Melaena')
					,(N'ColonPolyps', N'Previous / known polyps')
					,(N'ColonPolyposisSyndrome', N'Polyposis syndrome')
					,(N'ColonRectalBleeding', NULL)
					,(N'ColonSreeningColonoscopy', NULL)
					,(N'ColonSurveillance', NULL)
					,(N'ColonTumourAssessment', N'Tumour assessment')
					,(N'ColonWeightLoss', N'Weight loss');


--########### [ERS_TherapeuticTypes] ################

CREATE TABLE [dbo].[ERS_TherapeuticTypes](
	[Id]			INT		IDENTITY(1,1) NOT NULL,
	[Description]	VARCHAR(128) NOT NULL,
	[NedName]		VARCHAR(128) NOT NULL,
	[OGD]			BIT NULL,
	[ERCP]			BIT NULL,
	[Colon]			BIT NULL,
	[Flexi]			BIT NULL,
	[SchedulerTherapeutic] BIT NOT NULL CONSTRAINT [DF_ERS_TherapeuticTypes_SchedulerTherapeutic] DEFAULT (0),
 CONSTRAINT [ERS_TherapeuticTypes.PK.TherapeuticTypeId] PRIMARY KEY CLUSTERED 
(		[Id] ASC)ON [PRIMARY]     ) ON [PRIMARY]

GO

--### Insert Enum Records IN the Table!!
	INSERT INTO [dbo].[ERS_TherapeuticTypes]
           ([Description]
           ,[NedName]
           ,[OGD]
           ,[ERCP]
           ,[Colon]
           ,[Flexi]
		   ,[SchedulerTherapeutic])
     VALUES 
		('None', 'None', 1, 1, 1, 1, 0),
		('Other', 'Other', 1, 1, 1, 1, 0),
		('Argon beam diathermy', 'Argon beam photocoagulation', 0, 1, 1, 1, 1),
		('Balloon dilation', 'Balloon dilation', 1, 1, 1, 1, 1),
		('Balloon trawl', 'Balloon trawl', 0, 1, 0, 0, 1),
		('Band ligation', 'Band ligation', 1, 0, 0, 0, 1),
		('Banding of haemorrhoid', 'Banding of haemorrhoid', 0, 0, 1, 1, 1),
		('Botox injection', 'Botox injection', 1, 0, 0, 0, 1),
		('Bougie dilation', 'Bougie dilation', 1, 1, 0, 0, 0),
		('Brush cytology', 'Brush cytology', 0, 1, 0, 0, 0),
		('Cannulation', 'Cannulation', 0, 1, 0, 0, 1),
		('Clip', 'Clip placement', 1, 0, 1, 1, 1),
		('Combined procedure (Rendezvous)', 'Combined (rendezvous) proc', 0, 1, 0, 0, 1),
		('Diagnostic cholangiogram', 'Diagnostic cholangiogram', 0, 1, 0, 0, 1),
		('Diagnostic pancreatogram', 'Diagnostic pancreatogram', 0, 1, 0, 0, 1),
		('Endoscopic mucosal resection', 'EMR', 1, 0, 0, 0, 1),
		('Endoloop placement', 'Endoloop placement', 1, 0, 1, 1, 1),
		('Endoscopic cyst puncture', 'Endoscopic cyst puncture', 0, 1, 0, 0, 1),
		('Endoscopic mucosal dissection', 'ESD', 1, 0, 0, 0, 0),
		('Foreign body removal', 'Foreign body removal', 1, 0, 1, 1, 1),
		('Haemostasis', 'Haemostasis', 0, 1, 0, 0, 1),
		('Heater probe coagulation', 'Heater probe', 1, 0, 0, 0, 1),
		('Hot biopsy', 'Hot biopsy', 1, 0, 0, 0, 1),
		('Injection therapy', 'Injection therapy', 1, 1, 1, 1, 1),
		('Manometry', 'Manometry', 0, 1, 0, 0, 1),
		('Marking', 'Marking / tattooing', 1, 0, 1, 1, 1),
		('Nasopancreatic drain', 'Nasopancreatic / bilary drain', 0, 1, 0, 0, 1),
		('PEG change', 'PEG change', 1, 0, 0, 0, 0),
		('PEG insertion', 'PEG placement', 1, 0, 0, 0, 1),
		('PEG removal', 'PEG removal', 1, 0, 0, 0, 1),
		('Polyp - cold biopsy', 'Polyp - cold biopsy', 0, 0, 1, 1, 0),
		('Polyp - EMR', 'Polyp - EMR', 0, 0, 1, 1, 0),
		('Polyp - ESD', 'Polyp - ESD', 0, 0, 1, 1, 0),
		('Polyp - hot biopsy', 'Polyp - hot biopsy', 0, 0, 1, 1, 0),
		('Snare excision', 'Polyp - snare cold', 0, 0, 1, 1, 1),
		('Snare excision', 'Polyp - snare hot', 0, 0, 1, 1, 1),
		('Polypectomy', 'Polypectomy', 1, 0, 0, 0, 1),
		('Radio frequency ablation', 'Radio frequency ablation', 1, 0, 0, 0, 1),
		('Pancreatic orifice sphicterotomy', 'Sphincterotomy', 0, 1, 0, 0, 1),
		('Stent change', 'Stent change', 1, 1, 1, 1, 0),
		('Stent insertion', 'Stent placement', 1, 0, 1, 1, 1),
		('Stent insertion', 'Stent placement - CBD', 0, 1, 0, 0, 1),
		('Stent insertion', 'Stent placement - pancreas', 0, 1, 0, 0, 1),
		('Stent removal', 'Stent removal', 1, 1, 1, 1, 1),
		('Stone removal over 10mm', 'Stone extraction >=10mm', 0, 1, 0, 0, 0),
		('Stone removal 10mm', 'Stone extraction <10mm', 0, 1, 0, 0, 0),
		('Variceal banding', 'Variceal sclerotherapy', 1, 0, 0, 0, 1),
		('YAG laser', 'YAG laser', 1, 0, 1, 1, 1),
		('Bicap electrocautery', 'Bicap electrocautery', 1, 0, 0, 1, 1),
		('Diathermy', 'Diathermy', 1, 0, 0, 1, 1),
		('Fine Needle Aspiration', 'Fine Needle Aspiration', 1, 1, 0, 0, 1),
		('Nasogastric tube (NGT)', 'Nasogastric tube (NGT)', 1, 0, 0, 0, 1),
		('Nasojejunal tube (NJT)', 'Nasojejunal tube (NJT)', 0, 1, 0, 0, 1),
		('Oesophageal dilatation', 'Oesophageal dilatation', 1, 0, 0, 0, 1),
		('PEJ insertion', 'PEJ insertion', 1, 0, 0, 0, 1),
		('PEJ removal', 'PEJ removal', 1, 0, 0, 0, 1),
		('pH probe insertion', 'pH probe insertion', 1, 0, 0, 0, 1),
		('Pyloric/duodenal dilatation', 'Pyloric/duodenal dilatation', 1, 0, 0, 0, 1),
		('Sigmoidopexy', 'Sigmoidopexy', 0, 0, 1, 1, 1),
		('Stone removal', 'Stone removal', 0, 0, 0, 0, 1),
		('Stricture dilatation', 'Stricture dilatation', 0, 0, 0, 0, 1);

--########### END: ERS_TherapeuticTypes

GO

--########### [ERS_Organs] ################

CREATE TABLE [dbo].[ERS_Organs](
	[RegionId] [int] NOT NULL,
	[Organ] [varchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[RegionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
--########### END: [ERS_Organs] ################

GO
--################ IsValidToExportNED ################
EXEC DropIfExist 'usp_IsValidToExportNED','S';
GO
CREATE PROCEDURE [dbo].[usp_IsValidToExportNED] 
	  @ProcedureId int
	, @ProcedureType INT
	, @OperatingHospitalId INT
	, @OutputResult AS BIT = 0
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE   @IsNED_Enabled				AS BIT
			, @IsNED_RequiredForProcedure	AS BIT
			, @NEDExported					AS BIT;

	--## 1) Is NED Enabled for this Hospital...?
	SELECT @IsNED_Enabled= NEDEnabled FROM [dbo].[ERS_SystemConfig] WHERE OperatingHospitalId = @OperatingHospitalId;

	--## 2) Is NED Required for this type of Procedure...?
	SELECT 
		@IsNED_RequiredForProcedure= PT.NedExportRequired
		, @NEDExported = IsNull(NEDExported, 0)				--## 3) Was This procedure record already been Exported to NED...?
	FROM [dbo].[ERS_ProcedureTypes] AS PT
	INNER JOIN dbo.ERS_Procedures AS P ON PT.ProcedureTypeId = P.ProcedureType
	WHERE ProcedureTypeId = @ProcedureType AND P.ProcedureId = @ProcedureId;

	--## Now take your time and think.... go to meeting room and decide- whether to send NED report or not... grab a cooffee!!
	IF  @IsNED_Enabled = 1 AND @IsNED_RequiredForProcedure=1 AND @NEDExported=0
		SELECT @OutputResult = 1;
	ELSE
		SELECT @OutputResult = 0;

	SELECT @OutputResult;	--## This is the actual OutputParam Return;
	
END
GO

---#######################################################################################

EXEC DropIfExist 'usp_NED_Update_Export_Result', 'S';
GO
CREATE PROCEDURE dbo.usp_NED_Update_Export_Result(
	  @ProcedureId			AS INT
	--, @IsSuccessful			AS BIT
	, @NED_ExportMessage	AS VARCHAR(400)
	, @UserId				AS INT
	, @xml_FileStream		AS NVARCHAR(MAX)
	, @xmlFileName			AS VARCHAR(100)
	, @IsSent				AS BIT
)
AS
-- =============================================
-- Description:	This will Update the Export status in two tables
--					1) Update ERS_NedFilesLog
--					2) ER_Procedures
-- =============================================
BEGIN
	SET NOCOUNT ON;
	DECLARE @IsSuccessful			AS BIT;
	SET @IsSuccessful	= (CASE WHEN LEN(@NED_ExportMessage)>1 THEN 0 ELSE 1 END);

	--## First Insert an Audit Log.. whatever just hapenned!
	INSERT INTO dbo.ERS_NedFilesLog(ProcedureId, xmlFile, IsProcessed, IsSchemaValid, IsSent, IsSuccess, LastUserId, NEDMessage, xmlFileName) 
						VALUES(
							  @ProcedureId
							, @xml_FileStream
							, @IsSuccessful	-- IsProcessed
							, @IsSuccessful	-- IsSchemaValid
							, @IsSent -- IsSent
							, @IsSuccessful
							, @UserId
							, (CASE  @IsSuccessful WHEN 1 THEN NULL ELSE @NED_ExportMessage END)
							, @xmlFileName
						);
	
	--## Now Update the ERS_Procedures Table
	UPDATE dbo.ERS_Procedures
		SET NEDExported	= @IsSuccessful
	WHERE ProcedureId	= @ProcedureId;
END
GO

---#######################################################################################

EXEC DropIfExist 'usp_NED_Update_Export_Settings', 'S';
GO
CREATE PROCEDURE dbo.usp_NED_Update_Export_Settings(
	  @HospitalSiteCode AS VARCHAR(20)
	, @OrganisationCode AS VARCHAR(20)
	, @APIKey AS VARCHAR(100)
	, @BatchId AS VARCHAR(15)
	, @NED_ExportPath  AS VARCHAR(200)
	, @LoggedInUserId AS INT
)
AS
-- =============================================
-- Description:	This will update Five fields related to the 'NED Export' operations
-- =============================================
BEGIN
	SET NOCOUNT ON;
	UPDATE dbo.ERS_SystemConfig
	SET   NED_HospitalSiteCode  =@HospitalSiteCode
		, NED_OrganisationCode  = @OrganisationCode
		, NED_APIKey			= @APIKey
		, NED_BatchId			= @BatchId
		, NED_ExportPath		= @NED_ExportPath
		, WhoUpdatedId			= @LoggedInUserId
		, WhenUpdated			= GETDATE();

    
END
GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_WaitList.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_WaitList](
	[WaitlistId] [int] IDENTITY(1,1) NOT NULL,
	[PatientID] [int] NOT NULL,
	[ReferralDate] [datetime] NOT NULL,
	[ReferrerID] [int] NOT NULL,
	[Status] [int] NOT NULL CONSTRAINT [DF_ERS_WaitList_Status]  DEFAULT ((0)),
 CONSTRAINT [PK_ERS_WaitList] PRIMARY KEY CLUSTERED  ( [WaitlistId] ASC )
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------001 Create Table ERS_ImagePort.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_ImagePort](
	[ImagePortId] [int] IDENTITY(1,1) NOT NULL,
	[OperatingHospitalId] INT NULL,
	[PortName] [varchar](500) NOT NULL,
	[MacAddress] [varchar](max) NULL,
	[InstrumentId] [int] NULL,
	[Static] [bit] NULL,
	[PCName] [varchar](500) NULL,
	[IsActive] [bit] NULL  CONSTRAINT DF_ImagePort_Active DEFAULT 1,
	[Comments] [varchar](1000) NULL,
 CONSTRAINT [PK_ERS_ImagePort] PRIMARY KEY CLUSTERED ([ImagePortId] ASC),
 CONSTRAINT [FK_ImagePort_OperatingHospitalId] FOREIGN KEY (OperatingHospitalId) REFERENCES [dbo].[ERS_OperatingHospitals](OperatingHospitalId),
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

---#######################################################################################
-- =============================================
-- SCHEDULER
-- =============================================


--------------------------------------------------------------------------------------------------------------------
--------------------------------------Create Proc sch_slot_availability_search.sql----------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_slot_availability_search', 'S';
GO
CREATE PROCEDURE [dbo].[sch_slot_availability_search]
(
	@ProcedureTypes varchar(100) = NULL,
	@TherapeuticTypes AS varchar(100) = NULL,
	@Slots varchar(100) = NULL,
	@Endoscopist varchar(100) = NULL,
	@SearchStartDate datetime,
	@SearchEndDate datetime,
	@SlotLength int,
	@GIProcedure bit = NULL,
	@OperatingHospitalID int
)
AS
BEGIN
	IF OBJECT_ID('tmpdb..#tmpEndos') IS NOT NULL DROP TABLE #tmpEndos
	SELECT * INTO #tmpEndos FROM fnSplitString(@Endoscopist, ',')

	IF OBJECT_ID('tmpdb..#tmpProcTypes') IS NOT NULL DROP TABLE #tmpProcTypes
	SELECT * INTO #tmpProcTypes FROM fnSplitString(ISNULL(@ProcedureTypes,''), ',')

	IF OBJECT_ID('tmpdb..#tmpProcTherapTypes') IS NOT NULL DROP TABLE #tmpProcTherapTypes
	SELECT * INTO #tmpProcTherapTypes FROM fnSplitString(ISNULL(@TherapeuticTypes,''), ',')

	IF OBJECT_ID('tmpdb..#tmpSlotTypes') IS NOT NULL DROP TABLE #tmpSlotTypes
	SELECT * INTO #tmpSlotTypes FROM fnSplitString(ISNULL(@Slots,''), ',')

	SELECT  DISTINCT esdp.DiaryId, esr.RoomName, esr.RoomId, esdp.DiaryStart, DATEADD(Minute, DATEDIFF(Minute, MIN(esdp.DiaryStart), MAX(esdp.[End])), esdp.DiaryStart) AS [End], esdp.RecurrenceRule, esss.Description AS SlotType, eslr.ListName, ISNULL(esdp.UserID, 0) AS EndoId, ISNULL(ec.Description,'') AS Endoscopist, eslr.ListRulesId, CASE WHEN esls.ProcedureTypeID = 0 THEN '' ELSE ept.SchedulerProcName END AS ProcedureType--, MIN(esls.StartTime), MAX(esls.EndTime), DATEDIFF(Minute, MIN(esls.StartTime), MAX(esls.EndTime)) AS SlotLength--, * 
	FROM dbo.ERS_SCH_DiaryPages esdp
		INNER JOIN dbo.ERS_SCH_ListRules eslr ON esdp.ListRulesId = eslr.ListRulesId
		INNER JOIN dbo.ERS_SCH_ListSlots esls ON esls.ListRulesId = eslr.ListRulesId
		LEFT JOIN (SELECT ecpt.EndoscopistID, ecpt.ProcedureTypeID, ecpt.Diagnostic, ecpt.Therapeutic, ecpt2.TherapeuticTypeID
					FROM ERS_ConsultantProcedureTypes ecpt
						INNER JOIN ERS_ConsultantProcedureTherapeutics ecpt2 
						   ON ecpt.ConsultantProcedureId = ecpt2.ConsultantProcedureID
					WHERE ecpt.Diagnostic = 1 OR ecpt.Therapeutic = 1) cp ON cp.EndoscopistID = ISNULL(eslr.Endoscopist,cp.EndoscopistID)
		INNER JOIN dbo.ERS_SCH_Rooms esr ON esr.RoomId = esdp.RoomID
		INNER JOIN dbo.ERS_SCH_SlotStatus esss ON esss.StatusId = esls.SlotId
		LEFT JOIN dbo.ERS_Users ec ON esdp.UserID = ec.UserID
		LEFT JOIN dbo.ERS_ProcedureTypes ept ON ept.ProcedureTypeId = esls.ProcedureTypeID
	WHERE 
			esr.HospitalId	= @OperatingHospitalID
		AND ((ISNULL(@ProcedureTypes,'') <> '' AND cp.ProcedureTypeID IN (SELECT item FROM #tmpProcTypes)) OR ((ISNULL(@ProcedureTypes,'') = '' OR ISNULL(@ProcedureTypes,'') = '0') AND 1=1 ))
		AND ((ISNULL(@ProcedureTypes,'') <> '' AND esls.ProcedureTypeID IN (SELECT item FROM #tmpProcTypes)) OR ((ISNULL(@ProcedureTypes,'') = '' OR ISNULL(@ProcedureTypes,'') = '0') AND 1=1 ))
		AND ((ISNULL(@TherapeuticTypes,'') <> '' AND cp.TherapeuticTypeID IN (SELECT item FROM #tmpProcTherapTypes)) OR (ISNULL(@TherapeuticTypes,'') = '' AND 1=1 ) OR (ISNULL(@TherapeuticTypes,'') <> '' AND eslr.Endoscopist IS NULL)) --filter on endoscopists therapeutic type ability
		AND ((((ISNULL(@Endoscopist,'') <> '' AND esdp.UserID IN (SELECT item FROM #tmpEndos)) OR (ISNULL(@Endoscopist,'') = '' AND 1=1))) OR ISNULL(esdp.UserID,'') ='')
		AND (esls.SlotId IN (SELECT item FROM #tmpSlotTypes) OR (ISNULL(@Slots,'') = '' AND 1=1)) --if Slot type specified

		AND (esdp.Start >= @SearchStartDate OR esdp.Start < @SearchEndDate)
		--AND esls.SlotLength >= @SlotLength	--(replace this with a sum based on points mapping change)
	
	GROUP BY esdp.DiaryId, esr.RoomName, esr.RoomId, esdp.DiaryStart, esdp.[DiaryEnd], esdp.RecurrenceRule, esss.Description, ListName, esdp.UserID, ec.Description, eslr.ListRulesId, ept.SchedulerProcName, esls.ProcedureTypeID
	HAVING DATEDIFF(Minute, MIN(esdp.Start), MAX(esdp.[End])) > @SlotLength
	
	DROP TABLE #tmpEndos
	DROP TABLE #tmpProcTypes
	DROP TABLE #tmpSlotTypes
	DROP TABLE #tmpProcTherapTypes
END
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_SCH_ListRules](
	[ListRulesId] [int] IDENTITY(1,1) NOT NULL,
	[Points] [float] NULL,
	[PointMins] [float] NULL,
	[Endoscopist] [int] NULL,
	[ListName] [nvarchar](255) NULL,
	[GIProcedure] [bit] NOT NULL CONSTRAINT DF_SCH_ListRules_GIProcedure DEFAULT 0,
	[Training] [bit] NOT NULL CONSTRAINT DF_SCH_ListRules_Training DEFAULT 0,
	[StartTime] [time] NULL,
	[Suppressed] [bit] NOT NULL CONSTRAINT DF_SCH_ListRules_Suppressed DEFAULT 0,
	[OperatingHospitalId] [int] NOT NULL,
	[NonGIProcedureTypeName] [nvarchar](100) NULL,
	[NonGIProcedureMinutesPerPoint] [int] NULL,
	[NonGIDiagnosticCallInTime] [int] NULL,
	[NonGIDiagnosticProcedurePoints] [int] NULL,
	[NonGITherapeuticCallInTime] [int] NULL,
	[NonGITherapeuticProcedurePoints] [int] NULL,
	CONSTRAINT [PK_SCH_ListRules] PRIMARY KEY CLUSTERED ([ListRulesId]),
	CONSTRAINT FK_SCH_ListRules_OperatingHospitalId FOREIGN KEY (OperatingHospitalId) REFERENCES ERS_OperatingHospitals ([OperatingHospitalID])
) ON [PRIMARY]

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_SCH_ListSlots.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_SCH_ListSlots](
	[ListSlotId] [int] IDENTITY(1,1) NOT NULL,
	[ListRulesId] [int],
	[SlotId] [tinyint] NULL,
	[ProcedureTypeId] [tinyint] NULL,
	[StartTime] [time] NULL,
	[EndTime] [time] NULL,
	[Suppressed] [bit] NULL,
	[OperatingHospitalId] [INT] NULL,
	CONSTRAINT [PK_SCH_ListSlots] PRIMARY KEY CLUSTERED ([ListSlotId]),
	CONSTRAINT [FK_SCH_ListSolts_OperatingHospitalId] FOREIGN KEY([OperatingHospitalId]) REFERENCES [dbo].[ERS_OperatingHospitals] ([OperatingHospitalId])
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_SCH_PointMappings.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_SCH_PointMappings](
	[PointsMappingId] [int] IDENTITY(1,1) NOT NULL,
	[Minutes] [int] NOT NULL,
	[OperatingHospitalId] [int] NOT NULL,
	[ProceduretypeId] [int] NOT NULL,
	[Points] [decimal](2, 1) NULL,
 CONSTRAINT [PK_SCH_PointMappings] PRIMARY KEY CLUSTERED ([PointsMappingId] ASC),
 CONSTRAINT [UK_SCH_PointMappings] UNIQUE NONCLUSTERED 
(
	[ProceduretypeId] ASC,
	[Minutes] ASC,
	[OperatingHospitalId] ASC
),
 CONSTRAINT [FK_SCH_PointMappings_OperatingHospitals] FOREIGN KEY ([OperatingHospitalId])
			REFERENCES [dbo].[ERS_OperatingHospitals] ([OperatingHospitalId])
) ON [PRIMARY]

GO


INSERT INTO [dbo].[ERS_SCH_PointMappings] ([Points], [Minutes] ,[OperatingHospitalId] ,[ProceduretypeId])
SELECT 1, 15, o.OperatingHospitalId, p.ProcedureTypeId FROM dbo.ERS_OperatingHospitals o, dbo.ERS_ProcedureTypes p


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_SCH_SlotStatus.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_SCH_SlotStatus](
	[StatusId] [int] IDENTITY(1,1) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[GI] [bit] NOT NULL CONSTRAINT DF_SCH_SlotStatus_GI DEFAULT 0,
	[nonGI] [bit] NOT NULL CONSTRAINT DF_SCH_SlotStatus_nonGI DEFAULT 0,
	[BreachDays] [int] NULL,
	[ForeColor] [nvarchar](20) NULL,
	[BackColor] [nvarchar](20) NULL,
	WhoUpdatedId INT NULL,
	WhoCreatedId INT NULL,
	WhenCreated DATETIME NULL Default GetDate(),
	WhenUpdated DATETIME NULL,
	CONSTRAINT [PK_SCH_SlotStatus] PRIMARY KEY CLUSTERED ([StatusId])
) ON [PRIMARY]

GO

INSERT INTO ERS_SCH_SlotStatus ([Description], [GI], [nonGI], [BreachDays], [ForeColor], [BackColor]) 
		VALUES ('Routine',					1, 1, NULL, NULL, NULL)
					,('In Patient',			1, 1, NULL, NULL, NULL)
					,('Urgent',				1, 1, NULL, NULL, NULL)
					,('Planned',			1, 1, NULL, NULL, NULL)
					,('2 week wait',		1, 1, NULL, NULL, NULL)
					,('Open Access',		1, 1, NULL, NULL, NULL)
					,('Bowel Screening',	1, 0, NULL, NULL, NULL)
					

GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_SCH_Rooms.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON	

CREATE TABLE [dbo].[ERS_SCH_Rooms](
	[RoomId] [int] IDENTITY(1,1) NOT NULL,
	[RoomName] [nvarchar](255) NULL,
	[AllProcedureTypes] [bit] NOT NULL CONSTRAINT DF_SCH_Rooms_AllProcedureTypes DEFAULT 0,
	[HospitalId] [int] NULL,
	[OtherInvestigations] [bit] NOT NULL CONSTRAINT DF_SCH_Rooms_OtherInvestigations DEFAULT 0,
	[Suppressed] [bit] NOT NULL CONSTRAINT DF_SCH_Rooms_Suppressed DEFAULT 0,
	[SuppressDate] [datetime] NULL,
	CONSTRAINT [PK_SCH_Rooms] PRIMARY KEY CLUSTERED ([RoomId])
) ON [PRIMARY]

GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_SCH_RoomProcedures.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_SCH_RoomProcedures](
	[RoomProcId] [int] IDENTITY(1,1) NOT NULL,
	[RoomId] [int] NULL,
	[ProcedureTypeId] [tinyint] NULL,
	CONSTRAINT [PK_SCH_RoomProcedures] PRIMARY KEY CLUSTERED ([RoomProcId])
) ON [PRIMARY]

GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_SCH_DiaryPages.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_SCH_DiaryPages](
	[DiaryId] [int] IDENTITY(1,1) NOT NULL,
	[Subject] [nvarchar](255) NULL,
	[DiaryStart] [datetime] NOT NULL,
	[DiaryEnd] [datetime] NOT NULL,
	[UserID] [int] NULL,
	[RoomID] [int] NULL,
	[ListRulesId] [int] NULL,
	[RecurrenceRule] [nvarchar](1024) NULL,
	[RecurrenceParentID] [int] NULL,
	[Annotations] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[WhoUpdatedId]	INT NULL Default 0,
	[WhoCreatedId]	INT NULL Default 0,
	[WhenCreated]	DATETIME NULL Default GetDate(),
	[WhenUpdated]	DATETIME NULL Default GetDate(),
 CONSTRAINT [PK_SCH_DiaryPages] PRIMARY KEY CLUSTERED ([DiaryId])
) ON [PRIMARY] 

GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_SCH_Appointments.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_SCH_Appointments](
	[AppId] [int] IDENTITY(1,1) NOT NULL,
	[Subject] [nvarchar](255) NULL,
	[Start] [datetime] NOT NULL,
	[End] [datetime] NOT NULL,
	[UserID] [int] NULL,
	[RoomID] [int] NULL,
	[ListRulesId] [int] NULL,
	[RecurrenceRule] [nvarchar](1024) NULL,
	[RecurrenceParentID] [int] NULL,
	[Annotations] [nvarchar](50) NULL,
	[Description] [nvarchar](max) NULL,
 CONSTRAINT [PK_SCH_Appointments] PRIMARY KEY CLUSTERED ([AppId])
) ON [PRIMARY] 

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------101a Create Table ERS_SCH_GenderList.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_SCH_GenderList](
	[GenderListId] [bigint] IDENTITY(1,1) NOT NULL,
	[DiaryId] [int] NOT NULL,
	[ListDate] [datetime] NOT NULL,
	[Male] [bit] NOT NULL CONSTRAINT [DF_SCH_GenderList_Male] DEFAULT (0),
	[Female] [bit] NOT NULL CONSTRAINT [DF_SCH_GenderList_Female] DEFAULT (0),
	CONSTRAINT [ERS_PK_GenderListId] PRIMARY KEY CLUSTERED ([GenderListId] ASC) ON [PRIMARY],
	CONSTRAINT [FK_SCH_GenderList_DiaryId] FOREIGN KEY ([DiaryId]) REFERENCES ERS_SCH_DiaryPages ([DiaryId])
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------------- Create Table ERS_SCH_FreeSlotDefaults.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

CREATE TABLE [dbo].[ERS_SCH_FreeSlotDefaults](
	[FreeSlotDefaultId] [bigint] IDENTITY(1,1) NOT NULL,
	[OperatingHospitalId] [int] NOT NULL,
	[DayOfWeek] [int] NOT NULL,
	[AM] [bit] NOT NULL,
	[PM] [bit] NOT NULL,
	[EVE] [bit] NOT NULL,
	CONSTRAINT [ERS_PK_SCH_FreeSlotDefaults] PRIMARY KEY CLUSTERED ([FreeSlotDefaultId] ASC) ON [PRIMARY],
	CONSTRAINT [FK_SCH_FreeSlotDefaults_OperatingHospitalId] FOREIGN KEY (OperatingHospitalId) REFERENCES ERS_OperatingHospitals ([OperatingHospitalID])
) ON [PRIMARY]

GO


--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_AbandonCodes.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_AbandonCodes](
	[AbandonId] [int] IDENTITY(1,1) NOT NULL,
	[Code] varchar(10) NOT NULL,
	[Detail] [varchar](50) NOT NULL,
	[SortOrder] [int] NULL,
	CONSTRAINT [PK_ERS_AbandonCodes] PRIMARY KEY CLUSTERED  ([AbandonId])
) ON [PRIMARY]

GO

INSERT INTO [ERS_AbandonCodes] ([Code], [Detail]) 
VALUES  ('P','Patient')
		,('D','Doctor')
		,('H','Hospital');

--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_AbandonReasons.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_AbandonReasons](
	[AbandonReasonId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](30) NOT NULL,
	[AbandonCodeId] [int] NOT NULL,
	[Detail] [varchar](50) NOT NULL,
	[SortOrder] [int] NULL,
	CONSTRAINT [PK_ERS_AbandonReasons] PRIMARY KEY CLUSTERED  ([AbandonReasonId]),
	CONSTRAINT [FK_ERS_AbandonReasons_ERS_AbandonCodes] FOREIGN KEY ([AbandonCodeId]) REFERENCES [dbo].[ERS_AbandonCodes]([AbandonId])
) ON [PRIMARY]

GO

INSERT INTO [ERS_AbandonReasons] ([Code], [Detail], [AbandonCodeId]) 
VALUES  ('Ill','Patient Too Ill', (select AbandonId FROM [dbo].[ERS_AbandonCodes] where Detail = 'Patient'))
		,('Stress', 'Patient Stress', (select AbandonId FROM [dbo].[ERS_AbandonCodes] where Detail = 'Patient'))
		,('Tolerate', 'Patient unable to tolerate', (select AbandonId FROM [dbo].[ERS_AbandonCodes] where Detail = 'Patient'))
		,('Not Needed', 'Procedure no Longer Required', (select AbandonId FROM [dbo].[ERS_AbandonCodes] where Detail = 'Doctor'))
		,('Ill', 'Patient too Ill', (select AbandonId FROM [dbo].[ERS_AbandonCodes] where Detail = 'Patient'))
		,('Equipment', 'Equipment Failure', (select AbandonId FROM [dbo].[ERS_AbandonCodes] where Detail = 'Hospital'))
		,('Staff', 'Staff Shortage', (select AbandonId FROM [dbo].[ERS_AbandonCodes] where Detail = 'Patient'));

--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_AppointmentStatus.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_AppointmentStatus](
       [UniqueId] [int] IDENTITY(1,1) NOT NULL,
       [Description] [nvarchar](255) NOT NULL,
       [IsDeleted] [bit] NOT NULL CONSTRAINT [DF_Appointment_IsDeleted]  DEFAULT ((0)),
       [HDCKEY] [varchar](5) NULL,
	CONSTRAINT [PK_ERS_AppointmentStatus] PRIMARY KEY CLUSTERED  ([UniqueId])
) ON [PRIMARY]

GO

INSERT INTO [ERS_AppointmentStatus] ([Description], [HDCKEY]) 
VALUES ('Booked', 'B')
		,('Attended', 'A')
		,('Arrived', 'BA')
		,('Cancelled', 'C')
		,('Deleted', 'X')
		,('DNA', 'D')
		,('Pending', 'P')
		,('TCI - Booked', 'TCI')
		,('In Progress', 'IP');

--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_CancelCodes.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_CancelCodes](
	[CancelId] [int] IDENTITY(1,1) NOT NULL,
	[Code] varchar(10) NOT NULL,
	[Detail] [varchar](50) NOT NULL,
	[SortOrder] [int] NULL,
	CONSTRAINT [PK_ERS_CancelCodes] PRIMARY KEY CLUSTERED  ([CancelId])
) ON [PRIMARY]

GO


---------CHECK WITH DAVID : [CancelCodeId]  and @CancelId below!!---------------------------------------------------
----------------------------------------------Create Table ERS_CancelReasons.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_CancelReasons](
	[CancelReasonId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](30) NOT NULL,
	[CancelCodeId] [int] NOT NULL,
	[Detail] [varchar](50) NOT NULL,
	[SortOrder] [int] NULL,
	CONSTRAINT [PK_ERS_CancelReasons] PRIMARY KEY CLUSTERED  ([CancelReasonId]),
	CONSTRAINT [FK_ERS_CancelReasons_ERS_CancelCodes] FOREIGN KEY ([CancelCodeId]) REFERENCES [dbo].[ERS_CancelCodes]([CancelId])
) ON [PRIMARY]

GO


DECLARE @CancelId as INT
INSERT INTO [ERS_CancelCodes] ([Code], [Detail]) SELECT 'D', 'Dummy'
SET @CancelId = @@IDENTITY
 
INSERT INTO [ERS_CancelReasons] ([Code], [Detail], [CancelCodeId]) 
VALUES	('P','Patient', @CancelId),									('Ill','Patient Ill', @CancelId)
		,('Holiday','Patient on Holiday', @CancelId),				('Transport','Patient no Transport', @CancelId)
		,('D','Doctor', @CancelId),									('Deceased','Patient Deceased', @CancelId)
		,('Not Needed','Procedure no Longer Required', @CancelId),	('Referred','Referred Elsewhere', @CancelId)
		,('Ill','Patient Ill', @CancelId),							('H','Hospital', @CancelId)
		,('Equipment','Equipment Failure', @CancelId),				('Staff','Staff Shortage', @CancelId);

--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_Priority.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Priority](
	[PriorityId] [int] IDENTITY(1,1) NOT NULL,
	[Description] [nvarchar](255) NULL,
	[BreachDays] [int] NULL,
	[ForeColor] [nvarchar](20) NULL,
	[BackColor] [nvarchar](20) NULL,
	HL7Code varchar(25),
	CONSTRAINT [PK_ERS_Priority] PRIMARY KEY CLUSTERED  ([PriorityId])
) ON [PRIMARY]

GO

INSERT INTO [ERS_Priority] ([Description], [BreachDays]) 
VALUES ('Routine',5),		('In Patient',7)
		,('Urgent',5),		('Planned',10)
		,('2 week wait',4),	('Open Access',1)
		,('Bowel Screening',3);

--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_Referrers.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO	

CREATE TABLE [dbo].[ERS_Referrers](
	[ReferrerId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [nvarchar](5) NULL,
	[Type] [nvarchar](3) NULL,
	[Title] [nvarchar](10) NULL,
	[Initial] [nvarchar](5) NULL,
	[Name] [nvarchar](30) NULL,
	[Telephone] [nvarchar](20) NULL,
	[Mobile] [nvarchar](20) NULL,
	[InternalPage] [nvarchar](20) NULL,
	[ExternalPage] [nvarchar](20) NULL,
	[Fax] [nvarchar](20) NULL,
	[Email] [nvarchar](40) NULL,
	[GMCCode] [nvarchar](10) NULL,
	[DateFrom] [datetime] NULL,
	[DateTo] [datetime] NULL,
	[Status] [bit] NOT NULL,
	[Order] [nvarchar](50) NULL,
	[Address1] [nvarchar](25) NULL,
	[Address2] [nvarchar](25) NULL,
	[Address3] [nvarchar](25) NULL,
	[Address4] [nvarchar](25) NULL,
	[Postcode] [nvarchar](8) NULL,
	[Forename] [nvarchar](25) NULL,
	[CompleteName]  AS ([DBO].[fnFormatCompleteName]([Title],[Initial],[Name])),
	[Comment] [nvarchar](50) NULL,
	[Author] [bit] NULL,
	[Endoscopist] [bit] NULL,
	[DateAdded] [datetime] NULL,
	CONSTRAINT [PK_ERS_Referrers] PRIMARY KEY CLUSTERED  ([ReferrerId])
) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_ERS_REFERRERSCODE] ON [dbo].[ERS_Referrers] ([Code]); 
CREATE NONCLUSTERED INDEX [IX_ERS_REFERRERSGMCCODE] ON [dbo].[ERS_Referrers] ([GMCCode]); 
CREATE NONCLUSTERED INDEX [IX_ERS_REFERRERSID] ON [dbo].[ERS_Referrers] ([ReferrerId]); 
CREATE NONCLUSTERED INDEX [IX_ERS_REFERRERSNAME] ON [dbo].[ERS_Referrers] ([Name]); 


--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_Specialties.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Specialties](
	[SpecialtyId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [nvarchar](5) NULL,
	[Title] [nvarchar](100) NULL,
	[ExternalCode] [nvarchar](10) NULL,
	[LocalCode] [nvarchar](10) NULL,
	CONSTRAINT [PK_ERS_Specialties] PRIMARY KEY CLUSTERED  ([SpecialtyId])
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_ERS_SPECIALTIESCODE] ON [dbo].[ERS_Specialties] ([Code]); 
CREATE NONCLUSTERED INDEX [IX_ERS_SPECIALTIESID] ON [dbo].[ERS_Specialties] ([SpecialtyId]); 


INSERT INTO [dbo].[ERS_Specialties](Code, Title)
VALUES ('99', 'DUMMY LINE'),							('100', 'GENERAL SURGERY')
	,('101', 'UROLOGY'),								('110', 'TRAUMA & ORTHOPAEDICS')
	,('120', 'ENT'),									('130', 'OPHTHALMOLOGY')
	,('140', 'ORAL SURGERY'),							('141', 'RESTORATIVE DENTISTRY')
	,('142', 'PAEDIATRIC DENTISTRY'),					('143', 'ORTHODONTICS')
	,('145', 'ORAL & MAXILLO FACIAL SURGERY'),			('146', 'ENDODONTICS')
	,('147', 'PERIODONTICS'),							('148', 'PROSTHODONTICS')
	,('149', 'SURGICAL DENTISTRY'),						('150', 'NEUROSURGERY')
	,('160', 'PLASTIC SURGERY'),						('170', 'CARDIOTHORACIC SURGERY')
	,('171', 'PAEDIATRIC SURGERY'),						('180', 'ACCIDENT & EMERGENCY')
	,('190', 'ANAESTHETICS'),							('192', 'CRITICAL CARE MEDICINE')
	,('199', 'Non-UK provider; specialty function not known treatment mainly surgical')
	,('300', 'GENERAL MEDICINE'),						('301', 'GASTROENTEROLOGY')
	,('302', 'ENDOCRINOLOGY'),							('303', 'CLINICAL HAEMATOLOGY')
	,('304', 'CLINICAL PHYSIOLOGY'),					('305', 'CLINICAL PHARMACOLOGY')
	,('310', 'AUDIOLOGICAL MEDICINE'),					('311', 'CLINICAL GENETICS')
	,('312', 'CLINICAL CYTOGENETICS and MOLECULAR GENETICS'),('313', 'CLINICAL IMMUNOLOGY and ALLERGY')
	,('314', 'REHABILITATION'),							('315', 'PALLIATIVE MEDICINE')
	,('320', 'CARDIOLOGY'),								('321', 'PAEDIATRIC CARDIOLOGY')
	,('325', 'SPORTS AND EXERCISE MEDICINE'),			('326', 'ACUTE INTERNAL MEDICINE')
	,('330', 'DERMATOLOGY'),							('340', 'RESPIRATORY MEDICINE')
	,('341', 'RESPIRATORY PHYSIOLOGY'),					('342', 'PROGRAMMED PULMONARY REHABILITATION')
	,('343', 'ADULT CYSTIC FIBROSIS SERVICE'),			('344', 'COMPLEX SPECIALISED REHABILITATION SERVICE')
	,('345', 'SPECIALIST REHABILITATION SERVICE'),		('346', 'LOCAL SPECIALIST REHABILITATION SERVICE')
	,('350', 'INFECTIOUS DISEASES'),					('352', 'TROPICAL MEDICINE')
	,('360', 'GENITOURINARY MEDICINE'),					('361', 'NEPHROLOGY')
	,('370', 'MEDICAL ONCOLOGY'),						('371', 'NUCLEAR MEDICINE')
	,('400', 'NEUROLOGY'),								('401', 'CLINICAL NEURO-PHYSIOLOGY')
	,('410', 'RHEUMATOLOGY'),							('420', 'PAEDIATRICS')
	,('421', 'PAEDIATRIC NEUROLOGY'),					('430', 'GERIATRIC MEDICINE')
	,('450', 'DENTAL MEDICINE SPECIALTIES'),			('451', 'SPECIAL CARE DENTISTRY')
	,('460', 'MEDICAL OPHTHALMOLOGY'),					('499', 'Non-UK provider; specialty function not known  treatment mainly medical')
	,('500', 'OBSTETRICS and GYNAECOLOGY'),				('501', 'OBSTETRICS')
	,('502', 'GYNAECOLOGY'),							('504', 'COMMUNITY SEXUAL AND REPRODUCTIVE HEALTH')
	,('560', 'MIDWIFE EPISODE'),						('600', 'GENERAL MEDICAL PRACTICE')
	,('601', 'GENERAL DENTAL PRACTICE'),				('700', 'LEARNING DISABILITY')
	,('710', 'ADULT MENTAL ILLNESS'),					('711', 'CHILD and ADOLESCENT PSYCHIATRY')
	,('712', 'FORENSIC PSYCHIATRY'),					('713', 'PSYCHOTHERAPY')
	,('715', 'OLD AGE PSYCHIATRY'),						('800', 'CLINICAL ONCOLOGY')
	,('810', 'RADIOLOGY'),								('820', 'GENERAL PATHOLOGY')
	,('821', 'BLOOD TRANSFUSION'),						('822', 'CHEMICAL PATHOLOGY')
	,('823', 'HAEMATOLOGY'),							('824', 'HISTOPATHOLOGY')
	,('830', 'IMMUNOPATHOLOGY'),						('831', 'MEDICAL MICROBIOLOGY AND VIROLOGY')
	,('833', 'MEDICAL MICROBIOLOGY'),					('834', 'MEDICAL VIROLOGY')
	,('900', 'COMMUNITY MEDICINE'),						('901', 'OCCUPATIONAL MEDICINE')
	,('902', 'COMMUNITY HEALTH SERVICES DENTAL'),		('903', 'PUBLIC HEALTH MEDICINE')
	,('904', 'PUBLIC HEALTH DENTAL'),					('950', 'NURSING EPISODE')
	,('960', 'ALLIED HEALTH PROFESSIONAL EPISODE');


--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_Referrer_Links.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Referrer_Links](
	[ReferrerID] [int] NULL,
	[SpecialtyId] [int] NULL,
	[Primary] [bit] NULL,
	[Status] [bit] NULL,
	[TempCode] [varchar](50) NULL
) ON [PRIMARY]
GO

CREATE NONCLUSTERED INDEX [IX_ERS_REF_LINKSID] ON [dbo].[ERS_Referrer_Links] ([ReferrerID]); 
CREATE NONCLUSTERED INDEX [IXERS_REF_LINKSSPECID] ON [dbo].[ERS_Referrer_Links] ([SpecialtyId]); 


--------------------------------------------------------------------------------------------------------------------
----------------------------------------------Create Table ERS_Appointments.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
CREATE TABLE [dbo].[ERS_Appointments](
	[AppointmentId] [int] IDENTITY(1,1) NOT NULL,
	[PatientId] [int] NOT NULL,
	[EndoscopistId] [int] NULL,
	[WaitingListId] [int] NULL,
	[AdmissionTypeId] [int] NULL,
	[AppointmentStatusId] [int] NULL,
	[PatientChoice] [bit] NULL,
	[BookingModeId] [int] NULL,
	[BookingTypeId] [int] NULL,
	[ReferralLocationId] [int] NULL,
	[ReferrerId] [int] NULL,
	[SpecialtyId] [int] NULL,
	[GPId] [int] NULL,
	[PracticeID] [int] NULL,
	[PriorityiD] [int] NULL,
	[DiaryId] [int] NULL,
	[RoomId] [int] NULL,
	[StartDateTime] [datetime] NOT NULL,
	[EndDateTime] [datetime] NULL,
	[TimeOfDay] [varchar](10) NULL,
	[DueArrivalTime] [datetime] NULL,
	[PreviousDiaryId] [int] NULL,
	[PreviousStartDateTime] [datetime] NULL,
	[PreviousEndDateTime] [datetime] NULL,
	[AppointmentDateChangedDate] [datetime] NULL,
	[AppointmentDateChangedBy] [int] NULL,
	[IsVerified] [bit] NULL,
	[Notes] [varchar](max) NULL,
	[AbandonCodeId] [int] NULL,
	[AbandonReasonId] [int] NULL,
	[AbandonComment] [nvarchar](250) NULL,
	[CancelCodeId] [int] NULL,
	[CancelReasonId] [int] NULL,
	[CancelComment] [nvarchar](250) NULL,
	[LetterPosted] [int] NULL,
	[Units] [int] NULL,
	[ActualAppointmentDuration] [int] NULL,
	[AppointmentDuration] [varchar](100) NULL,
	[BackToWL] [int] NULL,
	[FromBackToWL] [int] NULL,
	[SlotStatusID] [int] NULL,
	[StaffEnteredId] [int] NULL,
	[StaffBookedId] [int] NULL,
	[LetterComment] [varchar](255) NULL,
	[LetterStatus] [varchar](50) NULL,
	[LetterSentDate] [datetime] NULL,
	[ReminderLetterDate] [datetime] NULL,
	[DateEntered] [datetime] NULL,
	[DateReceived] [datetime] NULL,
	[DateRaised] [datetime] NULL,
	[DueDate] [smalldatetime] NULL,
	[AppoinmentDateBooked] [datetime] NULL,
	[DateChangedId] [datetime] NULL,
	[StaffChangedId] [int] NULL,
	[ReferralDate] [datetime] NULL,
	[PermanentDateRaised] [datetime] NULL,
	[PermanentBookingModeId] [int] NULL,
	[OperationalHospitaId] [int] NULL,
	[PAS_WaitingListReference] [varchar](50) NULL,
	[OCSId] [int] NULL,
	[IsDeleted] [bit] NULL,
	[CreationMethod] [varchar](50) NULL,
	[WhoUpdatedId] [int]		NULL Default 0,
	[WhoCreatedId] [int]		NULL Default 0,
	[WhenCreated]  [DATETIME]	NULL Default GetDate(),
	[WhenUpdated]  [DATETIME]	NULL Default GetDate(),
	CONSTRAINT [PK_ERS_Appointments] PRIMARY KEY CLUSTERED  ([AppointmentId]),
	CONSTRAINT [FK_ERS_Appointment_SlotStatusID] FOREIGN KEY ([SlotStatusID]) REFERENCES [dbo].[ERS_SCH_SlotStatus]([StatusId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_AbandonCodes] FOREIGN KEY ([AbandonCodeId]) REFERENCES [dbo].[ERS_AbandonCodes]([AbandonId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_AbandonReasons] FOREIGN KEY ([AbandonReasonId]) REFERENCES [dbo].[ERS_AbandonReasons]([AbandonReasonId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_AppointmentStatus] FOREIGN KEY ([AppointmentStatusId]) REFERENCES [dbo].[ERS_AppointmentStatus]([UniqueId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_CancelCodes] FOREIGN KEY ([CancelCodeId]) REFERENCES [dbo].[ERS_CancelCodes]([CancelId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_CancelReasons] FOREIGN KEY ([CancelReasonId]) REFERENCES [dbo].[ERS_CancelReasons]([CancelReasonId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_GPS] FOREIGN KEY ([GPId]) REFERENCES [dbo].[ERS_GPS]([GPId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Patients] FOREIGN KEY ([PatientId]) REFERENCES [dbo].[ERS_Patients]([PatientId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Practices] FOREIGN KEY ([PracticeID]) REFERENCES [dbo].[ERS_Practices]([PracticeID]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Priority] FOREIGN KEY ([PriorityId]) REFERENCES [dbo].[ERS_Priority]([PriorityId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Referrers] FOREIGN KEY ([ReferrerId]) REFERENCES [dbo].[ERS_Referrers]([ReferrerId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Specialties] FOREIGN KEY ([SpecialtyId]) REFERENCES [dbo].[ERS_Specialties]([SpecialtyId]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Users] FOREIGN KEY ([StaffBookedId]) REFERENCES [dbo].[ERS_Users]([UserID]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Users1] FOREIGN KEY ([StaffChangedId]) REFERENCES [dbo].[ERS_Users]([UserID]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Users2] FOREIGN KEY ([StaffEnteredId]) REFERENCES [dbo].[ERS_Users]([UserID]),
	CONSTRAINT [FK_ERS_Appointments_ERS_Users3] FOREIGN KEY ([AppointmentDateChangedBy]) REFERENCES [dbo].[ERS_Users]([UserID])
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_ERS_AppointmentPatientId] ON [dbo].[ERS_Appointments] ([PatientId]); 
CREATE NONCLUSTERED INDEX [IX_ERS_AppointmentsId] ON [dbo].[ERS_Appointments] ([AppointmentId]); 
CREATE NONCLUSTERED INDEX [IX_ERS_PAS_WaitingListReference] ON [dbo].[ERS_Appointments] ([PAS_WaitingListReference]); 







--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_AppointmentProcedureTypes.sql----------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_AppointmentProcedureTypes](
	[AppointmentProcedureTypeID] [int] IDENTITY(1,1) NOT NULL,
	[AppointmentID] [int] NOT NULL,
	[ProcedureTypeID] [int] NOT NULL,
	[IsTherapeutic] [bit] NULL,
	[WhoUpdatedId]	[int]		NULL Default 0,
	[WhoCreatedId]	[int]		NULL Default 0,
	[WhenCreated]	[DATETIME]	NULL Default GetDate(),
	[WhenUpdated]	[DATETIME]	NULL Default GetDate()
 CONSTRAINT [PK_ERS_AppointmentProcedureTypes] PRIMARY KEY CLUSTERED ([AppointmentProcedureTypeID] ASC),
 CONSTRAINT [FK_ERS_AppointmentProcedureTypes_ERS_Appointments] FOREIGN KEY([AppointmentID]) REFERENCES [dbo].[ERS_Appointments] ([AppointmentId]),
 --CONSTRAINT [FK_ERS_AppointmentProcedureTypes_ERS_ProcedureTypes] FOREIGN KEY([ProcedureTypeID]) REFERENCES [dbo].[ERS_ProcedureTypes] ([ProcedureTypeId])
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_AppointmentTherapeutics.sql----------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_AppointmentTherapeutics](
	[AppointmentTherapeuticID] [int] IDENTITY(1,1) NOT NULL,
	[AppointmentID] [int] NOT NULL,
	[TherapeuticTypeID] [int] NOT NULL,
 CONSTRAINT [PK_ERS_AppointmentTherapeutics] PRIMARY KEY CLUSTERED ([AppointmentTherapeuticID] ASC),
 CONSTRAINT [FK_ERS_AppointmentTherapeutics_ERS_Appointments] FOREIGN KEY([AppointmentID]) REFERENCES [dbo].[ERS_Appointments] ([AppointmentId]),
 CONSTRAINT [FK_ERS_AppointmentTherapeutics_ERS_TherapeuticTypes] FOREIGN KEY([TherapeuticTypeID]) REFERENCES [dbo].[ERS_TherapeuticTypes] ([Id])
) ON [PRIMARY]

GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_template_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sch_template_select','S';
GO

CREATE PROCEDURE [dbo].[sch_template_select]
(
	@Field VARCHAR(200)
	,@FieldValue VARCHAR(200)
	,@Suppressed TINYINT = -1
	,@IsGI TINYINT
)
AS
SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	DECLARE @SQL NVARCHAR(MAX) = ''

	IF @Field IS NULL SET @Field = ''
	IF @FieldValue IS NULL SET @FieldValue = ''
	
	SET @SQL = CASE WHEN @FieldValue <> '' AND @Field = ''
					THEN '(l.[ListName]	LIKE ''%'		+ @FieldValue + '%'' 
						OR u.[Surname] LIKE ''%'	+ @FieldValue + '%''
						OR u.[Forename] LIKE ''%'	+ @FieldValue + '%'') '
					WHEN @Field = 'ListName' AND @FieldValue <> '' THEN 'c.[ListName]		LIKE ''%'	+ @FieldValue + '%'' '
					WHEN @Field = 'Endoscopist'	AND @FieldValue <> '' THEN 'u.[Surname]	LIKE ''%'	+ @FieldValue + '%'' OR u.[Forename] LIKE ''%'	+ @FieldValue + '%'' '
					ELSE ''
				END
	IF @Suppressed IS NOT NULL
	BEGIN
		IF @SQL <> '' SET @SQL = @SQL + ' AND '
		SET @SQL = @SQL + ' l.[Suppressed] = ' + CONVERT(VARCHAR, @Suppressed) 
	END

	IF @IsGI IS NOT NULL
	BEGIN
		IF @SQL <> '' SET @SQL = @SQL + ' AND '
		SET @SQL = @SQL + ' l.[GIProcedure] = ' + CONVERT(VARCHAR, @IsGI) 
	END

	IF @SQL <> '' SET @SQL = ' WHERE ' + @SQL  

	SET @SQL = '
	SELECT ListRulesId,	ISNULL(Points,0) AS Points,	Endoscopist,	ListName,	
			GIProcedure,	Training,	StartTime,	l.Suppressed AS Suppressed,
			CASE WHEN l.GIProcedure = 1 THEN ''GI'' ELSE ''Other'' END AS ProcType,
			CASE WHEN l.Training = 1 THEN ''Yes'' ELSE ''No'' END AS IsTraining,
			LTRIM(RTRIM((SELECT ISNULL(u.[Title], '''') + '' '' + ISNULL(u.[Forename], '''') + '' '' + ISNULL(u.[Surname], '''')))) AS EndoName
	FROM ERS_SCH_ListRules l
	LEFT JOIN [ERS_USERS] u ON l.[Endoscopist] = u.[UserID] 
	' + @SQL 

	EXEC sp_executesql @sql 

END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_rooms_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sch_rooms_select','S';
GO

CREATE PROCEDURE [dbo].[sch_rooms_select]
(
	@Field VARCHAR(200)
	,@FieldValue VARCHAR(200)
	,@Suppressed TINYINT = -1
)
AS
SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	DECLARE @SQL NVARCHAR(MAX) = ''

	IF @Field IS NULL SET @Field = ''
	IF @FieldValue IS NULL SET @FieldValue = ''
	
	SET @SQL = CASE WHEN @FieldValue <> '' AND @Field = ''
					THEN '(r.[RoomId]	IN ('		+ @FieldValue + ')) '
					ELSE ''
				END
	IF @Suppressed IS NOT NULL
	BEGIN
		IF @SQL <> '' SET @SQL = @SQL + ' AND '
		SET @SQL = @SQL + ' r.[Suppressed] = ' + CONVERT(VARCHAR, @Suppressed) 
	END

	IF @SQL <> '' SET @SQL = ' WHERE ' + @SQL  

	SET @SQL = '
		SELECT  RoomId, RoomName, AllProcedureTypes
		  ,(SELECT COUNT(RoomProcId)
					FROM ERS_SCH_RoomProcedures p 
					WHERE p.RoomId = r.RoomId) + (CASE OtherInvestigations WHEN 1 THEN 1 ELSE 0 END)
				AS Procedures
		  ,HospitalId
		  ,(SELECT HospitalName FROM ERS_ReferralHospitals h WHERE h.HospitalId = r.HospitalId) AS HospitalName
		  ,Suppressed, SuppressDate
	  FROM ERS_SCH_Rooms r
	' + @SQL 

	EXEC sp_executesql @sql 

END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Function fnGender.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------


EXEC DropIfExist 'fnGender', 'F';
GO 


CREATE FUNCTION [dbo].[fnGender]
(
	-- Add the parameters for the function here
	@GenderId int
)
RETURNS varchar(10)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Gender varchar(10)

	-- Add the T-SQL statements to compute the return value here
	SELECT @Gender =  egt.Title FROM dbo.ERS_GenderTypes egt	WHERE egt.GenderId=@GenderId

	-- Return the result of the function
	RETURN @Gender

END

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Function fnSCH_DiaryEnd.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'fnSCH_DiaryEnd', 'F';
GO 

CREATE FUNCTION fnSCH_DiaryEnd
(
	@ListRulesId int,
	@StartDateTime datetime	
)
RETURNS datetime
AS
BEGIN
	DECLARE @EndDateTime datetime

	SELECT @EndDateTime = dateadd(Minute, sum(tbl.mins), @StartDateTime) 
	FROM  
		(SELECT ISNULL(minutes,15) AS mins, esls.ProcedureTypeID, eslr.ListRulesId
		FROM dbo.ERS_SCH_ListRules eslr
		INNER JOIN dbo.ERS_SCH_ListSlots esls ON eslr.ListRulesId = esls.ListRulesId
		LEFT JOIN dbo.ERS_SCH_PointMappings espm ON esls.OperatingHospitalId = espm.OperatingHospitalId AND 
													esls.ProcedureTypeID = espm.ProceduretypeId) tbl
	WHERE tbl.ListRulesId=@ListRulesId

	RETURN @EndDateTime

END
GO



--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_diary_page_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sch_diary_page_select','S';
GO

CREATE PROCEDURE [dbo].[sch_diary_page_select]
AS
SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	SELECT DiaryId,
	 l.listname AS [Subject],
	  (CASE WHEN  ISNULL(u.Title,'') <> '' THEN u.Title + ' ' ELSE '' END +
	  CASE WHEN  ISNULL(u.Forename,'') <> '' THEN u.Forename + ' ' ELSE '' END +
	  CASE WHEN  ISNULL(u.Surname,'') <> '' THEN u.Surname + ' ' ELSE '' END) +
	  '  [' + CONVERT(VARCHAR(5),cast(a.DiaryStart as time)) + '-' + CONVERT(VARCHAR(5),cast(a.[DiaryEnd] as time)) + ']' +
	  CASE WHEN  ISNULL(l.Points,0) <> 0 THEN '  [' + CONVERT(VARCHAR, l.Points) + ' points]' ELSE '' END AS [Description]
      ,a.DiaryStart
      ,a.[DiaryEnd]
	  ,a.UserID
      ,a.RoomID
      ,a.ListRulesId
      ,a.RecurrenceRule
      ,a.RecurrenceParentID
      --,a.Annotations
	  --,a.[Description] 
  FROM ERS_SCH_DiaryPages a
  INNER JOIN ERS_SCH_ListRules l ON l.ListRulesId = a.ListRulesId
  LEFT JOIN ERS_Users u ON u.UserID = l.Endoscopist

END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_diary_page_add.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sch_diary_page_add','S';
GO

CREATE PROCEDURE sch_diary_page_add
(
	@Subject VARCHAR(500), 
	@Start datetime, 
	@End datetime, 
	@RoomID int, 
	@UserID int, 
	@RecurrenceRule varchar(500), 
	@RecurrenceParentID int, 
	@ListRulesId int,
	@Description varchar(500),
	@LoggedInUserId int
)
AS
SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	INSERT INTO [ERS_SCH_DiaryPages] 
	([Subject], [DiaryStart], [DiaryEnd], [RoomID], [UserID], [RecurrenceRule], [RecurrenceParentID], [ListRulesId], [WhoCreatedId], [WhenCreated] ) VALUES 
	(@Subject, @Start, dbo.fnSCH_DiaryEnd(@ListRulesId, @Start) , @RoomID, @UserID, @RecurrenceRule, @RecurrenceParentID, @ListRulesId, @LoggedInUserId, GETDATE())

END TRY

BEGIN CATCH
       DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_diary_page_update.sql--------------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sch_diary_page_update','S';
GO

CREATE PROCEDURE sch_diary_page_update
(
	@Subject VARCHAR(500), 
	@Start datetime, 
	@End datetime, 
	@RoomID int, 
	@UserID int, 
	@RecurrenceRule varchar(500), 
	@RecurrenceParentID int, 
	@ListRulesId int,
	@DiaryId int,
	@Description varchar(500),
	@LoggedInUserId int
)
AS
SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	UPDATE [ERS_SCH_DiaryPages] 
	SET [Subject] = @Subject, 
		[DiaryStart] = @Start, 
		[DiaryEnd] = dbo.fnSCH_DiaryEnd(@ListRulesId, @Start), 
		[RoomID] = @RoomID, 
		[UserID] = @UserID, 
		[RecurrenceRule] = @RecurrenceRule, 
		[RecurrenceParentID] = @RecurrenceParentID, 
		[ListRulesId] = @ListRulesId,
		[WhoUpdatedId] = @LoggedInUserId,
		[WhenUpdated] = GETDATE()
	WHERE (DiaryId = @DiaryId)

END TRY

BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_diary_page_delete.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sch_diary_page_delete','S';
GO

CREATE PROCEDURE [dbo].[sch_diary_page_delete]
(
	@DiaryId int
)
AS
SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	--DELETE FROM Gender List
	DELETE FROM ERS_SCH_GenderList WHERE DiaryId = @DiaryId
	
	--DELETE from Diary pages
	DELETE FROM ERS_SCH_DiaryPages WHERE DiaryId = @DiaryId
	

END TRY

BEGIN CATCH
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

       IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;


GO




--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_appointment_slots.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'sch_appointment_slots','S';
GO

CREATE PROCEDURE [dbo].[sch_appointment_slots]
AS

	SELECT 
		DiaryId,
		d.DiaryStart, 
		d.[DiaryEnd],
		[UserID], 
		[RoomID], 
		d.ListRulesId, 
		[RecurrenceRule], 
		[RecurrenceParentID], 
		ISNULL(p.Minutes,15) as [Minutes],
		ss.Description + ' slot ' +  CASE WHEN ISNULL(ept.ProcedureType,'') = '' THEN '' ELSE ' for ' + ept.ProcedureType END AS [Subject],
		ss.Description ,
		s.ProcedureTypeID,
		s.ListSlotId,
		ss.ForeColor
	FROM ERS_SCH_DiaryPages d
		INNER JOIN ERS_SCH_ListRules l ON l.ListRulesId = d.ListRulesId
		INNER JOIN ERS_SCH_ListSlots s ON d.ListRulesId = s.ListRulesId
		INNER JOIN dbo.ERS_SCH_SlotStatus ss ON ss.StatusId = s.SlotId
		LEFT JOIN ERS_SCH_PointMappings p ON p.ProcedureTypeId = s.ProcedureTypeId
		LEFT JOIN dbo.ERS_ProcedureTypes ept ON p.ProceduretypeId = ept.ProcedureTypeId
	WHERE l.points > 0

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_appointment_bookings.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

--SET ANSI_NULLS OFF
--GO
--SET QUOTED_IDENTIFIER OFF
--GO

--EXEC DropIfExist 'sch_appointment_bookings','S';
--GO

--CREATE PROCEDURE [dbo].[sch_appointment_bookings]
--(
--	@StartDateTime datetime,
--	@EndDateTime datetime
--)
--AS
--BEGIN
--	SELECT 
--		convert(varchar(10), BookingDate, 103) AS AppointmentDate, 
--		BookingDate AS AppointmentStart,
--		dateadd(minute, convert(int, duration), bookingdate) AS AppointmentEnd,
--		esdp.RoomID, 
--		esr.RoomName,
--		p.Forename
--	FROM dbo.ERS_Appointments ea
--	INNER JOIN dbo.ERS_SCH_DiaryPages esdp	on ea.DiaryId = esdp.DiaryId
--	INNER JOIN dbo.ERS_SCH_Rooms esr ON esdp.RoomID = esr.RoomId
--	INNER JOIN dbo.Patient p ON p.[Patient No] = ea.PatientId
--	WHERE BookingDate >= @StartDateTime AND BookingDate < @EndDateTime
--END
--GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_ConsultantProcedureTypes.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_ConsultantProcedureTypes](
	[ConsultantProcedureId] [int] IDENTITY(1,1) NOT NULL,
	[EndoscopistID] [int] NOT NULL,
	[ProcedureTypeID] [int] NOT NULL,
	[Diagnostic] [bit] NOT NULL CONSTRAINT [DF_ERS_ConsultantProcedures_Diagnostic]  DEFAULT ((0)),
	[Therapeutic] [bit] NOT NULL CONSTRAINT [DF_ERS_ConsultantProcedures_Therapeutic]  DEFAULT ((0)),
 CONSTRAINT [PK_ERS_ConsultantProcedures] PRIMARY KEY CLUSTERED ( [ConsultantProcedureId] ASC ),
 CONSTRAINT [FK_ERS_ConsultantProcedures_ERS_Consultant] FOREIGN KEY([EndoscopistID]) REFERENCES [dbo].[ERS_Consultant] ([ConsultantID]),
 --CONSTRAINT [FK_ERS_ConsultantProcedures_ERS_ProcedureTypes] FOREIGN KEY([ProcedureTypeID]) REFERENCES [dbo].[ERS_ProcedureTypes] ([ProcedureTypeId])
) ON [PRIMARY]

GO





--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_ConsultantProcedureTherapeutics.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET NOCOUNT ON

CREATE TABLE [dbo].[ERS_ConsultantProcedureTherapeutics](
	[ConsultantProcedureTherapeuticID] [int] IDENTITY(1,1) NOT NULL,
	[ConsultantProcedureID] [int] NOT NULL,
	[TherapeuticTypeID] [int] NOT NULL,
 CONSTRAINT [PK_ERS_ConsultantProcedureTherapeutics] PRIMARY KEY CLUSTERED  ( [ConsultantProcedureTherapeuticID] ASC ),
 CONSTRAINT [FK_ERS_ConsultantProcedureTherapeutics_ERS_ConsultantProcedures] FOREIGN KEY([ConsultantProcedureID]) REFERENCES [dbo].[ERS_ConsultantProcedureTypes] ([ConsultantProcedureId]),
 CONSTRAINT [FK_ERS_ConsultantProcedureTherapeutics_ERS_TherapeuticTypes] FOREIGN KEY([TherapeuticTypeID]) REFERENCES [dbo].[ERS_TherapeuticTypes] ([Id])
) ON [PRIMARY]

GO




---#######################################################################################
-- =============================================
-- SCHEDULER END
-- =============================================
--------------------------------------------------------------------------------------------------------------------
-----Function to generate password - not required on client server (generate password same as username) ------------
--------------------------------------------------------------------------------------------------------------------
--EXEC DropIfExist 'fnGenPass', 'F';
--GO 

--CREATE FUNCTION [dbo].[fnGenPass] (@UserID VARCHAR(50))
--RETURNS INT
--AS
--BEGIN
--	DECLARE @y INT = 0

--	SET @UserID = upper(@UserID)

--	DECLARE @cnt INT = 1;

--	WHILE @cnt <= LEN(@UserID)
--	BEGIN
--		SET @y = @y + ASCII(SUBSTRING(@UserID, @cnt, 1)) * @cnt
--		SET @cnt = @cnt + 1;
--	END;

--	RETURN @y
--END

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc abnormalities_achalasia_select.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_achalasia_select','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_achalasia_select]
(
	@SiteId INT	
)
AS

SET NOCOUNT ON

SELECT
	SiteId,
	[None],
	Probable,
	Confirmed,
	DilationLeadingToPerforation
FROM
	ERS_UpperGIAbnoAchalasia
WHERE 
	SiteId = @SiteId


GO


--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc abnormalities_achalasia_save.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_achalasia_save','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_achalasia_save]
(
	@SiteId INT,
	@None BIT,
	@Probable BIT,
	@Confirmed BIT,
	@DilationLeadingToPerforation BIT,
	@LoggedInUserId INT

)
AS

SET NOCOUNT ON

DECLARE @proc_id INT
DECLARE @proc_type INT

BEGIN TRANSACTION

BEGIN TRY
	SELECT 
		@proc_id = p.ProcedureId,
		@proc_type = p.ProcedureType
	FROM 
		ERS_Sites s
	JOIN 
		ERS_Procedures p ON s.ProcedureId = p.ProcedureId
	WHERE 
		SiteId = @SiteId
			
	IF NOT EXISTS (SELECT 1 FROM ERS_UpperGIAbnoAchalasia WHERE SiteId = @SiteId)
	BEGIN
		INSERT INTO ERS_UpperGIAbnoAchalasia (
			SiteId,
			[None],
			Probable,
			Confirmed,
			DilationLeadingToPerforation,
			WhoCreatedId,
			WhenCreated) 
		VALUES (
			@SiteId,
			@None,
			@Probable,
			@Confirmed,
			@DilationLeadingToPerforation,
			@LoggedInUserId,
			GETDATE())

		INSERT INTO ERS_RecordCount (
			[ProcedureId],
			[SiteId],
			[Identifier],
			[RecordCount]
		)
		VALUES (
			@proc_id,
			@SiteId,
			'Achalasia',
			1)
	END
	
	ELSE IF (@None=0 AND @Probable=0 AND @Confirmed = 0 AND @DilationLeadingToPerforation = 0)
	BEGIN
		DELETE FROM ERS_UpperGIAbnoAchalasia 
		WHERE SiteId = @SiteId

		DELETE FROM ERS_RecordCount 
		WHERE SiteId = @SiteId
		AND Identifier = 'Achalasia'
	END

	ELSE
	BEGIN
		UPDATE 
			ERS_UpperGIAbnoAchalasia
		SET 
			[None] = @None,
			Probable = @Probable,
			Confirmed = @Confirmed,
			DilationLeadingToPerforation = @DilationLeadingToPerforation,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
		WHERE 
			SiteId = @SiteId
	END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc abnormalities_achalasia_summary_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'abnormalities_achalasia_summary_update','S';
GO

CREATE PROCEDURE [dbo].[abnormalities_achalasia_summary_update]
(
	@SiteId INT
)
AS
	SET NOCOUNT ON

	DECLARE
		@summary VARCHAR(4000),
		@None BIT,
		@Probable BIT,
		@Confirmed BIT,
		@LeadingToPerforation BIT

	SELECT 
		@None=[None],
		@Probable=Probable,
		@Confirmed=Confirmed,
		@LeadingToPerforation=DilationLeadingToPerforation
	FROM
		ERS_UpperGIAbnoAchalasia
	WHERE
		SiteId = @SiteId

	SET @Summary = ''

	IF @None = 1
		SET @summary = @summary + 'No achalasia'
	
	ELSE 
	BEGIN
		IF @Probable = 1 SET @summary = 'probable'
		ELSE IF @Confirmed = 1 SET @summary = 'confirmed'
		
		IF @LeadingToPerforation = 1 SET @summary = @summary + ' dilation leading to perforation'
	END
	--PRINT @summary

	-- Finally update the summary in abnormalities table
	UPDATE ERS_UpperGIAbnoAchalasia
	SET Summary = @Summary 
	WHERE SiteId = @siteId


GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_UpperGIAbnoAchalasia_Insert -------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'TR_UpperGIAbnoAchalasia_Insert', 'TR';
GO

CREATE TRIGGER [dbo].[TR_UpperGIAbnoAchalasia_Insert]
ON [dbo].[ERS_UpperGIAbnoAchalasia]
AFTER INSERT, UPDATE 
AS 
	DECLARE @site_id INT, @Achalasia VARCHAR(10)
	SELECT @site_id=SiteId,
			@Achalasia = (CASE WHEN ([None]=1) THEN 'None' WHEN (Probable=1) THEN 'Probable' WHEN (Confirmed=1) THEN 'Confirmed' END) + 
			(CASE WHEN (DilationLeadingToPerforation=1) THEN ' Dilation Leading To Perforation' END)
	FROM INSERTED

	EXEC ogd_kpi_stricture_perforation @site_id --Update perforation text in QA for OGD KPI

	EXEC abnormalities_achalasia_summary_update @site_id
	EXEC sites_summary_update @site_id
	EXEC diagnoses_control_save @site_id, 'D66P1', @Achalasia

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Trigger TR_UpperGIAbnoAchalasia_Delete -------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'TR_UpperGIAbnoAchalasia_Delete', 'TR';
GO

CREATE TRIGGER [dbo].[TR_UpperGIAbnoAchalasia_Delete]
ON [dbo].[ERS_UpperGIAbnoAchalasia]
AFTER DELETE
AS 
	DECLARE @site_id INT
	SELECT @site_id=SiteId FROM DELETED

	EXEC ogd_kpi_stricture_perforation @site_id --Update perforation text in QA for OGD KPI

	EXEC diagnoses_control_save @site_id, 'D66P1', 'False'
	EXEC sites_summary_update @site_id
GO
-----------------------------------------------------------------

EXEC DropIfExist 'tvfProcedureResectedColon', 'F';
GO 

CREATE FUNCTION tvfProcedureResectedColon
(	
	-- Add the parameters for the function here
	@ProcedureID int
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT ercr.RegionId, erc.ResectedColonID FROM dbo.ERS_ResectedColon erc
		INNER JOIN dbo.ERS_ResectedColonRegions ercr ON erc.ResectedColonID = ercr.ResectedColonID
		INNER JOIN dbo.ERS_Procedures ep ON erc.ResectedColonID = ep.ResectedColonNo
	WHERE ep.ProcedureId=@ProcedureID
)
GO

-----------------------------------------------------------------


EXEC DropIfExist 'tvfProcedureConsultantRoles', 'F';
GO 
CREATE FUNCTION tvfProcedureConsultantRoles
(	
	-- Add the parameters for the function here
	@ProcedureID INT
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT
		CASE 
			WHEN ep.Endo1Role = 1 AND ep.Endoscopist2 IS NULL THEN 'Endoscopist'
			WHEN ep.Endo1Role = 1 AND ep.Endoscopist2 IS NOT NULL THEN 'Endoscopist 1'
			ELSE 'TrainER' 
		END AS [Role], 1 AS RoleID,
		ec.ConsultantID,
		ec.Forename  AS EndoName
	FROM dbo.ERS_Procedures ep 
		INNER JOIN dbo.ERS_Consultant ec ON ep.Endoscopist1 = ec.ConsultantID
	WHERE ep.ProcedureId=@ProcedureID
	UNION ALL
	SELECT
		CASE 
			WHEN ep.Endo2Role = 1 THEN 'Endoscopist 2'
			ELSE 'TrainEE' 
		END AS [Role], 2 AS RoleID,
		ec.ConsultantID,
		ec.Forename  AS EndoName
	FROM dbo.ERS_Procedures ep 
		INNER JOIN dbo.ERS_Consultant ec ON ep.Endoscopist2 = ec.ConsultantID
	WHERE 
		ep.ProcedureId=@ProcedureID
	AND ep.Endoscopist2	IS NOT NULL
)
GO

-----------------------------------------------------------------

--EXEC DropIfExist 'tvfPatientDrugDoses', 'F';
--GO 

--CREATE FUNCTION [dbo].[tvfPatientDrugDoses]
--(	
--	-- Add the parameters for the function here
--	@ProcedureID int,
--	@DrugID int
--)
--RETURNS TABLE
--AS
--RETURN (
--		SELECT count(*) TotalCount, sum(dose) TotalDoses, pp.[Episode No], 0 AS Over70
--		FROM [dbo].[Patient Premedication] pp
--			INNER JOIN dbo.Episode e ON e.[Episode No]=pp.[Episode No]
--		WHERE pp.[Drug No]=@DrugID  AND e.[Procedure ID]=@ProcedureID AND e.[Age at procedure] < 70
--		GROUP BY pp.[Episode No]
--		UNION ALL
--		SELECT count(*) TotalCount, sum(dose) TotalDoses, pp.[Episode No], 1 AS Over70
--		FROM [dbo].[Patient Premedication] pp
--			INNER JOIN dbo.Episode e ON e.[Episode No]=pp.[Episode No]
--		WHERE pp.[Drug No]=@DrugID  AND e.[Procedure ID]=@ProcedureID	 AND e.[Age at procedure] >= 70
--		GROUP BY pp.[Episode No]
--		)

--GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc page_validators_select.sql----------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'page_validators_select','S';
GO

CREATE PROCEDURE [dbo].[page_validators_select]
(
	@ProcedureType INT,
	@PageName VARCHAR(500),
	@ClassName VARCHAR(500),
	@Required BIT,
	@CommonFields BIT = NULL
)
AS

SET NOCOUNT ON

		SELECT 
		efl.LabelID
	FROM dbo.ERS_FieldLabels efl
		INNER JOIN dbo.ERS_Pages ep ON efl.PageID = ep.PageId
	WHERE	 (SELECT [item] FROM dbo.fnSplitString(ProcedureType,',') WHERE [item]=@ProcedureType)=ISNULL(@ProcedureType,0)
		AND	(@PageName IS NULL OR PageName = @PageName)
		AND (@Required IS NULL OR [Required] = @Required)

	

GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------Create Table ERS_PostOperativeComplications.sql--------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_PostOperativeComplications](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureId] [int] NOT NULL,
	[Aspiration] [bit] NOT NULL CONSTRAINT [DF_ERS_PostOperativeComplications_Aspiration]  DEFAULT ((0)),
	[Arrythmia] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_Arrythmia]  DEFAULT ((0)),
	[OesophagealPerforation] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_OesophagealPerforation]  DEFAULT ((0)),
	[OesophagealPerforationSeverity] [tinyint] NULL,
	[GastricPerforation] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_GastricPerforation]  DEFAULT ((0)),
	[GastricPerforationSeverity] [tinyint] NULL,
	[BleedingFollowingPolypectomy] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_BleedingFollowingPolypectomy]  DEFAULT ((0)),
	[BleedingFollowingPolypectomySeverity] [tinyint] NULL,
	[MajorBleedingFollowingInjection] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_MajorBleedingFollowingInjection]  DEFAULT ((0)),
	[MajorBleedingFollowingInjectionSeverity] [tinyint] NULL,
	[MajorUlcerationFollowingInjection] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_MajorUlcerationFollowingInjection]  DEFAULT ((0)),
	[MajorUlcerationFollowingInjectionSeverity] [tinyint] NULL,
	[Pancreatits] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_Pancreatits]  DEFAULT ((0)),
	[PancreatitsSeverity] [tinyint] NULL,
	[AscendingCholangitis] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_AscendingCholangitis]  DEFAULT ((0)),
	[AscendingCholangitisSeverity] [tinyint] NULL,
	[Perforation] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_Perforation]  DEFAULT ((0)),
	[PerforationSeverity] [tinyint] NULL,
	[Haemorrhage] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_Haemorrhage]  DEFAULT ((0)),
	[HaemorrhageSeverity] [tinyint] NULL,
	[OtherFocal] [nvarchar](MAX) NULL,
	[Resolution] [tinyint] NULL,
	[DateOfDeath] [datetime] NULL,
	[Readmission] [bit] NOT NULL  CONSTRAINT [DF_ERS_PostOperativeComplications_Readmission]  DEFAULT ((0)),
	[ReadmissionDate] [datetime] NULL,
	[ReadmissionReason] [nvarchar](MAX) NULL,
	[RecordedBy] [int] NOT NULL,
	[RecordedDate] [datetime] NOT NULL CONSTRAINT [DF_ERS_PostOperativeComplications_RecordedDate] DEFAULT GETDATE(),
	[OtherComments] [nvarchar](MAX) NULL,
 CONSTRAINT [PK_ERS_PostOperativeComplications] PRIMARY KEY CLUSTERED ([Id] ASC),
 CONSTRAINT [FK_ERS_PostOperativeComplications_ProcedureId] FOREIGN KEY ([ProcedureId]) REFERENCES ERS_Procedures([ProcedureID])
) ON [PRIMARY]

GO
--------------------------------------------------------------------------------------------------------------------
-------------------------------------Create Proc post_operative_complications.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO

SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'post_operative_complications_save','S';
GO

CREATE PROCEDURE post_operative_complications_save
(
	 @ProcedureId int
    ,@Aspiration bit
    ,@Arrythmia bit
    ,@OesophagealPerforation bit
    ,@OesophagealPerforationSeverity tinyint
    ,@GastricPerforation bit
    ,@GastricPerforationSeverity tinyint
    ,@BleedingFollowingPolypectomy bit
    ,@BleedingFollowingPolypectomySeverity tinyint
    ,@MajorBleedingFollowingInjection bit
    ,@MajorBleedingFollowingInjectionSeverity tinyint
    ,@MajorUlcerationFollowingInjection bit
    ,@MajorUlcerationFollowingInjectionSeverity tinyint
    ,@Pancreatits bit
    ,@PancreatitsSeverity tinyint
    ,@AscendingCholangitis bit
    ,@AscendingCholangitisSeverity tinyint
    ,@Perforation bit
    ,@PerforationSeverity tinyint
    ,@Haemorrhage bit
    ,@HaemorrhageSeverity tinyint
    ,@Resolution tinyint
    ,@DateOfDeath datetime
    ,@Readmission bit
    ,@RecordedBy int
    ,@OtherComments varchar(100)
)
AS 

IF NOT EXISTS (SELECT 1 FROM ERS_PostOperativeComplications WHERE ProcedureID = @ProcedureID)
BEGIN
	INSERT INTO [dbo].[ERS_PostOperativeComplications]
			   ([ProcedureId]
			   ,[Aspiration]
			   ,[Arrythmia]
			   ,[OesophagealPerforation]
			   ,[OesophagealPerforationSeverity]
			   ,[GastricPerforation]
			   ,[GastricPerforationSeverity]
			   ,[BleedingFollowingPolypectomy]
			   ,[BleedingFollowingPolypectomySeverity]
			   ,[MajorBleedingFollowingInjection]
			   ,[MajorBleedingFollowingInjectionSeverity]
			   ,[MajorUlcerationFollowingInjection]
			   ,[MajorUlcerationFollowingInjectionSeverity]
			   ,[Pancreatits]
			   ,[PancreatitsSeverity]
			   ,[AscendingCholangitis]
			   ,[AscendingCholangitisSeverity]
			   ,[Perforation]
			   ,[PerforationSeverity]
			   ,[Haemorrhage]
			   ,[HaemorrhageSeverity]
			   ,[Resolution]
			   ,[DateOfDeath]
			   ,[Readmission]
			   ,[RecordedBy]
			   ,[OtherComments])
		 VALUES
			   (@ProcedureId
			   ,@Aspiration
			   ,@Arrythmia
			   ,@OesophagealPerforation
			   ,@OesophagealPerforationSeverity
			   ,@GastricPerforation
			   ,@GastricPerforationSeverity
			   ,@BleedingFollowingPolypectomy
			   ,@BleedingFollowingPolypectomySeverity
			   ,@MajorBleedingFollowingInjection
			   ,@MajorBleedingFollowingInjectionSeverity
			   ,@MajorUlcerationFollowingInjection
			   ,@MajorUlcerationFollowingInjectionSeverity
			   ,@Pancreatits
			   ,@PancreatitsSeverity
			   ,@AscendingCholangitis
			   ,@AscendingCholangitisSeverity
			   ,@Perforation
			   ,@PerforationSeverity
			   ,@Haemorrhage
			   ,@HaemorrhageSeverity
			   ,@Resolution
			   ,@DateOfDeath
			   ,@Readmission
			   ,@RecordedBy
			   ,@OtherComments)
END
ELSE
BEGIN
UPDATE [dbo].[ERS_PostOperativeComplications]
   SET [ProcedureId] = @ProcedureId 
      ,[Aspiration] = @Aspiration 
      ,[Arrythmia] = @Arrythmia 
      ,[OesophagealPerforation] = @OesophagealPerforation 
      ,[OesophagealPerforationSeverity] = @OesophagealPerforationSeverity 
      ,[GastricPerforation] = @GastricPerforation 
      ,[GastricPerforationSeverity] = @GastricPerforationSeverity 
      ,[BleedingFollowingPolypectomy] = @BleedingFollowingPolypectomy 
      ,[BleedingFollowingPolypectomySeverity] = @BleedingFollowingPolypectomySeverity 
      ,[MajorBleedingFollowingInjection] = @MajorBleedingFollowingInjection 
      ,[MajorBleedingFollowingInjectionSeverity] = @MajorBleedingFollowingInjectionSeverity 
      ,[MajorUlcerationFollowingInjection] = @MajorUlcerationFollowingInjection 
      ,[MajorUlcerationFollowingInjectionSeverity] = @MajorUlcerationFollowingInjectionSeverity 
      ,[Pancreatits] = @Pancreatits 
      ,[PancreatitsSeverity] = @PancreatitsSeverity 
      ,[AscendingCholangitis] = @AscendingCholangitis 
      ,[AscendingCholangitisSeverity] = @AscendingCholangitisSeverity 
      ,[Perforation] = @Perforation 
      ,[PerforationSeverity] = @PerforationSeverity 
      ,[Haemorrhage] = @Haemorrhage 
      ,[HaemorrhageSeverity] = @HaemorrhageSeverity 
      ,[Resolution] = @Resolution 
      ,[DateOfDeath] = @DateOfDeath
      ,[Readmission] = @Readmission 
      ,[RecordedBy] = @RecordedBy 
      ,[OtherComments] = @OtherComments
 WHERE ProcedureId = @ProcedureId
END
GO

--------------------------------------------------------------------------------------------------------------------
-------------------------------------Create Proc pathologyreport_specimens_select.sql-------------------------------
--------------------------------------------------------------------------------------------------------------------



SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'pathologyreport_specimens_select','S';
GO

CREATE PROCEDURE [dbo].[pathologyreport_specimens_select]
(
	@ProcedureId INT
)
AS

SET NOCOUNT ON

DECLARE 
       @procType INT,
       @siteIdentification TINYINT,
       @siteId INT, 
       @siteNo INT,
       @siteTitle VARCHAR(500)
DECLARE 
       @SpecimensSummary TABLE (
              SiteId INT,
              LabRequestReportName VARCHAR(200),
              SpecimenKey VARCHAR(1000),
              Specimen VARCHAR(2000))

SELECT @procType = ProcedureType FROM ERS_Procedures WHERE ProcedureId = @ProcedureId
SELECT @siteIdentification = ISNULL(SiteIdentification,0) FROM ERS_SystemConfig WHERE OperatingHospitalID = (SELECT OperatingHospitalID FROM ERS_Procedures WHERE ProcedureId = @ProcedureId)


       SELECT s.SiteNo, Case @procType WHEN 1 THEN ISNULL(m.Area,'') ELSE '' END AS RegionSection, sp.*
       INTO #specimens
       FROM ERS_UpperGISpecimens sp
       JOIN ERS_Sites s ON sp.SiteId = s.SiteId
       JOIN ERS_Regions r ON s.RegionId = r.RegionId
       LEFT JOIN ERS_AbnormalitiesMatrixUpperGI m ON r.Region = m.Region AND m.ProcedureType = @procType
       LEFT JOIN [ERS_AbnormalitiesMatrixERCP] n ON r.Region = n.Region AND n.ProcedureType = @procType
       LEFT JOIN [ERS_AbnormalitiesMatrixColon] o ON r.Region = o.Region AND o.ProcedureType = @procType
       WHERE s.ProcedureId = @ProcedureId 

UPDATE #specimens SET RegionSection = CASE RegionSection WHEN 'Oesophagus' THEN 'oesophageal' WHEN 'Stomach' THEN 'gastric' WHEN 'Duodenum' THEN 'duodenal' ELSE '' END


DECLARE Site_Cursor CURSOR FOR
SELECT SiteId, SiteNo FROM #specimens ORDER BY SiteNo
       
OPEN Site_Cursor
FETCH NEXT FROM Site_Cursor INTO @siteId , @siteNo

WHILE @@FETCH_STATUS = 0
BEGIN
       SELECT @siteTitle = region FROM ers_sites INNER JOIN dbo.ERS_Regions er ON dbo.ERS_Sites.RegionId = er.RegionId WHERE siteid=@siteId

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Cytology', 
              CONVERT(VARCHAR, @siteId) + 'Brush', 
              LOWER(RegionSection) + ' brushings for cytology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND BrushCytology > 0
              
       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'BiopsyHistology', 
              CONVERT(VARCHAR,BiopsyQtyHistology) + ' ' + LOWER(RegionSection) + CASE WHEN BiopsyQtyHistology > 1 THEN ' biopsies' ELSE ' biopsy' END + ' for histology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND BiopsyQtyHistology > 0

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Microbiology', 
              CONVERT(VARCHAR, @siteId) + 'BiopsyMicrobiology', 
              CONVERT(VARCHAR,BiopsyQtyMicrobiology) + ' ' + LOWER(RegionSection) + CASE WHEN BiopsyQtyMicrobiology > 1 THEN ' biopsies' ELSE ' biopsy' END + ' for microbiology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND Biopsy = 1 AND BiopsyQtyMicrobiology > 0
              
       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Virology', 
              CONVERT(VARCHAR, @siteId) + 'BiopsyVirology', 
              CONVERT(VARCHAR,BiopsyQtyVirology) + ' ' + LOWER(RegionSection) + CASE WHEN BiopsyQtyVirology > 1 THEN ' biopsies' ELSE ' biopsy' END + ' for virology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND Biopsy = 1 AND BiopsyQtyVirology > 0
       
       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'Polypectomy', 
              CONVERT(VARCHAR,PolypectomyQty) + ' ' + LOWER(RegionSection) + CASE WHEN PolypectomyQty > 1 THEN ' polyps' ELSE ' polyp' END + ' for histology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND Polypectomy = 1 AND PolypectomyQty > 0

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'HotBiopsy', 
              LOWER(RegionSection) + ' hot biopsy for histology from ' + LOWER(@siteTitle) + CASE WHEN HotBiopsyDistance > 0 THEN ' at ' + CONVERT(VARCHAR, HotBiopsyDistance) + 'cm' ELSE '' END
       FROM #specimens 
       WHERE SiteId = @siteId AND HotBiopsy = 1
       
       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'NeedleAspirateHistology', 
              LOWER(RegionSection) + ' needle aspirate for histology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND NeedleAspirate = 1 AND NeedleAspirateHistology = 1

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'NeedleAspirateMicrobiology', 
              LOWER(RegionSection) + ' needle aspirate for microbiology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND NeedleAspirate = 1 AND NeedleAspirateMicrobiology = 1

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Histology', 
              CONVERT(VARCHAR, @siteId) + 'NeedleAspirateVirology', 
              LOWER(RegionSection) + ' needle aspirate for virology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND NeedleAspirate = 1 AND NeedleAspirateVirology = 1

       INSERT INTO @SpecimensSummary
       SELECT 
              @siteId, 
              'Microbiology', 
              CONVERT(VARCHAR, @siteId) + 'GastricWashing', 
              'gastric washing for microbiology from ' + LOWER(@siteTitle)
       FROM #specimens 
       WHERE SiteId = @siteId AND GastricWashing = 1

       FETCH NEXT FROM Site_Cursor INTO @siteId, @siteNo
END
CLOSE Site_Cursor;
DEALLOCATE Site_Cursor;

IF OBJECT_ID('tempdb..#specimens') IS NOT NULL DROP TABLE #specimens 
SELECT * FROM @SpecimensSummary 


GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc UserReportFilter_Insert_Update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'UserReportFilter_Insert_Update','S';
GO

CREATE PROCEDURE [dbo].[UserReportFilter_Insert_Update](
@UserId int,
@FromDate DateTime,
@ToDate DateTime,
@HideSuppressed bit,
@EndoType int

)

AS

SET NOCOUNT ON;

BEGIN TRANSACTION

BEGIN TRY

	IF NOT EXISTS (SELECT 1 FROM ERS_ReportFilter rf WHERE rf.UserID = @UserId)
		BEGIN
			--User has no Report Filter Previously saved, Insert new Report Filter
			INSERT ERS_ReportFilter(UserID,ReportDate,FromDate,ToDate,TypesOfEndoscopists,HideSuppressed)
			VALUES (@UserId,GetDate(),@FromDate,@ToDate,@EndoType,@HideSuppressed)
		END

	ELSE
		BEGIN
			--User has previous Report filter saved so update their current filter with the new filter values
			UPDATE ERS_ReportFilter
			SET ReportDate = GetDate(),
				FromDate = @FromDate,
				ToDate = @ToDate,
				TypesOfEndoscopists = @EndoType,
				HideSuppressed = @HideSuppressed
			WHERE UserID = @UserId
		END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_booking_breach_status_insert_update.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_booking_breach_status_insert_update','S';
GO

CREATE PROCEDURE [dbo].[sch_booking_breach_status_insert_update](
	@StatusId int,
	@Desc varChar(200),
	@GI bit,
	@nonGI bit,
	@BreachDays int,
	@Colour varChar(10),
	@UserId Int
)

AS 

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	IF Exists (SELECT StatusId FROM ERS_SCH_SlotStatus ss WHERE ss.StatusId = @StatusId)
		--Slot Status Record exists so Update with new values
		BEGIN
		
			UPDATE ERS_SCH_SlotStatus
			SET [Description] = @Desc,
				GI = @GI,
				nonGI = @nonGI,
				BreachDays = @BreachDays,
				ForeColor = @Colour,
				BackColor = @Colour,
				WhoUpdatedId = @UserId,
				WhenUpdated = GetDate()
			WHERE StatusId = @StatusId 
		
		END
	ELSE
		--Slot Status does not exist so create new status
		BEGIN
		
			INSERT ERS_SCH_SlotStatus(
				[Description], 
				GI, 
				nonGI, 
				BreachDays, 
				ForeColor,
				BackColor,
				WhoUpdatedId, 
				WhoCreatedId,
				WhenCreated,
				WhenUpdated)

			VALUES (@Desc,
					@GI,
					@nonGI,
					@BreachDays,
					@Colour,
					@Colour,
					Null,
					@UserId,
					GetDate(),
					Null)
		END
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_booking_breach_status_select.sql------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_booking_breach_status_select','S';
GO

CREATE PROCEDURE [dbo].[sch_booking_breach_status_select]

AS

SET NOCOUNT ON

SELECT ss.StatusId,ss.[Description],ss.GI,ss.nonGI,ss.BreachDays,ss.ForeColor,ss.BackColor,ss.WhoUpdatedId,ss.WhoCreatedId,ss.WhenCreated,ss.WhenUpdated

FROM ERS_SCH_SlotStatus ss

Order By ss.StatusId asc

GO

---------------------------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_endoscopist_therapeutic_procedures_select.sql------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_endoscopist_therapeutic_procedures_select','S';
GO

CREATE PROCEDURE [dbo].[sch_endoscopist_therapeutic_procedures_select](
@UserId int,
@ProcedureId int
)

AS

SET NOCOUNT ON

SELECT cpt.ConsultantProcedureTherapeuticID,cpt.TherapeuticTypeID, tt.[Description]

FROM ERS_ConsultantProcedureTherapeutics cpt 
LEFT JOIN ERS_ConsultantProcedureTypes pt ON cpt.ConsultantProcedureID = pt.ConsultantProcedureId
INNER JOIN ERS_TherapeuticTypes tt ON cpt.TherapeuticTypeID = tt.Id 

WHERE tt.SchedulerTherapeutic = 1 AND pt.ProcedureTypeID = @ProcedureId AND pt.EndoscopistID = @UserId

GO

---------------------------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_endoscopist_therapeutic_procedures_insert.sql------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_endoscopist_therapeutic_procedures_insert','S';
GO

CREATE PROCEDURE [dbo].[sch_endoscopist_therapeutic_procedures_insert](
@EndoscopistId int,
@ProcedureTypeId int,
@ListItems varchar(500)
)

AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	DECLARE @ConsultantProcId int = 0

	IF OBJECT_ID('tmpdb..#tmpProcTherapTypes') IS NOT NULL DROP TABLE #tmpProcTherapTypes
	SELECT * INTO #tmpProcTherapTypes FROM fnSplitString(ISNULL(@ListItems,''), ',')

	--Get the Consultant id value in the table ERS_ConsultantProcedureTypes that relates to the endoscopit and the procedure to use for delting and inserting therapeutic types 
	SET @ConsultantProcId = (SELECT pt.ConsultantProcedureId FROM ERS_ConsultantProcedureTypes pt WHERE pt.EndoscopistID = @EndoscopistId AND pt.ProcedureTypeID = @ProcedureTypeId)

	--Delete existing therapeutic types for endoscopist and procedure type
	DELETE FROM ERS_ConsultantProcedureTherapeutics WHERE ConsultantProcedureID = @ConsultantProcId 
	
	--Insert new therapeutic types for endoscopist and procedure type
	INSERT INTO ERS_ConsultantProcedureTherapeutics(ConsultantProcedureID,TherapeuticTypeID)
	SELECT @ConsultantProcId, item 
	FROM #tmpProcTherapTypes

	DROP TABLE #tmpProcTherapTypes
	
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF OBJECT_ID('tmpdb..#tmpProcTherapTypes') IS NOT NULL DROP TABLE #tmpProcTherapTypes

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

---------------------------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_endoscopist_therapeutic_procedures_delete.sql------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_endoscopist_therapeutic_procedures_delete','S';
GO

CREATE PROCEDURE [dbo].[sch_endoscopist_therapeutic_procedures_delete](
@EndoscopistId int,
@ProcedureTypeId int
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY

	DECLARE @ConsultantProcId int = 0

	--Get the Consultant id value in the table ERS_ConsultantProcedureTypes that relates to the endoscopit and the procedure to use for delting and inserting therapeutic types 
	SET @ConsultantProcId = (SELECT pt.ConsultantProcedureId FROM ERS_ConsultantProcedureTypes pt WHERE pt.EndoscopistID = @EndoscopistId AND pt.ProcedureTypeID = @ProcedureTypeId)

	--Delete existing therapeutic types for endoscopist and procedure type
	DELETE FROM ERS_ConsultantProcedureTherapeutics WHERE ConsultantProcedureID = @ConsultantProcId 

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

---------------------------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_endoscopist_proceduretypes_select.sql--------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_endoscopist_proceduretypes_select','S';
GO

CREATE PROCEDURE [dbo].[sch_endoscopist_proceduretypes_select](
@EndoscopistId int
)

AS 

SET NOCOUNT ON

Select cpt.EndoscopistID,pt.ProcedureTypeId ProcedureTypeID,pt.SchedulerProcName,cpt.Diagnostic SchedulerDiagnostic ,cpt.Therapeutic SchedulerTherapeutic, cpt.ConsultantProcedureId

FROM ERS_ProcedureTypes pt Inner Join 
ERS_ConsultantProcedureTypes cpt on pt.ProcedureTypeId = cpt.ProcedureTypeID

WHERE cpt.EndoscopistID = @EndoscopistId AND cpt.ProcedureTypeID in (SELECT ProcedureTypeId FROM ERS_ProcedureTypes WHERE SchedulerDiagnostic = 1 or SchedulerTherapeutic = 1)

GO

---------------------------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_endoscopist_proceduretypes_insert_update.sql--------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_endoscopist_proceduretypes_insert_update','S';
GO

CREATE PROCEDURE [dbo].sch_endoscopist_proceduretypes_insert_update(
@EndoscopistId int,
@ProcedureId int,
@Diagnostic bit,
@Therapeutic bit
)

AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	if EXISTS (SELECT cpt.ConsultantProcedureId FROM ERS_ConsultantProcedureTypes cpt WHERE cpt.EndoscopistID = @EndoscopistId AND cpt.ProcedureTypeID = @ProcedureId)
		BEGIN
			--Update existing records for Endoscopist
			UPDATE ERS_ConsultantProcedureTypes
			SET Diagnostic = @Diagnostic,
				Therapeutic = @Therapeutic
			WHERE EndoscopistID = @EndoscopistId AND
					ProcedureTypeID = @ProcedureId
		END

	ELSE
		BEGIN
			--Insert new record for Endoscopist
			INSERT ERS_ConsultantProcedureTypes(
				EndoscopistID, 
				ProcedureTypeID, 
				Diagnostic, 
				Therapeutic)

			VALUES(@EndoscopistId, 
					@ProcedureId,
					@Diagnostic, 
					@Therapeutic)
		END

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

---------------------------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc sch_consultant_endoscopist_select.sql------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

EXEC DropIfExist 'sch_consultant_endoscopist_select','S';
GO

CREATE PROCEDURE [dbo].[sch_consultant_endoscopist_select]

AS

SET NOCOUNT ON

SELECT DISTINCT u.UserID, u.Title + ' ' + u.Forename + ' ' + u.Surname UserName

FROM ERS_Users u Inner Join ERS_ConsultantProcedureTypes cpt on u.UserId = cpt.EndoscopistID

WHERE u.IsListConsultant = 1 or u.IsEndoscopist1 = 1 or IsEndoscopist2 = 1

GO


 /****** Object:  UserDefinedFunction [dbo].[fn_initcap]    Script Date: 03/12/2018 08:58:51 AM ******/
EXEC DropIfExist 'fn_initcap', 'F';
GO 

CREATE FUNCTION [dbo].[fn_initcap] (@text varchar(4000))
RETURNS varchar(4000)
AS
BEGIN
	declare @counter int, 
			@length int,
			@char char(1),
			@textnew varchar(4000)

	set @text		= rtrim(@text)
	set @text		= lower(@text)
	set @length		= len(@text)
	set @counter	= 1
       
	if LEN(@text)<2  return @text
       
	set @text = upper(left(@text, 1) ) + right(@text, @length - 1) 

	while @counter <> @length --+ 1
	begin
			select @char = substring(@text, @counter, 1)

			IF @char = space(1)  or @char =  '_' or @char = ','  or @char = '.' or @char = '\' or @char = '/' or @char = '(' or @char = ')' or @char  = ''''
			begin
					set @textnew = left(@text, @counter)  + upper(substring(@text, @counter+1, 1)) + right(@text, (@length - @counter) - 1)
					set @text     = @textnew
			end

			set @counter = @counter + 1
	end

	return @text
END
GO





/****** Object:  Table [dbo].[ERS_Practices_Link]    Script Date: 26/11/2018 03:07:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Practices_Link](
	[GPId] [int] NULL,
	[PracticeId] [int] NULL,
	[IsPrimary] [bit] NOT NULL,
	CONSTRAINT [FK_ERS_Practices_Link_ERS_GPS] FOREIGN KEY ([GPId]) REFERENCES [dbo].[ERS_GPS]([GPId]),
	CONSTRAINT [FK_ERS_Practices_Link_ERS_Practices] FOREIGN KEY ([PracticeId]) REFERENCES [dbo].[ERS_Practices]([PracticeId])
) ON [PRIMARY]

GO


/****** Object:  Table [dbo].[ERS_Practice_CCG]    Script Date: 26/11/2018 03:07:10 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Practice_CCG](
	[CCGId] [int] IDENTITY(1,1) NOT NULL,
	[Code] [varchar](50) NULL,
	[Name] [varchar](500) NULL,
	[Address1] [varchar](500) NULL,
	[Address2] [varchar](500) NULL,
	[Address3] [varchar](500) NULL,
	[Address4] [varchar](500) NULL,
	[Address5] [varchar](500) NULL,
	[Postcode] [varchar](50) NULL,
	[Telephone] [varchar](50) NULL,
	[Fax] [varchar](50) NULL,
	[Email] [varchar](50) NULL,
	[ExternalCode] [varchar](50) NULL,
	[Status] [bit] NULL,
	[StartDate] [datetime] NULL
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_ERS_PRACTICE_CCGID] ON [dbo].[ERS_Practice_CCG] ([CCGId]); 
CREATE NONCLUSTERED INDEX [IX_ERS_PRACTICE_CCGCODE] ON [dbo].[ERS_PRACTICE_CCG] ([Code]); 

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create View ERS_VW_GPS.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC dbo.DropIfExist 'ERS_VW_GPS', 'V';
GO	

CREATE VIEW [dbo].[ERS_VW_GPS]
AS
SELECT dbo.ERS_GPS.GPId, dbo.ERS_Practices.PracticeID, dbo.ERS_Practices.CCGId, dbo.ERS_Practice_CCG.Code, dbo.ERS_Practice_CCG.Name, dbo.ERS_GPS.NationalCode AS GPCode, dbo.ERS_GPS.Name AS GPName, 
                  dbo.ERS_Practices.Name AS Practice, dbo.fnFullAddress(ERS_Practices.Address1,ERS_Practices.Address2,ERS_Practices.Address3,ERS_Practices.Address4,'') AS PracticeAddress, dbo.ERS_Practices.PostCode, 
                  CASE WHEN ERS_GPS.NationalCode = 'G9999998' THEN 'Not Stated' ELSE dbo.ERS_GPS.CompleteName END AS CompleteName, dbo.ERS_Practices.PostCode AS PracticePostcode, dbo.ERS_GPS.Title, dbo.ERS_GPS.Initial AS Initials, 
                  dbo.ERS_GPS.Forename
FROM     dbo.ERS_GPS INNER JOIN
                  dbo.ERS_Practices_Link ON dbo.ERS_GPS.GPId = dbo.ERS_Practices_Link.GPId INNER JOIN
                  dbo.ERS_Practices ON dbo.ERS_Practices_Link.PracticeId = dbo.ERS_Practices.PracticeID LEFT OUTER JOIN
                  dbo.ERS_Practice_CCG ON dbo.ERS_Practices.CCGId = dbo.ERS_Practice_CCG.CCGId

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create View ERS_VW_Practices.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC dbo.DropIfExist 'ERS_VW_Practices', 'V';
GO	

CREATE VIEW [dbo].[ERS_VW_Practices]
AS
	SELECT ep.NationalCode, 
		   ep.Name, 
		   dbo.fnFullAddress(ep.Address1, ep.Address2, ep.Address3, ep.Address4, ep.PostCode) AS Address 
	FROM dbo.ERS_Practices ep
GO


/****** Object:  Trigger [dbo].[ERS_PATIENT_REFORMAT_CASE]    Script Date: 26/11/2018 05:09:50 PM ******/

EXEC DropIfExist 'TR_Patient_Reformat_Case','TR';
GO

CREATE TRIGGER [dbo].[TR_Patient_Reformat_Case] ON [dbo].[ERS_Patients] FOR UPDATE, INSERT AS
SET NOCOUNT ON
DECLARE @ID int

SELECT @ID = INSERTED.PatientId FROM INSERTED

UPDATE ERS_PATIENTS SET 
	SURNAME = dbo.fn_initcap(SURNAME),
	FORENAME1 = dbo.fn_initcap(FORENAME1),
	FORENAME2 = dbo.fn_initcap(FORENAME2),
	address1 = dbo.fn_initcap(address1),
	address2 = dbo.fn_initcap(address2),
	address3 = dbo.fn_initcap(address3),
	address4 = dbo.fn_initcap(address4)
WHERE PatientId = @ID

GO



/****** Object:  Table [dbo].[ERS_Waiting_List]    Script Date: 27/11/2018 06:15:23 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Waiting_List](
	[WaitingListId] [int] IDENTITY(1,1) NOT NULL,
	[AppointmentId] [int] NULL,
	[PAS_WaitingListReference] [varchar](50) NULL,
	[PatientId] [int] NULL,
	[AdmissionTypeId] [int] NULL,
	[ReferralLocationId] [int] NULL,
	[ReferrerId] [int] NULL,
	[SpecialtyId] [int] NULL,
	[GPId] [int] NULL,
	[PracticeID] [int] NULL,
	[DateEntered] [datetime] NULL,
	[StaffEnteredId] [int] NULL,
	[PriorityId] [int] NULL,
	[DateBooked] [datetime] NULL,
	[StaffBookedId] [int] NULL,
	[DateChangedId] [datetime] NULL,
	[StaffChangedId] [int] NULL,
	[DueDate] [smalldatetime] NULL,
	[LetterStatus] [varchar](50) NULL,
	[LetterComment] [varchar](1000) NULL,
	[LetterDate] [datetime] NULL,
	[LetterPosted] [int] NULL,
	[WaitingListStatusId] [int] NULL,
	[Notes] [varchar](max) NULL,
	[CancelCodeId] [int] NULL,
	[CancelReasonId] [int] NULL,
	[CancelComment] [nvarchar](250) NULL,
	[DateReceived] [datetime] NULL,
	[DateRaised] [datetime] NULL,
	[OperatingHospitalId] [int] NULL,
	[PatientChoice] [bit] NULL,
	[OCSId] [int] NULL,
	[PermanentDateRaised] [datetime] NULL,
	[PermanentBookingModeId] [int] NULL,
	[Units] [int] NULL,
	[Duration] [varchar](50) NULL,
	[BackToWL] [int] NULL,
	[FromBackToWL] [int] NULL,
	[IsDeleted] [bit] NULL,
	[CreationMethod] [varchar](50) NULL,
	CONSTRAINT [PK_ERS_Waiting_List] PRIMARY KEY CLUSTERED  ([WaitingListId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_Appointments] FOREIGN KEY ([AppointmentId]) REFERENCES [dbo].[ERS_Appointments]([AppointmentId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_AppointmentStatus] FOREIGN KEY ([WaitingListStatusId]) REFERENCES [dbo].[ERS_AppointmentStatus]([UniqueId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_CancelCodes] FOREIGN KEY ([CancelCodeId]) REFERENCES [dbo].[ERS_CancelCodes]([CancelId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_CancelReasons] FOREIGN KEY ([CancelReasonId]) REFERENCES [dbo].[ERS_CancelReasons]([CancelReasonId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_GPS] FOREIGN KEY ([GPId]) REFERENCES [dbo].[ERS_GPS]([GPId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_Patients] FOREIGN KEY ([PatientId]) REFERENCES [dbo].[ERS_Patients]([PatientId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_Practices] FOREIGN KEY ([PracticeID]) REFERENCES [dbo].[ERS_Practices]([PracticeID]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_Priority] FOREIGN KEY ([PriorityId]) REFERENCES [dbo].[ERS_Priority]([PriorityId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_Referrers] FOREIGN KEY ([ReferrerId]) REFERENCES [dbo].[ERS_Referrers]([ReferrerId]),
	CONSTRAINT [FK_ERS_Waiting_List_ERS_Specialties] FOREIGN KEY ([SpecialtyId]) REFERENCES [dbo].[ERS_Specialties]([SpecialtyId])
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_ERS_WL_AppointmentId] ON [dbo].[ERS_Waiting_List] ([AppointmentId]); 
CREATE NONCLUSTERED INDEX [IX_ERS_WL_PAS_WaitingListReference] ON [dbo].[ERS_Waiting_List] ([PAS_WaitingListReference]); 
CREATE NONCLUSTERED INDEX [IX_ERS_WL_WaitingListId] ON [dbo].[ERS_Waiting_List] ([WaitingListId]); 
CREATE NONCLUSTERED INDEX [IX_ERS_WL_WaitingListPatientId] ON [dbo].[ERS_Waiting_List] ([PatientId]); 





/****** Object:  Table [dbo].[ERS_OCS_Status]    Script Date: 27/11/2018 02:46:16 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_OCS_Status](
	[UniqueId] [int] IDENTITY(1,1) NOT NULL,
	[InternalCode] [varchar](10) NULL,
	[Description] [varchar](50) NULL,
	[OutboundCode] [varchar](50) NULL,
	CONSTRAINT [PK_ERS_OCS_Status] PRIMARY KEY CLUSTERED  ([UniqueId])
) ON [PRIMARY]

GO

INSERT INTO [ERS_OCS_Status]([InternalCode], [Description], [OutboundCode])
VALUES ('P','Pending',NULL)
		,('AC','Accepted','ACC')
		,('R','Rejected','CA')
		,('C','Completed','C')
		,('W','On Waiting List','AP')
		,('B','Appointment Booked','AM')
		,('A','Appointment Attended','AT')
		,('D','DNA','FA')
		,('AB','Abandoned','AB');


/****** Object:  Table [dbo].[ERS_OCS]    Script Date: 27/11/2018 03:20:25 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_OCS](
	[OCSId] [int] IDENTITY(1,1) NOT NULL,
	[OCSStatus] [int] NOT NULL,
	[WaitingListId] [int] NULL,
	[AppointmentId] [int] NULL,
	[PatientId] [int] NULL,
	[AdmissionTypeId] [int] NULL,
	[ReferralLocationId] [int] NULL,
	[ReferrerId] [int] NULL,
	[SpecialtyId] [int] NULL,
	[GPId] [int] NULL,
	[PracticeID] [int] NULL,
	[PriorityId] [int] NULL,
	[DateChangedId] [datetime] NULL,
	[StaffChangedId] [int] NULL,
	[DueDate] [smalldatetime] NULL,
	[Notes] [varchar](max) NULL,
	[CancelCodeId] [int] NULL,
	[CancelReasonId] [int] NULL,
	[CancelComment] [nvarchar](250) NULL,
	[DateReceived] [datetime] NULL,
	[OperatingHospitalId] [int] NULL,
	[CreationMethod] [varchar](50) NULL,
	CONSTRAINT [PK_ERS_OCS] PRIMARY KEY CLUSTERED  ([OCSId]),
	CONSTRAINT [FK_ERS_OCS_ERS_Appointments] FOREIGN KEY([AppointmentId]) REFERENCES [dbo].[ERS_Appointments] ([AppointmentId]),
	CONSTRAINT [FK_ERS_OCS_ERS_GPS] FOREIGN KEY([GPId]) REFERENCES [dbo].[ERS_GPS] ([GPId]),
	CONSTRAINT [FK_ERS_OCS_ERS_OCS_Status] FOREIGN KEY([OCSStatus]) REFERENCES [dbo].[ERS_OCS_Status] ([UniqueId]),
	CONSTRAINT [FK_ERS_OCS_ERS_Patients] FOREIGN KEY([PatientId]) REFERENCES [dbo].[ERS_Patients] ([PatientId]),
	CONSTRAINT [FK_ERS_OCS_ERS_Practices] FOREIGN KEY([PracticeID]) REFERENCES [dbo].[ERS_Practices] ([PracticeID]),
	CONSTRAINT [FK_ERS_OCS_ERS_Referrers] FOREIGN KEY([ReferrerId]) REFERENCES [dbo].[ERS_Referrers] ([ReferrerId]),
	CONSTRAINT [FK_ERS_OCS_ERS_Specialties] FOREIGN KEY([SpecialtyId]) REFERENCES [dbo].[ERS_Specialties] ([SpecialtyId]),
	CONSTRAINT [FK_ERS_OCS_ERS_Users] FOREIGN KEY([StaffChangedId]) REFERENCES [dbo].[ERS_Users] ([UserID]),
	CONSTRAINT [FK_ERS_OCS_ERS_Waiting_List] FOREIGN KEY([WaitingListId]) REFERENCES [dbo].[ERS_Waiting_List] ([WaitingListId])
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_ERS_OCS_AppointmentId] ON [dbo].[ERS_OCS] ([AppointmentId]); 
CREATE NONCLUSTERED INDEX [IX_ERS_OCS_PatientId] ON [dbo].[ERS_OCS] ([PatientId]); 
CREATE NONCLUSTERED INDEX [IX_ERS_OCS_WAITINGLISTID] ON [dbo].[ERS_OCS] ([WaitingListId]); 



/****** Object:  Table [dbo].[ERS_OCS_Questions]    Script Date: 03/12/2018 09:10:25 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_OCS_Questions](
	[ID] [int] NOT NULL,
	[OCSId] [int] NULL,
	[PatientId] [int] NULL,
	[Sequence] [int] NULL,
	[Header] [varchar](50) NULL,
	[Question] [varchar](255) NULL,
	[Response] [varchar](4000) NULL,
	[Type] [int] NULL
) ON [PRIMARY]
GO


/****** Object:  Table [dbo].[ERS_OCS_Process]    Script Date: 03/12/2018 09:09:10 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_OCS_Process](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Process] [varchar](1000) NULL,
	[instance] [varchar](50) NULL
) ON [PRIMARY]

GO


/****** Object:  Table [dbo].[ERS_OCS_Process_Audit]    Script Date: 03/12/2018 09:30:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_OCS_Process_Audit](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ProcessID] [int] NULL,
	[Process] [varchar](1000) NULL,
	[Instance] [varchar](50) NULL,
	[ProcessedDate] [datetime] NULL  CONSTRAINT [DF_ERS_OCS_Process_Audit_Date]  DEFAULT (getdate())
) ON [PRIMARY]

GO

---------------------------------------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'tr_ERS_OCS_PROCESS_AUDIT_TRIGGER','TR';
GO

CREATE TRIGGER [dbo].[tr_ERS_OCS_PROCESS_AUDIT_TRIGGER] ON [dbo].[ERS_OCS_Process]
FOR DELETE
AS
SET NOCOUNT ON

	DECLARE @ProcessID INT
	DECLARE @PROCESS VARCHAR(4000)
	DECLARE @INSTANCE VARCHAR(50)

	SELECT @ProcessID = del.ID FROM DELETED del
	SELECT @PROCESS = del.PROCESS FROM DELETED del
	SELECT @INSTANCE = del.INSTANCE FROM DELETED del

	INSERT INTO ERS_OCS_PROCESS_AUDIT (ProcessID, PROCESS, INSTANCE)
	VALUES (@ProcessID, @PROCESS, @INSTANCE)

	DELETE FROM ERS_ocs_process WHERE process IS NULL
	DELETE FROM ERS_ocs_process_audit WHERE process IS NULL

GO
---------------------------------------------------------------------------------------------------------------------------------------------------

/****** Object:  Table [dbo].[ERS_ProceduresTypes_Link]    Script Date: 27/11/2018 06:34:29 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_ProceduresTypes_Link](
	[UniqueId] [int] NOT NULL,
	[ProcedureTypeId] [int] NOT NULL,
	[WaitingListId] [int] NULL,
	[AppointmentId] [int] NULL,
	[OCSId] [int] NULL,
	[Sequence] [int] NULL,
	[IsDeleted] [bit] NULL,
	CONSTRAINT [PK_ERS_ProceduresTypes_Link] PRIMARY KEY CLUSTERED  ([UniqueId]),
	CONSTRAINT [FK_ERS_ProceduresTypes_Link_ERS_Appointments] FOREIGN KEY([AppointmentId]) REFERENCES [dbo].[ERS_Appointments] ([AppointmentId]),
	CONSTRAINT [FK_ERS_ProceduresTypes_Link_ERS_OCS] FOREIGN KEY([OCSId]) REFERENCES [dbo].[ERS_OCS] ([OCSId]),
	--CONSTRAINT [FK_ERS_ProceduresTypes_Link_ERS_ProcedureTypes] FOREIGN KEY([ProcedureTypeId]) REFERENCES [dbo].[ERS_ProcedureTypes] ([ProcedureTypeId]),
	CONSTRAINT [FK_ERS_ProceduresTypes_Link_ERS_Waiting_List] FOREIGN KEY([WaitingListId]) REFERENCES [dbo].[ERS_Waiting_List] ([WaitingListId])
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_ERS_ProceduresTypes_Link_AppointmentId] ON [dbo].[ERS_ProceduresTypes_Link] ([AppointmentId]);
CREATE NONCLUSTERED INDEX [IX_ERS_ProceduresTypes_Link_OCSId] ON [dbo].[ERS_ProceduresTypes_Link] ([OCSId]);
CREATE NONCLUSTERED INDEX [IX_ERS_ProceduresTypes_Link_ProcedureTypeId] ON [dbo].[ERS_ProceduresTypes_Link] ([ProcedureTypeId]);
CREATE NONCLUSTERED INDEX [IX_ERS_ProceduresTypes_Link_WaitingListId] ON [dbo].[ERS_ProceduresTypes_Link] ([WaitingListId]);



/****** Object:  Table [dbo].[ERS_Locations]    Script Date: 29/11/2018 11:59:03 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Locations](
	[UniqueId] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[HDCKEY] [nvarchar](50) NULL,
	[ParentLocationId] [int] NULL,
	[Comments] [nvarchar](max) NULL,
	[LocationTypeId] [int] NOT NULL,
	[Enabled] [bit] NOT NULL,
	[Phone] [nvarchar](255) NULL,
	[SortOrder] [int] NOT NULL,
	[AddressId] [int] NULL,
	[IsLocalGroup] [bit] NULL,
	[HospitalName] [nvarchar](255) NULL,
	[ParentNationalCode] [nvarchar](50) NULL,
	[NationalCode] [nvarchar](50) NULL,
	[IsASite] [bit] NULL,
	[SourceType] [int] NULL,
	[isProvider] [int] NULL,
	[OperatingHospitalId] int NULL,
	[HL7Code] [nvarchar](50) NULL,
	[WhenCreated] [datetime] NOT NULL,
	[WhoCreatedId] [int] NOT NULL,
	[WhenUpdated] [datetime] NOT NULL,
	[WhoUpdatedId] [int] NOT NULL,
	CONSTRAINT [PK_ERS_Locations] PRIMARY KEY CLUSTERED  ([UniqueId])
) ON [PRIMARY]

GO


--/****** Object:  View ERS_VW_WaitingList   Script Date: 29/11/2018 01:13:05 PM ******/
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO

--EXEC dbo.DropIfExist 'ERS_VW_WaitingList', 'V';
--GO	

--CREATE VIEW [dbo].[ERS_VW_WaitingList]
--AS
--SELECT ERS_Patients.Surname, ERS_Patients.Forename1, convert(char(10),ERS_Patients.DateOfBirth,103) AS Dob, ERS_Patients.HospitalNumber,
--ERS_Patients .Address1, ERS_Patients.Postcode, ERS_AppointmentStatus.Description, ERS_AppointmentStatus.HDCKEY, 
--                         ERS_ProcedureTypes.ProcedureType,ERS_Waiting_List.WaitingListId
--FROM            ERS_Waiting_List INNER JOIN
--                         ERS_Patients ON ERS_Waiting_List.PatientId = ERS_Patients.PatientId INNER JOIN
--                         ERS_AppointmentStatus ON ERS_Waiting_List.WaitingListStatusId = ERS_AppointmentStatus.UniqueId INNER JOIN
--                         ERS_ProceduresTypes_Link ON ERS_Waiting_List.WaitingListId = ERS_ProceduresTypes_Link.WaitingListId INNER JOIN
--                         ERS_ProcedureTypes ON ERS_ProceduresTypes_Link.ProcedureTypeId = ERS_ProcedureTypes.ProcedureTypeId
--						 where hdckey='P' and isnull(ERS_Waiting_List.IsDeleted,0)=0

--GO

/****** Object:  View [dbo].[ERS_VW_WaitingListPriority]    Script Date: 30/11/2018 05:54:53 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC dbo.DropIfExist 'ERS_VW_WaitingListPriority', 'V';
GO	

CREATE VIEW [dbo].[ERS_VW_WaitingListPriority]
AS
SELECT ERS_Priority.Description AS Priority, ERS_Priority.PriorityId, ERS_Priority.backcolor, count(PatientId) as Total
        
FROM            ERS_Waiting_List INNER JOIN
                                 ERS_AppointmentStatus ON ERS_Waiting_List.WaitingListStatusId = ERS_AppointmentStatus.UniqueId INNER JOIN
                                 ERS_Priority ON ERS_Waiting_List.PriorityId = ERS_Priority.PriorityId
WHERE        (ERS_AppointmentStatus.HDCKEY = 'P') AND (ISNULL(ERS_Waiting_List.IsDeleted, 0) = 0) 
group by ERS_Priority.Description, ERS_Priority.PriorityId, ERS_Priority.backcolor 

GO

/****** Object:  View [dbo].[ERS_VW_WaitingListProcedures]    Script Date: 30/11/2018 06:44:16 PM ******/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC dbo.DropIfExist 'ERS_VW_WaitingListProcedures', 'V';
GO	

CREATE VIEW [dbo].[ERS_VW_WaitingListProcedures]
AS
SELECT        dbo.ERS_ProcedureTypes.ProcedureType, dbo.ERS_Waiting_List.WaitingListId
FROM            dbo.ERS_Waiting_List INNER JOIN
                         dbo.ERS_AppointmentStatus ON dbo.ERS_Waiting_List.WaitingListStatusId = dbo.ERS_AppointmentStatus.UniqueId INNER JOIN
                         dbo.ERS_ProceduresTypes_Link ON dbo.ERS_Waiting_List.WaitingListId = dbo.ERS_ProceduresTypes_Link.WaitingListId INNER JOIN
                         dbo.ERS_ProcedureTypes ON dbo.ERS_ProceduresTypes_Link.ProcedureTypeId = dbo.ERS_ProcedureTypes.ProcedureTypeId INNER JOIN
                         dbo.ERS_Priority ON dbo.ERS_Waiting_List.PriorityId = dbo.ERS_Priority.PriorityId
WHERE        (dbo.ERS_AppointmentStatus.HDCKEY = 'P') AND (ISNULL(dbo.ERS_Waiting_List.IsDeleted, 0) = 0)

GO


/****** Object:  Table [dbo].[ERS_ProcedureTypesHospitalDefinition]    Script Date: 03/12/2018 08:42:17 AM ******/
/****** N.B. No FKs Defined Yet    Script Date: 03/12/2018 08:42:17 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_ProcedureTypesHospitalDefinition](
	[UniqueId] [int] IDENTITY(1,1) NOT NULL,
	[OperatingHospitalId] [int] NULL,
	[ProcedureTypeId] [int] NULL,
	[IsActive] [bit] NOT NULL CONSTRAINT [DF_ERS_ProcedureTypesHospitalDefinition_Suppressed]  DEFAULT ((0)),
	[ReportHeader] [varchar](500) NULL,
	[NedExportRequired] [bit] NOT NULL CONSTRAINT [DF_ERS_ProcedureTypesHospitalDefinition_NedExportRequired]  DEFAULT ((0)),
	[SchedulerProcedure] [bit] NOT NULL CONSTRAINT [DF_ERS_ProcedureTypesHospitalDefinition_SchedulerProcedure]  DEFAULT ((0)),
	[SchedulerProcedureName] [varchar](50) NULL,
	[ProcedureMinutes] [int] NULL,
	[ProcedureUnits] [int] NULL,
	[ProcedureCallIn] [int] NULL
) ON [PRIMARY]

GO

CREATE NONCLUSTERED INDEX [IX_ERS_ProcedureTypesHospitalDefinition] ON [dbo].[ERS_ProcedureTypesHospitalDefinition] ([ProcedureTypeId]);


/****** Object:  Table [dbo].[ERS_ProductTypes]    Script Date: 03/12/2018 10:54:54 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_ProductTypes](
	[ProductTypeId] [int] IDENTITY(1,1) NOT NULL,
	[Description] [varchar](50) NOT NULL,
	[HDCKey] [varchar](50) NULL,
	[IsActive] [bit] NULL
) ON [PRIMARY]
GO

INSERT INTO [ERS_ProductTypes] ([Description], [HDCKey], [IsActive]) 
VALUES ('Gastrointestinal','GI',1)
		,('Thoracic','Bronchoscopy',0)
		,('Urology','Cystoscopy',0)
		,('Other','Non GI',0)


/******REVISON 3/12/18 14:20 DB******/

/****** Object:  View [dbo].[vw_ERS_ProcedureTypesAllocated]    Script Date: 03/12/2018 01:58:44 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC dbo.DropIfExist 'vw_ERS_ProcedureTypesAllocated', 'V';
GO	

CREATE VIEW [dbo].[vw_ERS_ProcedureTypesAllocated]
AS

SELECT      ERS_ProcedureTypes.ProcedureTypeId, ERS_ProcedureTypes.ProcedureType,  
			ERS_ProcedureTypesHospitalDefinition.OperatingHospitalId, ERS_ProcedureTypesHospitalDefinition.IsActive
FROM        ERS_ProcedureTypes inner JOIN
			ERS_ProcedureTypesHospitalDefinition ON ERS_ProcedureTypes.ProcedureTypeId = ERS_ProcedureTypesHospitalDefinition.ProcedureTypeId
GO


/****** Object:  Table [dbo].[ERS_Letters]    Script Date: 03/12/2018 02:03:50 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Letters](
	[Uniqueid] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](50) NULL,
	[Type] [int] NULL,
	CONSTRAINT [PK_ERS_Letters] PRIMARY KEY CLUSTERED  ([Uniqueid])
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc stp_InsertUpdatePatientfromHL7.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'stp_InsertUpdatePatientfromHL7','S';
GO

-- =============================================
-- Author:		DB
-- Create date: 4/12/2018
-- Description:	Appends Registration or updates to the Patient Table
-- =============================================
CREATE PROCEDURE [dbo].[stp_InsertUpdatePatientfromHL7]


		@HOSP_No	varchar(25),
		@PatNumber	int,
		@EXT_No 	varchar(25),
		@NHS_No 	varchar(20),
		@SURNAME 	varchar(50),
		@FIRSTNAME 	varchar(50),
		@MIDDLENAME varchar(50),
		@TitleId 	varchar(10),
		@DOB		datetime,
		@GenderId 	int,
		@ADDRESS1 	varchar(50),
		@ADDRESS2 	varchar(50),
		@ADDRESS3 	varchar(50),
		@ADDRESS4 	varchar(50),
		@POSTCODE 	varchar(50),
		@TEL 		varchar(50),
		@MOB 		varchar(50),
		@MaritalId		int,
		@ReligionId		int,
		@EthnicityId		int,
		@DEATH_DT	datetime,
		@DEATH_IND	bit,
		@NHS_Trace	varchar(10),
		@DATE_UPDATE	datetime,
		@GPId		int,
		@PracticeId	int,
		@BIRTH_PLACE varchar(50),
		@PlaceOfDeath  varchar(50),
		@Email varchar(50)
		
AS
BEGIN
		if @PatNumber > 0
		
		BEGIN
		UPDATE ERS_PATIENTS	SET
				HospitalNumber	= @HOSP_No,
				ExternalNo	= @EXT_No,
				NHSNo		= @NHS_No,
				Surname		= @SURNAME,
				Forename1	= @FIRSTNAME,
				Forename2	= @MIDDLENAME,
				Title		= @TitleId,	
				GenderId	= @GenderId,
				DateOfBirth	= @DOB,
				DateOfDeath	= @DEATH_DT,
				MaritalId	= @MaritalId,
				Address1	= @ADDRESS1,
				Address2	= @ADDRESS2,
				Address3	= @ADDRESS3,
				Address4	= @ADDRESS4,
				Postcode	= @POSTCODE,
				Telephone	= @TEL,
				MobileNo 	= @MOB,
				EthnicId	= @EthnicityId,
				ReligionId	= @ReligionId,
				RegGpId		= @GPId,
				RegGpPracticeId = @PracticeId,
				Deceased	= @DEATH_IND,
				CreateUpdateMethod = 'MIRTH_HL7_UPDATE',
				NHSVerificationStatus = @NHS_Trace,
				PlaceOfBirth = @BIRTH_PLACE,
				PlaceOfDeath = @PlaceOfDeath,
				DateUpdated = GetDate(),
				Email = @Email
				WHERE 	PatientId = @PatNumber
			
		END

		ELSE
		
		BEGIN
		
		INSERT into ERS_Patients (
				HospitalNumber,
				ExternalNo,
				NHSNo,
				Surname,
				Forename1,
				Forename2,
				Title,
				GenderId,
				DateOfBirth,
				DateOfDeath,
				MaritalId,
				Address1,
				Address2,
				Address3,
				Address4,
				Postcode,
				Telephone,
				MobileNo,
				EthnicId,
				ReligionId,
				RegGpId,
				RegGpPracticeId,
				Deceased,
				CreateUpdateMethod,
				NHSVerificationStatus,
				PlaceOfBirth, 
				PlaceOfDeath,
				DateAdded,
				DateUpdated,
				Email)
		VALUES	(
				@HOSP_No,
				@EXT_No,
				@NHS_No,
				@SURNAME,
				@FIRSTNAME,
				@MIDDLENAME,
				@TitleId,
				@GenderId,
				@DOB,
				@DEATH_DT,
				@MaritalId,
				@ADDRESS1,
				@ADDRESS2,
				@ADDRESS3,
				@ADDRESS4,
				@POSTCODE,
				@TEL,
				@MOB,
				@EthnicityId,
				@ReligionId,
				@GPId,
				@PracticeId,
				@DEATH_IND,
				'MIRTH_HL7_INSERT',
				@NHS_Trace,
				@BIRTH_PLACE,
				@PlaceOfDeath,
				GetDate(),
				GetDate(),
				@Email)
		END
END
			
GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc stp_ValidatePatientCoreHL7.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'stp_ValidatePatientCoreHL7','S';
GO

-- =============================================
-- Author:		DB
-- Create date: 4/12/2018
-- Description:	Appends Registrations or updates to the PATIENT Table
-- =============================================
CREATE PROCEDURE [dbo].[stp_ValidatePatientCoreHL7]

	@HOSP_No_varchar varchar(50),
	@EXT_No_varchar		varchar(50),
	@NHS_No_varchar		varchar(50),
	@SURNAME_varchar	varchar(50),
	@FIRSTNAME_varchar	varchar(50),
	@MIDDLENAME_varchar	varchar(50),
	@TITLE_varchar		varchar(20),
	@DOB_varchar		varchar(16),
	@GENDER_varchar		varchar(5),
	@ADDRESS1_varchar	varchar(50),
	@ADDRESS2_varchar	varchar(50),
	@ADDRESS3_varchar	varchar(50),
	@ADDRESS4_varchar	varchar(50),
	@POSTCODE_varchar	varchar(50),
	@TEL_Varchar		varchar(50),
	@MOB_Varchar		varchar(50),
	@MARITAL_varchar	varchar(10),
	@RELIGION_varchar	varchar(25),
	@ETHNICITY_varchar	varchar(25),
	@DEATH_DATETIME_varchar	varchar(16),
	@DEATH_INDICATOR_varchar	varchar(5),
	@DATE_UPDATE_varchar	varchar(16),
	@GP_varchar			varchar(10),
	@Practice_varchar	varchar(10),
	@NHS_TraceStatus_varchar	varchar(10),
	@BIRTH_PLACE_varchar	varchar(50),
	@PlaceOfDeath_varchar	varchar(50),
	@Email_varchar	varchar(50)
AS
BEGIN

		declare @HOSP_No	varchar(20)
		declare @PatNumber int
		declare @EXT_No		varchar(15)
		declare @NHS_No 	varchar(15)
		declare @SURNAME	varchar(50)
		declare @FIRSTNAME	varchar(50)
		declare @MIDDLENAME	varchar(50)
		declare @Title		varchar(20)
		declare @DOB		varchar(8)
		declare @GenderId		int
		declare @ADDRESS1	varchar(50)
		declare @ADDRESS2	varchar(50)
		declare @ADDRESS3	varchar(50)
		declare @ADDRESS4	varchar(50)
		declare @POSTCODE	varchar(50)
		declare @TEL		varchar(20)
		declare @MOB		varchar(20)
		declare @MaritalId	int
		declare @ReligionId	int
		declare @EthnicId	int
		declare @DEATH_DT	varchar(8)
		declare @DEATH_IND	bit
		declare @NHS_Trace	varchar(10)
		declare @DATE_UPDATE	datetime
		declare	@GPId		int
		declare @PracticeId	int
		declare @BIRTH_PLACE varchar(50)
		declare @PlaceOfDeath varchar(50)
		declare @Email	varchar(50)
		
		Select @HOSP_No = @HOSP_No_varchar
		Select @EXT_No = @EXT_No_varchar
		Select @NHS_No = @NHS_No_varchar
		Select @SURNAME = @SURNAME_varchar
		Select @FIRSTNAME = @FIRSTNAME_varchar
		Select @Email=@Email_varchar
		
--Try to get Patient NUMBER

		Select @PatNumber = isnull(PatientId,0) from ERS_PATIENTS where ExternalNo = @EXT_No
		if @PatNumber = 0
		begin
		Select @PatNumber = isnull(PatientId,0) from ERS_PATIENTS where HospitalNumber = @HOSP_No and Surname like '%' + @SURNAME  and Forename1 like '%' + @FIRSTNAME 
		end
		
		if @PatNumber = 0
		begin
		Select @PatNumber = isnull(PatientId,0)  from ERS_PATIENTS where replace(NHSNo,' ','') = replace(@NHS_No,' ','') and Surname like '%' + @SURNAME  and Forename1 like '%' + @FIRSTNAME 
		end

	--Select @PatNumber = PatientId from ERS_Patients where HospitalNumber = @HOSP_No_varchar

	Select @MIDDLENAME = @MIDDLENAME_varchar
	Select @DOB = LEFT(@DOB_varchar,8)
	Select @Title = @TITLE_varchar
	Select @ADDRESS1 = @ADDRESS1_varchar
	Select @ADDRESS2 = @ADDRESS2_varchar
	Select @ADDRESS3 = @ADDRESS3_varchar
	Select @ADDRESS4 = @ADDRESS4_varchar
	Select @POSTCODE = @POSTCODE_varchar
	Select @TEL = @TEL_Varchar
	Select @MOB = @MOB_Varchar 
	
--GENDER Lookup	
	Select @GenderId =  GenderId from ERS_GenderTypes where HL7Code = @GENDER_varchar
	
--Marital Status Lookup
	Select @MaritalId = MaritalId from ERS_Marital_Status where HL7Code = @MARITAL_varchar

--RELIGION lookup 
	Select @ReligionId = ReligionId from ERS_Religions where HL7Code = @RELIGION_varchar
	
--Ethnicity Lookup
	Select @EthnicId =  EthnicId from ERS_Ethnic_Groups where HL7Code = @Ethnicity_varchar

--GET GPId 
	Select @GPId = GPId from ERS_GPS where NationalCode = @GP_varchar	
	if @GPId is NULL or  @GPId = '' or @GPId=0 
	BEGIN
	select @GPId = gpid from ERS_GPS where Nationalcode = 'G9999998'
	END
	
--GET PracticeId 
	Select @PracticeId = PracticeId from ERS_Practices where Nationalcode = @Practice_varchar
	if @PracticeId is NULL or @PracticeId = '' or @PracticeId = 0
	BEGIN
	select @PracticeID from ERS_Practices where NationalCode = 'V81999'
	END	

	if @DEATH_DATETIME_varchar is not NULL
	BEGIN
	Select @DEATH_DT = LEFT(@DEATH_DATETIME_varchar, 8)
	END
	ELSE
	BEGIN
	select @DEATH_DT = NULL
	END

--Death indicator CERNER send multiple, we only need 0 or 1
	if @DEATH_INDICATOR_varchar = 'Y'
	BEGIN
	select @DEATH_IND = 1
	END
	ELSE
	BEGIN
	Select @DEATH_IND = 0
	Select @DEATH_DT = NULL
	END
	
	if @DEATH_INDICATOR_varchar = '1'
	begin
	select @DEATH_IND = 1
	end
	
	if @DEATH_INDICATOR_varchar is NULL
	BEGIN
	select @DEATH_IND = 0
	END
	
	
	Select @DATE_UPDATE = LEFT(@DATE_UPDATE_varchar,8)
	
--NHS Verified
	Select @NHS_Trace = @NHS_TraceStatus_varchar
	
--PLACE of BIRTH / DEATH added
	Select @BIRTH_PLACE = @BIRTH_PLACE_varchar		
	select @PlaceOfDeath = @PlaceOfDeath_varchar
	
--Now call a Stored procedure to run the insert into the Master Table
	exec stp_InsertUpdatePatientfromHL7 	@HOSP_No,@PatNumber,@EXT_No,@NHS_No,@SURNAME,@FIRSTNAME,@MIDDLENAME,@Title,@DOB,@GenderId,@ADDRESS1,
	@ADDRESS2,@ADDRESS3,@ADDRESS4,@POSTCODE,@TEL,@MOB,@MaritalId,@ReligionId,@EthnicId,@DEATH_DT,@DEATH_IND,@NHS_Trace,@DATE_UPDATE, @GPId, 
	@PracticeId,@BIRTH_PLACE,@PlaceOfDeath,@Email

END	

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_ExpectedPatients](
       [UniqueId] [int] IDENTITY(1,1) NOT NULL,
       [PatientId] [int] NULL,
       [ExpectedDateTime] [datetime] NULL,
       [OperatingHospitalId] [int] NULL,
       [DiaryId] [int] NULL,
       [SessionId] [int] NULL,
       [ProcedureType] [int] NULL,
       [Status] [int] NULL,
       [EndoscopistId] [int] NULL,
	   [TimeOfDay] [varchar](10),
	   [WhoUpdatedId] [int]		NULL Default 0,
	   [WhoCreatedId] [int]		NULL Default 0,
	   [WhenCreated]  [DATETIME]	NULL Default GetDate(),
	   [WhenUpdated]  [DATETIME]	NULL Default GetDate()
) ON [PRIMARY]
GO


/****** Object:  View [dbo].[ERS_VW_AppointmentProcedures]    Script Date: 15/01/2019 11:50:59 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE VIEW [dbo].[ERS_VW_AppointmentProcedures]
AS
SELECT        dbo.ERS_ProcedureTypes.HDCKey, dbo.ERS_ProcedureTypes.ProcedureType, AP.AppointmentId
FROM            dbo.ERS_Appointments AP INNER JOIN
                         dbo.ERS_AppointmentStatus ON AP.AppointmentStatusId = dbo.ERS_AppointmentStatus.UniqueId INNER JOIN
                         dbo.ERS_ProceduresTypes_Link ON AP.AppointmentId = dbo.ERS_ProceduresTypes_Link.AppointmentId INNER JOIN
                         dbo.ERS_ProcedureTypes ON dbo.ERS_ProceduresTypes_Link.ProcedureTypeId = dbo.ERS_ProcedureTypes.ProcedureTypeId INNER JOIN
                         dbo.ERS_Priority ON AP.PriorityiD = dbo.ERS_Priority.PriorityId
WHERE        (ISNULL(AP.IsDeleted, 0) = 0)

GO

--------------------------------------------------------------------------------------------------------------------
---------------------------------------- Create Proc add_new_list_item.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'add_new_list_item','S';
GO

CREATE PROCEDURE [dbo].[add_new_list_item]
(
	@listDescription varchar(50),
	@itemName varchar(50),
	@LoggedInUserId int
)
AS

SET NOCOUNT ON

DECLARE @ProcedureId INT, @AreaNo INT, @SiteNo INT, @ProcedureType INT

BEGIN TRANSACTION

BEGIN TRY
	DECLARE @ListItemNo int

	SELECT @ListItemNo = ISNULL(MAX(ListItemNo),0) + 1 FROM ERS_Lists WHERE ListDescription = @listDescription

	INSERT INTO dbo.ERS_Lists
	(
		ListDescription,
		ListItemNo,
		ListItemText,
		Suppressed,
		ListMainId,
		WhoCreatedId,
		WhenCreated
	)
	SELECT 
		@listDescription,
		@ListItemNo,
		@itemName,
		0,
		elm.ListMainId,
		@LoggedInUserId,
		GETDATE()
	 FROM dbo.ERS_ListsMain elm WHERE elm.ListDescription=@listDescription

	 SELECT @listItemNo
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create View ERS_VW_Patients.sql-----------------------------------------------
--------------------------------------------------------------------------------------------------------------------


EXEC dbo.DropIfExist 'ERS_VW_Patients', 'V';
GO	

DECLARE @sql nvarchar(max), @IncludeUGI bit=0
SELECT @IncludeUGI = IncludeUGI FROM #variables

IF @IncludeUGI = 1
BEGIN
SET @sql='
	CREATE VIEW ERS_VW_Patients
	AS
	SELECT DISTINCT 
		ROW_NUMBER() OVER (ORDER BY ugip.[Patient No]) AS PatientRowId,
		ugip.[Patient No] AS UGIPatientId,
		ugip.[Combo ID] AS ComboId,
		CASE WHEN p.PatientId IS NULL THEN ugip.[Patient No] ELSE p.PatientId END AS PatientId, 
		CASE WHEN p.PatientId IS NULL THEN 0 ELSE 1 END AS ERSPatient, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Title ELSE ugip.Title END AS Title, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Forename1 ELSE ugip.Forename END AS Forename1, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Surname ELSE ugip.Surname END AS Surname, 
		CASE WHEN p.PatientId IS NOT NULL THEN dbo.fnGender(p.GenderId) ELSE dbo.fnGenderFromCode(ugip.Gender) END AS Gender, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Forename1 + '' '' + p.Surname ELSE ugip.Forename + '' '' + ugip.Surname END AS PatientName, 
		CASE WHEN p.PatientId IS NOT NULL THEN dbo.fnFullAddress(p.Address1, p.Address2, p.Address3, p.Address4, '' '') ELSE ugip.Address END as Address, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Postcode ELSE ugip.[Post code] END AS Postcode,
		CASE WHEN p.PatientId IS NOT NULL THEN p.Telephone ELSE ugip.[Phone No] END AS Telephone,
		CASE WHEN p.PatientId IS NOT NULL THEN p.DateOfBirth ELSE ugip.[Date of birth] END AS DateOfBirth, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.HospitalNumber ELSE ugip.[Case note no] END AS HospitalNumber, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.NHSNo ELSE ugip.[NHS No] END AS NHSNo, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.DateAdded ELSE ugip.[Record created] END AS DateAdded,
		CASE WHEN p.PatientId IS NOT NULL THEN p.DateUpdated ELSE ugip.[Last Modified] END AS DateUpdated,
		CASE WHEN p.PatientId IS NOT NULL THEN p.EthnicId ELSE ugip.[Ethnic origin] END AS EthnicId,
		CASE WHEN p.PatientId IS NOT NULL THEN p.DateOfDeath ELSE ugip.[Date of death] END AS DateOfDeath,
		CASE WHEN p.PatientId IS NOT NULL THEN p.Deceased ELSE CASE WHEN ugip.[Date of death] IS NULL THEN 0 ELSE 1 END END AS Deceased
	FROM  ERS_Patients p
		LEFT JOIN Patient ugip ON ugip.Patient_ID = p.PatientId
	UNION ALL
	SELECT 
		ROW_NUMBER() OVER (ORDER BY ugip.[Patient No]) AS PatientRowId,
		ugip.[Patient No] AS UGIPatientId,
		ugip.[Combo ID] AS ComboId,
		ugip.[Patient No] AS PatientId,
		0  AS ERSPatient, 
		ugip.Title  AS Title, 
		ugip.Forename  AS Forename1, 
		ugip.Surname  AS Surname, 
		dbo.fnGenderFromCode(ugip.Gender)  AS Gender, 
		ugip.Forename + '' '' + ugip.Surname  AS PatientName, 
		ugip.Address  as Address, 
		ugip.[Post code]  AS Postcode,
		ugip.[Phone No]  AS Telephone,
		ugip.[Date of birth]  AS DateOfBirth, 
		ugip.[Case note no]  AS HospitalNumber, 
		ugip.[NHS No]  AS NHSNo, 
		ugip.[Record created]  AS DateAdded,
		ugip.[Last Modified]  AS DateUpdated,
		ugip.[Ethnic origin]  AS EthnicId,
		ugip.[Date of death]  AS DateOfDeath,
		CASE WHEN ugip.[Date of death] IS NULL THEN 0 ELSE 1 END
	FROM  Patient ugip
	WHERE ugip.Patient_id IS NULL'
END
ELSE
BEGIN
SET @sql = '
	CREATE VIEW ERS_VW_Patients
	AS
	SELECT DISTINCT 
		ROW_NUMBER() OVER (ORDER BY p.PatientId) AS PatientRowId,
		p.PatientId AS PatientId, 
		NULL AS UGIPatientId,
		NULL AS ComboId,
		1 AS ERSPatient, 
		p.Title AS Title, 
		p.Forename1 AS Forename1, 
		p.Surname AS Surname, 
		dbo.fnGender(p.GenderId) AS Gender, 
		p.Forename1 + '' '' + p.Surname AS PatientName, 
		dbo.fnFullAddress(p.Address1, p.Address2, p.Address3, p.Address4, '''') AS Address, 
		p.PostCode,
		p.Telephone,
		p.DateOfBirth AS DateOfBirth, 
		p.HospitalNumber AS HospitalNumber, 
		p.NHSNo AS NHSNo, 
		p.DateAdded AS DateAdded,
		p.DateUpdated AS DateUpdated,
		p.EthnicId AS EthnicId,
		p.DateOfDeath AS DateOfDeath,
		ISNULL(p.Deceased,0)  AS Deceased
	FROM ERS_Patients p '
END
	
EXEC sp_executesql @sql
GO



--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create View ERS_VW_PatientswithGP.sql-----------------------------------------------
--------------------------------------------------------------------------------------------------------------------


EXEC dbo.DropIfExist 'ERS_VW_PatientswithGP', 'V';
GO     

DECLARE @sql nvarchar(max), @IncludeUGI bit
SELECT @IncludeUGI = IncludeUGI FROM #variables

IF @IncludeUGI = 1
BEGIN
SET @sql='
	CREATE VIEW ERS_VW_PatientswithGP
	AS
	SELECT DISTINCT 
		ROW_NUMBER() OVER (ORDER BY ugip.[Patient No]) AS PatientRowId,
		CASE WHEN p.PatientId IS NULL THEN ugip.[Patient No] ELSE p.PatientId END AS PatientId, 
		ugip.[Patient No] AS UGIPatientId,
		ugip.[Combo ID] AS ComboId,
		CASE WHEN p.PatientId IS NULL THEN 0 ELSE 1 END AS ERSPatient, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Title ELSE ugip.Title END AS Title, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Forename1 ELSE ugip.Forename END AS Forename1, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Surname ELSE ugip.Surname END AS Surname, 
		CASE WHEN p.PatientId IS NOT NULL THEN dbo.fnGender(p.GenderId) ELSE dbo.fnGenderFromCode(ugip.Gender) END AS Gender, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Forename1 + '' '' + p.Surname ELSE ugip.Forename + '' '' + ugip.Surname END AS PatientName, 
		CASE WHEN p.PatientId IS NOT NULL THEN dbo.fnFullAddress(p.Address1, p.Address2, p.Address3, p.Address4, '' '') ELSE ugip.Address END as Address, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.Postcode ELSE ugip.[Post code] END AS Postcode,
		CASE WHEN p.PatientId IS NOT NULL THEN p.Telephone ELSE ugip.[Phone No] END AS Telephone,
		CASE WHEN p.PatientId IS NOT NULL THEN p.DateOfBirth ELSE ugip.[Date of birth] END AS DateOfBirth, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.HospitalNumber ELSE ugip.[Case note no] END AS HospitalNumber, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.NHSNo ELSE ugip.[NHS No] END AS NHSNo, 
		CASE WHEN p.PatientId IS NOT NULL THEN p.DateAdded ELSE ugip.[Record created] END AS DateAdded,
		CASE WHEN p.PatientId IS NOT NULL THEN p.DateUpdated ELSE ugip.[Last Modified] END AS DateUpdated,
		CASE WHEN p.PatientId IS NOT NULL THEN p.EthnicId ELSE ugip.[Ethnic origin] END AS EthnicId,
		CASE WHEN p.PatientId IS NOT NULL THEN g.CompleteName ELSE ugip.[GP Name] END AS GPName,
		CASE WHEN p.PatientId IS NOT NULL THEN ep.name ELSE '''' END AS PracticeName,
		CASE WHEN p.PatientId IS NOT NULL THEN dbo.fnFullAddress(ep.Address1, ep.Address2, ep.Address3, ep.Address4, ep.PostCode) ELSE ugip.[GP Address] END AS GPAddress,
		CASE WHEN p.PatientId IS NOT NULL THEN ep.TelNo ELSE '''' END AS GPTelNo,
		CASE WHEN p.PatientId IS NOT NULL THEN p.DateOfDeath ELSE ugip.[Date of death] END AS DateOfDeath,
		CASE WHEN p.PatientId IS NOT NULL THEN ISNULL(p.Deceased,0) ELSE Deceased END AS Deceased
	FROM  ERS_Patients p
		LEFT JOIN Patient ugip ON ugip.Patient_ID = p.PatientId
		LEFT JOIN ERS_GPs g ON g.GPId = p.RegGpId
		LEFT JOIN dbo.ERS_Practices ep ON p.RegGpPracticeId = ep.PracticeID
	UNION ALL
	SELECT  
		ROW_NUMBER() OVER (ORDER BY ugip.[Patient No]) AS PatientRowId,
		ugip.[Patient No] AS PatientId,
		ugip.[Patient No] AS UGIPatientId,
		ugip.[Combo ID] AS ComboId,
		0  AS ERSPatient, 
		ugip.Title  AS Title, 
		ugip.Forename  AS Forename1, 
		ugip.Surname  AS Surname, 
		dbo.fnGenderFromCode(ugip.Gender)  AS Gender, 
		ugip.Forename + '' '' + ugip.Surname  AS PatientName, 
		ugip.Address  as Address, 
		ugip.[Post code]  AS Postcode,
		ugip.[Phone No]  AS Telephone,
		ugip.[Date of birth]  AS DateOfBirth, 
		ugip.[Case note no]  AS HospitalNumber, 
		ugip.[NHS No]  AS NHSNo, 
		ugip.[Record created]  AS DateAdded,
		ugip.[Last Modified]  AS DateUpdated,
		ugip.[Ethnic origin]  AS EthnicId,
		ugip.[GP Name]  AS GPName,
		'''' AS PracticeName,
		ugip.[GP Address]  AS GPAddress,
		''''  AS GPTelNo,
		ugip.[Date of death]  AS DateOfDeath,
		ugip.Deceased
	FROM  Patient ugip
	WHERE ugip.Patient_id IS NULL'
END
ELSE
BEGIN
SET @sql = '
	CREATE VIEW ERS_VW_PatientswithGP
	AS
	SELECT DISTINCT 
		ROW_NUMBER() OVER (ORDER BY p.PatientId) AS PatientRowId,
		p.PatientId AS PatientId, 
		NULL AS UGIPatientId,
		NULL as ComboId,
		1 AS ERSPatient, 
		p.Title AS Title, 
		p.Forename1 AS Forename1, 
		p.Surname AS Surname, 
		dbo.fnGender(p.GenderId) AS Gender, 
		p.Forename1 + '' '' + p.Surname AS PatientName, 
		dbo.fnFullAddress(p.Address1, p.Address2, p.Address3, p.Address4, '''') AS Address, 
		p.PostCode,
		p.Telephone,
		p.DateOfBirth AS DateOfBirth, 
		p.HospitalNumber AS HospitalNumber, 
		p.NHSNo AS NHSNo, 
		p.DateAdded AS DateAdded,
		p.DateUpdated AS DateUpdated,
		p.EthnicId AS EthnicId,
		g.CompleteName AS GPName,
		ep.name AS PracticeName,
		dbo.fnFullAddress(ep.Address1, ep.Address2, ep.Address3, ep.Address4, ep.PostCode) AS GPAddress,
		ep.TelNo AS GPTelNo,
		p.DateOfDeath AS DateOfDeath,
		ISNULL(p.Deceased, 0) AS Deceased
	FROM ERS_Patients p 
		LEFT JOIN ERS_GPs g ON g.GPId = p.RegGpId
		LEFT JOIN dbo.ERS_Practices ep ON p.RegGpPracticeId = ep.PracticeID'
END
	
EXEC sp_executesql @sql
GO


-------------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'fnCheckDate', 'F';
GO 

CREATE FUNCTION [dbo].[fnCheckDate]
	(@InDate nvarchar(50))

RETURNS DATETIME
AS
BEGIN
	declare @Return DATETIME	,@MonthIs int	,@DayIs int		,@YearIs int		,@LeapTest int

    if len(@InDate) <8 return null
    set @InDate=SUBSTRING(@InDate, 1,8)

    set @MonthIs = cast((SUBSTRING(@InDate, 5, 2))as int)
       
    if @MonthIs > 12 or @MonthIs  <1 return null

    set @DayIs = cast((SUBSTRING(@InDate, 7, 2))as int)
       
    if @DayIs <1 return null
    if @MonthIs in (1,3,5,7,8,10,12) and @DayIs>31 return null 
    if @MonthIs in (4,6,9,11) and @DayIs>30 return null 

    if @MonthIs =2 and @DayIs>29 return null 
       
    if @MonthIs =2 and @DayIs=29 
    begin
		set @YearIs= cast((SUBSTRING(@InDate, 1, 4))as int)
       
		select @LeapTest = CASE WHEN (@YearIs % 4 = 0 AND @YearIs % 100 <> 0) OR @YearIs % 400 = 0 THEN 1 else 0 end
		if @LeapTest=0 return null
    end
   
    select @return = CASE WHEN ISDATE(@InDate) = 1 THEN CAST(@InDate as DATETIME) else null end
    return @return
END
GO

-------------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'fnEthnicity', 'F';
GO 

CREATE FUNCTION [dbo].[fnEthnicity]
(
	@EthnicId int
)

RETURNS varchar(100)
AS
BEGIN
	DECLARE @ReturnVal VARCHAR(100)
	SELECT @ReturnVal = eeo.Details FROM dbo.ERS_Ethnic_Groups eeo WHERE eeo.EthnicId = @EthnicId
    RETURN @ReturnVal
END
GO

--------------------------------------------------------------------------------------------------------------------
---------------------------------------- Create Proc ERS_DemographicHL7.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
       
CREATE TABLE [dbo].[ERS_DemographicHL7](
            [UniqueId] [int] IDENTITY(1,1) NOT NULL,
            [HospitalNumber] [varchar](20) NULL,
            [PatientId] [int] NULL,
            [ExternalNumber] [varchar](15) NULL,
            [NHSNumber] [varchar](12) NULL,
            [Surname] [varchar](50) NULL,
            [Firstname] [varchar](50) NULL,
            [Secondname] [varchar](50) NULL,
            [Title] [varchar](50) NULL,
            [DOB] [datetime] NULL,
            [DOBin] [varchar](50) NULL,
            [Address1] [varchar](50) NULL,
            [Address2] [varchar](50) NULL,
            [Address3] [varchar](50) NULL,
            [Address4] [varchar](50) NULL,
            [Postcode] [varchar](20) NULL,
            [Telephone] [varchar](20) NULL,
            [Mobile] [varchar](20) NULL,
            [GenderId] [int] NULL,
            [GenderCode] [varchar](20) NULL,
            [MaritalId] [int] NULL,
            [MaritalCode] [varchar](20) NULL,
            [ReligionId] [int] NULL,
            [ReligionCode] [varchar](20) NULL,
            [EthnicId] [int] NULL,
            [EthnicCode] [varchar](20) NULL,
            [DateOfDeath] [datetime] NULL,
            [DeceasedIndicator] [bit] NULL,
            [DeceasedIndicatorInbound] [varchar](20) NULL,
            [NHSTraceStatus] [char](2) NULL,
            [DateUpdated] [datetime] NULL,
            [GPId] [int] NULL,
            [GPCode] [varchar](20) NULL,
            [PracticeId] [int] NULL,
            [PracticeCode] [varchar](50) NULL,
            [BirthPlace] [varchar](50) NULL,
            [PlaceOfDeath] [varchar](50) NULL,
            [Email] [varchar](50) NULL,
            [RAWMessage] [varchar](max) NULL,
            [Status] [varchar](50) NULL,
            [Processed] [bit] NULL,
            [DateTimeAdded] [datetime] NULL,
			[RejectionReason] [varchar](255) NULL,
            CONSTRAINT [PK_ERS_DemographicHL7] PRIMARY KEY CLUSTERED  ([UniqueId])
) ON [PRIMARY]

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Proc stp_PatientCoreHL7.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'stp_PatientCoreHL7','S';
GO

-- =============================================
-- Author:          DB
-- Create date: 14/12/2018
-- Description:     Appends Registrations or updates to the PATIENT Demographic HL7 Table
-- =============================================
CREATE PROCEDURE [dbo].[stp_PatientCoreHL7]

       @HospitalNumber_varchar		varchar(255),
       @ExternalNumber_varchar		varchar(255),
       @NHSNumber_varchar			varchar(255),
       @Surname_varchar				varchar(255),
       @Firstname_varchar			varchar(255),
       @Secondname_varchar			varchar(255),
       @Title_varchar				varchar(255),
       @DOB_varchar					varchar(255),
       @Gender_varchar				varchar(255),
       @Address1_varchar			varchar(255),
       @Address2_varchar			varchar(255),
       @Address3_varchar			varchar(255),
       @Address4_varchar			varchar(255),
       @Postcode_varchar			varchar(255),
       @Telephone_Varchar			varchar(255),
       @Mobile_Varchar				varchar(255),
       @Marital_varchar				varchar(255),
       @Religion_varchar			varchar(255),
       @Ethnic_varchar				varchar(255),
       @DeathDatetime_varchar		varchar(255),
       @DeceasedIndicator_varchar	varchar(255),
       @DateUpdate_varchar			varchar(255),
       @GP_varchar					varchar(255),
       @Practice_varchar			varchar(255),
       @NHSTraceStatus_varchar		varchar(255),
       @BirthPlace_varchar			varchar(255),
       @PlaceOfDeath_varchar		varchar(255),
       @Email_varchar				varchar(255),
       @RAWMessage_varchar			varchar(max)
       
       
AS
BEGIN

    DECLARE @HospitalNumber		varchar(255)
			,@PatNumber			int
            , @ExternalNumber	varchar(255)
            , @NHSNumber		varchar(255)
            , @Surname			varchar(255)
            , @Firstname		varchar(255)
            , @Secondname		varchar(255)
            , @Title            varchar(255)
            , @DOB				datetime
            , @DOBIn            varchar(255)
            , @GenderId         int
            , @GenderCode		varchar(255)
            , @Address1			varchar(255)
            , @Address2			varchar(255)
            , @Address3			varchar(255)
            , @Address4			varchar(255)
            , @Postcode			varchar(255)
            , @Telephone		varchar(255)
            , @Mobile           varchar(255)
            , @MaritalId		int
            , @MaritalCode		varchar(255)
            , @ReligionId		int
            , @ReligionCode		varchar(255)
            , @EthnicId			int
            , @EthnicCode		varchar(255)
            , @DeathDatetime    datetime
            , @DeceasedIndicator			varchar(255)
            , @DeceasedIndicatorInbound		varchar(255)
            , @NHSTraceStatus   varchar(255)
            , @DateUpdate		datetime
            , @GPId				int
            , @GPCode			varchar(255)
            , @PracticeId		int
            , @PracticeCode		varchar(255)
            , @BirthPlace		varchar(255)
            , @PlaceOfDeath		varchar(255)
            , @Email			varchar(255)
            , @RAWMessage		varchar(max)

             
    Select @HospitalNumber = @HospitalNumber_varchar
			, @ExternalNumber = ltrim(rtrim(@ExternalNumber_varchar))
			, @NHSNumber = @NHSNumber_varchar
			, @Surname = @Surname_varchar
			, @Firstname = @Firstname_varchar
			, @Secondname = @Secondname_varchar
			, @Email=@Email_varchar
			, @Title = @Title_varchar
			, @Address1 = @Address1_varchar
			, @Address2 = @Address2_varchar
			, @Address3 = @Address3_varchar
			, @Address4 = @Address4_varchar
			, @Postcode = @Postcode_varchar
			, @Telephone = @Telephone_Varchar
			, @Mobile = @Mobile_Varchar 
			, @DOB = dbo.fnCheckDate(LEFT(@DOB_varchar,8))
			, @DOBIn = @DOB_varchar
			, @GenderCode =@Gender_varchar
			, @EthnicCode = @Ethnic_varchar
			, @MaritalCode = @Marital_varchar
			, @ReligionCode = @Religion_varchar
			, @DeceasedIndicatorInbound = @DeceasedIndicator_varchar
			, @GPCode = @GP_varchar
			, @PracticeCode= @Practice_varchar

             
--Try to get Patient NUMBER

Select @PatNumber = isnull(PatientId,0) from ERS_PATIENTS where HospitalNumber = @HospitalNumber
       
--GENDER Lookup     
       Select @GenderId =  GenderId from ERS_GenderTypes where Code = @Gender_varchar    --as advised by David
       
--Marital Status Lookup
       Select @MaritalId = MaritalId from ERS_Marital_Status where HL7Code = @Marital_varchar

--RELIGION lookup 
       Select @ReligionId = ReligionId from ERS_Religions where HL7Code = @Religion_varchar
       
--Ethnicity Lookup
       Select @EthnicId =  EthnicId from ERS_Ethnic_Groups where HL7Code = @Ethnic_varchar

--GET GPId 
       Select @GPId = GPId from ERS_GPS where NationalCode = @GP_varchar   
       if @GPId is NULL or  @GPId = '' or @GPId=0 
       BEGIN
			select @GPId = gpid from ERS_GPS where Nationalcode = 'G9999998'
       END
       
--GET PracticeId 
       Select @PracticeId = PracticeId from ERS_Practices where Nationalcode = @Practice_varchar
       if @PracticeId is NULL or @PracticeId = '' or @PracticeId = 0
       BEGIN
			select @PracticeID = PracticeId from ERS_Practices where NationalCode = 'V81999'
       END    

       if @DeathDatetime_varchar is not NULL
       BEGIN
			Select @DeathDatetime = dbo.fnCheckDate(LEFT(@DeathDatetime_varchar, 8))
       END
       ELSE
       BEGIN
			select @DeathDatetime = NULL
       END

--Death indicator we only need 0 or 1
       if @DeceasedIndicator_varchar = 'Y'
       BEGIN
			select @DeceasedIndicator = 1
       END
       ELSE
       BEGIN
		   Select @DeceasedIndicator = 0
		   Select @DeathDatetime = NULL
       END
       
       if @DeceasedIndicator_varchar = '1'
       begin
			select @DeceasedIndicator = 1
       end
       
       if @DeceasedIndicator_varchar is NULL
       BEGIN
			select @DeceasedIndicator = 0
       END
       
       
       Select @DateUpdate = dbo.fnCheckDate(LEFT(@DateUpdate_varchar,8))
       
--NHS Verified
       Select @NHSTraceStatus = @NHSTraceStatus_varchar
       
--PLACE of BIRTH / DEATH added
       Select @BirthPlace = @Birthplace_varchar        
       , @PlaceOfDeath = @PlaceOfDeath_varchar
       , @RAWMessage= @RAWMessage_Varchar
--Now call a Stored procedure to run the insert into the Master Table


	Insert into ERS_DemographicHL7 
		( HospitalNumber	,[PatientId]	,[ExternalNumber]   ,[NHSNumber]		,[Surname]					,[Firstname]
		,[Secondname]		,[Title]		,[DOB]				,[DOBIn]			,[Address1]					,[Address2]			,[Address3]		,[Address4]      ,[Postcode]
		,[Telephone]		,[Mobile]		,[GenderId]         ,GenderCode			,[MaritalId]				,MaritalCode		,[ReligionId]	,ReligionCode
		,[EthnicId]         ,EthnicCode     ,[DateOfDeath]      ,[DeceasedIndicator],DeceasedIndicatorInbound	,[NHSTraceStatus]
		,[DateUpdated]      ,[GPId]         ,GPCode				,[PracticeId]       ,PracticeCode				,[BirthPlace]		,[PlaceOfDeath]	,[Email]
		,[RAWMessage]		,[Status]		,[Processed]        ,DateTimeAdded) 
    values (@HospitalNumber,	@PatNumber,			@ExternalNumber,	@NHSNumber,			@Surname,					@Firstname,
			@Secondname,		@Title,				@DOB,				@DOBIn,				@Address1,					@Address2,		@Address3,		@Address4,		@Postcode,
	        @Telephone,			@Mobile,			@GenderId,			@GenderCode,		@MaritalId,					@MaritalCode,	@ReligionId,	@ReligionCode, 
			@EthnicId,			@EthnicCode,		@DeathDatetime,		@DeceasedIndicator,	@DeceasedIndicatorInbound,	@NHSTraceStatus,
			@DateUpdate,		@GPId,@GPCode,		@PracticeId,		@PracticeCode,		@BirthPlace,				@PlaceOfDeath,	@Email,
			@RAWMessage,		'Awaiting Processing',0,getdate())

END

GO

---------------------------------------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'ProcessERS_DemographicHL7', 'TR';
GO

CREATE TRIGGER [dbo].[ProcessERS_DemographicHL7]
ON [dbo].[ERS_DemographicHL7]
AFTER INSERT
AS

SET NOCOUNT ON
       declare @Id   INT
       ,@ProcessMode int
       ,@HospitalNumber    varchar(20)
       ,@PatNumber int
       ,@ExternalNumber    varchar(15)
       ,@NHSNumber   varchar(15)
       ,@Surname    varchar(50)
       ,@Firstname   varchar(50)
       ,@Secondname  varchar(50)
       ,@Title             varchar(20)
       ,@DOB        varchar(50)
       ,@GenderId          int
       ,@Address1   varchar(50)
       ,@Address2   varchar(50)
       ,@Address3   varchar(50)
       ,@Address4   varchar(50)
       ,@Postcode   varchar(50)
       ,@Telephone  varchar(20)
       ,@Mobile            varchar(20)
       ,@MaritalId  int
       ,@ReligionId  int
       ,@EthnicId int
       ,@DeathDatetime     datetime
       ,@DeathIndicator    bit
       ,@NHSTraceStatus    varchar(10)
       ,@DateUpdate  datetime
       ,@GPId        int
       ,@PracticeId  int
       ,@BirthPlace varchar(50)
       ,@PlaceOfDeath varchar(50)
       ,@Email      varchar(50)
             
       select @Id= UniqueId					,@HospitalNumber= HospitalNumber	,@PatNumber= isnull(PatientId,0)         ,@ExternalNumber =[ExternalNumber] 
             ,@NHSNumber = [NHSNumber]		,@Surname = [Surname]               ,@Firstname = [Firstname]                ,@Secondname = [Secondname] 
             ,@Title = [Title]				,@DOB= [DOB]                        ,@GenderId = [GenderId]                  ,@Address1 = [Address1] 
             ,@Address2 = [Address2]		,@Address3 = [Address3]             ,@Address4 = [Address4]                  ,@Postcode = [Postcode] 
             ,@Telephone = [Telephone]		,@Mobile = [Mobile]                 ,@MaritalId = [MaritalId]                ,@ReligionId = [ReligionId] 
             ,@EthnicId = [EthnicId]		,@DeathDatetime = [DateOfDeath]     ,@DeathIndicator = [DeceasedIndicator]   ,@NHSTraceStatus = [NHSTraceStatus] 
             ,@DateUpdate = [DateUpdated]	,@GPId = [GPId]                     ,@PracticeId = [PracticeId]              ,@BirthPlace = [BirthPlace] 
             ,@PlaceOfDeath = [PlaceOfDeath]                                    ,@Email = [Email] 
       FROM inserted
      
       set @ProcessMode = 0
       if @PatNumber = 0 and len(rtrim(@HospitalNumber))=0 set @ProcessMode = 2
       if @PatNumber > 0 set @ProcessMode = 1 

       if @ProcessMode = 1  --Update  
       BEGIN
             UPDATE ERS_PATIENTS  SET
                    HospitalNumber = @HospitalNumber,	ExternalNo = @ExternalNumber,		NHSNo = @NHSNumber,				Surname = @Surname,
                    Forename1 = @Firstname,             Forename2 = @Secondname,            Title = @Title,                 GenderId = @GenderId,
                    DateOfBirth = @DOB,                 DateOfDeath = @DeathDatetime,       MaritalId = @MaritalId,         Address1 = @ADDRESS1,
                    Address2 = @ADDRESS2,               Address3 = @ADDRESS3,               Address4 = @ADDRESS4,           Postcode = @POSTCODE,
                    Telephone = @Telephone,             MobileNo = @Mobile,                 EthnicId = @EthnicId,           ReligionId = @ReligionId,
                    RegGpId = @GPId,                    RegGpPracticeId = @PracticeId,      Deceased = @DeathIndicator,     CreateUpdateMethod = 'MIRTH_HL7_UPDATE',
                    NHSVerificationStatus = @NHSTraceStatus, PlaceOfBirth = @BirthPlace,    PlaceOfDeath = @PlaceOfDeath,   DateUpdated = GetDate(),
                    Email = @Email
             WHERE PatientId = @PatNumber
                    
             update ERS_DemographicHL7 set processed = 1 , status = 'Processed Update' where UniqueId= @Id 
       END

       if @ProcessMode = 0 --Insert
       BEGIN   
             INSERT into ERS_Patients (
                    HospitalNumber,			ExternalNo,         NHSNo,          Surname,            Forename1,			Forename2,
                    Title,					GenderId,           DateOfBirth,	DateOfDeath,        MaritalId,			Address1,
                    Address2,				Address3,           Address4,       Postcode,           Telephone,			MobileNo,
                    EthnicId,				ReligionId,         RegGpId,        RegGpPracticeId,    Deceased,			CreateUpdateMethod,
                    NHSVerificationStatus,  PlaceOfBirth,       PlaceOfDeath,	DateAdded,          DateUpdated,		Email)
             VALUES (
                    @HospitalNumber,        @ExternalNumber,    @NHSNumber,     @Surname,           @Firstname,         @Secondname,
                    @Title,                 @GenderId,          @DOB,           @DeathDatetime,     @MaritalId,         @ADDRESS1,
                    @ADDRESS2,              @ADDRESS3,          @ADDRESS4,      @POSTCODE,          @Telephone,         @Mobile,
                    @EthnicId,              @ReligionId,        @GPId,          @PracticeId,        @DeathIndicator,    'MIRTH_HL7_INSERT',
                    @NHSTraceStatus,        @BirthPlace,        @PlaceOfDeath,  GetDate(),			GetDate(),          @Email)

                    update ERS_DemographicHL7 set processed =1 , status = 'Processed Insert' where UniqueId= @Id 

       END

       if @ProcessMode = 2 -- Rejected No Hospital Number
       begin
			update ERS_DemographicHL7 set processed =1 , status = 'Processed Failed',RejectionReason='Missing MRN' where UniqueId= @Id 
       end

GO


-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------------
----------------------------------------- Create Proc add_to_worklist.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'add_to_worklist', 'S';
GO

CREATE PROCEDURE dbo.add_to_worklist(
	@PatientId INT,
	@Endoscopist INT,
	@StartDateTime DATETIME,
	@ProcedureTypeId INT = NULL,
	@OperatingHospitalId INT,
	@TimeOfDay VARCHAR(10),
	@LoggedInUserId INT
)
AS
BEGIN
BEGIN TRANSACTION
BEGIN TRY

	DECLARE @AppointmentId INT
	SELECT @AppointmentId = ea.AppointmentId FROM dbo.ERS_Appointments ea WHERE ea.PatientId = @PatientId AND ea.OperationalHospitaId = @OperatingHospitalId AND ea.AppointmentStatusId = 1 AND ea.BookingTypeId = 1
	
	IF ISNULL(@AppointmentId, 0) = 0
	BEGIN
		INSERT INTO ERS_Appointments
		(
			PatientId,
			EndoscopistId,
			StartDateTime,
			OperationalHospitaId,
			AppointmentStatusId,
			BookingTypeId, 
			TimeOfDay,
			WhoCreatedId,
			WhenCreated
		)
		VALUES
		(
			@PatientId,
			@Endoscopist,
			@StartDateTime,
			@OperatingHospitalId,
			1, /*designated enum to specify a worklist booking*/
			1,
			@TimeOfDay,
			@LoggedInUserId,
			GETDATE()
		)

		IF ISNULL(@ProcedureTypeID,0) > 0 
		BEGIN
			SELECT @AppointmentId = SCOPE_IDENTITY()

			INSERT INTO dbo.ERS_AppointmentProcedureTypes
			(
				AppointmentID,
				ProcedureTypeID,
				IsTherapeutic,
				WhoCreatedId,
				WhenCreated
			)
			VALUES
			(
				@AppointmentId,
				@ProcedureTypeId,
				0,
				@LoggedInUserId,
				GETDATE()
			)
		END
	END
	ELSE
	BEGIN
		UPDATE ERS_Appointments 
		SET
			StartDateTime = @StartDateTime,
			EndoscopistId = @Endoscopist,
			TimeOfDay = @TimeOfDay,
			WhoUpdatedId = @LoggedInUserId,
			WhenUpdated = GETDATE()
			WHERE AppointmentId = @AppointmentId

		UPDATE dbo.ERS_AppointmentProcedureTypes
		SET
		    ProcedureTypeID = @ProcedureTypeId,
		    WhoUpdatedId = @LoggedInUserId,
		    WhenUpdated = GETDATE()
		WHERE AppointmentID = @AppointmentId
	END


	END TRY

	BEGIN CATCH
		DECLARE @ErrorMessage NVARCHAR(4000);
		DECLARE @ErrorSeverity INT;
		DECLARE @ErrorState INT;

		SELECT @ErrorMessage = ERROR_MESSAGE(),
			   @ErrorSeverity = ERROR_SEVERITY(),
			   @ErrorState = ERROR_STATE();
    
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
	END CATCH


	IF @@TRANCOUNT > 0 COMMIT TRANSACTION;
END
GO
--------------------------------------------------------------------------------------------------------------------
----------------------------------------- Create Proc get_worklist_patients.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'get_worklist_patients','S';
GO

CREATE PROCEDURE [dbo].[get_worklist_patients]
(
	@OperatingHospitalId INT
)
AS
BEGIN
			
	DECLARE @WorklistMaxDays INT, @StartDate datetime, @EndDate datetime
	SELECT @WorklistMaxDays = MaxWorklistDays FROM ERS_SystemConfig WHERE OperatingHospitalID = @OperatingHospitalId

	SET @StartDate = convert(date,convert(varchar(10), GETDATE() ,102))
	SELECT @EndDate = convert(date,convert(varchar(10), DATEADD(Day, @WorklistMaxDays, GETDATE()),102))

SELECT 
	ea.AppointmentId AS UniqueId, 
	ep.Surname, 
	ep.Forename1 as Forename, 
	convert(char(10),ep.DateOfBirth,103) AS DOB, 
	isnull(ep.Title,'') as Title,
	ep.Gender,
	ep.HospitalNumber,
	ep.Address,
	isnull(ep.Postcode,'') as Postcode, 
	convert(char(10),ea.StartDateTime,103) as [Date], 
	eapt.ProcedureTypeID AS ProcedureTypeId,
	ept.ProcedureType,
	ep.PatientId,
	1 AS ERSPatient,
	ea.OperationalHospitaId  as HospitalId,
	ea.StartDateTime,
	ea.TimeOfDay,
	ea.EndoscopistId,
	eu.Title + ' ' + eu.Forename + ' ' + eu.Surname AS Endoscopist,
	CASE ISNULL(ea.TimeOfDay,'') WHEN '' THEN 0 WHEN 'AM' THEN 1 WHEN 'PM' THEN 2 WHEN 'Evening' THEN 3 END AS iTOD,
	0 AS InProgress,
	ISNULL(pip.ProcedureCompleted,0) AS ProcedureCompleted
	FROM  ERS_Appointments ea  
		LEFT JOIN ERS_VW_Patients ep  ON ea.PatientId = ep.PatientId
		LEFT JOIN ERS_AppointmentStatus ON EA.AppointmentStatusId = ERS_AppointmentStatus.UniqueId 
		LEFT JOIN ERS_AppointmentProcedureTypes eapt ON EA.AppointmentId = eapt.AppointmentID
		LEFT JOIN dbo.ERS_ProcedureTypes ept ON eapt.ProcedureTypeID = ept.ProcedureTypeId
		LEFT JOIN dbo.ERS_Users eu ON eu.UserID = ea.EndoscopistId
		LEFT JOIN (SELECT ep.ProcedureId, ep.ProcedureType, ep.ProcedureCompleted, ep.PatientId, ep.CreatedOn
						FROM dbo.ERS_Procedures ep
					WHERE ep.IsActive= 1 
						AND ISNULL(ep.ProcedureCompleted,0) = 0 
						AND ep.OperatingHospitalID = @OperatingHospitalId
				  ) pip ON ea.PatientId = pip.PatientId AND ISNULL(eapt.ProcedureTypeId, pip.ProcedureType) = pip.ProcedureType
	WHERE ea.BookingTypeId=1 /*1 = worklist, 2 = scheduler appointment*/ AND ea.AppointmentStatusId = 1 /*ERS_AppointmentStatus: 1 = booked*/
		AND ea.StartDateTime >=@StartDate AND ea.StartDateTime <= @EndDate
		AND CASE WHEN pip.ProcedureId IS NOT NULL THEN 1 ELSE 0 END = 0
UNION
SELECT
	ProcedureId as UniqueId, 
	ep.Surname, 
	ep.Forename1, 
	convert(char(10), ep.DateOfBirth, 103) AS DOB, 
	ISNULL(ep.Title, '') AS Title, 
	ep.Gender, 
	ep.HospitalNumber, 
	ep.Address, 
	ep.Postcode, 
	convert(char(10), pip.CreatedOn, 103) AS [DATE], 
	pip.ProcedureType AS ProcedureTypeId,
	ept.ProcedureType AS Procedures,
	ep.PatientId,
	ep.ERSPatient,
	pip.OperatingHospitalID,
	pip.CreatedOn As StartDateTime,
	'' AS TimeOfDay,
	pip.Endoscopist1,
	eu.Title + ' ' + eu.Forename + ' ' + eu.Surname AS Endoscopist,
	'' AS iTOD,
	1 AS InProgress,
	ISNULL(pip.ProcedureCompleted, 0) AS Completed
FROM ERS_Procedures pip
	INNER JOIN dbo.ERS_VW_Patients ep ON ep.PatientId = pip.PatientId
	INNER JOIN dbo.ERS_ProcedureTypes ept ON ept.ProcedureTypeId = pip.ProcedureType
	INNER JOIN dbo.ERS_Users eu ON eu.UserID = pip.Endoscopist1
WHERE pip.IsActive = 1 AND ISNULL(pip.ProcedureCompleted,0) = 0

END
GO
--------------------------------------------------------------------------------------------------------------------
----------------------------------------- Create Proc get_worklist_patient.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------

EXEC DropIfExist 'get_worklist_patient','S';
GO

CREATE PROCEDURE [dbo].[get_worklist_patient]
(
	@AppointmentId INT = NULL,
	@PatientId INT = NULL,
	@OperatingHospitalId INT = NULL
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION

BEGIN TRY
	DECLARE @WorklistMaxDays INT, @StartDate datetime, @EndDate datetime
	SELECT @WorklistMaxDays = MaxWorklistDays FROM ERS_SystemConfig WHERE OperatingHospitalID = @OperatingHospitalId

	SET @StartDate = convert(date,convert(varchar(10), GETDATE() ,102))
	SELECT @EndDate = convert(date,convert(varchar(10), DATEADD(Day, @WorklistMaxDays, GETDATE()),102))


SELECT 
	ea.AppointmentId AS UniqueId, 
	ep.Surname, 
	ep.Forename1 as Forename, 
	convert(char(10),ep.DateOfBirth,103) AS DateOfBirth, 
	isnull(ep.Title,'') as Title, 
	ep.Gender,
	ep.HospitalNumber,
	ep.Address,
	isnull(ep.Postcode,'') as Postcode,
	ea.StartDateTime as [Date], 
	ept.ProcedureType AS ProcedureType,
	eapt.ProcedureTypeID AS ProcedureTypeId,
	ep.PatientId,
	ea.StartDateTime,
	ea.TimeOfDay,
	ea.EndoscopistId
	FROM  ERS_Appointments ea  
		LEFT JOIN ERS_VW_Patients ep  ON ea.PatientId = ep.PatientId
		LEFT JOIN ERS_AppointmentProcedureTypes eapt ON EA.AppointmentId = eapt.AppointmentID
		LEFT JOIN dbo.ERS_ProcedureTypes ept ON eapt.ProcedureTypeID = ept.ProcedureTypeId
		LEFT JOIN dbo.ERS_Users eu ON eu.UserID = ea.EndoscopistId
	WHERE ISNULL(@AppointmentId, ea.AppointmentId) = ea.AppointmentId 
		AND ISNULL(@PatientId, ea.PatientId) = ea.PatientId
		AND ISNULL(@OperatingHospitalId, ea.OperationalHospitaId) = ea.OperationalHospitaId
		AND ea.AppointmentStatusId = 1 /*ERS_AppointmentStatus: 1 = booked*/
		AND ea.StartDateTime >=@StartDate AND ea.StartDateTime <= @EndDate

END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
END CATCH

IF @@TRANCOUNT > 0 COMMIT TRANSACTION;

GO

--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create Table ERS_Patient_Link-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_Patient_Link] (
	[Id] [int] IDENTITY(1, 1) NOT NULL
	,[PatientTable] [varchar](150) NOT NULL
	,[PatientNumberId] [varchar](20) NULL
	,[IsActive] [bit] NOT NULL
	) ON [PRIMARY]
GO
--------------------------------------------------------------------------------------------------------------------
------------------------------------- Create View ERS_ORU_ProcedureData.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

EXEC dbo.DropIfExist 'ERS_ORU_ProcedureData', 'V';
GO	

CREATE VIEW ERS_ORU_ProcedureData
AS
SELECT ep.ProcedureId
	,ept.HL7Code AS Exam
	,ept.ProcedureType AS ExamTitle
	,ps.Description AS PatientClass
	,ps.DateDone
	,ISNULL(pw.Description, '') AS Ward
	,ISNULL(ec.Title, '') + ' ' + ISNULL(ec.Forename, '') + ' ' + ISNULL(ec.Surname, '') AS ReferringConsultant
	,ISNULL(eu.Title, '') + ' ' + ISNULL(eu.Forename, '') + ' ' + ISNULL(eu.Surname, '') AS AdmittingConsultant
FROM dbo.ERS_Procedures ep
INNER JOIN dbo.ERS_ProcedureTypes ept ON ep.ProcedureType = ept.ProcedureTypeId
LEFT OUTER JOIN ERS_ProcedureTypesHospitalDefinition epthd ON epthd.ProcedureTypeId = ept.ProcedureTypeId
INNER JOIN dbo.ERS_Consultant ec ON ec.ConsultantID = ep.ReferralConsultantNo
INNER JOIN dbo.ERS_Users eu ON eu.UserID = ep.Endoscopist1
INNER JOIN (
	SELECT el.ListItemNo
		,el.ListItemText AS [Description]
		,el.WhenCreated AS DateDone
	FROM dbo.ERS_Lists el
	WHERE el.ListDescription = 'Patient Status'
	) ps ON ep.PatientStatus = ps.ListItemNo
LEFT OUTER JOIN (
	SELECT el.ListItemNo
		,el.ListItemText AS [Description]
	FROM dbo.ERS_Lists el
	WHERE el.ListDescription = 'Ward'
	) pw ON ep.Ward = pw.ListItemNo
GO

---------------------------------------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

EXEC dbo.DropIfExist 'stp_InsertMergefromHL7','S';
GO

CREATE PROCEDURE [dbo].[stp_InsertMergefromHL7] 
	@MasterHOSPNO_varchar VARCHAR(20)
	,@SlaveHOSPNO_varchar VARCHAR(20)
	,@DateReq_varchar VARCHAR(16)
AS
BEGIN
	DECLARE @MasterPatientId INT
	DECLARE @SlavePatientId INT
	DECLARE @MasterHOSPNO VARCHAR(20)
	DECLARE @SlaveHOSPNO VARCHAR(20)
	DECLARE @DateReq DATETIME

	SELECT @MasterPatientId = PatientId
	FROM ERS_Patients
	WHERE HospitalNumber = @MasterHOSPNO_varchar

	SELECT @SlavePatientId = PatientId
	FROM ERS_Patients
	WHERE HospitalNumber = @SlaveHOSPNO_varchar

	SELECT @MasterHOSPNO = @MasterHOSPNO_varchar

	SELECT @SlaveHOSPNO = @SlaveHOSPNO_varchar

	SELECT @DateReq = LEFT(@DateReq_varchar, 8)

	IF @MasterPatientId = @SlavePatientId
	BEGIN
		PRINT ('Master Hosp No = Slave HospNo, cannot merge patient')

		RETURN - 1
	END

	IF @MasterPatientId IS NULL
		OR @SlavePatientId IS NULL
	BEGIN
		PRINT ('No HX NUMBER Cannot Merge Patient')

		RETURN - 1
	END
	ELSE
	BEGIN
		INSERT INTO ERS_MergeJournal (
			MasterPatientId
			,SlavePatientId
			,MasterExt
			,SlaveExt
			,DateReq
			)
		VALUES (
			@MasterPatientId
			,@SlavePatientId
			,@MasterHOSPNO
			,@SlaveHOSPNO
			,@DateReq
			)

		INSERT INTO ERS_MergeJournal_Audit (
			MasterPatientId
			,SlavePatientId
			,MasterExt
			,SlaveExt
			,DateReq
			,ProcessedDate
			)
		VALUES (
			@MasterPatientId
			,@SlavePatientId
			,@MasterHOSPNO
			,@SlaveHOSPNO
			,@DateReq
			,GETDATE()
			)
	END
END
GO

---------------------------------------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_MergeJournal] (
	[MergeID] [int] IDENTITY(1, 1) NOT NULL
	,[MasterPatientId] [int] NULL
	,[SlavePatientId] [int] NULL
	,[DateReq] [datetime] NULL
	,[DateProcessed] [datetime] NULL
	,[MasterExt] [varchar](50) NULL
	,[SlaveExt] [varchar](50) NULL
	,[Processed] [int] NULL
	) ON [PRIMARY]
GO

---------------------------------------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_MergeJournal_Audit] (
	[MergeID] [int] IDENTITY(1, 1) NOT NULL
	,[MasterPatientId] [int] NULL
	,[SlavePatientId] [int] NULL
	,[DateReq] [datetime] NULL
	,[DateProcessed] [datetime] NULL
	,[MasterExt] [varchar](50) NULL
	,[SlaveExt] [varchar](50) NULL
	,[Processed] [int] NULL
	,[ProcessedDate] [date] NULL
	,[WhoUpdatedId] [int] NULL
	,[WhoCreatedId] [int] NULL
	,[WhenCreated] [datetime] NULL
	,[WhenUpdated] [datetime] NULL
	) ON [PRIMARY]
GO

ALTER TABLE [dbo].[ERS_MergeJournal_Audit] ADD DEFAULT((0))
FOR [WhoCreatedId]
GO

ALTER TABLE [dbo].[ERS_MergeJournal_Audit] ADD DEFAULT(getdate())
FOR [WhenCreated]
GO

---------------------------------------------------------------------------------------------------------------------------------------------------
EXEC DropIfExist 'TR_ERS_MergeRecs','TR';
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER [dbo].[TR_ERS_MergeRecs] ON [dbo].[ERS_MergeJournal]
FOR INSERT
	,UPDATE
AS
DECLARE @Master INT
	,@slave INT
	,@SQL VARCHAR(200)
	,@mrgID INT

SELECT @master = inserted.masterPatientId
	,@slave = inserted.MasterPatientId
	,@mrgid = inserted.mergeid
FROM inserted

IF @master IS NOT NULL
BEGIN
	IF @slave IS NOT NULL
	BEGIN
		DECLARE MergeTables CURSOR
		FOR
		SELECT PatientTable
			,PatientNumberId
		FROM ERS_Patient_Link
		WHERE IsActive = 1

		DECLARE @TableName VARCHAR(40)
			,@PatientIdField VARCHAR(20)

		OPEN MergeTables

		FETCH NEXT
		FROM MergeTables
		INTO @TableName
			,@PatientIdField

		WHILE (@@fetch_status <> - 1)
		BEGIN
			BEGIN
				SET @sql = 'update ' + @TableName + ' set ' + @PatientIdField + ' = ' + convert(VARCHAR(10), @master) + ' where ' + @PatientIdField + ' = ' + convert(VARCHAR(10), @slave)

				--   set @sql = 'update ' + @TableName + ' set ' + @PatientIdField + ' = ' + @master + ' where ' + @PatientIdField + ' = ' + @slave                                                               
				EXEC (@sql)
			END

			FETCH NEXT
			FROM MergeTables
			INTO @TableName
				,@PatientIdField
		END

		EXEC ('delete from ERS_Patients where PatientId = ' + @slave)

		EXEC ('delete from ERS_MergeJournal where mergeid = ' + @mrgid)

		CLOSE MergeTables

		DEALLOCATE MergeTables
	END
END
GO

---------------------------------------------------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------------------------
---------------------------------------- Create Proc add_new_operating_hospital.sql-------------------------------------
--------------------------------------------------------------------------------------------------------------------
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO

EXEC DropIfExist 'add_new_operating_hospital','S';
GO

CREATE PROCEDURE dbo.add_new_operating_hospital
(
	@InternalHospitalID INT, 
	@NHSHospitalID VARCHAR(100), 
	@HospitalName VARCHAR(500), 
	@ContactNumber VARCHAR(50), 
	@ReportExportPath VARCHAR(1000),
	@ReportHeading VARCHAR(500),
    @ReportTrustType VARCHAR(500),
    @ReportSubHeading VARCHAR(500),
    @DepartmentName VARCHAR(500),
	@NEDExportPath VARCHAR(500),
	@NEDODSCode VARCHAR(50),
	@LoggedInUserId INT,
	@CopyPrintSettings BIT,
	@CopyPhraseLibrary BIT
)
AS

SET NOCOUNT ON

BEGIN TRANSACTION
	BEGIN TRY
		DECLARE @NewOHID INT, @OperatingHospitalId INT

		SELECT TOP 1 @OperatingHospitalId = OperatingHospitalId FROM ERS_OperatingHospitals ORDER BY OperatingHospitalId

		INSERT INTO ERS_OperatingHospitals (InternalHospitalID, NHSHospitalID, HospitalName, ContactNumber, ReportExportPath)
		VALUES (@InternalHospitalID, @NHSHospitalID, @HospitalName, @ContactNumber, @ReportExportPath); 

		SET @NewOHID = SCOPE_IDENTITY()

		INSERT INTO dbo.ERS_SystemConfig
		(
			HospitalID,
			OperatingHospitalID,
			ApplicationTimeOut,
			SystemDisabled,
			ScheduledShutdown,
			PwdRuleMinLength,
			PwdRuleNoOfSpecialChars,
			PwdRuleNoSpaces,
			PwdRuleCantBeUserId,
			PwdRuleDaysToExpiration,
			PwdRuleNoOfPastPwdsToAvoid,
			SiteIdentification,
			SiteRadius,
			OGDDiagnosis,
			UreaseTestsIncludeTickBoxes,
			OesophagitisClassification,
			BostonBowelPrepScale,
			ReportHeading,
			ReportTrustType,
			ReportSubHeading,
			DepartmentName,
			PatientConsent,
			SortReferringConsultantBy,
			CompleteWHOSurgicalSafetyCheckList,
			ReportLocking,
			LockingTime,
			LockingDays,
			CountryLabel,
			NED_HospitalSiteCode,
			NED_OrganisationCode,
			NED_APIKey,
			NED_BatchId,
			NED_ExportPath,
			NEDEnabled,
			AuditLogEnabled,
			ErrorLogEnabled,
			ImGrabEnabled,
			IncludeUGI,
			DefaultPatientStatus,
			DefaultPatientType,
			DefaultWard,
			BRTPulmonaryPhysiology,
			PhotosURL,
			PhotosUNC,
			MaxWorklistDays,
			WhoCreatedId,
			WhenCreated
		)
		SELECT 
			HospitalID,
			@NewOHID,
			ApplicationTimeOut,
			SystemDisabled,
			ScheduledShutdown,
			PwdRuleMinLength,
			PwdRuleNoOfSpecialChars,
			PwdRuleNoSpaces,
			PwdRuleCantBeUserId,
			PwdRuleDaysToExpiration,
			PwdRuleNoOfPastPwdsToAvoid,
			SiteIdentification,
			SiteRadius,
			OGDDiagnosis,
			UreaseTestsIncludeTickBoxes,
			OesophagitisClassification,
			BostonBowelPrepScale,
			@ReportHeading,
			@ReportTrustType,
			@ReportSubHeading,
			@DepartmentName,
			PatientConsent,
			SortReferringConsultantBy,
			CompleteWHOSurgicalSafetyCheckList,
			ReportLocking,
			LockingTime,
			LockingDays,
			CountryLabel,
			@NEDODSCode,
			NED_OrganisationCode,
			NED_APIKey,
			NED_BatchId,
			@NEDExportPath,
			NEDEnabled,
			AuditLogEnabled,
			ErrorLogEnabled,
			ImGrabEnabled,
			IncludeUGI,
			DefaultPatientStatus,
			DefaultPatientType,
			DefaultWard,
			BRTPulmonaryPhysiology,
			PhotosURL,
			PhotosUNC,
			MaxWorklistDays,
			@LoggedInUserId,
			GETDATE()
		FROM ERS_SystemConfig
		WHERE ERS_SystemConfig.OperatingHospitalID= @OperatingHospitalId

		IF @CopyPrintSettings = 1 
		BEGIN
			INSERT INTO dbo.ERS_PrintOptionsGPReport
			(
				IncludeDiagram,
				IncludeDiagramOnlyIfSitesExist,
				IncludeListConsultant,
				IncludeNurses,
				IncludeInstrument,
				IncludeMissingCaseNote,
				IncludeIndications,
				IncludeCoMorbidities,
				IncludePlannedProcedures,
				IncludePremedication,
				IncludeProcedureNotes,
				IncludeSiteNotes,
				IncludeBowelPreparation,
				IncludeExtentOfIntubation,
				IncludePreviousGastricUlcer,
				IncludeExtentAndLimitingFactors,
				IncludeCannulation,
				IncludeExtentOfVisualisation,
				IncludeContrastMediaUsed,
				IncludePapillaryAnatomy,
				IncludeDiagnoses,
				IncludeFollowUp,
				IncludeTherapeuticProcedures,
				IncludeSpecimensTaken,
				IncludePeriOperativeComplications,
				DefaultNumberOfCopies,
				DefaultNumberOfPhotos,
				OperatingHospitalId,
				WhoCreatedId,
				WhenCreated
			)
			SELECT 
				epog.IncludeDiagram, 
				epog.IncludeDiagramOnlyIfSitesExist, 
				epog.IncludeListConsultant, 
				epog.IncludeNurses, 
				epog.IncludeInstrument, 
				epog.IncludeMissingCaseNote, 
				epog.IncludeIndications, 
				epog.IncludeCoMorbidities, 
				epog.IncludePlannedProcedures, 
				epog.IncludePremedication, 
				epog.IncludeProcedureNotes, 
				epog.IncludeSiteNotes, 
				epog.IncludeBowelPreparation, 
				epog.IncludeExtentOfIntubation, 
				epog.IncludePreviousGastricUlcer, 
				epog.IncludeExtentAndLimitingFactors, 
				epog.IncludeCannulation, 
				epog.IncludeExtentOfVisualisation, 
				epog.IncludeContrastMediaUsed, 
				epog.IncludePapillaryAnatomy, 
				epog.IncludeDiagnoses, 
				epog.IncludeFollowUp, 
				epog.IncludeTherapeuticProcedures, 
				epog.IncludeSpecimensTaken, 
				epog.IncludePeriOperativeComplications, 
				epog.DefaultNumberOfCopies, 
				epog.DefaultNumberOfPhotos, 
				@NewOHID, 
				@LoggedInUserId, 
				GETDATE() 
			FROM dbo.ERS_PrintOptionsGPReport epog
			WHERE epog.OperatingHospitalId =@OperatingHospitalId


			INSERT INTO dbo.ERS_PrintOptionsLabRequestReport
			(
				--RequestReportID - this column value is auto-generated
				OneRequestForEverySpecimen,
				GroupSpecimensByDestination,
				RequestsPerA4Page,
				IncludeDiagram,
				IncludeTimeSpecimenCollected,
				IncludeHeading,
				Heading,
				IncludeIndications,
				IncludeProcedureNotes,
				IncludeAbnormalities,
				IncludeSiteNotes,
				IncludeDiagnoses,
				DefaultNumberOfCopies,
				OperatingHospitalId,
				WhoCreatedId,
				WhenCreated
			)
			SELECT
				OneRequestForEverySpecimen,
				GroupSpecimensByDestination,
				RequestsPerA4Page,
				IncludeDiagram,
				IncludeTimeSpecimenCollected,
				IncludeHeading,
				Heading,
				IncludeIndications,
				IncludeProcedureNotes,
				IncludeAbnormalities,
				IncludeSiteNotes,
				IncludeDiagnoses,
				DefaultNumberOfCopies,
				@NewOHID,
				@LoggedInUserId,
				GETDATE()
			FROM ERS_PrintOptionsLabRequestReport
			WHERE OperatingHospitalId = @OperatingHospitalId


			INSERT INTO dbo.ERS_PrintOptionsPatientFriendlyReport
			(
				IncludeNoFollowup,
				IncludeUreaseText,
				UreaseText,
				IncludePolypectomyText,
				PolypectomyText,
				IncludeOtherBiopsyText,
				OtherBiopsyText,
				IncludeAnyOtherBiopsyText,
				AnyOtherBiopsyText,
				IncludeAdviceComments,
				IncludePreceedAdviceComments,
				PreceedAdviceComments,
				IncludeFinalText,
				FinalText,
				DefaultNumberOfCopies,
				OperatingHospitalId,
				WhoCreatedId,
				WhenCreated
			)
			SELECT
				IncludeNoFollowup,
				IncludeUreaseText,
				UreaseText,
				IncludePolypectomyText,
				PolypectomyText,
				IncludeOtherBiopsyText,
				OtherBiopsyText,
				IncludeAnyOtherBiopsyText,
				AnyOtherBiopsyText,
				IncludeAdviceComments,
				IncludePreceedAdviceComments,
				PreceedAdviceComments,
				IncludeFinalText,
				FinalText,
				DefaultNumberOfCopies,
				@NewOHID,
				@LoggedInUserId,
				GETDATE()
			FROM ERS_PrintOptionsPatientFriendlyReport
			WHERE OperatingHospitalId = @OperatingHospitalId


			INSERT INTO dbo.ERS_PrintOptionsPatientFriendlyReportAdditional
			(
				--Id - this column value is auto-generated
				IncludeAdditionalText,
				AdditionalText,
				OperatingHospitalId,
				WhoCreatedId,
				WhenCreated
			)
			SELECT
				IncludeAdditionalText,
				AdditionalText,
				@NewOHID,
				@LoggedInUserId,
				GETDATE()
			FROM ERS_PrintOptionsPatientFriendlyReportAdditional
			WHERE OperatingHospitalId = @OperatingHospitalId
		END

		IF @CopyPhraseLibrary = 1
		BEGIN
			INSERT INTO dbo.ERS_PhraseLibrary
			(
				--PhraseID - this column value is auto-generated
				UserID,
				PhraseCategory,
				Phrase,
				UsageCount,
				OperatingHospitalId,
				WhoCreatedId,
				WhenCreated
			)
			SELECT
				UserID,
				PhraseCategory,
				Phrase,
				UsageCount,
				OperatingHospitalId,
				WhoCreatedId,
				WhenCreated
			FROM ERS_PhraseLibrary
			WHERE OperatingHospitalId = @OperatingHospitalId
		END

		SELECT @NewOHID
	END TRY

	BEGIN CATCH
		DECLARE @ErrorMessage NVARCHAR(4000);
		DECLARE @ErrorSeverity INT;
		DECLARE @ErrorState INT;

		SELECT @ErrorMessage = ERROR_MESSAGE(),
			   @ErrorSeverity = ERROR_SEVERITY(),
			   @ErrorState = ERROR_STATE();
    
		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);

		IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;
	END CATCH


IF @@TRANCOUNT > 0 COMMIT TRANSACTION;
GO







SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[ERS_ReportAdverse](
	[AdverseId] [int] NULL,
	[AdverseEvent] [varchar](100) NULL,
	[WhoUpdatedId] [int] NULL,
	[WhoCreatedId] [int] NULL,
	[WhenCreated] [datetime] NULL,
	[WhenUpdated] [datetime] NULL
) ON [PRIMARY]

GO


--***** 'SET NOEXEC ON' statement - stop executing the statements below for 'Audit' in the current session. 
--***** 'SET NOEXEC OFF' statement is excuted at the end to reset this option for the current session . 

IF (SELECT ISNULL(IncludeAudit,0) FROM #variables) = 1 OR (SELECT IsERSViewer FROM #variables) = 0  --SET NOEXEC ON -- Intention is to stop execution
BEGIN







-----ALL SCRIPT SHOULD GO ABOVE AUDIT - SO NOTHING BENEATH THIS LINE -------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


-- ############### Create WHO and WHEN Audit fields for every ERS table

	EXEC sp_MSforeachtable '
	if left(object_name(object_id(''?'')),4)  = ''ERS_'' 
		   and not exists (select * from sys.columns 
				   where object_id = object_id(''?'')
				   and name = ''WhoUpdatedId'') 
	begin
		ALTER TABLE ? ADD WhoUpdatedId INT NULL;
	end

	if left(object_name(object_id(''?'')),4)  = ''ERS_'' 
		   and not exists (select * from sys.columns 
				   where object_id = object_id(''?'')
				   and name = ''WhoCreatedId'') 
	begin
	   ALTER TABLE ? ADD WhoCreatedId INT NULL Default 0;
	end

	if left(object_name(object_id(''?'')),4)  = ''ERS_'' 
		   and not exists (select * from sys.columns 
				   where object_id = object_id(''?'')
				   and name = ''WhenCreated'') 
	begin
		ALTER TABLE ? ADD WhenCreated DATETIME NULL Default GetDate();
	end

	if left(object_name(object_id(''?'')),4)  = ''ERS_'' 
		   and not exists (select * from sys.columns 
				   where object_id = object_id(''?'')
				   and name = ''WhenUpdated'') 
	begin
		ALTER TABLE ? ADD WhenUpdated DATETIME NULL;
	end
	';
END


DROP TABLE #variables
GO
