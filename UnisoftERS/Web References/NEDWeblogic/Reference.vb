'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace NEDWeblogic
    
    'CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BasicHttpBinding_IWebService", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class Webservice
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMultipleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSingleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteMultipleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSingleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            'Me.Url = Global.UnisoftERS.My.MySettings.Default.UnisoftERS_NEDWeblogic_Webservice
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendCompleted As SendCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMultipleCompleted As GetMultipleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSingleCompleted As GetSingleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteMultipleCompleted As DeleteMultipleCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSingleCompleted As DeleteSingleCompletedEventHandler
        
        '''<remarks/>
        Public Event PingCompleted As PingCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/IWebService/Send", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Send(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationApiKey As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal batchId As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary", IsNullable:=true)> ByVal messageData() As Byte, ByVal isCompressed As Boolean, <System.Xml.Serialization.XmlIgnoreAttribute()> ByVal isCompressedSpecified As Boolean) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> SendResponse
            Dim results() As Object = Me.Invoke("Send", New Object() {organisationApiKey, organisationCode, batchId, messageData, isCompressed, isCompressedSpecified})
            Return CType(results(0),SendResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal batchId As String, ByVal messageData() As Byte, ByVal isCompressed As Boolean, ByVal isCompressedSpecified As Boolean)
            Me.SendAsync(organisationApiKey, organisationCode, batchId, messageData, isCompressed, isCompressedSpecified, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal batchId As String, ByVal messageData() As Byte, ByVal isCompressed As Boolean, ByVal isCompressedSpecified As Boolean, ByVal userState As Object)
            If (Me.SendOperationCompleted Is Nothing) Then
                Me.SendOperationCompleted = AddressOf Me.OnSendOperationCompleted
            End If
            Me.InvokeAsync("Send", New Object() {organisationApiKey, organisationCode, batchId, messageData, isCompressed, isCompressedSpecified}, Me.SendOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendCompleted(Me, New SendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/IWebService/GetMultiple", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMultiple(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationApiKey As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationCode As String, <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true), System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://schemas.microsoft.com/2003/10/Serialization/Arrays")> ByVal supplierBatchId() As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> GetResponse
            Dim results() As Object = Me.Invoke("GetMultiple", New Object() {organisationApiKey, organisationCode, supplierBatchId})
            Return CType(results(0),GetResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMultipleAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal supplierBatchId() As String)
            Me.GetMultipleAsync(organisationApiKey, organisationCode, supplierBatchId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMultipleAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal supplierBatchId() As String, ByVal userState As Object)
            If (Me.GetMultipleOperationCompleted Is Nothing) Then
                Me.GetMultipleOperationCompleted = AddressOf Me.OnGetMultipleOperationCompleted
            End If
            Me.InvokeAsync("GetMultiple", New Object() {organisationApiKey, organisationCode, supplierBatchId}, Me.GetMultipleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMultipleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMultipleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMultipleCompleted(Me, New GetMultipleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/IWebService/GetSingle", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSingle(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationApiKey As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal supplierBatchId As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> GetResponse
            Dim results() As Object = Me.Invoke("GetSingle", New Object() {organisationApiKey, organisationCode, supplierBatchId})
            Return CType(results(0),GetResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSingleAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal supplierBatchId As String)
            Me.GetSingleAsync(organisationApiKey, organisationCode, supplierBatchId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSingleAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal supplierBatchId As String, ByVal userState As Object)
            If (Me.GetSingleOperationCompleted Is Nothing) Then
                Me.GetSingleOperationCompleted = AddressOf Me.OnGetSingleOperationCompleted
            End If
            Me.InvokeAsync("GetSingle", New Object() {organisationApiKey, organisationCode, supplierBatchId}, Me.GetSingleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSingleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSingleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSingleCompleted(Me, New GetSingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/IWebService/DeleteMultiple", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteMultiple(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationApiKey As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal siteCode As String, <System.Xml.Serialization.XmlArrayAttribute(IsNullable:=true), System.Xml.Serialization.XmlArrayItemAttribute([Namespace]:="http://schemas.microsoft.com/2003/10/Serialization/Arrays")> ByVal localProcedureId() As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> GetResponse
            Dim results() As Object = Me.Invoke("DeleteMultiple", New Object() {organisationApiKey, organisationCode, siteCode, localProcedureId})
            Return CType(results(0),GetResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteMultipleAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal siteCode As String, ByVal localProcedureId() As String)
            Me.DeleteMultipleAsync(organisationApiKey, organisationCode, siteCode, localProcedureId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteMultipleAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal siteCode As String, ByVal localProcedureId() As String, ByVal userState As Object)
            If (Me.DeleteMultipleOperationCompleted Is Nothing) Then
                Me.DeleteMultipleOperationCompleted = AddressOf Me.OnDeleteMultipleOperationCompleted
            End If
            Me.InvokeAsync("DeleteMultiple", New Object() {organisationApiKey, organisationCode, siteCode, localProcedureId}, Me.DeleteMultipleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteMultipleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteMultipleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteMultipleCompleted(Me, New DeleteMultipleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/IWebService/DeleteSingle", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteSingle(<System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationApiKey As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal organisationCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal siteCode As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal localProcedureId As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> GetResponse
            Dim results() As Object = Me.Invoke("DeleteSingle", New Object() {organisationApiKey, organisationCode, siteCode, localProcedureId})
            Return CType(results(0),GetResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteSingleAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal siteCode As String, ByVal localProcedureId As String)
            Me.DeleteSingleAsync(organisationApiKey, organisationCode, siteCode, localProcedureId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSingleAsync(ByVal organisationApiKey As String, ByVal organisationCode As String, ByVal siteCode As String, ByVal localProcedureId As String, ByVal userState As Object)
            If (Me.DeleteSingleOperationCompleted Is Nothing) Then
                Me.DeleteSingleOperationCompleted = AddressOf Me.OnDeleteSingleOperationCompleted
            End If
            Me.InvokeAsync("DeleteSingle", New Object() {organisationApiKey, organisationCode, siteCode, localProcedureId}, Me.DeleteSingleOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSingleOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSingleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSingleCompleted(Me, New DeleteSingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Microsoft.ServiceModel.Samples/IWebService/Ping", RequestNamespace:="http://Microsoft.ServiceModel.Samples", ResponseNamespace:="http://Microsoft.ServiceModel.Samples", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Ping() As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> String
            Dim results() As Object = Me.Invoke("Ping", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PingAsync()
            Me.PingAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PingAsync(ByVal userState As Object)
            If (Me.PingOperationCompleted Is Nothing) Then
                Me.PingOperationCompleted = AddressOf Me.OnPingOperationCompleted
            End If
            Me.InvokeAsync("Ping", New Object(-1) {}, Me.PingOperationCompleted, userState)
        End Sub
        
        Private Sub OnPingOperationCompleted(ByVal arg As Object)
            If (Not (Me.PingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PingCompleted(Me, New PingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.weblogik.co.uk/types")>  _
    Partial Public Class SendResponse
        
        Private exceptionMessageField As String
        
        Private queuedField As Boolean
        
        Private queuedFieldSpecified As Boolean
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property ExceptionMessage() As String
            Get
                Return Me.exceptionMessageField
            End Get
            Set
                Me.exceptionMessageField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Queued() As Boolean
            Get
                Return Me.queuedField
            End Get
            Set
                Me.queuedField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlIgnoreAttribute()>  _
        Public Property QueuedSpecified() As Boolean
            Get
                Return Me.queuedFieldSpecified
            End Get
            Set
                Me.queuedFieldSpecified = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.weblogik.co.uk/types")>  _
    Partial Public Class GetResponse
        
        Private exceptionMessageField As String
        
        Private messageDataField() As Byte
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property ExceptionMessage() As String
            Get
                Return Me.exceptionMessageField
            End Get
            Set
                Me.exceptionMessageField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary", IsNullable:=true)>  _
        Public Property MessageData() As Byte()
            Get
                Return Me.messageDataField
            End Get
            Set
                Me.messageDataField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SendCompletedEventHandler(ByVal sender As Object, ByVal e As SendCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As SendResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),SendResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetMultipleCompletedEventHandler(ByVal sender As Object, ByVal e As GetMultipleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMultipleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GetResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GetResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetSingleCompletedEventHandler(ByVal sender As Object, ByVal e As GetSingleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSingleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GetResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GetResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteMultipleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteMultipleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteMultipleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GetResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GetResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteSingleCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteSingleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteSingleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GetResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GetResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub PingCompletedEventHandler(ByVal sender As Object, ByVal e As PingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
