'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated from a template.
'
'     Manual changes to this file may cause unexpected behavior in your application.
'     Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
Imports System.Data.Entity.Core.Objects
Imports System.Linq

Partial Public Class GastroDbEntities
    Inherits DbContext

    Protected Overrides Sub OnModelCreating(modelBuilder As DbModelBuilder)
        Throw New UnintentionalCodeFirstException()
    End Sub

    Public Overridable Property ERS_AppointmentProcedureTypes() As DbSet(Of ERS_AppointmentProcedureTypes)
    Public Overridable Property ERS_Appointments() As DbSet(Of ERS_Appointments)
    Public Overridable Property ERS_AppointmentStatus() As DbSet(Of ERS_AppointmentStatus)
    Public Overridable Property ERS_AppointmentTherapeutics() As DbSet(Of ERS_AppointmentTherapeutics)
    Public Overridable Property ERS_AuditLog() As DbSet(Of ERS_AuditLog)
    Public Overridable Property ERS_AuditLog_Details() As DbSet(Of ERS_AuditLog_Details)
    Public Overridable Property ERS_ColonAbnoLesions() As DbSet(Of ERS_ColonAbnoLesions)
    Public Overridable Property ERS_ColonAbnoPolypDetails() As DbSet(Of ERS_ColonAbnoPolypDetails)
    Public Overridable Property ERS_ColonAbnoTumour() As DbSet(Of ERS_ColonAbnoTumour)
    Public Overridable Property ERS_ColonExtentOfIntubation() As DbSet(Of ERS_ColonExtentOfIntubation)
    Public Overridable Property ERS_CommonAbnoLesions() As DbSet(Of ERS_CommonAbnoLesions)
    Public Overridable Property ERS_CommonAbnoTumour() As DbSet(Of ERS_CommonAbnoTumour)
    Public Overridable Property ERS_ConsultantProcedureTherapeutics() As DbSet(Of ERS_ConsultantProcedureTherapeutics)
    Public Overridable Property ERS_ConsultantProcedureTypes() As DbSet(Of ERS_ConsultantProcedureTypes)
    Public Overridable Property ERS_DrugList() As DbSet(Of ERS_DrugList)
    Public Overridable Property ERS_ImagePort() As DbSet(Of ERS_ImagePort)
    Public Overridable Property ERS_Lists() As DbSet(Of ERS_Lists)
    Public Overridable Property ERS_OperatingHospitals() As DbSet(Of ERS_OperatingHospitals)
    Public Overridable Property ERS_PagesByRole() As DbSet(Of ERS_PagesByRole)
    Public Overridable Property ERS_PatientJourney() As DbSet(Of ERS_PatientJourney)
    Public Overridable Property ERS_Photos() As DbSet(Of ERS_Photos)
    Public Overridable Property ERS_PhraseLibrary() As DbSet(Of ERS_PhraseLibrary)
    Public Overridable Property ERS_PrintOptionsLabRequestReport() As DbSet(Of ERS_PrintOptionsLabRequestReport)
    Public Overridable Property ERS_PrintOptionsPatientFriendlyReport() As DbSet(Of ERS_PrintOptionsPatientFriendlyReport)
    Public Overridable Property ERS_PrintOptionsPatientFriendlyReportAdditional() As DbSet(Of ERS_PrintOptionsPatientFriendlyReportAdditional)
    Public Overridable Property ERS_ProcedureTypes() As DbSet(Of ERS_ProcedureTypes)
    Public Overridable Property ERS_RecordCount() As DbSet(Of ERS_RecordCount)
    Public Overridable Property ERS_SCH_DiaryLockReasons() As DbSet(Of ERS_SCH_DiaryLockReasons)
    Public Overridable Property ERS_SCH_FreeSlotDefaults() As DbSet(Of ERS_SCH_FreeSlotDefaults)
    Public Overridable Property ERS_SCH_GenderList() As DbSet(Of ERS_SCH_GenderList)
    Public Overridable Property ERS_SCH_ListGenders() As DbSet(Of ERS_SCH_ListGenders)
    Public Overridable Property ERS_SCH_ListRules() As DbSet(Of ERS_SCH_ListRules)
    Public Overridable Property ERS_SCH_ListSlots() As DbSet(Of ERS_SCH_ListSlots)
    Public Overridable Property ERS_SCH_LockedDiaries() As DbSet(Of ERS_SCH_LockedDiaries)
    Public Overridable Property ERS_SCH_PointMappings() As DbSet(Of ERS_SCH_PointMappings)
    Public Overridable Property ERS_SCH_ProcedureCallInTimes() As DbSet(Of ERS_SCH_ProcedureCallInTimes)
    Public Overridable Property ERS_SCH_RoomProcedures() As DbSet(Of ERS_SCH_RoomProcedures)
    Public Overridable Property ERS_SCH_Rooms() As DbSet(Of ERS_SCH_Rooms)
    Public Overridable Property ERS_SCH_SlotStatus() As DbSet(Of ERS_SCH_SlotStatus)
    Public Overridable Property ERS_Sites() As DbSet(Of ERS_Sites)
    Public Overridable Property ERS_SystemConfig() As DbSet(Of ERS_SystemConfig)
    Public Overridable Property ERS_TherapeuticTypes() As DbSet(Of ERS_TherapeuticTypes)
    Public Overridable Property ERS_UpperGIFollowUp() As DbSet(Of ERS_UpperGIFollowUp)
    Public Overridable Property ERS_UpperGIIndications() As DbSet(Of ERS_UpperGIIndications)
    Public Overridable Property ERS_UpperGIPathologyResults() As DbSet(Of ERS_UpperGIPathologyResults)
    Public Overridable Property ERS_UpperGIQA() As DbSet(Of ERS_UpperGIQA)
    Public Overridable Property ERS_UpperGISpecimens() As DbSet(Of ERS_UpperGISpecimens)
    Public Overridable Property ERS_Users() As DbSet(Of ERS_Users)
    Public Overridable Property ERS_Waiting_List() As DbSet(Of ERS_Waiting_List)
    Public Overridable Property BRT_OCS_Process() As DbSet(Of BRT_OCS_Process)
    Public Overridable Property ERS_PostOperativeComplications() As DbSet(Of ERS_PostOperativeComplications)
    Public Overridable Property ERS_SCH_DiaryPages() As DbSet(Of ERS_SCH_DiaryPages)
    Public Overridable Property ERS_ERCPTherapeutics() As DbSet(Of ERS_ERCPTherapeutics)
    Public Overridable Property ERS_ProceduresReporting() As DbSet(Of ERS_ProceduresReporting)
    Public Overridable Property ERS_Visualisation() As DbSet(Of ERS_Visualisation)
    Public Overridable Property ERS_Procedures() As DbSet(Of ERS_Procedures)
    Public Overridable Property ERS_PrintOptionsGPReport() As DbSet(Of ERS_PrintOptionsGPReport)
    Public Overridable Property ERS_UpperGITherapeutics() As DbSet(Of ERS_UpperGITherapeutics)

    Public Overridable Function ERS_List_UpdateValue(listId As Nullable(Of Integer), listDescription As String, newListItemValue As String, isSuppressed As Nullable(Of Boolean), loggedInUserId As Nullable(Of Integer)) As Integer
        Dim listIdParameter As ObjectParameter = If(listId.HasValue, New ObjectParameter("ListId", listId), New ObjectParameter("ListId", GetType(Integer)))

        Dim listDescriptionParameter As ObjectParameter = If(listDescription IsNot Nothing, New ObjectParameter("ListDescription", listDescription), New ObjectParameter("ListDescription", GetType(String)))

        Dim newListItemValueParameter As ObjectParameter = If(newListItemValue IsNot Nothing, New ObjectParameter("NewListItemValue", newListItemValue), New ObjectParameter("NewListItemValue", GetType(String)))

        Dim isSuppressedParameter As ObjectParameter = If(isSuppressed.HasValue, New ObjectParameter("IsSuppressed", isSuppressed), New ObjectParameter("IsSuppressed", GetType(Boolean)))

        Dim loggedInUserIdParameter As ObjectParameter = If(loggedInUserId.HasValue, New ObjectParameter("LoggedInUserId", loggedInUserId), New ObjectParameter("LoggedInUserId", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("ERS_List_UpdateValue", listIdParameter, listDescriptionParameter, newListItemValueParameter, isSuppressedParameter, loggedInUserIdParameter)
    End Function

    Public Overridable Function ProcedureNotCarriedOut_UpdateReason(procedureId As Nullable(Of Integer), dNA_ReasonId As Nullable(Of Byte), pP_DNA As String) As ObjectResult(Of String)
        Dim procedureIdParameter As ObjectParameter = If(procedureId.HasValue, New ObjectParameter("ProcedureId", procedureId), New ObjectParameter("ProcedureId", GetType(Integer)))

        Dim dNA_ReasonIdParameter As ObjectParameter = If(dNA_ReasonId.HasValue, New ObjectParameter("DNA_ReasonId", dNA_ReasonId), New ObjectParameter("DNA_ReasonId", GetType(Byte)))

        Dim pP_DNAParameter As ObjectParameter = If(pP_DNA IsNot Nothing, New ObjectParameter("PP_DNA", pP_DNA), New ObjectParameter("PP_DNA", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of String)("ProcedureNotCarriedOut_UpdateReason", procedureIdParameter, dNA_ReasonIdParameter, pP_DNAParameter)
    End Function

    Public Overridable Function Procedures_Insert(procedureType As Nullable(Of Integer), patientId As Nullable(Of Integer), procedureDate As Nullable(Of Date), procedureTime As String, patientStatus As Nullable(Of Integer), patientWard As Nullable(Of Integer), patientType As Nullable(Of Integer), operatingHospitalId As Nullable(Of Integer), listConsultant As Nullable(Of Integer), endoscopist1 As Nullable(Of Integer), endoscopist2 As Nullable(Of Integer), assistant As Nullable(Of Integer), nurse1 As Nullable(Of Integer), nurse2 As Nullable(Of Integer), nurse3 As Nullable(Of Integer), nurse4 As Nullable(Of Integer), referralHospitalNo As Nullable(Of Integer), referralConsultantNo As Nullable(Of Integer), referralConsultantSpeciality As Nullable(Of Integer), patientConsent As Nullable(Of Byte), patientConsentType As Nullable(Of Byte), patientConsentTypeOther As String, defaultCheckBox As Nullable(Of Boolean), userID As Nullable(Of Integer), productType As Nullable(Of Byte), listType As Nullable(Of Byte), endo1Role As Nullable(Of Byte), endo2Role As Nullable(Of Byte), categoryListId As Nullable(Of Integer), onWaitingList As Nullable(Of Boolean), openAccessProc As Nullable(Of Byte), emergencyProcType As Nullable(Of Byte), newProcedureId As ObjectParameter, imagePortId As Nullable(Of Integer), points As Nullable(Of Decimal), checklistComplete As Nullable(Of Boolean), referrerType As Nullable(Of Integer), gPReferrer As String, referrerTypeOther As String, providerId As Nullable(Of Integer), providerOther As String, patientNotes As Nullable(Of Boolean), patientReferralLetter As Nullable(Of Boolean), imageGenderID As Nullable(Of Integer), orderId As Nullable(Of Integer), preAssessmentId As Nullable(Of Integer)) As Integer
        Dim procedureTypeParameter As ObjectParameter = If(procedureType.HasValue, New ObjectParameter("ProcedureType", procedureType), New ObjectParameter("ProcedureType", GetType(Integer)))

        Dim patientIdParameter As ObjectParameter = If(patientId.HasValue, New ObjectParameter("PatientId", patientId), New ObjectParameter("PatientId", GetType(Integer)))

        Dim procedureDateParameter As ObjectParameter = If(procedureDate.HasValue, New ObjectParameter("ProcedureDate", procedureDate), New ObjectParameter("ProcedureDate", GetType(Date)))

        Dim procedureTimeParameter As ObjectParameter = If(procedureTime IsNot Nothing, New ObjectParameter("ProcedureTime", procedureTime), New ObjectParameter("ProcedureTime", GetType(String)))

        Dim patientStatusParameter As ObjectParameter = If(patientStatus.HasValue, New ObjectParameter("PatientStatus", patientStatus), New ObjectParameter("PatientStatus", GetType(Integer)))

        Dim patientWardParameter As ObjectParameter = If(patientWard.HasValue, New ObjectParameter("PatientWard", patientWard), New ObjectParameter("PatientWard", GetType(Integer)))

        Dim patientTypeParameter As ObjectParameter = If(patientType.HasValue, New ObjectParameter("PatientType", patientType), New ObjectParameter("PatientType", GetType(Integer)))

        Dim operatingHospitalIdParameter As ObjectParameter = If(operatingHospitalId.HasValue, New ObjectParameter("OperatingHospitalId", operatingHospitalId), New ObjectParameter("OperatingHospitalId", GetType(Integer)))

        Dim listConsultantParameter As ObjectParameter = If(listConsultant.HasValue, New ObjectParameter("ListConsultant", listConsultant), New ObjectParameter("ListConsultant", GetType(Integer)))

        Dim endoscopist1Parameter As ObjectParameter = If(endoscopist1.HasValue, New ObjectParameter("Endoscopist1", endoscopist1), New ObjectParameter("Endoscopist1", GetType(Integer)))

        Dim endoscopist2Parameter As ObjectParameter = If(endoscopist2.HasValue, New ObjectParameter("Endoscopist2", endoscopist2), New ObjectParameter("Endoscopist2", GetType(Integer)))

        Dim assistantParameter As ObjectParameter = If(assistant.HasValue, New ObjectParameter("Assistant", assistant), New ObjectParameter("Assistant", GetType(Integer)))

        Dim nurse1Parameter As ObjectParameter = If(nurse1.HasValue, New ObjectParameter("Nurse1", nurse1), New ObjectParameter("Nurse1", GetType(Integer)))

        Dim nurse2Parameter As ObjectParameter = If(nurse2.HasValue, New ObjectParameter("Nurse2", nurse2), New ObjectParameter("Nurse2", GetType(Integer)))

        Dim nurse3Parameter As ObjectParameter = If(nurse3.HasValue, New ObjectParameter("Nurse3", nurse3), New ObjectParameter("Nurse3", GetType(Integer)))

        Dim nurse4Parameter As ObjectParameter = If(nurse4.HasValue, New ObjectParameter("Nurse4", nurse4), New ObjectParameter("Nurse4", GetType(Integer)))

        Dim referralHospitalNoParameter As ObjectParameter = If(referralHospitalNo.HasValue, New ObjectParameter("ReferralHospitalNo", referralHospitalNo), New ObjectParameter("ReferralHospitalNo", GetType(Integer)))

        Dim referralConsultantNoParameter As ObjectParameter = If(referralConsultantNo.HasValue, New ObjectParameter("ReferralConsultantNo", referralConsultantNo), New ObjectParameter("ReferralConsultantNo", GetType(Integer)))

        Dim referralConsultantSpecialityParameter As ObjectParameter = If(referralConsultantSpeciality.HasValue, New ObjectParameter("ReferralConsultantSpeciality", referralConsultantSpeciality), New ObjectParameter("ReferralConsultantSpeciality", GetType(Integer)))

        Dim patientConsentParameter As ObjectParameter = If(patientConsent.HasValue, New ObjectParameter("PatientConsent", patientConsent), New ObjectParameter("PatientConsent", GetType(Byte)))

        Dim patientConsentTypeParameter As ObjectParameter = If(patientConsentType.HasValue, New ObjectParameter("PatientConsentType", patientConsentType), New ObjectParameter("PatientConsentType", GetType(Byte)))

        Dim patientConsentTypeOtherParameter As ObjectParameter = If(patientConsentTypeOther IsNot Nothing, New ObjectParameter("PatientConsentTypeOther", patientConsentTypeOther), New ObjectParameter("PatientConsentTypeOther", GetType(String)))

        Dim defaultCheckBoxParameter As ObjectParameter = If(defaultCheckBox.HasValue, New ObjectParameter("DefaultCheckBox", defaultCheckBox), New ObjectParameter("DefaultCheckBox", GetType(Boolean)))

        Dim userIDParameter As ObjectParameter = If(userID.HasValue, New ObjectParameter("UserID", userID), New ObjectParameter("UserID", GetType(Integer)))

        Dim productTypeParameter As ObjectParameter = If(productType.HasValue, New ObjectParameter("ProductType", productType), New ObjectParameter("ProductType", GetType(Byte)))

        Dim listTypeParameter As ObjectParameter = If(listType.HasValue, New ObjectParameter("ListType", listType), New ObjectParameter("ListType", GetType(Byte)))

        Dim endo1RoleParameter As ObjectParameter = If(endo1Role.HasValue, New ObjectParameter("Endo1Role", endo1Role), New ObjectParameter("Endo1Role", GetType(Byte)))

        Dim endo2RoleParameter As ObjectParameter = If(endo2Role.HasValue, New ObjectParameter("Endo2Role", endo2Role), New ObjectParameter("Endo2Role", GetType(Byte)))

        Dim categoryListIdParameter As ObjectParameter = If(categoryListId.HasValue, New ObjectParameter("CategoryListId", categoryListId), New ObjectParameter("CategoryListId", GetType(Integer)))

        Dim onWaitingListParameter As ObjectParameter = If(onWaitingList.HasValue, New ObjectParameter("OnWaitingList", onWaitingList), New ObjectParameter("OnWaitingList", GetType(Boolean)))

        Dim openAccessProcParameter As ObjectParameter = If(openAccessProc.HasValue, New ObjectParameter("OpenAccessProc", openAccessProc), New ObjectParameter("OpenAccessProc", GetType(Byte)))

        Dim emergencyProcTypeParameter As ObjectParameter = If(emergencyProcType.HasValue, New ObjectParameter("EmergencyProcType", emergencyProcType), New ObjectParameter("EmergencyProcType", GetType(Byte)))

        Dim imagePortIdParameter As ObjectParameter = If(imagePortId.HasValue, New ObjectParameter("ImagePortId", imagePortId), New ObjectParameter("ImagePortId", GetType(Integer)))

        Dim pointsParameter As ObjectParameter = If(points.HasValue, New ObjectParameter("Points", points), New ObjectParameter("Points", GetType(Decimal)))

        Dim checklistCompleteParameter As ObjectParameter = If(checklistComplete.HasValue, New ObjectParameter("ChecklistComplete", checklistComplete), New ObjectParameter("ChecklistComplete", GetType(Boolean)))

        Dim referrerTypeParameter As ObjectParameter = If(referrerType.HasValue, New ObjectParameter("ReferrerType", referrerType), New ObjectParameter("ReferrerType", GetType(Integer)))

        Dim gPReferrerParameter As ObjectParameter = If(gPReferrer IsNot Nothing, New ObjectParameter("GPReferrer", gPReferrer), New ObjectParameter("GPReferrer", GetType(String)))

        Dim referrerTypeOtherParameter As ObjectParameter = If(referrerTypeOther IsNot Nothing, New ObjectParameter("ReferrerTypeOther", referrerTypeOther), New ObjectParameter("ReferrerTypeOther", GetType(String)))

        Dim providerIdParameter As ObjectParameter = If(providerId.HasValue, New ObjectParameter("ProviderId", providerId), New ObjectParameter("ProviderId", GetType(Integer)))

        Dim providerOtherParameter As ObjectParameter = If(providerOther IsNot Nothing, New ObjectParameter("ProviderOther", providerOther), New ObjectParameter("ProviderOther", GetType(String)))

        Dim patientNotesParameter As ObjectParameter = If(patientNotes.HasValue, New ObjectParameter("PatientNotes", patientNotes), New ObjectParameter("PatientNotes", GetType(Boolean)))

        Dim patientReferralLetterParameter As ObjectParameter = If(patientReferralLetter.HasValue, New ObjectParameter("PatientReferralLetter", patientReferralLetter), New ObjectParameter("PatientReferralLetter", GetType(Boolean)))

        Dim imageGenderIDParameter As ObjectParameter = If(imageGenderID.HasValue, New ObjectParameter("ImageGenderID", imageGenderID), New ObjectParameter("ImageGenderID", GetType(Integer)))

        Dim orderIdParameter As ObjectParameter = If(orderId.HasValue, New ObjectParameter("OrderId", orderId), New ObjectParameter("OrderId", GetType(Integer)))

        Dim preAssessmentIdParameter As ObjectParameter = If(preAssessmentId.HasValue, New ObjectParameter("PreAssessmentId", preAssessmentId), New ObjectParameter("PreAssessmentId", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("Procedures_Insert", procedureTypeParameter, patientIdParameter, procedureDateParameter, procedureTimeParameter, patientStatusParameter, patientWardParameter, patientTypeParameter, operatingHospitalIdParameter, listConsultantParameter, endoscopist1Parameter, endoscopist2Parameter, assistantParameter, nurse1Parameter, nurse2Parameter, nurse3Parameter, nurse4Parameter, referralHospitalNoParameter, referralConsultantNoParameter, referralConsultantSpecialityParameter, patientConsentParameter, patientConsentTypeParameter, patientConsentTypeOtherParameter, defaultCheckBoxParameter, userIDParameter, productTypeParameter, listTypeParameter, endo1RoleParameter, endo2RoleParameter, categoryListIdParameter, onWaitingListParameter, openAccessProcParameter, emergencyProcTypeParameter, newProcedureId, imagePortIdParameter, pointsParameter, checklistCompleteParameter, referrerTypeParameter, gPReferrerParameter, referrerTypeOtherParameter, providerIdParameter, providerOtherParameter, patientNotesParameter, patientReferralLetterParameter, imageGenderIDParameter, orderIdParameter, preAssessmentIdParameter)
    End Function

    Public Overridable Function GetAllConsultant(consultantType As String, hideInactiveConsultants As Nullable(Of Boolean), operatingHospitalsIds As String, searchText As String) As ObjectResult(Of GetAllConsultant_Result)
        Dim consultantTypeParameter As ObjectParameter = If(consultantType IsNot Nothing, New ObjectParameter("ConsultantType", consultantType), New ObjectParameter("ConsultantType", GetType(String)))

        Dim hideInactiveConsultantsParameter As ObjectParameter = If(hideInactiveConsultants.HasValue, New ObjectParameter("HideInactiveConsultants", hideInactiveConsultants), New ObjectParameter("HideInactiveConsultants", GetType(Boolean)))

        Dim operatingHospitalsIdsParameter As ObjectParameter = If(operatingHospitalsIds IsNot Nothing, New ObjectParameter("operatingHospitalsIds", operatingHospitalsIds), New ObjectParameter("operatingHospitalsIds", GetType(String)))

        Dim searchTextParameter As ObjectParameter = If(searchText IsNot Nothing, New ObjectParameter("searchText", searchText), New ObjectParameter("searchText", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetAllConsultant_Result)("GetAllConsultant", consultantTypeParameter, hideInactiveConsultantsParameter, operatingHospitalsIdsParameter, searchTextParameter)
    End Function

    <DbFunction("GastroDbEntities", "EndoscopistSelectByProcedureSite")>
    Public Overridable Function EndoscopistSelectByProcedureSite(procedureId As Nullable(Of Integer), siteId As Nullable(Of Integer)) As IQueryable(Of EndoscopistSearch_Result)
        Dim procedureIdParameter As ObjectParameter = If(procedureId.HasValue, New ObjectParameter("ProcedureId", procedureId), New ObjectParameter("ProcedureId", GetType(Integer)))

        Dim siteIdParameter As ObjectParameter = If(siteId.HasValue, New ObjectParameter("SiteId", siteId), New ObjectParameter("SiteId", GetType(Integer)))

         Return DirectCast(Me, IObjectContextAdapter).ObjectContext.CreateQuery(Of EndoscopistSearch_Result)("[GastroDbEntities].[EndoscopistSelectByProcedureSite](@ProcedureId, @SiteId)", procedureIdParameter, siteIdParameter)
    End Function

    Public Overridable Function UGI_TherapeuticSelect(therapId As Nullable(Of Integer), siteId As Nullable(Of Integer)) As Integer
        Dim therapIdParameter As ObjectParameter = If(therapId.HasValue, New ObjectParameter("TherapId", therapId), New ObjectParameter("TherapId", GetType(Integer)))

        Dim siteIdParameter As ObjectParameter = If(siteId.HasValue, New ObjectParameter("SiteId", siteId), New ObjectParameter("SiteId", GetType(Integer)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction("UGI_TherapeuticSelect", therapIdParameter, siteIdParameter)
    End Function

    Public Overridable Function usp_IsValidToExportNED(procedureId As Nullable(Of Integer), procedureType As Nullable(Of Integer), operatingHospitalId As Nullable(Of Integer), outputResult As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Integer))
        Dim procedureIdParameter As ObjectParameter = If(procedureId.HasValue, New ObjectParameter("ProcedureId", procedureId), New ObjectParameter("ProcedureId", GetType(Integer)))

        Dim procedureTypeParameter As ObjectParameter = If(procedureType.HasValue, New ObjectParameter("ProcedureType", procedureType), New ObjectParameter("ProcedureType", GetType(Integer)))

        Dim operatingHospitalIdParameter As ObjectParameter = If(operatingHospitalId.HasValue, New ObjectParameter("OperatingHospitalId", operatingHospitalId), New ObjectParameter("OperatingHospitalId", GetType(Integer)))

        Dim outputResultParameter As ObjectParameter = If(outputResult.HasValue, New ObjectParameter("OutputResult", outputResult), New ObjectParameter("OutputResult", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Integer))("usp_IsValidToExportNED", procedureIdParameter, procedureTypeParameter, operatingHospitalIdParameter, outputResultParameter)
    End Function

    Public Overridable Function IsValidToExportXML_Record(procedureId As Nullable(Of Integer), procedureType As Nullable(Of Integer), operatingHospitalId As Nullable(Of Integer), outputResult As Nullable(Of Boolean)) As ObjectResult(Of Nullable(Of Boolean))
        Dim procedureIdParameter As ObjectParameter = If(procedureId.HasValue, New ObjectParameter("ProcedureId", procedureId), New ObjectParameter("ProcedureId", GetType(Integer)))

        Dim procedureTypeParameter As ObjectParameter = If(procedureType.HasValue, New ObjectParameter("ProcedureType", procedureType), New ObjectParameter("ProcedureType", GetType(Integer)))

        Dim operatingHospitalIdParameter As ObjectParameter = If(operatingHospitalId.HasValue, New ObjectParameter("OperatingHospitalId", operatingHospitalId), New ObjectParameter("OperatingHospitalId", GetType(Integer)))

        Dim outputResultParameter As ObjectParameter = If(outputResult.HasValue, New ObjectParameter("OutputResult", outputResult), New ObjectParameter("OutputResult", GetType(Boolean)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of Nullable(Of Boolean))("IsValidToExportXML_Record", procedureIdParameter, procedureTypeParameter, operatingHospitalIdParameter, outputResultParameter)
    End Function

    Public Overridable Function usp_rep_ConsultantSelectByType(consultantType As String, hideInactiveConsultants As Nullable(Of Boolean), operatingHospitalsIds As String, searchText As String) As ObjectResult(Of usp_rep_ConsultantSelectByType_Result)
        Dim consultantTypeParameter As ObjectParameter = If(consultantType IsNot Nothing, New ObjectParameter("ConsultantType", consultantType), New ObjectParameter("ConsultantType", GetType(String)))

        Dim hideInactiveConsultantsParameter As ObjectParameter = If(hideInactiveConsultants.HasValue, New ObjectParameter("HideInactiveConsultants", hideInactiveConsultants), New ObjectParameter("HideInactiveConsultants", GetType(Boolean)))

        Dim operatingHospitalsIdsParameter As ObjectParameter = If(operatingHospitalsIds IsNot Nothing, New ObjectParameter("operatingHospitalsIds", operatingHospitalsIds), New ObjectParameter("operatingHospitalsIds", GetType(String)))

        Dim searchTextParameter As ObjectParameter = If(searchText IsNot Nothing, New ObjectParameter("searchText", searchText), New ObjectParameter("searchText", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of usp_rep_ConsultantSelectByType_Result)("usp_rep_ConsultantSelectByType", consultantTypeParameter, hideInactiveConsultantsParameter, operatingHospitalsIdsParameter, searchTextParameter)
    End Function

    Public Overridable Function usp_rep_ConsultantSelectByType1(consultantType As String, hideInactiveConsultants As Nullable(Of Boolean), operatingHospitalsIds As String, searchText As String) As ObjectResult(Of GetAllConsultant_Result)
        Dim consultantTypeParameter As ObjectParameter = If(consultantType IsNot Nothing, New ObjectParameter("ConsultantType", consultantType), New ObjectParameter("ConsultantType", GetType(String)))

        Dim hideInactiveConsultantsParameter As ObjectParameter = If(hideInactiveConsultants.HasValue, New ObjectParameter("HideInactiveConsultants", hideInactiveConsultants), New ObjectParameter("HideInactiveConsultants", GetType(Boolean)))

        Dim operatingHospitalsIdsParameter As ObjectParameter = If(operatingHospitalsIds IsNot Nothing, New ObjectParameter("operatingHospitalsIds", operatingHospitalsIds), New ObjectParameter("operatingHospitalsIds", GetType(String)))

        Dim searchTextParameter As ObjectParameter = If(searchText IsNot Nothing, New ObjectParameter("searchText", searchText), New ObjectParameter("searchText", GetType(String)))

        Return DirectCast(Me, IObjectContextAdapter).ObjectContext.ExecuteFunction(Of GetAllConsultant_Result)("usp_rep_ConsultantSelectByType1", consultantTypeParameter, hideInactiveConsultantsParameter, operatingHospitalsIdsParameter, searchTextParameter)
    End Function

End Class
